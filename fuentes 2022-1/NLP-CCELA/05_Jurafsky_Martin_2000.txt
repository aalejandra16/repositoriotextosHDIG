Speech and Language Processing
An Introduction to Natural Language Processing, Computational Linguistics, and Speech Recognition
Third Edition draft
Daniel Jurafsky
Stanford University
James H. Martin
University of Colorado at Boulder
Copyright ©2020. All rights reserved.
Draft of December 30, 2020. Comments and typos welcome!

Summary of Contents
1 Introduction................................................... 1
2 Regular Expressions, Text Normalization, Edit Distance . . . . . . . . . 2
3 N-gram Language Models ..................................... 29
4 Naive Bayes and Sentiment Classification....................... 55
5 LogisticRegression............................................ 76
6 VectorSemanticsandEmbeddings............................. 96
7 NeuralNetworksandNeuralLanguageModels.................127
8 Sequence Labeling for Parts of Speech and Named Entities . . . . . . 148
9 Deep Learning Architectures for Sequence Processing . . . . . . . . . . . 173
10 ContextualEmbeddings.......................................202
11 MachineTranslationandEncoder-DecoderModels.............203
12 ConstituencyGrammars.......................................231
13 ConstituencyParsing..........................................259
14 DependencyParsing...........................................280
15 LogicalRepresentationsofSentenceMeaning...................305
16 ComputationalSemanticsandSemanticParsing................331
17 InformationExtraction........................................332
18 WordSensesandWordNet.....................................355
19 SemanticRoleLabeling........................................373
20 LexiconsforSentiment,Affect,andConnotation................393
21 CoreferenceResolution........................................415
22 DiscourseCoherence...........................................442
23 QuestionAnswering...........................................464
24 Chatbots&DialogueSystems..................................492
25 Phonetics......................................................526
26 AutomaticSpeechRecognitionandText-to-Speech..............548 Bibliography......................................................575 Subject Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 607
2

Contents
1 Introduction 1
2 Regular Expressions, Text Normalization, Edit Distance 2 2.1 RegularExpressions......................... 3 2.2 Words ................................ 11 2.3 Corpora ............................... 13 2.4 TextNormalization ......................... 14 2.5 MinimumEditDistance....................... 22 2.6 Summary............................... 26 BibliographicalandHistoricalNotes.................... 27 Exercises .................................. 28
3 N-gram Language Models 29 3.1 N-Grams............................... 30 3.2 EvaluatingLanguageModels .................... 35 3.3 GeneralizationandZeros ...................... 37 3.4 Smoothing.............................. 41 3.5 Kneser-NeySmoothing ....................... 45 3.6 HugeLanguageModelsandStupidBackoff . . . . . . . . . . . . 47 3.7 Advanced: Perplexity’s Relation to Entropy . . . . . . . . . . . . 49 3.8 Summary............................... 52 BibliographicalandHistoricalNotes.................... 52 Exercises .................................. 53
4 Naive Bayes and Sentiment Classification 55 4.1 NaiveBayesClassifiers ....................... 56 4.2 TrainingtheNaiveBayesClassifier................. 59 4.3 Workedexample........................... 61 4.4 OptimizingforSentimentAnalysis ................. 61 4.5 NaiveBayesforothertextclassificationtasks . . . . . . . . . . . 63 4.6 NaiveBayesasaLanguageModel ................. 64 4.7 Evaluation:Precision,Recall,F-measure . . . . . . . . . . . . . . 65 4.8 TestsetsandCross-validation.................... 67 4.9 StatisticalSignificanceTesting ................... 69 4.10 AvoidingHarmsinClassification .................. 72 4.11 Summary............................... 73 BibliographicalandHistoricalNotes.................... 73 Exercises .................................. 74
5 Logistic Regression 76 5.1 Classification:thesigmoid ..................... 77 5.2 LearninginLogisticRegression................... 81 5.3 Thecross-entropylossfunction................... 82 5.4 GradientDescent .......................... 83 5.5 Regularization............................ 88 5.6 Multinomiallogisticregression ................... 90 5.7 Interpretingmodels ......................... 92 5.8 Advanced:DerivingtheGradientEquation . . . . . . . . . . . . . 93 5.9 Summary............................... 94
3

4 CONTENTS
BibliographicalandHistoricalNotes.................... 94 Exercises .................................. 95
6 Vector Semantics and Embeddings 96
6.1 LexicalSemantics .......................... 97
6.2 VectorSemantics .......................... 100
6.3 WordsandVectors.......................... 101
6.4 Cosineformeasuringsimilarity................... 105
6.5 TF-IDF:Weighingtermsinthevector . . . . . . . . . . . . . . . 106
6.6 PointwiseMutualInformation(PMI) ................ 109
6.7 Applicationsofthetf-idforPPMIvectormodels . . . . . . . . . . 111
6.8 Word2vec .............................. 112
6.9 VisualizingEmbeddings....................... 118
6.10 Semanticpropertiesofembeddings.................118
6.11 BiasandEmbeddings ........................ 120
6.12 EvaluatingVectorModels...................... 122
6.13 Summary............................... 123
BibliographicalandHistoricalNotes.................... 123 Exercises ..................................126
7 Neural Networks and Neural Language Models 127
7.1 Units . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128
7.2 TheXORproblem.......................... 130
7.3 Feed-ForwardNeuralNetworks................... 133
7.4 TrainingNeuralNets ........................ 137
7.5 NeuralLanguageModels ...................... 142
7.6 Summary............................... 146
BibliographicalandHistoricalNotes.................... 147
8 Sequence Labeling for Parts of Speech and Named Entities 148
8.1 (Mostly)EnglishWordClasses ................... 149
8.2 Part-of-SpeechTagging ....................... 151
8.3 NamedEntitiesandNamedEntityTagging . . . . . . . . . . . . . 153
8.4 HMMPart-of-SpeechTagging ................... 155
8.5 ConditionalRandomFields(CRFs)................. 162
8.6 EvaluationofNamedEntityRecognition . . . . . . . . . . . . . . 167
8.7 FurtherDetails ........................... 167
8.8 Summary............................... 169
BibliographicalandHistoricalNotes.................... 170 Exercises ..................................171
9 Deep Learning Architectures for Sequence Processing 173
9.1 LanguageModelsRevisited..................... 174
9.2 RecurrentNeuralNetworks ..................... 176
9.3 ManagingContextinRNNs:LSTMsandGRUs . . . . . . . . . . 186
9.4 Self-AttentionNetworks:Transformers. . . . . . . . . . . . . . . 190
9.5 PotentialHarmsfromLanguageModels . . . . . . . . . . . . . . 198
9.6 Summary............................... 200
BibliographicalandHistoricalNotes.................... 200
10 Contextual Embeddings 202

11 Machine Translation and Encoder-Decoder Models
CONTENTS 5
203
11.1 LanguageDivergencesandTypology................205 11.2 TheEncoder-DecoderModel .................... 208 11.3 Encoder-DecoderwithRNNs .................... 209 11.4 Attention............................... 212 11.5 BeamSearch............................. 215 11.6 Encoder-DecoderwithTransformers ................ 217 11.7 SomepracticaldetailsonbuildingMTsystems . . . . . . . . . . . 218 11.8 MTEvaluation............................ 221 11.9 BiasandEthicalIssues ....................... 226 11.10Summary............................... 227 BibliographicalandHistoricalNotes.................... 228 Exercises ..................................230
12 Constituency Grammars 231 12.1 Constituency............................. 232 12.2 Context-FreeGrammars....................... 232 12.3 SomeGrammarRulesforEnglish.................. 237 12.4 Treebanks .............................. 244 12.5 GrammarEquivalenceandNormalForm . . . . . . . . . . . . . . 249 12.6 LexicalizedGrammars........................ 250 12.7 Summary............................... 255 BibliographicalandHistoricalNotes.................... 256 Exercises ..................................257
13 Constituency Parsing 259 13.1 Ambiguity..............................259 13.2 CKY Parsing: A Dynamic Programming Approach . . . . . . . . 261 13.3 Span-BasedNeuralConstituencyParsing . . . . . . . . . . . . . . 267 13.4 EvaluatingParsers.......................... 269 13.5 PartialParsing ............................ 270 13.6 CCGParsing............................. 271 13.7 Summary............................... 277 BibliographicalandHistoricalNotes.................... 278 Exercises ..................................279
14 Dependency Parsing 280 14.1 DependencyRelations........................ 281 14.2 DependencyFormalisms....................... 283 14.3 DependencyTreebanks ....................... 284 14.4 Transition-BasedDependencyParsing . . . . . . . . . . . . . . . 285 14.5 Graph-BasedDependencyParsing ................. 296 14.6 Evaluation .............................. 301 14.7 Summary............................... 302 BibliographicalandHistoricalNotes.................... 302 Exercises ..................................304
15 Logical Representations of Sentence Meaning 305
15.1 Computational Desiderata for Representations . . . . . . . . . . . 306 15.2 Model-TheoreticSemantics.....................308 15.3 First-OrderLogic .......................... 311 15.4 EventandStateRepresentations................... 318

6 CONTENTS
15.5 DescriptionLogics.......................... 323 15.6 Summary............................... 328 BibliographicalandHistoricalNotes.................... 329 Exercises ..................................330
16 Computational Semantics and Semantic Parsing 331
17 Information Extraction 332 17.1 RelationExtraction ......................... 333 17.2 RelationExtractionAlgorithms...................336 17.3 ExtractingTimes........................... 344 17.4 ExtractingEventsandtheirTimes.................. 348 17.5 TemplateFilling...........................350 17.6 Summary............................... 352 BibliographicalandHistoricalNotes.................... 353 Exercises ..................................354
18 Word Senses and WordNet 355 18.1 WordSenses............................. 356 18.2 RelationsBetweenSenses...................... 358 18.3 WordNet:ADatabaseofLexicalRelations . . . . . . . . . . . . . 360 18.4 WordSenseDisambiguation..................... 363 18.5 AlternateWSDalgorithmsandTasks................ 366 18.6 UsingThesaurusestoImproveEmbeddings . . . . . . . . . . . . 369 18.7 WordSenseInduction........................369 18.8 Summary............................... 370 BibliographicalandHistoricalNotes.................... 371 Exercises ..................................372
19 Semantic Role Labeling 373 19.1 SemanticRoles ........................... 374 19.2 DiathesisAlternations........................ 375 19.3 Semantic Roles: Problems with Thematic Roles . . . . . . . . . . 376 19.4 ThePropositionBank ........................ 377 19.5 FrameNet .............................. 378 19.6 SemanticRoleLabeling....................... 380 19.7 SelectionalRestrictions ....................... 384 19.8 PrimitiveDecompositionofPredicates . . . . . . . . . . . . . . . 389 19.9 Summary............................... 390 BibliographicalandHistoricalNotes.................... 390 Exercises ..................................392
20 Lexicons for Sentiment, Affect, and Connotation 393 20.1 DefiningEmotion .......................... 394
20.2 AvailableSentimentandAffectLexicons . . . . . . . . . . . . . . 395
20.3 Creating Affect Lexicons by Human Labeling . . . . . . . . . . . 398
20.4 Semi-supervised Induction of Affect Lexicons . . . . . . . . . . . 399
20.5 SupervisedLearningofWordSentiment . . . . . . . . . . . . . . 402
20.6 UsingLexiconsforSentimentRecognition . . . . . . . . . . . . . 406
20.7 Othertasks:Personality.......................407
20.8 AffectRecognition.......................... 408
20.9 Lexicon-based methods for Entity-Centric Affect . . . . . . . . . . 410

CONTENTS 7
20.10ConnotationFrames......................... 411 20.11Summary............................... 413 BibliographicalandHistoricalNotes.................... 413
21 Coreference Resolution 415 21.1 Coreference Phenomena: Linguistic Background . . . . . . . . . . 418 21.2 CoreferenceTasksandDatasets................... 423 21.3 MentionDetection.......................... 424 21.4 Architectures for Coreference Algorithms . . . . . . . . . . . . . 427 21.5 Classifiersusinghand-builtfeatures. . . . . . . . . . . . . . . . . 429 21.6 Aneuralmention-rankingalgorithm ................ 430 21.7 EvaluationofCoreferenceResolution. . . . . . . . . . . . . . . . 434 21.8 WinogradSchemaproblems..................... 435 21.9 GenderBiasinCoreference.....................436 21.10Summary............................... 438 BibliographicalandHistoricalNotes.................... 438 Exercises ..................................441
22 Discourse Coherence 442 22.1 CoherenceRelations......................... 444 22.2 DiscourseStructureParsing..................... 447 22.3 CenteringandEntity-BasedCoherence . . . . . . . . . . . . . . . 451 22.4 Representation learning models for local coherence . . . . . . . . 456 22.5 GlobalCoherence .......................... 458 22.6 Summary............................... 460 BibliographicalandHistoricalNotes.................... 461 Exercises ..................................463
23 Question Answering 464 23.1 InformationRetrieval ........................ 465 23.2 IR-basedFactoidQuestionAnswering . . . . . . . . . . . . . . . 473 23.3 EntityLinking............................477 23.4 Knowledge-basedQuestionAnswering . . . . . . . . . . . . . . . 482 23.5 UsingLanguageModelstodoQA ................. 484 23.6 ClassicQAModels ......................... 485 23.7 EvaluationofFactoidAnswers ................... 488 BibliographicalandHistoricalNotes.................... 489 Exercises ..................................491
24 Chatbots & Dialogue Systems 492 24.1 PropertiesofHumanConversation ................. 493 24.2 Chatbots ............................... 496 24.3 GUS: Simple Frame-based Dialogue Systems . . . . . . . . . . . 504 24.4 TheDialogue-StateArchitecture .................. 508 24.5 EvaluatingDialogueSystems .................... 517 24.6 DialogueSystemDesign....................... 520 24.7 Summary............................... 522 BibliographicalandHistoricalNotes.................... 523 Exercises ..................................525
25 Phonetics 526 25.1 SpeechSoundsandPhoneticTranscription . . . . . . . . . . . . . 526

8 CONTENTS
25.2 ArticulatoryPhonetics........................ 527 25.3 Prosody ............................... 532 25.4 AcousticPhoneticsandSignals ................... 534 25.5 PhoneticResources ......................... 544 25.6 Summary............................... 545 BibliographicalandHistoricalNotes.................... 546 Exercises ..................................547
26 Automatic Speech Recognition and Text-to-Speech 548 26.1 TheAutomaticSpeechRecognitionTask . . . . . . . . . . . . . . 549 26.2 Feature Extraction for ASR: Log Mel Spectrum . . . . . . . . . . 551 26.3 SpeechRecognitionArchitecture .................. 555 26.4 CTC.................................557 26.5 ASREvaluation:WordErrorRate ................. 562 26.6 TTS .................................564 26.7 OtherSpeechTasks ......................... 569 26.8 Summary............................... 570 BibliographicalandHistoricalNotes.................... 570 Exercises ..................................573
Bibliography 575 Subject Index 607

 CHAPTER
1
Introduction
La dernie`re chose qu’on trouve en faisant un ouvrage est de savoir celle qu’il faut mettre la premie`re.
[The last thing you figure out in writing a book is what to put first.]
Pascal
1

2 CHAPTER 2 CHAPTER
2
ELIZA
• REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE
Regular Expressions, Text Normalization, Edit Distance
 chatbots
text normalization
tokenization
The dialogue above is from ELIZA, an early natural language processing system that could carry on a limited conversation with a user by imitating the responses of a Rogerian psychotherapist (Weizenbaum, 1966). ELIZA is a surprisingly simple program that uses pattern matching to recognize phrases like “I need X” and translate them into suitable outputs like “What would it mean to you if you got X?”. This simple technique succeeds in this domain because ELIZA doesn’t actually need to know anything to mimic a Rogerian psychotherapist. As Weizenbaum notes, this is one of the few dialogue genres where listeners can act as if they know nothing of the world. Eliza’s mimicry of human conversation was remarkably successful: many people who interacted with ELIZA came to believe that it really understood them and their problems, many continued to believe in ELIZA’s abilities even after the program’s operation was explained to them (Weizenbaum, 1976), and even today such chatbots are a fun diversion.
Of course modern conversational agents are much more than a diversion; they can answer questions, book flights, or find restaurants, functions for which they rely on a much more sophisticated understanding of the user’s intent, as we will see in Chapter 24. Nonetheless, the simple pattern-based methods that powered ELIZA and other chatbots play a crucial role in natural language processing.
We’ll begin with the most important tool for describing text patterns: the regular expression. Regular expressions can be used to specify strings we might want to extract from a document, from transforming “I need X” in Eliza above, to defining strings like $199 or $24.99 for extracting tables of prices from a document.
We’ll then turn to a set of tasks collectively called text normalization, in which regular expressions play an important part. Normalizing text means converting it to a more convenient, standard form. For example, most of what we are going to do with language relies on first separating out or tokenizing words from running text, the task of tokenization. English words are often separated from each other by whitespace, but whitespace is not always sufficient. New York and rock ’n’ roll are sometimes treated as large words despite the fact that they contain spaces, while sometimes we’ll need to separate I’m into the two words I and am. For processing tweets or texts we’ll need to tokenize emoticons like :) or hashtags like #nlproc.
User:
ELIZA:
User:
ELIZA:
User:
ELIZA:
User:
ELIZA:
User:
ELIZA:
User:
I am unhappy.
DO YOU THINK COMING HERE WILL HELP YOU NOT TO BE UNHAPPY
I need some help, that much seems certain.
WHAT WOULD IT MEAN TO YOU IF YOU GOT SOME HELP
Perhaps I could learn to get along with my mother.
TELL ME MORE ABOUT YOUR FAMILY
My mother takes care of me.
WHO ELSE IN YOU FAMILY TAKES CARE OF YOU
My father.
YOUR FATHER
You are like my father in some ways.
Weizenbaum (1966)

lemmatization
stemming
sentence segmentation
2.1
regular expression
corpus
One of the unsung successes in standardization in computer science has been the regular expression (RE), a language for specifying text search strings. This prac- tical language is used in every computer language, word processor, and text pro- cessing tools like the Unix tools grep or Emacs. Formally, a regular expression is an algebraic notation for characterizing a set of strings. They are particularly use- ful for searching in texts, when we have a pattern to search for and a corpus of texts to search through. A regular expression search function will search through the corpus, returning all texts that match the pattern. The corpus can be a single docu- ment or a collection. For example, the Unix command-line tool grep takes a regular expression and returns every line of the input document that matches the expression.
A search can be designed to return every match on a line, if there are more than one, or just the first match. In the following examples we generally underline the exact part of the pattern that matches the regular expression and show only the first match. We’ll show regular expressions delimited by slashes but note that slashes are not part of the regular expressions.
Regular expressions come in many variants. We’ll be describing extended regu- lar expressions; different regular expression parsers may only recognize subsets of these, or treat some expressions slightly differently. Using an online regular expres- sion tester is a handy way to test out your expressions and explore these variations.
2.1.1 Basic Regular Expression Patterns
The simplest kind of regular expression is a sequence of simple characters. To search for woodchuck, we type /woodchuck/. The expression /Buttercup/ matches any string containing the substring Buttercup; grep with that expression would return the line I’m called little Buttercup. The search string can consist of a single character (like /!/) or a sequence of characters (like /urgl/).
Regular expressions are case sensitive; lower case /s/ is distinct from upper case /S/ (/s/ matches a lower case s but not an upper case S). This means that the pattern /woodchucks/ will not match the string Woodchucks. We can solve this
2.1 • REGULAR EXPRESSIONS 3
Some languages, like Japanese, don’t have spaces between words, so word tokeniza- tion becomes more difficult.
Another part of text normalization is lemmatization, the task of determining that two words have the same root, despite their surface differences. For example, the words sang, sung, and sings are forms of the verb sing. The word sing is the common lemma of these words, and a lemmatizer maps from all of these to sing. Lemmatization is essential for processing morphologically complex languages like Arabic. Stemming refers to a simpler version of lemmatization in which we mainly just strip suffixes from the end of the word. Text normalization also includes sen- tence segmentation: breaking up a text into individual sentences, using cues like periods or exclamation points.
Finally, we’ll need to compare words and other strings. We’ll introduce a metric called edit distance that measures how similar two strings are based on the number of edits (insertions, deletions, substitutions) it takes to change one string into the other. Edit distance is an algorithm with applications throughout language process- ing, from spelling correction to speech recognition to coreference resolution.
Regular Expressions

4 CHAPTER 2 • REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE
Some simple regex searches.
problem with the use of the square braces [ and ]. The string of characters inside the braces specifies a disjunction of characters to match. For example, Fig. 2.2 shows that the pattern /[wW]/ matches patterns containing either w or W.
The use of the brackets [] to specify a disjunction of characters.
The regular expression /[1234567890]/ specifies any single digit. While such classes of characters as digits or letters are important building blocks in expressions, they can get awkward (e.g., it’s inconvenient to specify
                 /[ABCDEFGHIJKLMNOPQRSTUVWXYZ]/
RE Example Patterns Matched
  /woodchucks/ “interesting links to woodchucks and lemurs” /a/ “Mary Ann stopped by Mona’s”
/!/ “You’ve left the burglar behind again!” said Nori
  Figure 2.1
  RE
Figure 2.2
Match
Woodchuck or woodchuck ‘a’, ‘b’, or ‘c’
any digit
Example Patterns
    “Woodchuck”
“In uomini, in soldati” “plenty of 7 to 5”
    /[wW]oodchuck/
/[abc]/
/[1234567890]/
   range
to mean “any capital letter”). In cases where there is a well-defined sequence asso- ciated with a set of characters, the brackets can be used with the dash (-) to specify any one character in a range. The pattern /[2-5]/ specifies any one of the charac- ters 2, 3, 4, or 5. The pattern /[b-g]/ specifies one of the characters b, c, d, e, f, or g. Some other examples are shown in Fig. 2.3.
The use of the brackets [] plus the dash - to specify a range.
The square braces can also be used to specify what a single character cannot be, by use of the caret ˆ. If the caret ˆ is the first symbol after the open square brace [, the resulting pattern is negated. For example, the pattern /[ˆa]/ matches any single character (including special characters) except a. This is only true when the caret is the first symbol after the open square brace. If it occurs anywhere else, it usually stands for a caret; Fig. 2.4 shows some examples.
The caret ˆ for negation or just to mean ˆ. See below re: the backslash for escaping the period.
How can we talk about optional elements, like an optional s in woodchuck and woodchucks? We can’t use the square brackets, because while they allow us to say “s or S”, they don’t allow us to say “s or nothing”. For this we use the question mark /?/, which means “the preceding character or nothing”, as shown in Fig. 2.5.
RE
Match
Example Patterns Matched
    an upper case letter
 a lower case letter a single digit
“we should call it ‘Drenched Blossoms’ ”
   /[A-Z]/
“my beans were impatient to be hoed!” “Chapter 1: Down the Rabbit Hole”
   /[a-z]/
/[0-9]/
Figure 2.3
     RE
Match (single characters)
Example Patterns Matched
   not an upper case letter neither ‘S’ nor ‘s’
not a period
either ‘e’ or ‘ˆ’
“Oyfn pripetchik”
“I have no exquisite reason for’t” “our resident Djinn”
“look up ˆ now”
   /[ˆA-Z]/
/[ˆSs]/
/[ˆ.]/
/[eˆ]/
the pattern ‘aˆb’
“look up aˆ b now”
   /aˆb/
Figure 2.4
 
RE
  Figure 2.5
/woodchucks?/
/colou?r/
 Kleene +
2.1 • REGULAR EXPRESSIONS 5
The question mark ? marks optionality of the previous expression.
RE
Match
Match
Example Patterns Matched
    woodchuck or woodchucks color or colour
“woodchuck” “color”
     Kleene *
We can think of the question mark as meaning “zero or one instances of the previous character”. That is, it’s a way of specifying how many of something that we want, something that is very important in regular expressions. For example, consider the language of certain sheep, which consists of strings that look like the following:
baa! baaa! baaaa! baaaaa! ...
This language consists of strings with a b, followed by at least two a’s, followed by an exclamation point. The set of operators that allows us to say things like “some number of as” are based on the asterisk or *, commonly called the Kleene * (gen- erally pronounced “cleany star”). The Kleene star means “zero or more occurrences of the immediately previous character or regular expression”. So /a*/ means “any string of zero or more as”. This will match a or aaaaaa, but it will also match Off Minor since the string Off Minor has zero a’s. So the regular expression for matching one or more a is /aa*/, meaning one a followed by zero or more as. More complex patterns can also be repeated. So /[ab]*/ means “zero or more a’s or b’s” (not “zero or more right square braces”). This will match strings like aaaa or ababab or bbbb.
For specifying multiple digits (useful for finding prices) we can extend /[0-9]/, the regular expression for a single digit. An integer (a string of digits) is thus /[0-9][0-9]*/. (Why isn’t it just /[0-9]*/?)
Sometimes it’s annoying to have to write the regular expression for digits twice, so there is a shorter way to specify “at least one” of some character. This is the Kleene +, which means “one or more occurrences of the immediately preceding character or regular expression”. Thus, the expression /[0-9]+/ is the normal way to specify “a sequence of digits”. There are thus two ways to specify the sheep language: /baaa*!/ or /baa+!/.
One very important special character is the period (/./), a wildcard expression that matches any single character (except a carriage return), as shown in Fig. 2.6.
The use of the period . to specify any character.
The wildcard is often used together with the Kleene star to mean “any string of characters”. For example, suppose we want to find any line in which a particular word, for example, aardvark, appears twice. We can specify this with the regular expression /aardvark.*aardvark/.
Anchors are special characters that anchor regular expressions to particular places in a string. The most common anchors are the caret ˆ and the dollar sign $. The caret ˆ matches the start of a line. The pattern /ˆThe/ matches the word The only at the
Example Matches
    any character between beg and n
begin, beg’n, begun
    /beg.n/
   Figure 2.6
  anchors

6
CHAPTER 2 • REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE
 RE
ˆ \$ \b \B
Match
  start of line
  end of line
 word boundary
 non-word boundary
  Figure 2.7
   disjunction
precedence
start of a line. Thus, the caret ˆ has three uses: to match the start of a line, to in- dicate a negation inside of square brackets, and just to mean a caret. (What are the contexts that allow grep or Python to know which function a given caret is supposed to have?) The dollar sign $ matches the end of a line. So the pattern ␣$ is a useful pattern for matching a space at the end of a line, and /ˆThe dog\.$/ matches a line that contains only the phrase The dog. (We have to use the backslash here since we want the . to mean “period” and not the wildcard.)
Anchors in regular expressions.
There are also two other anchors: \b matches a word boundary, and \B matches a non-boundary. Thus, /\bthe\b/ matches the word the but not the word other. More technically, a “word” for the purposes of a regular expression is defined as any sequence of digits, underscores, or letters; this is based on the definition of “words” in programming languages. For example, /\b99\b/ will match the string 99 in There are 99 bottles of beer on the wall (because 99 follows a space) but not 99 in There are 299 bottles of beer on the wall (since 99 follows a number). But it will match 99 in $99 (since 99 follows a dollar sign ($), which is not a digit, underscore, or letter).
2.1.2 Disjunction, Grouping, and Precedence
Suppose we need to search for texts about pets; perhaps we are particularly interested in cats and dogs. In such a case, we might want to search for either the string cat or the string dog. Since we can’t use the square brackets to search for “cat or dog” (why can’t we say /[catdog]/?), we need a new operator, the disjunction operator, also called the pipe symbol |. The pattern /cat|dog/ matches either the string cat or the string dog.
Sometimes we need to use this disjunction operator in the midst of a larger se- quence. For example, suppose I want to search for information about pet fish for my cousin David. How can I specify both guppy and guppies? We cannot simply say /guppy|ies/, because that would match only the strings guppy and ies. This is because sequences like guppy take precedence over the disjunction operator |. To make the disjunction operator apply only to a specific pattern, we need to use the parenthesis operators ( and ). Enclosing a pattern in parentheses makes it act like a single character for the purposes of neighboring operators like the pipe | and the Kleene*. So the pattern /gupp(y|ies)/ would specify that we meant the disjunc- tion only to apply to the suffixes y and ies.
The parenthesis operator ( is also useful when we are using counters like the Kleene*. Unlike the | operator, the Kleene* operator applies by default only to a single character, not to a whole sequence. Suppose we want to match repeated instances of a string. Perhaps we have a line that has column labels of the form Column 1 Column 2 Column 3. The expression /Column␣[0-9]+␣*/ will not match any number of columns; instead, it will match a single column followed by any number of spaces! The star here applies only to the space ␣ that precedes it, not to the whole sequence. With the parentheses, we could write the expression

operator precedence
2.1 • REGULAR EXPRESSIONS 7
/(Column␣[0-9]+␣*)*/ to match the word Column, followed by a number and optional spaces, the whole pattern repeated zero or more times.
This idea that one operator may take precedence over another, requiring us to sometimes use parentheses to specify what we mean, is formalized by the operator precedence hierarchy for regular expressions. The following table gives the order of RE operator precedence, from highest precedence to lowest precedence.
Thus, because counters have a higher precedence than sequences, /the*/ matches theeeee but not thethe. Because sequences have a higher prece- dence than disjunction, /the|any/ matches the or any but not thany or theny.
Patterns can be ambiguous in another way. Consider the expression /[a-z]*/ when matching against the text once upon a time. Since /[a-z]*/ matches zero or more letters, this expression could match nothing, or just the first letter o, on, onc, or once. In these cases regular expressions always match the largest string they can;
Parenthesis ()
 Counters * + ? {}
 Sequences and anchors the ˆmy end$
 Disjunction |
 greedy we say that patterns are greedy, expanding to cover as much of a string as they can. non-greedy There are, however, ways to enforce non-greedy matching, using another mean- *? ing of the ? qualifier. The operator *? is a Kleene star that matches as little text as
+? possible. The operator +? is a Kleene plus that matches as little text as possible. 2.1.3 A Simple Example
Suppose we wanted to write a RE to find cases of the English article the. A simple (but incorrect) pattern might be:
/the/
One problem is that this pattern will miss the word when it begins a sentence and hence is capitalized (i.e., The). This might lead us to the following pattern:
/[tT]he/
But we will still incorrectly return texts with the embedded in other words (e.g., other or theology). So we need to specify that we want instances with a word bound- ary on both sides:
         /\b[tT]he\b/
Suppose we wanted to do this without the use of /\b/. We might want this since /\b/ won’t treat underscores and numbers as word boundaries; but we might want to find the in some context where it might also have underlines or numbers nearby (the or the25). We need to specify that we want instances in which there are no alphabetic letters on either side of the the:
         /[ˆa-zA-Z][tT]he[ˆa-zA-Z]/
But there is still one more problem with this pattern: it won’t find the word the when it begins a line. This is because the regular expression [ˆa-zA-Z], which we used to avoid embedded instances of the, implies that there must be some single (although non-alphabetic) character before the the. We can avoid this by specify- ing that before the the we require either the beginning-of-line or a non-alphabetic character, and the same at the end of the line:

8
CHAPTER 2 • REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE /(ˆ|[ˆa-zA-Z])[tT]he([ˆa-zA-Z]|$)/
false positives false negatives
The process we just went through was based on fixing two kinds of errors: false positives, strings that we incorrectly matched like other or there, and false nega- tives, strings that we incorrectly missed, like The. Addressing these two kinds of errors comes up again and again in implementing speech and language processing systems. Reducing the overall error rate for an application thus involves two antag- onistic efforts:
• Increasing precision (minimizing false positives) • Increasing recall (minimizing false negatives)
We’ll come back to precision and recall with more precise definitions in Chapter 4.
2.1.4 More Operators
Figure 2.8 shows some aliases for common ranges, which can be used mainly to save typing. Besides the Kleene * and Kleene + we can also use explicit numbers as counters, by enclosing them in curly brackets. The regular expression /{3}/ means “exactly 3 occurrences of the previous character or expression”. So /a\.{24}z/ will match a followed by 24 dots followed by z (but not a followed by 23 or 25 dots followed by a z).
RE
  \d
  \D
  \w
  \W
  \s
  \S
   Expansion
Match
First Matches
   any digit
any non-digit
any alphanumeric/underscore a non-alphanumeric
Party␣of␣5 Blue␣moon Daiyu
!!!!
   [0-9]
[ˆ0-9]
[a-zA-Z0-9_]
[ˆ\w]
whitespace (space, tab) Non-whitespace
   Figure 2.8
[␣\r\t\n\f]
[ˆ\s]
in␣Concord
    newline
A range of numbers can also be specified. So /{n,m}/ specifies from n to m occurrences of the previous char or expression, and /{n,}/ means at least n occur- rences of the previous expression. REs for counting are summarized in Fig. 2.9.
Regular expression operators for counting.
Finally, certain special characters are referred to by special notation based on the backslash (\) (see Fig. 2.10). The most common of these are the newline character \n and the tab character \t. To refer to characters that are special themselves (like ., *, [, and \), precede them with a backslash, (i.e., /\./, /\*/, /\[/, and /\\/).
Aliases for common sets of characters.
RE
*
+
?
{n} {n,m}
Match
  zero or more occurrences of the previous char or expression
one or more occurrences of the previous char or expression exactly zero or one occurrence of the previous char or expression n occurrences of the previous char or expression
from n to m occurrences of the previous char or expression
  at least n occurrences of the previous char or expression up to m occurrences of the previous char or expression
  {n,} {,m}
Figure 2.9
 
RE Match First Patterns Matched
 \* an asterisk “*” \. a period “.”
\? a question mark \n a newline
\t a tab
“K*A*P*L*A*N”
“Dr. Livingston, I presume”
“Why don’t they come and lend a hand?”
 Figure 2.10
   substitution
2.1 • REGULAR EXPRESSIONS 9
Some characters that need to be backslashed.
2.1.5 A More Complex Example
Let’s try out a more significant example of the power of REs. Suppose we want to build an application to help a user buy a computer on the Web. The user might want “any machine with at least 6 GHz and 500 GB of disk space for less than $1000”. To do this kind of retrieval, we first need to be able to look for expressions like 6 GHz or 500 GB or Mac or $999.99. In the rest of this section we’ll work out some simple regular expressions for this task.
First, let’s complete our regular expression for prices. Here’s a regular expres- sion for a dollar sign followed by a string of digits:
/$[0-9]+/
Note that the $ character has a different function here than the end-of-line function we discussed earlier. Most regular expression parsers are smart enough to realize that $ here doesn’t mean end-of-line. (As a thought experiment, think about how regex parsers might figure out the function of $ from the context.)
Now we just need to deal with fractions of dollars. We’ll add a decimal point and two digits afterwards:
/$[0-9]+\.[0-9][0-9]/
This pattern only allows $199.99 but not $199. We need to make the cents optional and to make sure we’re at a word boundary:
/(ˆ|\W)$[0-9]+(\.[0-9][0-9])?\b/
One last catch! This pattern allows prices like $199999.99 which would be far too expensive! We need to limit the dollars:
/(ˆ|\W)$[0-9]{0,3}(\.[0-9][0-9])?\b/
How about disk space? We’ll need to allow for optional fractions again (5.5 GB); note the use of ? for making the final s optional, and the of /␣*/ to mean “zero or more spaces” since there might always be extra spaces lying around:
/\b[0-9]+(\.[0-9]+)?␣*(GB|[Gg]igabytes?)\b/
Modifying this regular expression so that it only matches more than 500 GB is left as an exercise for the reader.
2.1.6 Substitution, Capture Groups, and ELIZA
An important use of regular expressions is in substitutions. For example, the substi- tution operator s/regexp1/pattern/ used in Python and in Unix commands like vim or sed allows a string characterized by a regular expression to be replaced by another string:

10 CHAPTER 2 • REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE s/colour/color/
capture group register
non-capturing group
It is often useful to be able to refer to a particular subpart of the string matching the first pattern. For example, suppose we wanted to put angle brackets around all integers in a text, for example, changing the 35 boxes to the <35> boxes. We’d like a way to refer to the integer we’ve found so that we can easily add the brackets. To do this, we put parentheses ( and ) around the first pattern and use the number operator \1 in the second pattern to refer back. Here’s how it looks:
s/([0-9]+)/<\1>/
The parenthesis and number operators can also specify that a certain string or expression must occur twice in the text. For example, suppose we are looking for the pattern “the Xer they were, the Xer they will be”, where we want to constrain the two X’s to be the same string. We do this by surrounding the first X with the parenthesis operator, and replacing the second X with the number operator \1, as follows:
/the (.*)er they were, the \1er they will be/
Here the \1 will be replaced by whatever string matched the first item in paren- theses. So this will match the bigger they were, the bigger they will be but not the bigger they were, the faster they will be.
This use of parentheses to store a pattern in memory is called a capture group. Every time a capture group is used (i.e., parentheses surround a pattern), the re- sulting match is stored in a numbered register. If you match two different sets of parentheses, \2 means whatever matched the second capture group. Thus
/the (.*)er they (.*), the \1er we \2/
will match the faster they ran, the faster we ran but not the faster they ran, the faster we ate. Similarly, the third capture group is stored in \3, the fourth is \4, and so on. Parentheses thus have a double function in regular expressions; they are used to group terms for specifying the order in which operators should apply, and they are used to capture something in a register. Occasionally we might want to use parenthe- ses for grouping, but don’t want to capture the resulting pattern in a register. In that case we use a non-capturing group, which is specified by putting the commands
?: after the open paren, in the form (?: pattern ).
/(?:some|a few) (people|cats) like some \1/
will match some cats like some cats but not some cats like some a few. Substitutions and capture groups are very useful in implementing simple chat- bots like ELIZA (Weizenbaum, 1966). Recall that ELIZA simulates a Rogerian
psychologist by carrying on conversations like the following:
ELIZA works by having a series or cascade of regular expression substitutions each of which matches and changes some part of the input lines. Input lines are
User1 : ELIZA1 : User2 : ELIZA2 : User3 : ELIZA3 :
 Men are all alike.
IN WHAT WAY
They’re always bugging us about something or other. CAN YOU THINK OF A SPECIFIC EXAMPLE Well, my boyfriend made me come here.
YOUR BOYFRIEND MADE YOU COME HERE
 User4 : ELIZA4 :
 He says I’m depressed much of the time.
I AM SORRY TO HEAR YOU ARE DEPRESSED
 
 s/.* I’M (depressed|sad) .*/I AM SORRY TO HEAR YOU ARE \1/
s/.* I AM (depressed|sad) .*/WHY DO YOU THINK YOU ARE \1/
s/.* all .*/IN WHAT WAY/
 s/.* always .*/CAN YOU THINK OF A SPECIFIC EXAMPLE/
lookahead zero-width
2.2 • WORDS 11
first uppercased. The first substitutions then change all instances of MY to YOUR, and I’M to YOU ARE, and so on. The next set of substitutions matches and replaces other patterns in the input. Here are some examples:
Since multiple substitutions can apply to a given input, substitutions are assigned a rank and applied in order. Creating patterns is the topic of Exercise 2.3, and we return to the details of the ELIZA architecture in Chapter 24.
2.1.7 Lookahead Assertions
Finally, there will be times when we need to predict the future: look ahead in the text to see if some pattern matches, but not advance the match cursor, so that we can then deal with the pattern if it occurs.
These lookahead assertions make use of the (? syntax that we saw in the previ- ous section for non-capture groups. The operator (?= pattern) is true if pattern occurs, but is zero-width, i.e. the match pointer doesn’t advance. The operator (?! pattern)onlyreturnstrueifapatterndoesnotmatch,butagainiszero-width and doesn’t advance the cursor. Negative lookahead is commonly used when we are parsing some complex pattern but want to rule out a special case. For example suppose we want to match, at the beginning of a line, any single word that doesn’t start with “Volcano”. We can use negative lookahead to do this:
/ˆ(?!Volcano)[A-Za-z]+/
2.2 Words
Before we talk about processing words, we need to decide what counts as a word. Let’s start by looking at one particular corpus (plural corpora), a computer-readable collection of text or speech. For example the Brown corpus is a million-word col- lection of samples from 500 written English texts from different genres (newspa- per, fiction, non-fiction, academic, etc.), assembled at Brown University in 1963–64 (Kucˇera and Francis, 1967). How many words are in the following Brown sentence?
He stepped out into the hall, was delighted to encounter a water brother.
This sentence has 13 words if we don’t count punctuation marks as words, 15 if we count punctuation. Whether we treat period (“.”), comma (“,”), and so on as words depends on the task. Punctuation is critical for finding boundaries of things (commas, periods, colons) and for identifying some aspects of meaning (question marks, exclamation marks, quotation marks). For some tasks, like part-of-speech tagging or parsing or speech synthesis, we sometimes treat punctuation marks as if they were separate words.
The Switchboard corpus of American English telephone conversations between strangers was collected in the early 1990s; it contains 2430 conversations averaging 6 minutes each, totaling 240 hours of speech and about 3 million words (Godfrey et al., 1992). Such corpora of spoken language don’t have punctuation but do intro-
corpus corpora

12
CHAPTER 2 • REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE duce other complications with regard to defining words. Let’s look at one utterance
utterance
disfluency fragment filled pause
from Switchboard; an utterance is the spoken correlate of a sentence: I do uh main- mainly business data processing
This utterance has two kinds of disfluencies. The broken-off word main- is called a fragment. Words like uh and um are called fillers or filled pauses. Should we consider these to be words? Again, it depends on the application. If we are building a speech transcription system, we might want to eventually strip out the disfluencies.
But we also sometimes keep disfluencies around. Disfluencies like uh or um are actually helpful in speech recognition in predicting the upcoming word, because they may signal that the speaker is restarting the clause or idea, and so for speech recognition they are treated as regular words. Because people use different disflu- encies they can also be a cue to speaker identification. In fact Clark and Fox Tree (2002) showed that uh and um have different meanings. What do you think they are?
Are capitalized tokens like They and uncapitalized tokens like they the same word? These are lumped together in some tasks (speech recognition), while for part- of-speech or named-entity tagging, capitalization is a useful feature and is retained.
How about inflected forms like cats versus cat? These two words have the same lemma cat but are different wordforms. A lemma is a set of lexical forms having the same stem, the same major part-of-speech, and the same word sense. The word- form is the full inflected or derived form of the word. For morphologically complex languages like Arabic, we often need to deal with lemmatization. For many tasks in English, however, wordforms are sufficient.
How many words are there in English? To answer this question we need to distinguish two ways of talking about words. Types are the number of distinct words in a corpus; if the set of words in the vocabulary is V , the number of types is the vocabulary size |V |. Tokens are the total number N of running words. If we ignore punctuation, the following Brown sentence has 16 tokens and 14 types:
They picnicked by the pool, then lay back on the grass and looked at the stars.
When we speak about the number of words in the language, we are generally referring to word types.
Rough numbers of types and tokens for some English language corpora. The largest, the Google N-grams corpus, contains 13 million types, but this count only includes types appearing 40 or more times, so the true number would be much larger.
Fig. 2.11 shows the rough numbers of types and tokens computed from some popular English corpora. The larger the corpora we look at, the more word types we find, and in fact this relationship between the number of types |V | and number of tokens N is called Herdan’s Law (Herdan, 1960) or Heaps’ Law (Heaps, 1978) after its discoverers (in linguistics and information retrieval respectively). It is shown in Eq. 2.1, where k and β are positive constants, and 0 < β < 1.
|V| = kNβ (2.1)
lemma wordform
word type word token
   Corpus
Shakespeare
Brown corpus
Switchboard telephone conversations
Tokens = N Types = |V |
  884thousand 31thousand
  1million 38thousand
 COCA
Google N-grams
2.4million 20thousand
 440 million 2 million
  1 trillion 13 million
 Figure 2.11
 Herdan’s Law Heaps’ Law

2.3 • CORPORA 13
The value of β depends on the corpus size and the genre, but at least for the large corpora in Fig. 2.11, β ranges from .67 to .75. Roughly then we can say that the vocabulary size for a text goes up significantly faster than the square root of its length in words.
Another measure of the number of words in the language is the number of lem- mas instead of wordform types. Dictionaries can help in giving lemma counts; dic- tionary entries or boldface forms are a very rough upper bound on the number of lemmas (since some lemmas have multiple boldface forms). The 1989 edition of the Oxford English Dictionary had 615,000 entries.
2.3 Corpora
AAL
MAE code switching
Words don’t appear out of nowhere. Any particular piece of text that we study is produced by one or more specific speakers or writers, in a specific dialect of a specific language, at a specific time, in a specific place, for a specific function.
Perhaps the most important dimension of variation is the language. NLP algo- rithms are most useful when they apply across many languages. The world has 7097 languages at the time of this writing, according to the online Ethnologue catalog (Simons and Fennig, 2018). It is important to test algorithms on more than one lan- guage, and particularly on languages with different properties; by contrast there is an unfortunate current tendency for NLP algorithms to be developed or tested just on English (Bender, 2019). Even when algorithms are developed beyond English, they tend to be developed for the official languages of large industrialized nations (Chinese, Spanish, Japanese, German etc.), but we don’t want to limit tools to just these few languages. Furthermore, most languages also have multiple varieties, of- ten spoken in different regions or by different social groups. Thus, for example, if we’re processing text that uses features of African American Language (AAL) — the name for the many variations of language used by millions of people in African American communities (King 2020) — we must use NLP tools that function with features of those varieties. Twitter posts might use features often used by speakers of African American Language, such as constructions like iont (I don’t in Mainstream American English (MAE)), or talmbout corresponding to MAE talking about, both examples that influence word segmentation (Blodgett et al. 2016, Jones 2015).
It’s also quite common for speakers or writers to use multiple languages in a single communicative act, a phenomenon called code switching. Code switch- ing is enormously common across the world; here are examples showing Spanish and (transliterated) Hindi code switching with English (Solorio et al. 2014, Jurgens et al. 2017):
(2.2) Porprimeravezveoa@usernameactuallybeinghateful!itwasbeautiful:)
[For the first time I get to see @username actually being hateful! it was beautiful:) ]
(2.3) dostthaorra-hega...dontwory...butdheryarakhe
[“he was and will remain a friend ... don’t worry ... but have faith”]
Another dimension of variation is the genre. The text that our algorithms must process might come from newswire, fiction or non-fiction books, scientific articles, Wikipedia, or religious texts. It might come from spoken genres like telephone conversations, business meetings, police body-worn cameras, medical interviews, or transcripts of television shows or movies. It might come from work situations

14 CHAPTER 2 • REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE
datasheet
like doctors’ notes, legal text, or parliamentary or congressional proceedings.
Text also reflects the demographic characteristics of the writer (or speaker): their age, gender, race, socioeconomic class can all influence the linguistic properties of
the text we are processing.
And finally, time matters too. Language changes over time, and for some lan-
guages we have good corpora of texts from different historical periods.
Because language is so situated, when developing computational models for lan- guage processing from a corpus, it’s important to consider who produced the lan- guage, in what context, for what purpose. How can a user of a dataset know all these details? The best way is for the corpus creator to build a datasheet (Gebru et al., 2020) or data statement (Bender and Friedman, 2018) for each corpus. A datasheet
specifies properties of a dataset like:
Motivation: Why was the corpus collected, by whom, and who funded it? Situation: When and in what situation was the text written/spoken? For example, was there a task? Was the language originally spoken conversation, edited
text, social media communication, monologue vs. dialogue?
Language variety: What language (including dialect/region) was the corpus in? Speaker demographics: What was, e.g., age or gender of the authors of the text? Collection process: How big is the data? If it is a subsample how was it sampled?
Was the data collected with consent? How was the data pre-processed, and
what metadata is available?
Annotation process: What are the annotations, what are the demographics of the
annotators, how were they trained, how was the data annotated? Distribution: Are there copyright or other intellectual property restrictions?
2.4 Text Normalization
Before almost any natural language processing of a text, the text has to be normal- ized. At least three tasks are commonly applied as part of any normalization process:
1. Tokenizing (segmenting) words 2. Normalizing word formats
3. Segmenting sentences
In the next sections we walk through each of these tasks.
2.4.1 Unix Tools for Crude Tokenization and Normalization
Let’s begin with an easy, if somewhat naive version of word tokenization and nor- malization (and frequency computation) that can be accomplished for English solely in a single UNIX command-line, inspired by Church (1994). We’ll make use of some Unix commands: tr, used to systematically change particular characters in the in- put; sort, which sorts input lines in alphabetical order; and uniq, which collapses and counts adjacent identical lines.
For example let’s begin with the ‘complete words’ of Shakespeare in one textfile, sh.txt. We can use tr to tokenize the words by changing every sequence of non- alphabetic characters to a newline (’A-Za-z’ means alphabetic, the -c option com- plements to non-alphabet, and the -s option squeezes all sequences into a single character):

tr -sc ’A-Za-z’ ’\n’ < sh.txt
The output of this command will be:
           THE
           SONNETS
           by
           William
           Shakespeare
           From
           fairest
           creatures
           We
           ...
Now that there is one word per line, we can sort the lines, and pass them to uniq -c which will collapse and count them:
tr -sc ’A-Za-z’ ’\n’ < sh.txt | sort | uniq -c
with the following output:
1945 A
72 AARON
19 ABBESS
25 Aaron
6 Abate
1 Abates
5 Abbess
6 Abbey
3 Abbot
...
Alternatively, we can collapse all the upper case to lower case:
tr -sc ’A-Za-z’ ’\n’ < sh.txt | tr A-Z a-z | sort | uniq -c
whose output is
14725 a
  97 aaron
   1 abaissiez
  10 abandon
   2 abandoned
   2 abase
   1 abash
  14 abate
   3 abated
   3 abatement
   ...
Now we can sort again to find the frequent words. The -n option to sort means to sort numerically rather than alphabetically, and the -r option means to sort in reverse order (highest-to-lowest):
tr -sc ’A-Za-z’ ’\n’ < sh.txt | tr A-Z a-z | sort | uniq -c | sort -n -r
The results show that the most frequent words in Shakespeare, as in any other corpus, are the short function words like articles, pronouns, prepositions:
2.4 •
TEXT NORMALIZATION 15

16
CHAPTER 2 • REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE
tokenization
27378 the
26084 and
22538 i
19771 to
17481 of
14725 a
13826 you
12489 my
11318 that
11112 in
...
Unix tools of this sort can be very handy in building quick word count statistics for any corpus.
2.4.2 Word Tokenization
The simple UNIX tools above were fine for getting rough word statistics but more sophisticated algorithms are generally necessary for tokenization, the task of seg- menting running text into words.
While the Unix command sequence just removed all the numbers and punctu- ation, for most NLP applications we’ll need to keep these in our tokenization. We often want to break off punctuation as a separate token; commas are a useful piece of information for parsers, periods help indicate sentence boundaries. But we’ll often want to keep the punctuation that occurs word internally, in examples like m.p.h., Ph.D., AT&T, and cap’n. Special characters and numbers will need to be kept in prices ($45.55) and dates (01/02/06); we don’t want to segment that price into sep- arate tokens of “45” and “55”. And there are URLs (http://www.stanford.edu), Twitter hashtags (#nlproc), or email addresses (someone@cs.colorado.edu).
Number expressions introduce other complications as well; while commas nor- mally appear at word boundaries, commas are used inside numbers in English, every three digits: 555,500.50. Languages, and hence tokenization requirements, differ on this; many continental European languages like Spanish, French, and German, by contrast, use a comma to mark the decimal point, and spaces (or sometimes periods) where English puts commas, for example, 555 500,50.
A tokenizer can also be used to expand clitic contractions that are marked by apostrophes, for example, converting what’re to the two tokens what are, and we’retowe are.Acliticisapartofawordthatcan’tstandonitsown,andcanonly occur when it is attached to another word. Some such contractions occur in other alphabetic languages, including articles and pronouns in French (j’ai, l’homme).
Depending on the application, tokenization algorithms may also tokenize mul- tiword expressions like New York or rock ’n’ roll as a single token, which re- quires a multiword expression dictionary of some sort. Tokenization is thus inti- mately tied up with named entity recognition, the task of detecting names, dates, and organizations (Chapter 8).
One commonly used tokenization standard is known as the Penn Treebank to- kenization standard, used for the parsed corpora (treebanks) released by the Lin- guistic Data Consortium (LDC), the source of many useful datasets. This standard separates out clitics (doesn’t becomes does plus n’t), keeps hyphenated words to- gether, and separates out all punctuation (to save space we’re showing visible spaces ‘ ’ between tokens, although newlines is a more common output):
Penn Treebank tokenization
clitic

2.4 • TEXT NORMALIZATION 17
Input: "The San Francisco-based restaurant," they said, "doesn’t charge $10".
Output: " The San Francisco-based restaurant , " they said , " does n’t charge $ 10 " .
In practice, since tokenization needs to be run before any other language pro- cessing, it needs to be very fast. The standard method for tokenization is therefore to use deterministic algorithms based on regular expressions compiled into very ef- ficient finite state automata. For example, Fig. 2.12 shows an example of a basic regular expression that can be used to tokenize with the nltk.regexp tokenize function of the Python-based Natural Language Toolkit (NLTK) (Bird et al. 2009; http://www.nltk.org).
 >>> text = ’That U.S.A. poster-print costs $12.40...’
>>> pattern = r’’’(?x)
...     ([A-Z]\.)+
...   | \w+(-\w+)*
...   | \$?\d+(\.\d+)?%?  # currency and percentages, e.g. $12.40, 82%
...   | \.\.\.            # ellipsis
# set flag to allow verbose regexps
# abbreviations, e.g. U.S.A.
# words with optional internal hyphens
...   | [][.,;"’?():-_‘]  # these are separate tokens; includes ], [
... ’’’
>>> nltk.regexp_tokenize(text, pattern)
[’That’, ’U.S.A.’, ’poster-print’, ’costs’, ’$12.40’, ’...’]
 Figure 2.12
   hanzi
A Python trace of regular expression tokenization in the NLTK Python-based natural language processing toolkit (Bird et al., 2009), commented for readability; the (?x) verbose flag tells Python to strip comments and whitespace. Figure from Chapter 3 of Bird et al. (2009).
Carefully designed deterministic algorithms can deal with the ambiguities that arise, such as the fact that the apostrophe needs to be tokenized differently when used as a genitive marker (as in the book’s cover), a quotative as in ‘The other class’, she said, or in clitics like they’re.
Word tokenization is more complex in languages like written Chinese, Japanese, and Thai, which do not use spaces to mark potential word-boundaries. In Chinese, for example, words are composed of characters (called hanzi in Chinese). Each character generally represents a single unit of meaning (called a morpheme) and is pronounceable as a single syllable. Words are about 2.4 characters long on average. But deciding what counts as a word in Chinese is complex. For example, consider the following sentence:
(2.4) 姚明进入总决赛
“Yao Ming reaches the finals”
As Chen et al. (2017) point out, this could be treated as 3 words (‘Chinese Treebank’ segmentation):
(2.5) 姚明 进入 总决赛 YaoMing reaches finals
or as 5 words (‘Peking University’ segmentation):
(2.6) 姚 明 进入 总 决赛 Yao Ming reaches overall finals
Finally, it is possible in Chinese simply to ignore words altogether and use characters as the basic elements, treating the sentence as a series of 7 characters:

18 CHAPTER 2 • REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE (2.7) 姚 明 进 入 总 决 赛
word segmentation
Yao Ming enter enter overall decision game
In fact, for most Chinese NLP tasks it turns out to work better to take characters rather than words as input, since characters are at a reasonable semantic level for most applications, and since most word standards, by contrast, result in a huge vo- cabulary with large numbers of very rare words (Li et al., 2019).
However, for Japanese and Thai the character is too small a unit, and so algo- rithms for word segmentation are required. These can also be useful for Chinese in the rare situations where word rather than character boundaries are required. The standard segmentation algorithms for these languages use neural sequence mod- els trained via supervised machine learning on hand-segmented training sets; we’ll introduce sequence models in Chapter 8 and Chapter 9.
2.4.3 Byte-Pair Encoding for Tokenization
There is a third option to tokenizing text. Instead of defining tokens as words (whether delimited by spaces or more complex algorithms), or as characters (as in Chinese), we can use our data to automatically tell us what the tokens should be. This is especially useful in dealing with unknown words, an important problem in language processing. As we will see in the next chapter, NLP algorithms often learn some facts about language from one corpus (a training corpus) and then use these facts to make decisions about a separate test corpus and its language. Thus if our training corpus contains, say the words low, new, newer, but not lower, then if the word lower appears in our test corpus, our system will not know what to do with it.
To deal with this unknown word problem, modern tokenizers often automati- subwords cally induce sets of tokens that include tokens smaller than words, called subwords. Subwords can be arbitrary substrings, or they can be meaning-bearing units like the morphemes -est or -er. (A morpheme is the smallest meaning-bearing unit of a lan- guage; for example the word unlikeliest has the morphemes un-, likely, and -est.) In modern tokenization schemes, most tokens are words, but some tokens are fre- quently occurring morphemes or other subwords like -er. Every unseen words like lower can thus be represented by some sequence of known subword units, such as
low and er, or even as a sequence of individual letters if necessary.
Most tokenization schemes have two parts: a token learner, and a token seg- menter. The token learner takes a raw training corpus (sometimes roughly pre- separated into words, for example by whitespace) and induces a vocabulary, a set of tokens. The token segmenter takes a raw test sentence and segments it into the tokens in the vocabulary. Three algorithms are widely used: byte-pair encoding (Sennrich et al., 2016), unigram language modeling (Kudo, 2018), and WordPiece (Schuster and Nakajima, 2012); there is also a SentencePiece library that includes
implementations of the first two of the three (Kudo and Richardson, 2018).
In this section we introduce the simplest of the three, the byte-pair encoding or BPE BPE algorithm (Sennrich et al., 2016); see Fig. 2.13. The BPE token learner begins with a vocabulary that is just the set of all individual characters. It then examines the training corpus, chooses the two symbols that are most frequently adjacent (say ‘A’, ‘B’), adds a new merged symbol ‘AB’ to the vocabulary, and replaces every adjacent ’A’ ’B’ in the corpus with the new ‘AB’. It continues to count and merge, creating new longer and longer character strings, until k merges have been done creating k novel tokens; k is thus is a parameter of the algorithm. The resulting vocabulary
consists of the original set of characters plus k new symbols.

2.4 • TEXT NORMALIZATION 19
The algorithm is usually run inside words (not merging across word boundaries), so the input corpus is first white-space-separated to give a set of strings, each corre- sponding to the characters of a word, plus a special end-of-word symbol , and its counts. Let’s see its operation on the following tiny input corpus of 18 word tokens with counts for each word (the word low appears 5 times, the word newer 6 times, and so on), which would have a starting vocabulary of 11 letters:
corpus vocabulary
5 low ,d,e,i,l,n,o,r,s,t,w 2 lowest
6 newer
3 wider
2 new
The BPE algorithm first count all pairs of adjacent symbols: the most frequent is the pair e r because it occurs in newer (frequency of 6) and wider (frequency of 3) for a total of 9 occurrences1. We then merge these symbols, treating er as one symbol, and count again:
corpus
5 l o w
2 lowest 6 newer
3 wider
2 new
vocabulary
 , d, e, i, l, n, o, r, s, t, w, er
Now the most frequent pair is er , which we merge; our system has learned that there should be a token for word-final er, represented as er :
corpus
5 l o w
2 lowest 6 newer
3 wider
2 new
vocabulary
,d,e,i,l,n,o,r,s,t,w,er,er
Next n e (total count of 8) get merged to ne:
corpus
5 l o w
2 lowest 6 newer
3 wider
2 new
If we continue, the next merges are:
vocabulary
,d,e,i,l,n,o,r,s,t,w,er,er ,ne
Merge
(ne, w)
(l, o)
(lo, w)
(new, er ) ,d,e,i,l,n,o,r,s,t,w,er,er ,ne,new,lo,low,newer (low, ) ,d,e,i,l,n,o,r,s,t,w,er,er ,ne,new,lo,low,newer ,low
Once we’ve learned our vocabulary, the token parser is used to tokenize a test sentence. The token parser just runs on the test data the merges we have learned
1 Note that there can be ties; we could have instead chosen to merge r first, since that also has a frequency of 9.
Current Vocabulary
,d,e,i,l,n,o,r,s,t,w,er,er ,ne,new ,d,e,i,l,n,o,r,s,t,w,er,er ,ne,new,lo ,d,e,i,l,n,o,r,s,t,w,er,er ,ne,new,lo,low
 
20 CHAPTER 2 • REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE
   function BYTE-PAIR ENCODING(strings C, number of merges k) returns vocab V
V←all unique characters in C # initial set of tokens is characters fori=1tok do #mergetokenstilktimes
tL, tR ←Most frequent pair of adjacent tokens in C
tNEW ←tL + tR # make new token by concatenating V←V + tNEW # update the vocabulary
Replace each occurrence of tL, tR in C with tNEW # and update the corpus
return V
 Figure 2.13
 normalization
case folding
The token learner part of the BPE algorithm for taking a corpus broken up into individual characters or bytes, and learning a vocabulary by iteratively merging tokens. Figure adapted from Bostrom and Durrett (2020).
from the training data, greedily, in the order we learned them. (Thus the frequencies in the test data don’t play a role, just the frequencies in the training data). So first we segment each test sentence word into characters. Then we apply the first rule: replace every instance of e r in the test corpus with r, and then the second rule: replace every instance of er in the test corpus with er , and so on. By the end, if the test corpus contained the word n e w e r , it would be tokenized as a full word. But a new (unknown) word like l o w e r would be merged into the two tokens low er .
Of course in real algorithms BPE is run with many thousands of merges on a very large input corpus. The result is that most words will be represented as full symbols, and only the very rare words (and unknown words) will have to be represented by their parts.
2.4.4 Word Normalization, Lemmatization and Stemming
Word normalization is the task of putting words/tokens in a standard format, choos- ing a single normal form for words with multiple forms like USA and US or uh-huh and uhhuh. This standardization may be valuable, despite the spelling information that is lost in the normalization process. For information retrieval or information extraction about the US, we might want to see information from documents whether they mention the US or the USA.
Case folding is another kind of normalization. Mapping everything to lower case means that Woodchuck and woodchuck are represented identically, which is very helpful for generalization in many tasks, such as information retrieval or speech recognition. For sentiment analysis and other text classification tasks, information extraction, and machine translation, by contrast, case can be quite helpful and case folding is generally not done. This is because maintaining the difference between, for example, US the country and us the pronoun can outweigh the advantage in generalization that case folding would have provided for other words.
For many natural language processing situations we also want two morpholog- ically different forms of a word to behave similarly. For example in web search, someone may type the string woodchucks but a useful system might want to also return pages that mention woodchuck with no s. This is especially common in mor- phologically complex languages like Russian, where for example the word Moscow has different endings in the phrases Moscow, of Moscow, to Moscow, and so on.
Lemmatization is the task of determining that two words have the same root, despite their surface differences. The words am, are, and is have the shared lemma

morpheme stem affix
2.4 • TEXT NORMALIZATION 21
be; the words dinner and dinners both have the lemma dinner. Lemmatizing each of these forms to the same lemma will let us find all mentions of words in Russian like Moscow. The lemmatized form of a sentence like He is reading detective stories would thus be He be read detective story.
How is lemmatization done? The most sophisticated methods for lemmatization involve complete morphological parsing of the word. Morphology is the study of the way words are built up from smaller meaning-bearing units called morphemes. Two broad classes of morphemes can be distinguished: stems—the central mor- pheme of the word, supplying the main meaning— and affixes—adding “additional” meanings of various kinds. So, for example, the word fox consists of one morpheme (the morpheme fox) and the word cats consists of two: the morpheme cat and the morpheme -s. A morphological parser takes a word like cats and parses it into the two morphemes cat and s, or parses a Spanish word like amaren (‘if in the future they would love’) into the morpheme amar ‘to love’, and the morphological features 3PL and future subjunctive.
The Porter Stemmer
Lemmatization algorithms can be complex. For this reason we sometimes make use of a simpler but cruder method, which mainly consists of chopping off word-final affixes. This naive version of morphological analysis is called stemming. One of the most widely used stemming algorithms is the Porter (1980). The Porter stemmer applied to the following paragraph:
     This was not the map we found in Billy Bones’s chest, but
     an accurate copy, complete in all things-names and heights
     and soundings-with the single exception of the red crosses
     and the written notes.
produces the following stemmed output:
     Thi wa not the map we found in Billi Bone s chest but an
     accur copi complet in all thing name and height and sound
     with the singl except of the red cross and the written note
The algorithm is based on series of rewrite rules run in series, as a cascade, in which the output of each pass is fed as input to the next pass; here is a sampling of the rules:
ATIONAL → ATE (e.g., relational → relate)
ING → ε if stem contains vowel (e.g., motoring → motor)
SSES → SS (e.g., grasses → grass)
Detailed rule lists for the Porter stemmer, as well as code (in Java, Python, etc.) can be found on Martin Porter’s homepage; see also the original paper (Porter, 1980). Simple stemmers can be useful in cases where we need to collapse across differ- ent variants of the same lemma. Nonetheless, they do tend to commit errors of both
over- and under-generalizing, as shown in the table below (Krovetz, 1993):
stemming Porter stemmer
cascade
 Errors of Commission
 Errors of Omission
 organization organ
 European Europe
 doing doe
 analysis analyzes
 numerical numerous
 noise noisy
 policy police
 sparse sparsity
   
22 CHAPTER 2 • REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE 2.4.5 Sentence Segmentation
sentence segmentation
Sentence segmentation is another important step in text processing. The most use- ful cues for segmenting a text into sentences are punctuation, like periods, question marks, and exclamation points. Question marks and exclamation points are rela- tively unambiguous markers of sentence boundaries. Periods, on the other hand, are more ambiguous. The period character “.” is ambiguous between a sentence bound- ary marker and a marker of abbreviations like Mr. or Inc. The previous sentence that you just read showed an even more complex case of this ambiguity, in which the final period of Inc. marked both an abbreviation and the sentence boundary marker. For this reason, sentence tokenization and word tokenization may be addressed jointly.
In general, sentence tokenization methods work by first deciding (based on rules or machine learning) whether a period is part of the word or is a sentence-boundary marker. An abbreviation dictionary can help determine whether the period is part of a commonly used abbreviation; the dictionaries can be hand-built or machine- learned (Kiss and Strunk, 2006), as can the final sentence splitter. In the Stan- ford CoreNLP toolkit (Manning et al., 2014), for example sentence splitting is rule-based, a deterministic consequence of tokenization; a sentence ends when a sentence-ending punctuation (., !, or ?) is not already grouped with other charac- ters into a token (such as for an abbreviation or number), optionally followed by additional final quotes or brackets.
2.5 Minimum Edit Distance
minimum edit distance
alignment
Much of natural language processing is concerned with measuring how similar two strings are. For example in spelling correction, the user typed some erroneous string—let’s say graffe–and we want to know what the user meant. The user prob- ably intended a word that is similar to graffe. Among candidate similar words, the word giraffe, which differs by only one letter from graffe, seems intuitively to be more similar than, say grail or graf, which differ in more letters. Another example comes from coreference, the task of deciding whether two strings such as the following refer to the same entity:
     Stanford President Marc Tessier-Lavigne
     Stanford University President Marc Tessier-Lavigne
Again, the fact that these two strings are very similar (differing by only one word) seems like useful evidence for deciding that they might be coreferent.
Edit distance gives us a way to quantify both of these intuitions about string sim- ilarity. More formally, the minimum edit distance between two strings is defined as the minimum number of editing operations (operations like insertion, deletion, substitution) needed to transform one string into another.
The gap between intention and execution, for example, is 5 (delete an i, substi- tute e for n, substitute x for t, insert c, substitute u for n). It’s much easier to see this by looking at the most important visualization for string distances, an alignment between the two strings, shown in Fig. 2.14. Given two sequences, an alignment is a correspondence between substrings of the two sequences. Thus, we say I aligns with the empty string, N with E, and so on. Beneath the aligned strings is another representation; a series of symbols expressing an operation list for converting the top string into the bottom string: d for deletion, s for substitution, i for insertion.

   INTE*NTION
||||||||||
*EXECUTION dss is
 Figure 2.14
     intention
del ins subst
ntention intecntion inxention
  Figure 2.15
 dynamic programming
2.5 • MINIMUM EDIT DISTANCE 23
Representing the minimum edit distance between two strings as an alignment. The final row gives the operation list for converting the top string into the bottom string: d for deletion, s for substitution, i for insertion.
We can also assign a particular cost or weight to each of these operations. The Levenshtein distance between two sequences is the simplest weighting factor in which each of the three operations has a cost of 1 (Levenshtein, 1966)—we assume that the substitution of a letter for itself, for example, t for t, has zero cost. The Lev- enshtein distance between intention and execution is 5. Levenshtein also proposed an alternative version of his metric in which each insertion or deletion has a cost of 1 and substitutions are not allowed. (This is equivalent to allowing substitution, but giving each substitution a cost of 2 since any substitution can be represented by one insertion and one deletion). Using this version, the Levenshtein distance between intention and execution is 8.
2.5.1 The Minimum Edit Distance Algorithm
How do we find the minimum edit distance? We can think of this as a search task, in which we are searching for the shortest path—a sequence of edits—from one string to another.
Finding the edit distance viewed as a search problem
The space of all possible edits is enormous, so we can’t search naively. However, lots of distinct edit paths will end up in the same state (string), so rather than recom- puting all those paths, we could just remember the shortest path to a state each time we saw it. We can do this by using dynamic programming. Dynamic programming is the name for a class of algorithms, first introduced by Bellman (1957), that apply a table-driven method to solve problems by combining solutions to sub-problems. Some of the most commonly used algorithms in natural language processing make use of dynamic programming, such as the Viterbi algorithm (Chapter 8) and the CKY algorithm for parsing (Chapter 13).
The intuition of a dynamic programming problem is that a large problem can be solved by properly combining the solutions to various sub-problems. Consider the shortest path of transformed words that represents the minimum edit distance between the strings intention and execution shown in Fig. 2.16.
Imagine some string (perhaps it is exention) that is in this optimal path (whatever it is). The intuition of dynamic programming is that if exention is in the optimal operation list, then the optimal sequence must also include the optimal path from intention to exention. Why? If there were a shorter path from intention to exention,

24 CHAPTER 2 • REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE
   intention ntention etention exention exenution execution
delete i substitute n by e substitute t by x insert u substitute n by c
 Figure 2.16
 minimum edit distance algorithm
Path from intention to execution.
then we could use it instead, resulting in a shorter overall path, and the optimal sequence wouldn’t be optimal, thus leading to a contradiction.
The minimum edit distance algorithm algorithm was named by Wagner and Fischer (1974) but independently discovered by many people (see the Historical Notes section of Chapter 8).
Let’s first define the minimum edit distance between two strings. Given two strings, the source string X of length n, and target string Y of length m, we’ll define D[i, j] as the edit distance between X [1..i] and Y [1.. j], i.e., the first i characters of X and the first j characters of Y . The edit distance between X and Y is thus D[n, m].
We’ll use dynamic programming to compute D[n,m] bottom up, combining so- lutions to subproblems. In the base case, with a source substring of length i but an empty target string, going from i characters to 0 requires i deletes. With a target substring of length j but an empty source going from 0 characters to j characters requires j inserts. Having computed D[i, j] for small i, j we then compute larger D[i, j] based on previously computed smaller values. The value of D[i, j] is com- puted by taking the minimum of the three possible paths through the matrix which arrive there:
 D[i − 1, j] + del-cost(source[i]) D[i, j] = min D[i, j − 1] + ins-cost(target[ j])
D[i − 1, j − 1] + sub-cost(source[i], target[ j])
If we assume the version of Levenshtein distance in which the insertions and dele- tions each have a cost of 1 (ins-cost(·) = del-cost(·) = 1), and substitutions have a cost of 2 (except substitution of identical letters have zero cost), the computation for D[i, j] becomes:
 D[i−1, j]+1 D[i, j] = min D[i, j−1]+1
􏰊
2; if source[i] ̸= target[ j] 0; if source[i] = target[ j]
(2.8)

 D[i−1, j−1]+
The algorithm is summarized in Fig. 2.17; Fig. 2.18 shows the results of applying the algorithm to the distance between intention and execution with the version of Levenshtein in Eq. 2.8.
Knowing the minimum edit distance is useful for algorithms like finding poten- tial spelling error corrections. But the edit distance algorithm is important in another way; with a small change, it can also provide the minimum cost alignment between two strings. Aligning two strings is useful throughout speech and language process- ing. In speech recognition, minimum edit distance alignment is used to compute the word error rate (Chapter 26). Alignment plays a role in machine translation, in

2.5 • MINIMUM EDIT DISTANCE 25
   function MIN-EDIT-DISTANCE(source, target) returns min-distance
n←LENGTH(source)
m←LENGTH(target)
Create a distance matrix distance[n+1,m+1]
# Initialization: the zeroth row and column is the distance from the empty string D[0,0] = 0
for each row i from 1 to n do D[i,0]←D[i-1,0] + del-cost(source[i])
for each column j from 1 to m do D[0,j] ← D[0, j-1] + ins-cost(target[j])
# Recurrence relation:
for each row i from 1 to n do
for each column j from 1 to m do D[i,j]←MIN( D[i−1,j] + del-cost(source[i]),
# Termination return D[n,m]
D[i−1, j−1] + sub-cost(source[i], target[j]), D[i, j−1] + ins-cost(target[j]))
 Figure 2.17
 The minimum edit distance algorithm, an example of the class of dynamic programming algorithms. The various costs can either be fixed (e.g., ∀x,ins-cost(x) = 1) or can be specific to the letter (to model the fact that some letters are more likely to be in- serted than others). We assume that there is no cost for substituting a letter for itself (i.e., sub-cost(x, x) = 0).
Src\Tar # e x e c u t i o n #0123456789
  i1234567678
 n2345678787
 t3456787898
 e 4 3 4 5 6 7 8 9 10 9
 n 5 4 5 6 7 8 9 10 11 10
 t 6 5 6 7 8 9 8 9 10 11
 i 7 6 7 8 9 10 9 8 9 10
 o 8 7 8 9 10 11 10 9 8 9
 n 9 8 9 10 11 12 11 10 9 8
  Figure 2.18
  Computation of minimum edit distance between intention and execution with the algorithm of Fig. 2.17, using Levenshtein distance with cost of 1 for insertions or dele- tions, 2 for substitutions.
which sentences in a parallel corpus (a corpus with a text in two languages) need to be matched to each other.
To extend the edit distance algorithm to produce an alignment, we can start by visualizing an alignment as a path through the edit distance matrix. Figure 2.19 shows this path with the boldfaced cell. Each boldfaced cell represents an alignment of a pair of letters in the two strings. If two boldfaced cells occur in the same row, there will be an insertion in going from the source to the target; two boldfaced cells in the same column indicate a deletion.
Figure 2.19 also shows the intuition of how to compute this alignment path. The

26
CHAPTER 2 • REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE
backtrace
computation proceeds in two steps. In the first step, we augment the minimum edit distance algorithm to store backpointers in each cell. The backpointer from a cell points to the previous cell (or cells) that we came from in entering the current cell. We’ve shown a schematic of these backpointers in Fig. 2.19. Some cells have mul- tiple backpointers because the minimum extension could have come from multiple previous cells. In the second step, we perform a backtrace. In a backtrace, we start from the last cell (at the final row and column), and follow the pointers back through the dynamic programming matrix. Each complete path between the final cell and the initial cell is a minimum distance alignment. Exercise 2.7 asks you to modify the minimum edit distance algorithm to store the pointers and compute the backtrace to output an alignment.
#execution
 #0←1←2 ←3 ←4 ←5←6 ←7 ←8←9
 i ↑1 ↖←↑2 ↖←↑3 ↖←↑4 ↖←↑5 ↖←↑6 ↖←↑7 ↖6 ←7 ←8
 n ↑2 ↖←↑3 ↖←↑4 ↖←↑5 ↖←↑6 ↖←↑7 ↖←↑8 ↑7 ↖←↑8 ↖7
 t ↑3 ↖←↑4 ↖←↑5 ↖←↑6 ↖←↑7 ↖←↑8 ↖7 ←↑8 ↖←↑9 ↑8
 e ↑ 4 ↖ 3 ← 4 ↖← 5 ← 6 ← 7 ←↑ 8 ↖←↑ 9 ↖←↑ 10 ↑ 9
 n ↑5 ↑4 ↖←↑5 ↖←↑6 ↖←↑7 ↖←↑8 ↖←↑9 ↖←↑10 ↖←↑11↖↑10
 t ↑6 ↑5 ↖←↑6 ↖←↑7 ↖←↑8 ↖←↑9 ↖8 ←9 ←10←↑11
 i ↑7 ↑6 ↖←↑7 ↖←↑8 ↖←↑9 ↖←↑10 ↑9 ↖8 ←9 ←10
 o ↑8 ↑7 ↖←↑8 ↖←↑9 ↖←↑10 ↖←↑11 ↑10 ↑9 ↖8 ←9
 n ↑9 ↑8 ↖←↑9 ↖←↑10 ↖←↑11 ↖←↑12 ↑11 ↑10 ↑9 ↖8
 Figure 2.19
   When entering a value in each cell, we mark which of the three neighboring cells we came from with up to three arrows. After the table is full we compute an alignment (minimum edit path) by using a backtrace, starting at the 8 in the lower-right corner and following the arrows back. The sequence of bold cells represents one possible minimum cost alignment between the two strings. Diagram design after Gusfield (1997).
While we worked our example with simple Levenshtein distance, the algorithm in Fig. 2.17 allows arbitrary weights on the operations. For spelling correction, for example, substitutions are more likely to happen between letters that are next to each other on the keyboard. The Viterbi algorithm is a probabilistic extension of minimum edit distance. Instead of computing the “minimum edit distance” between two strings, Viterbi computes the “maximum probability alignment” of one string with another. We’ll discuss this more in Chapter 8.
2.6 Summary
This chapter introduced a fundamental tool in language processing, the regular ex- pression, and showed how to perform basic text normalization tasks including word segmentation and normalization, sentence segmentation, and stemming. We also introduced the important minimum edit distance algorithm for comparing strings. Here’s a summary of the main points we covered about these ideas:
• The regular expression language is a powerful tool for pattern-matching.
• Basic operations in regular expressions include concatenation of symbols, disjunction of symbols ([], |, and .), counters (*, +, and {n,m}), anchors (ˆ, $) and precedence operators ((,)).

BIBLIOGRAPHICAL AND HISTORICAL NOTES 27 • Word tokenization and normalization are generally done by cascades of
simple regular expression substitutions or finite automata.
• ThePorteralgorithmisasimpleandefficientwaytodostemming,stripping off affixes. It does not have high accuracy but may be useful for some tasks.
• The minimum edit distance between two strings is the minimum number of operations it takes to edit one into the other. Minimum edit distance can be computed by dynamic programming, which also results in an alignment of the two strings.
Bibliographical and Historical Notes
Kleene (1951, 1956) first defined regular expressions and the finite automaton, based on the McCulloch-Pitts neuron. Ken Thompson was one of the first to build regular expressions compilers into editors for text searching (Thompson, 1968). His edi- tor ed included a command “g/regular expression/p”, or Global Regular Expression Print, which later became the Unix grep utility.
Text normalization algorithms have been applied since the beginning of the field. One of the earliest widely used stemmers was Lovins (1968). Stemming was also applied early to the digital humanities, by Packard (1973), who built an affix-stripping morphological parser for Ancient Greek. Currently a wide vari- ety of code for tokenization and normalization is available, such as the Stanford Tokenizer (http://nlp.stanford.edu/software/tokenizer.shtml) or spe- cialized tokenizers for Twitter (O’Connor et al., 2010), or for sentiment (http: //sentiment.christopherpotts.net/tokenizing.html). See Palmer (2012) for a survey of text preprocessing. NLTK is an essential tool that offers both useful Python libraries (http://www.nltk.org) and textbook descriptions (Bird et al., 2009) of many algorithms including text normalization and corpus interfaces.
For more on Herdan’s law and Heaps’ Law, see Herdan (1960, p. 28), Heaps (1978), Egghe (2007) and Baayen (2001); Yasseri et al. (2012) discuss the relation- ship with other measures of linguistic complexity. For more on edit distance, see the excellent Gusfield (1997). Our example measuring the edit distance from ‘intention’ to ‘execution’ was adapted from Kruskal (1983). There are various publicly avail- able packages to compute edit distance, including Unix diff and the NIST sclite program (NIST, 2005).
In his autobiography Bellman (1984) explains how he originally came up with the term dynamic programming:
“...The 1950s were not good years for mathematical research. [the] Secretary of Defense ...had a pathological fear and hatred of the word, research... I decided therefore to use the word, “programming”. I wanted to get across the idea that this was dynamic, this was multi- stage... I thought, let’s ... take a word that has an absolutely precise meaning, namely dynamic... it’s impossible to use the word, dynamic, in a pejorative sense. Try thinking of some combination that will pos- sibly give it a pejorative meaning. It’s impossible. Thus, I thought dynamic programming was a good name. It was something not even a Congressman could object to.”

28 CHAPTER 2 Exercises
2.1
2.2
•
REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE
Write regular expressions for the following languages.
1. the set of all alphabetic strings;
2. the set of all lower case alphabetic strings ending in a b;
3. the set of all strings from the alphabet a,b such that each a is immedi-
ately preceded by and immediately followed by a b;
Write regular expressions for the following languages. By “word”, we mean an alphabetic string separated from other words by whitespace, any relevant punctuation, line breaks, and so forth.
1. the set of all strings with two consecutive repeated words (e.g., “Hum- bert Humbert” and “the the” but not “the bug” or “the big bug”);
2. all strings that start at the beginning of the line with an integer and that end at the end of the line with a word;
3. all strings that have both the word grotto and the word raven in them (but not, e.g., words like grottos that merely contain the word grotto);
4. write a pattern that places the first word of an English sentence in a
register. Deal with punctuation.
Implement an ELIZA-like program, using substitutions such as those described on page 11. You might want to choose a different domain than a Rogerian psy- chologist, although keep in mind that you would need a domain in which your program can legitimately engage in a lot of simple repetition.
Compute the edit distance (using insertion cost 1, deletion cost 1, substitution cost 1) of “leda” to “deal”. Show your work (using the edit distance grid).
Figure out whether drive is closer to brief or to divers and what the edit dis- tance is to each. You may use any version of distance that you like.
Now implement a minimum edit distance algorithm and use your hand-computed results to check your code.
Augment the minimum edit distance algorithm to output an alignment; you will need to store pointers and add a stage to compute the backtrace.
2.3
2.4 2.5 2.6 2.7

 CHAPTER
3
N-gram Language Models
“You are uniformly charming!” cried he, with a smile of associating and now and then I bowed and they perceived a chaise and four to wish for.
Random sentence generated from a Jane Austen trigram model
Predicting is difficult—especially about the future, as the old quip goes. But how about predicting something that seems much easier, like the next few words someone is going to say? What word, for example, is likely to follow
     Please turn your homework ...
Hopefully, most of you concluded that a very likely word is in, or possibly over, but probably not refrigerator or the. In the following sections we will formalize this intuition by introducing models that assign a probability to each possible next word. The same models will also serve to assign a probability to an entire sentence. Such a model, for example, could predict that the following sequence has a much higher probability of appearing in a text:
     all of a sudden I notice three guys standing on the sidewalk
than does this same set of words in a different order:
     on guys all I of notice sidewalk three a sudden standing the
Why would you want to predict upcoming words, or assign probabilities to sen- tences? Probabilities are essential in any task in which we have to identify words in noisy, ambiguous input, like speech recognition. For a speech recognizer to realize that you said I will be back soonish and not I will be bassoon dish, it helps to know that back soonish is a much more probable sequence than bassoon dish. For writing tools like spelling correction or grammatical error correction, we need to find and correct errors in writing like Their are two midterms, in which There was mistyped as Their, or Everything has improve, in which improve should have been improved. The phrase There are will be much more probable than Their are, and has improved than has improve, allowing us to help users by detecting and correcting these errors.
Assigning probabilities to sequences of words is also essential in machine trans- lation. Suppose we are translating a Chinese source sentence:
他 向 记者 介绍了 主要 内容 He to reporters introduced main content
As part of the process we might have built the following set of potential rough English translations:
he introduced reporters to the main contents of the statement he briefed to reporters the main contents of the statement
he briefed reporters on the main contents of the statement

30 CHAPTER 3 • N-GRAM LANGUAGE MODELS
AAC
language model
LM n-gram
A probabilistic model of word sequences could suggest that briefed reporters on is a more probable English phrase than briefed to reporters (which has an awkward to after briefed) or introduced reporters to (which uses a verb that is less fluent English in this context), allowing us to correctly select the boldfaced sentence above.
Probabilities are also important for augmentative and alternative communi- cation systems (Trnka et al. 2007, Kane et al. 2017). People often use such AAC devices if they are physically unable to speak or sign but can instead use eye gaze or other specific movements to select words from a menu to be spoken by the system. Word prediction can be used to suggest likely words for the menu.
Models that assign probabilities to sequences of words are called language mod- els or LMs. In this chapter we introduce the simplest model that assigns probabil- ities to sentences and sequences of words, the n-gram. An n-gram is a sequence of n words: a 2-gram (which we’ll call bigram) is a two-word sequence of words like “please turn”, “turn your”, or ”your homework”, and a 3-gram (a trigram) is a three-word sequence of words like “please turn your”, or “turn your homework”. We’ll see how to use n-gram models to estimate the probability of the last word of an n-gram given the previous words, and also to assign probabilities to entire se- quences. In a bit of terminological ambiguity, we usually drop the word “model”, and use the term n-gram (and bigram, etc.) to mean either the word sequence itself or the predictive model that assigns it a probability. In later chapters we’ll introduce more sophisticated language models like the RNN LMs of Chapter 9.
3.1 N-Grams
Let’s begin with the task of computing P(w|h), the probability of a word w given some history h. Suppose the history h is “its water is so transparent that” and we want to know the probability that the next word is the:
P(the|its water is so transparent that). (3.1)
One way to estimate this probability is from relative frequency counts: take a very large corpus, count the number of times we see its water is so transparent that, and count the number of times this is followed by the. This would be answering the question “Out of the times we saw the history h, how many times was it followed by the word w”, as follows:
P(the|its water is so transparent that) = C(its water is so transparent that the)
C(its water is so transparent that)
(3.2)
 With a large enough corpus, such as the web, we can compute these counts and estimate the probability from Eq. 3.2. You should pause now, go to the web, and compute this estimate for yourself.
While this method of estimating probabilities directly from counts works fine in many cases, it turns out that even the web isn’t big enough to give us good estimates in most cases. This is because language is creative; new sentences are created all the time, and we won’t always be able to count entire sentences. Even simple extensions of the example sentence may have counts of zero on the web (such as “Walden Pond’s water is so transparent that the”; well, used to have counts of zero).

bigram
The intuition of the n-gram model is that instead of computing the probability of a word given its entire history, we can approximate the history by just the last few words.
The bigram model, for example, approximates the probability of a word given all the previous words P(wn|w1:n−1) by using only the conditional probability of the preceding word P(wn|wn−1). In other words, instead of computing the probability
P(the|Walden Pond’s water is so transparent that) (3.5) we approximate it with the probability
P(the|that) (3.6) When we use a bigram model to predict the conditional probability of the next word,
we are thus making the following approximation:
P(wn|w1:n−1) ≈ P(wn|wn−1) (3.7)
3.1 • N-GRAMS 31
Similarly, if we wanted to know the joint probability of an entire sequence of words like its water is so transparent, we could do it by asking “out of all possible sequences of five words, how many of them are its water is so transparent?” We would have to get the count of its water is so transparent and divide by the sum of the counts of all possible five word sequences. That seems rather a lot to estimate!
For this reason, we’ll need to introduce more clever ways of estimating the prob- ability of a word w given a history h, or the probability of an entire word sequence W. Let’s start with a little formalizing of notation. To represent the probability of a particular random variable Xi taking on the value “the”, or P(Xi = “the”), we will use the simplification P(the). We’ll represent a sequence of N words either as w1 ...wn or w1:n (so the expression w1:n−1 means the string w1,w2,...,wn−1). For the joint probability of each word in a sequence having a particular value P(X = w1,Y = w2,Z = w3,...,W = wn) we’ll use P(w1,w2,...,wn).
Now how can we compute probabilities of entire sequences like P(w1 , w2 , ..., wn )? One thing we can do is decompose this probability using the chain rule of proba- bility:
P(X1...Xn) = P􏰒(X1)P(X2|X1)P(X3|X1:2)...P(Xn|X1:n−1) n
= P(Xk|X1:k−1) k=1
Applying the chain rule to words, we get
P(w1:n) = P􏰒(w1)P(w2|w1)P(w3|w1:2)...P(wn|w1:n−1) n
= P(wk|w1:k−1) k=1
(3.3)
(3.4)
The chain rule shows the link between computing the joint probability of a sequence
and computing the conditional probability of a word given previous words. Equa-
tion 3.4 suggests that we could estimate the joint probability of an entire sequence of
words by multiplying together a number of conditional probabilities. But using the
chain rule doesn’t really seem to help us! We don’t know any way to compute the
exact probability of a word given a long sequence of preceding words, P(wn|wn−1). 1
As we said above, we can’t just estimate by counting the number of times every word occurs following every long string, because language is creative and any particular context might have never occurred before!

32
CHAPTER 3 • N-GRAM LANGUAGE MODELS
Markov n-gram
The assumption that the probability of a word depends only on the previous word is called a Markov assumption. Markov models are the class of probabilistic models that assume we can predict the probability of some future unit without looking too far into the past. We can generalize the bigram (which looks one word into the past) to the trigram (which looks two words into the past) and thus to the n-gram (which looks n − 1 words into the past).
Thus, the general equation for this n-gram approximation to the conditional probability of the next word in a sequence is
P(wn|w1:n−1) ≈ P(wn|wn−N+1:n−1) (3.8) Given the bigram assumption for the probability of an individual word, we can com-
pute the probability of a complete word sequence by substituting Eq. 3.7 into Eq. 3.4:
estimate probabilities is called maximum likelihood estimation or MLE. We get the MLE estimate for the parameters of an n-gram model by getting counts from a corpus, and normalizing the counts so that they lie between 0 and 1.1
For example, to compute a particular bigram probability of a word y given a previous word x, we’ll compute the count of the bigram C(xy) and normalize by the sum of all the bigrams that share the same first word x:
C(wn−1wn)
P(wn|wn−1) = 􏰐w C(wn−1w) (3.10)
We can simplify this equation, since the sum of all bigram counts that start with a given word wn−1 must be equal to the unigram count for that word wn−1 (the reader should take a moment to be convinced of this):
P(wn|wn−1) = C(wn−1wn) (3.11) C(wn−1)
Let’s work through an example using a mini-corpus of three sentences. We’ll first need to augment each sentence with a special symbol <s> at the beginning of the sentence, to give us the bigram context of the first word. We’ll also need a special end-symbol. </s>2
        <s> I am Sam </s>
        <s> Sam I am </s>
        <s> I do not like green eggs and ham </s>
Here are the calculations for some of the bigram probabilities from this corpus P(I|<s>) = 23 = .67 P(Sam|<s>) = 13 = .33 P(am|I) = 23 = .67
P(</s>|Sam) = 21 = 0.5 P(Sam|am) = 12 = .5 P(do|I) = 13 = .33
1 For probabilistic models, normalizing means dividing by some total count so that the resulting proba- bilities fall legally between 0 and 1.
2 We need the end-symbol to make the bigram grammar a true probability distribution. Without an end-symbol, the sentence probabilities for all sentences of a given length would sum to one. This model
would define an infinite set of probability distributions, with one distribution per sentence length. See Exercise 3.5.
maximum likelihood estimation
normalize
P(w1:n) ≈
􏰒n k=1
P(wk|wk−1) (3.9) How do we estimate these bigram or n-gram probabilities? An intuitive way to
   
 relative frequency
3.1 • N-GRAMS 33 For the general case of MLE n-gram parameter estimation:
P(wn|wn−N+1:n−1) = C(wn−N+1:n−1 wn) (3.12) C(wn−N+1:n−1)
Equation 3.12 (like Eq. 3.11) estimates the n-gram probability by dividing the
observed frequency of a particular sequence by the observed frequency of a prefix.
This ratio is called a relative frequency. We said above that this use of relative
frequencies as a way to estimate probabilities is an example of maximum likelihood
estimation or MLE. In MLE, the resulting parameter set maximizes the likelihood
of the training set T given the model M (i.e., P(T|M)). For example, suppose the
word Chinese occurs 400 times in a corpus of a million words like the Brown corpus.
What is the probability that a random word selected from some other text of, say,
a million words will be the word Chinese? The MLE of its probability is 400 1000000
 or .0004. Now .0004 is not the best possible estimate of the probability of Chinese occurring in all situations; it might turn out that in some other corpus or context Chinese is a very unlikely word. But it is the probability that makes it most likely that Chinese will occur 400 times in a million-word corpus. We present ways to modify the MLE estimates slightly to get better probability estimates in Section 3.4.
Let’s move on to some examples from a slightly larger corpus than our 14-word example above. We’ll use data from the now-defunct Berkeley Restaurant Project, a dialogue system from the last century that answered questions about a database of restaurants in Berkeley, California (Jurafsky et al., 1994). Here are some text- normalized sample user queries (a sample of 9332 sentences is on the website):
can you tell me about any good cantonese restaurants close by mid priced thai food is what i’m looking for
tell me about chez panisse
can you give me a listing of the kinds of food that are available i’m looking for a good place to eat breakfast
when is caffe venezia open during the day
Figure 3.1 shows the bigram counts from a piece of a bigram grammar from the Berkeley Restaurant Project. Note that the majority of the values are zero. In fact, we have chosen the sample words to cohere with each other; a matrix selected from a random set of seven words would be even more sparse.
  i want to eat chinese food lunch spend
i 5 827 0 9 0 0 0 2 want 2 0 608 1 6 6 5 1 to 2 0 4 686 2 0 6 211 eat 0 0 2 0 16 2 42 0 chinese 1 0 0 0 0 82 1 0 food 15 0 15 0 1 4 0 0 lunch 2 0 0 0 0 1 0 0 spend 1 0 1 0 0 0 0 0
  Figure 3.1
 Bigram counts for eight of the words (out of V = 1446) in the Berkeley Restau- rant Project corpus of 9332 sentences. Zero counts are in gray.
Figure 3.2 shows the bigram probabilities after normalization (dividing each cell in Fig. 3.1 by the appropriate unigram for its row, taken from the following set of unigram probabilities):

34
CHAPTER 3 • N-GRAM LANGUAGE MODELS i wantto eat
2533 927 2417 746
 chinese
 food lunch
spend
 158
 1093 341
278
   Figure 3.2
i want to eat chinese food lunch spend
  i 0.002 0.33 want 0.0022 0
to 0.00083 0 eat 0 0 chinese 0.0063 0 food 0.014 0 lunch 0.0059 0 spend 0.0036 0
0 0.0036 0
0 0 0.00079 0.0065 0.0054 0.0011 0 0.0025 0.087 0.0027 0.056 0
0.52 0.0063 0 0.0037 0 0 0.0029 0 0 0 0 0
0.66 0.0011 0.0017 0.28 0.0027 0
0 0 0.014 0
0 0 0.0036 0
0.0065 0.00083 0.021
0 0.00092 0
0
   Bigram probabilities for eight words in the Berkeley Restaurant Project corpus of 9332 sentences. Zero probabilities are in gray.
Here are a few other useful probabilities:
P(i|<s>) = 0.25 P(english|want) = 0.0011
P(food|english) = 0.5 P(</s>|food) = 0.68
Now we can compute the probability of sentences like I want English food or I want Chinese food by simply multiplying the appropriate bigram probabilities to- gether, as follows:
P(<s> i want english food </s>)
= P(i|<s>)P(want|i)P(english|want)
P(food|english)P(</s>|food) = .25×.33×.0011×0.5×0.68
= .000031
We leave it as Exercise 3.2 to compute the probability of i want chinese food.
What kinds of linguistic phenomena are captured in these bigram statistics? Some of the bigram probabilities above encode some facts that we think of as strictly syntactic in nature, like the fact that what comes after eat is usually a noun or an adjective, or that what comes after to is usually a verb. Others might be a fact about the personal assistant task, like the high probability of sentences beginning with the words I. And some might even be cultural rather than linguistic, like the higher probability that people are looking for Chinese versus English food.
Some practical issues: Although for pedagogical purposes we have only described trigram bigram models, in practice it’s more common to use trigram models, which con- 4-gram dition on the previous two words rather than the previous word, or 4-gram or even 5-gram 5-gram models, when there is sufficient training data. Note that for these larger n- grams, we’ll need to assume extra contexts to the left and right of the sentence end. For example, to compute trigram probabilities at the very beginning of the sentence,
log probabilities
we use two pseudo-words for the first trigram (i.e., P(I|<s><s>).
We always represent and compute language model probabilities in log format as log probabilities. Since probabilities are (by definition) less than or equal to 1, the more probabilities we multiply together, the smaller the product becomes. Multiplying enough n-grams together would result in numerical underflow. By using log probabilities instead of raw probabilities, we get numbers that are not as small.

3.2
3.2 • EVALUATING LANGUAGE MODELS 35
Adding in log space is equivalent to multiplying in linear space, so we combine log probabilities by adding them. The result of doing all computation and storage in log space is that we only need to convert back into probabilities if we need to report them at the end; then we can just take the exp of the logprob:
p1×p2×p3×p4 =exp(logp1+logp2+logp3+logp4) (3.13) Evaluating Language Models
extrinsic evaluation
intrinsic evaluation
training set
test set held out
The best way to evaluate the performance of a language model is to embed it in an application and measure how much the application improves. Such end-to-end evaluation is called extrinsic evaluation. Extrinsic evaluation is the only way to know if a particular improvement in a component is really going to help the task at hand. Thus, for speech recognition, we can compare the performance of two language models by running the speech recognizer twice, once with each language model, and seeing which gives the more accurate transcription.
Unfortunately, running big NLP systems end-to-end is often very expensive. In- stead, it would be nice to have a metric that can be used to quickly evaluate potential improvements in a language model. An intrinsic evaluation metric is one that mea- sures the quality of a model independent of any application.
For an intrinsic evaluation of a language model we need a test set. As with many of the statistical models in our field, the probabilities of an n-gram model come from the corpus it is trained on, the training set or training corpus. We can then measure the quality of an n-gram model by its performance on some unseen data called the test set or test corpus. We will also sometimes call test sets and other datasets that are not in our training sets held out corpora because we hold them out from the training data.
So if we are given a corpus of text and want to compare two different n-gram models, we divide the data into training and test sets, train the parameters of both models on the training set, and then compare how well the two trained models fit the test set.
But what does it mean to “fit the test set”? The answer is simple: whichever model assigns a higher probability to the test set—meaning it more accurately predicts the test set—is a better model. Given two probabilistic models, the better model is the one that has a tighter fit to the test data or that better predicts the details of the test data, and hence will assign a higher probability to the test data.
Since our evaluation metric is based on test set probability, it’s important not to let the test sentences into the training set. Suppose we are trying to compute the probability of a particular “test” sentence. If our test sentence is part of the training corpus, we will mistakenly assign it an artificially high probability when it occurs in the test set. We call this situation training on the test set. Training on the test set introduces a bias that makes the probabilities all look too high, and causes huge inaccuracies in perplexity, the probability-based metric we introduce below.
Sometimes we use a particular test set so often that we implicitly tune to its characteristics. We then need a fresh test set that is truly unseen. In such cases, we call the initial test set the development test set or, devset. How do we divide our data into training, development, and test sets? We want our test set to be as large as possible, since a small test set may be accidentally unrepresentative, but we also want as much training data as possible. At the minimum, we would want to pick
development test

36
CHAPTER 3 • N-GRAM LANGUAGE MODELS
perplexity
the smallest test set that gives us enough statistical power to measure a statistically significant difference between two potential models. In practice, we often just divide our data into 80% training, 10% development, and 10% test. Given a large corpus that we want to divide into training and test, test data can either be taken from some continuous sequence of text inside the corpus, or we can remove smaller “stripes” of text from randomly selected parts of our corpus and combine them into a test set.
3.2.1 Perplexity
In practice we don’t use raw probability as our metric for evaluating language mod- els, but a variant called perplexity. The perplexity (sometimes called PP for short) of a language model on a test set is the inverse probability of the test set, normalized by the number of words. For a test set W = w1w2 ...wN,:
PP(W) = P􏰗(w1w2...wN)−N1 =N1
P(w1w2 ...wN)
We can use the chain rule to expand the probability of W :
PP(W) = 􏰚􏰙􏰙􏰘N 􏰒N 1
i=1 P(wi|w1 ...wi−1)
(3.14)
(3.15)
    Thus, if we are computing the perplexity of W with a bigram language model, we get:
PP(W) = 􏰚􏰙􏰙􏰘N 􏰒N 1 (3.16) i=1 P(wi|wi−1)
Note that because of the inverse in Eq. 3.15, the higher the conditional probabil- ity of the word sequence, the lower the perplexity. Thus, minimizing perplexity is equivalent to maximizing the test set probability according to the language model. What we generally use for word sequence in Eq. 3.15 or Eq. 3.16 is the entire se- quence of words in some test set. Since this sequence will cross many sentence boundaries, we need to include the begin- and end-sentence markers <s> and </s> in the probability computation. We also need to include the end-of-sentence marker </s> (but not the beginning-of-sentence marker <s>) in the total count of word to- kens N.
There is another way to think about perplexity: as the weighted average branch-
ing factor of a language. The branching factor of a language is the number of possi-
ble next words that can follow any word. Consider the task of recognizing the digits
in English (zero, one, two,..., nine), given that (both in some training set and in some
  test set) each of the 10 digits occurs with equal probability P = 1 . The perplexity of 10
this mini-language is in fact 10. To see that, imagine a test string of digits of length N, and assume that in the training set all the digits occurred with equal probability. By Eq. 3.15, the perplexity will be

3.3 • GENERALIZATION AND ZEROS 37 PP(W) = P(w1w2...wN)−N1
1N−1 = (10 ) N
= 1−1 10
= 10 (3.17)
But suppose that the number zero is really frequent and occurs far more often than other numbers. Let’s say that 0 occur 91 times in the training set, and each of the other digits occurred 1 time each. Now we see the following test set: 0 0 0 0 0 3 0 0 0 0. We should expect the perplexity of this test set to be lower since most of the time the next number will be zero, which is very predictable, i.e. has a high probability. Thus, although the branching factor is still 10, the perplexity or weighted branching factor is smaller. We leave this exact calculation as exercise 12.
We see in Section 3.7 that perplexity is also closely related to the information- theoretic notion of entropy.
Finally, let’s look at an example of how perplexity can be used to compare dif- ferent n-gram models. We trained unigram, bigram, and trigram grammars on 38 million words (including start-of-sentence tokens) from the Wall Street Journal, us- ing a 19,979 word vocabulary. We then computed the perplexity of each of these models on a test set of 1.5 million words with Eq. 3.16. The table below shows the perplexity of a 1.5 million word WSJ test set according to each of these grammars.
As we see above, the more information the n-gram gives us about the word sequence, the lower the perplexity (since as Eq. 3.15 showed, perplexity is related inversely to the likelihood of the test sequence according to the model).
Note that in computing perplexities, the n-gram model P must be constructed without any knowledge of the test set or any prior knowledge of the vocabulary of the test set. Any kind of knowledge of the test set can cause the perplexity to be artificially low. The perplexity of two language models is only comparable if they use identical vocabularies.
An (intrinsic) improvement in perplexity does not guarantee an (extrinsic) im- provement in the performance of a language processing task like speech recognition or machine translation. Nonetheless, because perplexity often correlates with such improvements, it is commonly used as a quick check on an algorithm. But a model’s improvement in perplexity should always be confirmed by an end-to-end evaluation of a real task before concluding the evaluation of the model.
3.3 Generalization and Zeros
The n-gram model, like many statistical models, is dependent on the training corpus. One implication of this is that the probabilities often encode specific facts about a given training corpus. Another implication is that n-grams do a better and better job of modeling the training corpus as we increase the value of N.
  Unigram Bigram Trigram
 Perplexity
 962 170 109
   
38 CHAPTER 3 • N-GRAM LANGUAGE MODELS
We can visualize both of these facts by borrowing the technique of Shannon (1951) and Miller and Selfridge (1950) of generating random sentences from dif- ferent n-gram models. It’s simplest to visualize how this works for the unigram case. Imagine all the words of the English language covering the probability space between 0 and 1, each word covering an interval proportional to its frequency. We choose a random value between 0 and 1 and print the word whose interval includes this chosen value. We continue choosing random numbers and generating words until we randomly generate the sentence-final token </s>. We can use the same technique to generate bigrams by first generating a random bigram that starts with <s> (according to its bigram probability). Let’s say the second word of that bigram is w. We next chose a random bigram starting with w (again, drawn according to its bigram probability), and so on.
To give an intuition for the increasing power of higher-order n-grams, Fig. 3.3 shows random sentences generated from unigram, bigram, trigram, and 4-gram models trained on Shakespeare’s works.
    1
–To him swallowed confess hear both. Which. Of save on trail for are ay device and
rote life have
gram –Hill he late speaks; or! a more to leg less first you enter
–Why dost stand forth thy canopy, forsooth; he is this palpable hit the King Henry. Live
  2
king. Follow.
gram –What means, sir. I confess she? then all sorts, he is trim, captain.
–Fly, and will rid me these news of price. Therefore the sadness of parting, as they say,
  3
’tis done.
gram –This shall forbid it should be branded, if renown made it empty.
–King Henry. What! I will go seek the traitor Gloucester. Exeunt some of the watch. A
  4
great banquet serv’d in; gram –It cannot be but so.
 Figure 3.3
 Eight sentences randomly generated from four n-grams computed from Shakespeare’s works. All characters were mapped to lower-case and punctuation marks were treated as words. Output is hand-corrected for capitalization to improve readability.
The longer the context on which we train the model, the more coherent the sen- tences. In the unigram sentences, there is no coherent relation between words or any sentence-final punctuation. The bigram sentences have some local word-to-word coherence (especially if we consider that punctuation counts as a word). The tri- gram and 4-gram sentences are beginning to look a lot like Shakespeare. Indeed, a careful investigation of the 4-gram sentences shows that they look a little too much like Shakespeare. The words It cannot be but so are directly from King John. This is because, not to put the knock on Shakespeare, his oeuvre is not very large as corpora go (N = 884, 647, V = 29, 066), and our n-gram probability matrices are ridiculously sparse. There are V 2 = 844, 000, 000 possible bigrams alone, and the number of pos- sible 4-grams is V 4 = 7 × 1017 . Thus, once the generator has chosen the first 4-gram (It cannot be but), there are only five possible continuations (that, I, he, thou, and so); indeed, for many 4-grams, there is only one continuation.
To get an idea of the dependence of a grammar on its training set, let’s look at an n-gram grammar trained on a completely different corpus: the Wall Street Journal (WSJ) newspaper. Shakespeare and the Wall Street Journal are both English, so we might expect some overlap between our n-grams for the two genres. Fig. 3.4

3.3 • GENERALIZATION AND ZEROS 39 shows sentences generated by unigram, bigram, and trigram grammars trained on
40 million words from WSJ.
1 gram
Months the my and issue of year foreign new exchange’s september were recession exchange new endorsed a acquire to six executives
Last December through the way to preserve the Hudson corporation N.
      2
B. E. C. Taylor would seem to complete the major central planners one gram point five percent of U. S. E. has already old M. X. corporation of living
  on information such as more frequently fishing to keep her
They also point to ninety nine point six billion dollars from two hundred four oh six three percent of the rates of interest stores as Mexico and
  3
gram Brazil on market conditions
 Figure 3.4
 Three sentences randomly generated from three n-gram models computed from 40 million words of the Wall Street Journal, lower-casing all characters and treating punctua- tion as words. Output was then hand-corrected for capitalization to improve readability.
Compare these examples to the pseudo-Shakespeare in Fig. 3.3. While they both model “English-like sentences”, there is clearly no overlap in generated sentences, and little overlap even in small phrases. Statistical models are likely to be pretty use- less as predictors if the training sets and the test sets are as different as Shakespeare and WSJ.
How should we deal with this problem when we build n-gram models? One step is to be sure to use a training corpus that has a similar genre to whatever task we are trying to accomplish. To build a language model for translating legal documents, we need a training corpus of legal documents. To build a language model for a question-answering system, we need a training corpus of questions.
It is equally important to get training data in the appropriate dialect or variety, especially when processing social media posts or spoken transcripts. For example some tweets will use features of African American Language (AAL)— the name for the many variations of language used in African American communities (King, 2020). Such features include words like finna—an auxiliary verb that marks imme- diate future tense —that don’t occur in other varieties, or spellings like den for then, in tweets like this one (Blodgett and O’Connor, 2017):
(3.18) Bored af den my phone finna die!!!
while tweets from varieties like Nigerian English have markedly different vocabu-
lary and n-gram patterns from American English (Jurgens et al., 2017):
(3.19) @username R u a wizard or wat gan sef: in d mornin - u tweet, afternoon - u
tweet, nyt gan u dey tweet. beta get ur IT placement wiv twitter
Matching genres and dialects is still not sufficient. Our models may still be subject to the problem of sparsity. For any n-gram that occurred a sufficient number of times, we might have a good estimate of its probability. But because any corpus is limited, some perfectly acceptable English word sequences are bound to be missing from it. That is, we’ll have many cases of putative “zero probability n-grams” that should really have some non-zero probability. Consider the words that follow the bigram denied the in the WSJ Treebank3 corpus, together with their counts:
denied the allegations: 5 deniedthespeculation: 2 denied the rumors: 1 denied the report: 1

40
CHAPTER 3
closed vocabulary
OOV open vocabulary
zeros
• N-GRAM LANGUAGE MODELS
But suppose our test set has phrases like:
denied the offer denied the loan
Our model will incorrectly estimate that the P(offer|denied the) is 0!
These zeros— things that don’t ever occur in the training set but do occur in the test set—are a problem for two reasons. First, their presence means we are underestimating the probability of all sorts of words that might occur, which will hurt the performance of any application we want to run on this data.
Second, if the probability of any word in the test set is 0, the entire probability of the test set is 0. By definition, perplexity is based on the inverse probability of the test set. Thus if some words have zero probability, we can’t compute perplexity at all, since we can’t divide by 0!
3.3.1 Unknown Words
The previous section discussed the problem of words whose bigram probability is zero. But what about words we simply have never seen before?
Sometimes we have a language task in which this can’t happen because we know all the words that can occur. In such a closed vocabulary system the test set can only contain words from this lexicon, and there will be no unknown words. This is a reasonable assumption in some domains, such as speech recognition or machine translation, where we have a pronunciation dictionary or a phrase table that are fixed in advance, and so the language model can only use the words in that dictionary or phrase table.
In other cases we have to deal with words we haven’t seen before, which we’ll call unknown words, or out of vocabulary (OOV) words. The percentage of OOV words that appear in the test set is called the OOV rate. An open vocabulary system is one in which we model these potential unknown words in the test set by adding a pseudo-word called <UNK>.
There are two common ways to train the probabilities of the unknown word model <UNK>. The first one is to turn the problem back into a closed vocabulary one by choosing a fixed vocabulary in advance:
1. Choose a vocabulary (word list) that is fixed in advance.
2. Convert in the training set any word that is not in this set (any OOV word) to
the unknown word token <UNK> in a text normalization step.
3. Estimatetheprobabilitiesfor<UNK>fromitscountsjustlikeanyotherregular
word in the training set.
The second alternative, in situations where we don’t have a prior vocabulary in ad- vance, is to create such a vocabulary implicitly, replacing words in the training data by <UNK> based on their frequency. For example we can replace by <UNK> all words that occur fewer than n times in the training set, where n is some small number, or equivalently select a vocabulary size V in advance (say 50,000) and choose the top V words by frequency and replace the rest by UNK. In either case we then proceed to train the language model as before, treating <UNK> like a regular word.
The exact choice of <UNK> model does have an effect on metrics like perplexity. A language model can achieve low perplexity by choosing a small vocabulary and assigning the unknown word a high probability. For this reason, perplexities should only be compared across language models with the same vocabularies (Buck et al., 2014).

3.4 Smoothing
smoothing discounting
Laplace smoothing
What do we do with words that are in our vocabulary (they are not unknown words) but appear in a test set in an unseen context (for example they appear after a word they never appeared after in training)? To keep a language model from assigning zero probability to these unseen events, we’ll have to shave off a bit of probability mass from some more frequent events and give it to the events we’ve never seen. This modification is called smoothing or discounting. In this section and the fol- lowing ones we’ll introduce a variety of ways to do smoothing: Laplace (add-one) smoothing, add-k smoothing, stupid backoff, and Kneser-Ney smoothing.
3.4.1 Laplace Smoothing
The simplest way to do smoothing is to add one to all the bigram counts, before we normalize them into probabilities. All the counts that used to be zero will now have a count of 1, the counts of 1 will be 2, and so on. This algorithm is called Laplace smoothing. Laplace smoothing does not perform well enough to be used in modern n-gram models, but it usefully introduces many of the concepts that we see in other smoothing algorithms, gives a useful baseline, and is also a practical smoothing algorithm for other tasks like text classification (Chapter 4).
Let’s start with the application of Laplace smoothing to unigram probabilities. Recall that the unsmoothed maximum likelihood estimate of the unigram probability of the word wi is its count ci normalized by the total number of word tokens N:
P(wi) = ci N
Laplace smoothing merely adds one to each count (hence its alternate name add- one smoothing). Since there are V words in the vocabulary and each one was incre- mented, we also need to adjust the denominator to take into account the extra V observations. (What happens to our P values if we don’t increase the denominator?)
PLaplace(wi) = ci + 1 (3.20) N+V
Instead of changing both the numerator and denominator, it is convenient to describe how a smoothing algorithm affects the numerator, by defining an adjusted count c∗. This adjusted count is easier to compare directly with the MLE counts and can be turned into a probability like an MLE count by normalizing by N. To define this count, since we are only changing the numerator in addition to adding 1 we’ll also need to multiply by a normalization factor N :
(3.21)
A related way to view smoothing is as discounting (lowering) some non-zero counts in order to get the probability mass that will be assigned to the zero counts. Thus, instead of referring to the discounted counts c∗, we might describe a smooth- ing algorithm in terms of a relative discount dc, the ratio of the discounted counts to the original counts:
add-one
3.4 • SMOOTHING 41
 N+V c∗i =(ci+1) N
 discounting discount
ii
N+V
We can now turn c∗ into a probability P∗ by normalizing by N.

42 CHAPTER 3 • N-GRAM LANGUAGE MODELS
dc = c∗
Now that we have the intuition for the unigram case, let’s smooth our Berkeley Restaurant Project bigrams. Figure 3.5 shows the add-one smoothed counts for the bigrams in Fig. 3.1.
c
i want to eat chinese food lunch spend
  i 6 828 1 10 1 1 1 3 want 3 1 609 2 7 7 6 2 to 3 1 5 687 3 1 7 212 eat 1 1 3 1 17 3 43 1 chinese 2 1 1 1 1 83 2 1 food 16 1 16 1 2 5 1 1 lunch 3 1 1 1 1 2 1 1 spend 2 1 2 1 1 1 1 1
Figure 3.5
   Add-one smoothed bigram counts for eight of the words (out of V = 1446) in the Berkeley Restaurant Project corpus of 9332 sentences. Previously-zero counts are in gray.
Figure 3.6 shows the add-one smoothed probabilities for the bigrams in Fig. 3.2. Recall that normal bigram probabilities are computed by normalizing each row of counts by the unigram count:
P(wn|wn−1) = C(wn−1wn) (3.22) C(wn−1)
For add-one smoothed bigram counts, we need to augment the unigram count by the number of total word types in the vocabulary V :
 ∗ C(wn−1wn) + 1 C(wn−1wn) + 1
P (wn|wn−1) = 􏰐 = (3.23)
Laplace w (C(wn−1w)+1) C(wn−1)+V
Thus, each of the unigram counts given in the previous section will need to be
  augmented by V = 1446. The result is the smoothed bigram probabilities in Fig. 3.6.
i 0.0015 want 0.0013 to 0.00078 eat 0.00046 chinese 0.0012 food 0.0063 lunch 0.0017 spend 0.0012
0.21 0.00025 0.0025 0.00042 0.26 0.00084 0.00026 0.0013 0.18 0.00046 0.0014 0.00046 0.00062 0.00062 0.00062 0.00039 0.0063 0.00039 0.00056 0.00056 0.00056 0.00058 0.0012 0.00058
0.00025 0.00025 0.00025
0.0029 0.0029 0.0025 0.00078 0.00026 0.0018 0.0078 0.0014 0.02 0.00062 0.052 0.0012 0.00079 0.002 0.00039 0.00056 0.0011 0.00056 0.00058 0.00058 0.00058
0.00075 0.00084 0.055 0.00046 0.00062 0.00039 0.00056 0.00058
Figure 3.6
i want to eat chinese food lunch spend
     Add-one smoothed bigram probabilities for eight of the words (out of V = 1446) in the BeRP corpus of 9332 sentences. Previously-zero probabilities are in gray.
It is often convenient to reconstruct the count matrix so we can see how much a smoothing algorithm has changed the original counts. These adjusted counts can be computed by Eq. 3.24. Figure 3.7 shows the reconstructed counts.
c∗(wn−1wn) = [C(wn−1wn)+1]×C(wn−1) (3.24) C(wn−1)+V
 
add-k
Add-one reconstituted counts for eight words (of V = 1446) in the BeRP corpus of 9332 sentences. Previously-zero counts are in gray.
Note that add-one smoothing has made a very big change to the counts. C(want to) changed from 609 to 238! We can see this in probability space as well: P(to|want) decreases from .66 in the unsmoothed case to .26 in the smoothed case. Looking at the discount d (the ratio between new and old counts) shows us how strikingly the counts for each prefix word have been reduced; the discount for the bigram want to is .39, while the discount for Chinese food is .10, a factor of 10!
The sharp change in counts and probabilities occurs because too much probabil- ity mass is moved to all the zeros.
3.4.2 Add-k smoothing
One alternative to add-one smoothing is to move a bit less of the probability mass from the seen to the unseen events. Instead of adding 1 to each count, we add a frac- tional count k (.5? .05? .01?). This algorithm is therefore called add-k smoothing.
P∗ (wn|wn−1) = C(wn−1wn) + k (3.25) Add-k C(wn−1)+kV
Add-k smoothing requires that we have a method for choosing k; this can be done, for example, by optimizing on a devset. Although add-k is useful for some tasks (including text classification), it turns out that it still doesn’t work well for language modeling, generating counts with poor variances and often inappropriate discounts (Gale and Church, 1994).
3.4.3 Backoff and Interpolation
The discounting we have been discussing so far can help solve the problem of zero frequency n-grams. But there is an additional source of knowledge we can draw on. If we are trying to compute P(wn|wn−2wn−1) but we have no examples of a particular trigram wn−2wn−1wn, we can instead estimate its probability by using the bigram probability P(wn|wn−1). Similarly, if we don’t have counts to compute P(wn|wn−1), we can look to the unigram P(wn).
In other words, sometimes using less context is a good thing, helping to general- ize more for contexts that the model hasn’t learned much about. There are two ways to use this n-gram “hierarchy”. In backoff, we use the trigram if the evidence is sufficient, otherwise we use the bigram, otherwise the unigram. In other words, we only “back off” to a lower-order n-gram if we have zero evidence for a higher-order n-gram. By contrast, in interpolation, we always mix the probability estimates from all the n-gram estimators, weighing and combining the trigram, bigram, and unigram counts.
3.4 • SMOOTHING 43
i want to eat chinese food lunch spend
  i 3.8 527 want 1.2 0.39 to 1.9 0.63 eat 0.34 0.34 chinese 0.2 0.098 food 6.9 0.43 lunch 0.57 0.19 spend 0.32 0.16
0.64 6.4 0.64 238 0.78 2.7 3.1 430 1.9
1 0.34 5.8 0.098 0.098 0.098 6.9 0.43 0.86 0.19 0.19 0.19 0.32 0.16 0.16
0.64 0.64 1.9 2.7 2.3 0.78 0.63 4.4 133 1 15 0.34 8.2 0.2 0.098 2.2 0.43 0.43 0.38 0.19 0.19 0.16 0.16 0.16
Figure 3.7
    backoff interpolation

44
CHAPTER 3 • N-GRAM LANGUAGE MODELS
held-out
In a slightly more sophisticated version of linear interpolation, each λ weight is computed by conditioning on the context. This way, if we have particularly accurate counts for a particular bigram, we assume that the counts of the trigrams based on this bigram will be more trustworthy, so we can make the λs for those trigrams higher and thus give that trigram more weight in the interpolation. Equation 3.28 shows the equation for interpolation with context-conditioned weights:
Pˆ(wn|wn−2wn−1) = λ1(wn−2:n−1)P(wn|wn−2wn−1) +λ2 (wn−2:n−1 )P(wn |wn−1 )
+ λ3 (wn−2:n−1 )P(wn ) (3.28)
How are these λ values set? Both the simple interpolation and conditional inter- polation λ s are learned from a held-out corpus. A held-out corpus is an additional training corpus that we use to set hyperparameters like these λ values, by choosing the λ values that maximize the likelihood of the held-out corpus. That is, we fix the n-gram probabilities and then search for the λ values that—when plugged into Eq. 3.26—give us the highest probability of the held-out set. There are various ways to find this optimal set of λs. One way is to use the EM algorithm, an iterative learning algorithm that converges on locally optimal λ s (Jelinek and Mercer, 1980).
In a backoff n-gram model, if the n-gram we need has zero counts, we approxi- mate it by backing off to the (N-1)-gram. We continue backing off until we reach a history that has some counts.
In order for a backoff model to give a correct probability distribution, we have to discount the higher-order n-grams to save some probability mass for the lower order n-grams. Just as with add-one smoothing, if the higher-order n-grams aren’t discounted and we just used the undiscounted MLE probability, then as soon as we replaced an n-gram which has zero probability with a lower-order n-gram, we would be adding probability mass, and the total probability assigned to all possible strings by the language model would be greater than 1! In addition to this explicit discount factor, we’ll need a function α to distribute this probability mass to the lower order n-grams.
This kind of backoff with discounting is also called Katz backoff. In Katz back- off we rely on a discounted probability P∗ if we’ve seen this n-gram before (i.e., if we have non-zero counts). Otherwise, we recursively back off to the Katz probabil- ity for the shorter-history (N-1)-gram. The probability for a backoff n-gram PBO is
discount
Katz backoff
In simple linear interpolation, we combine different order n-grams by linearly in- terpolating all the models. Thus, we estimate the trigram probability P(wn|wn−2wn−1) by mixing together the unigram, bigram, and trigram probabilities, each weighted by a λ:
Pˆ(wn|wn−2wn−1) = λ1P(wn|wn−2wn−1) +λ2 P(wn |wn−1 )
+λ3 P(wn ) such that the λs sum to 1: 􏰑λi = 1
i
(3.26)
(3.27)

3.5 • KNESER-NEY SMOOTHING 45  P∗(wn|wn−N+1:n−1), if C(wn−N+1:n) > 0
thus computed as follows:
PBO(wn|wn−N+1:n−1) =  α(wn−N+1:n−1)PBO(wn|wn−N+2:n−1), otherwise. (3.29)
Good-Turing Katz backoff is often combined with a smoothing method called Good-Turing. The combined Good-Turing backoff algorithm involves quite detailed computation for estimating the Good-Turing smoothing and the P∗ and α values.
3.5 Kneser-Ney Smoothing
Kneser-Ney
One of the most commonly used and best performing n-gram smoothing methods is the interpolated Kneser-Ney algorithm (Kneser and Ney 1995, Chen and Good- man 1998).
Kneser-Ney has its roots in a method called absolute discounting. Recall that discounting of the counts for frequent n-grams is necessary to save some probability mass for the smoothing algorithm to distribute to the unseen n-grams.
To see this, we can use a clever idea from Church and Gale (1991). Consider an n-gram that has count 4. We need to discount this count by some amount. But how much should we discount it? Church and Gale’s clever idea was to look at a held-out corpus and just see what the count is for all those bigrams that had count 4 in the training set. They computed a bigram grammar from 22 million words of AP newswire and then checked the counts of each of these bigrams in another 22 million words. On average, a bigram that occurred 4 times in the first 22 million words occurred 3.23 times in the next 22 million words. Fig. 3.8 from Church and Gale (1991) shows these counts for bigrams with c from 0 to 9.
 Bigram count in training set
 Bigram count in heldout set
 0 1 2
 0.0000270 0.448 1.25
 3 4 5 6 7 8
 2.24 3.23 4.21 5.23 6.21 7.21
 9
 8.26
    Absolute discounting
Figure 3.8 For all bigrams in 22 million words of AP newswire of count 0, 1, 2,...,9, the counts of these bigrams in a held-out corpus also of 22 million words.
Notice in Fig. 3.8 that except for the held-out counts for 0 and 1, all the other bigram counts in the held-out set could be estimated pretty well by just subtracting 0.75 from the count in the training set! Absolute discounting formalizes this intu- ition by subtracting a fixed (absolute) discount d from each count. The intuition is that since we have good estimates already for the very high counts, a small discount d won’t affect them much. It will mainly modify the smaller counts, for which we

46 CHAPTER 3 • N-GRAM LANGUAGE MODELS
don’t necessarily trust the estimate anyway, and Fig. 3.8 suggests that in practice this discount is actually a good one for bigrams with counts 2 through 9. The equation for interpolated absolute discounting applied to bigrams:
C(wi−1wi) − d
PAbsoluteDiscounting(wi|wi−1) = 􏰐vC(wi−1 v) +λ(wi−1)P(wi) (3.30)
The first term is the discounted bigram, and the second term is the unigram with an interpolation weight λ . We could just set all the d values to .75, or we could keep a separate discount value of 0.5 for the bigrams with counts of 1.
Kneser-Ney discounting (Kneser and Ney, 1995) augments absolute discount- ing with a more sophisticated way to handle the lower-order unigram distribution. Consider the job of predicting the next word in this sentence, assuming we are inter- polating a bigram and a unigram model.
I can’t see without my reading   .
The word glasses seems much more likely to follow here than, say, the word Kong, so we’d like our unigram model to prefer glasses. But in fact it’s Kong that is more common, since Hong Kong is a very frequent word. A standard unigram model will assign Kong a higher probability than glasses. We would like to capture the intuition that although Kong is frequent, it is mainly only frequent in the phrase Hong Kong, that is, after the word Hong. The word glasses has a much wider distribution.
In other words, instead of P(w), which answers the question “How likely is w?”, we’d like to create a unigram model that we might call PCONTINUATION, which answers the question “How likely is w to appear as a novel continuation?”. How can we estimate this probability of seeing the word w as a novel continuation, in a new unseen context? The Kneser-Ney intuition is to base our estimate of PCONTINUATION on the number of different contexts word w has appeared in, that is, the number of bigram types it completes. Every bigram type was a novel continuation the first time it was seen. We hypothesize that words that have appeared in more contexts in the past are more likely to appear in some new context as well. The number of times a word w appears as a novel continuation can be expressed as:
PCONTINUATION(w) ∝ |{v : C(vw) > 0}| (3.31) To turn this count into a probability, we normalize by the total number of word
 bigram types. In summary:
PCONTINUATION(w) = |{v : C(vw) > 0}| (3.32)
 |{(u′,w′):C(u′w′)>0}|
An equivalent formulation based on a different metaphor is to use the number of
word types seen to precede w (Eq. 3.31 repeated):
PCONTINUATION(w) ∝ |{v : C(vw) > 0}| (3.33)
normalized by the number of words preceding all words, as follows: PCONTINUATION(w) = 􏰐|{v : C(vw) > 0}| (3.34)
A frequent word (Kong) occurring in only one context (Hong) will have a low continuation probability.
 w′ |{v : C(vw′) > 0}|

Interpolated Kneser-Ney
3.6 • HUGE LANGUAGE MODELS AND STUPID BACKOFF 47 The final equation for Interpolated Kneser-Ney smoothing for bigrams is then:
PKN(wi|wi−1) = max(C(wi−1wi)−d,0) +λ(wi−1)PCONTINUATION(wi) (3.35) C(wi−1)
The λ is a normalizing constant that is used to distribute the probability mass we’ve discounted.:
λ(wi−1)= 􏰐 d |{w:C(wi−1w)>0}| (3.36) vC(wi−1v)
The first term, 􏰐 d , is the normalized discount. The second term, vC(wi−1v)
|{w : C(wi−1w) > 0}|, is the number of word types that can follow wi−1 or, equiva- lently, the number of word types that we discounted; in other words, the number of times we applied the normalized discount.
The general recursive formulation is as follows: max(cKN(wi−n+1:i)−d,0)
   PKN(wi|wi−n+1:i−1) = 􏰐v cKN(wi−n+1:i−1 v) +λ(wi−n+1:i−1)PKN(wi|wi−n+2:i−1) (3.37)
 where the definition of the count cKN depends on whether we are counting the highest-order n-gram being interpolated (for example trigram if we are interpolating trigram, bigram, and unigram) or one of the lower-order n-grams (bigram or unigram if we are interpolating trigram, bigram, and unigram):
cKN (·) = 􏰊 count(·) for the highest order (3.38) continuationcount(·) for lower orders
The continuation count is the number of unique single word contexts for ·.
At the termination of the recursion, unigrams are interpolated with the uniform
distribution, where the parameter ε is the empty string: max(cKN(w)−d,0) 1
PKN(w) = 􏰐w′ cKN(w′) +λ(ε)V (3.39)
 modified Kneser-Ney
If we want to include an unknown word <UNK>, it’s just included as a regular vo-
cabulary entry with count zero, and hence its probability will be a lambda-weighted
uniform distribution λ (ε) . V
The best performing version of Kneser-Ney smoothing is called modified Kneser- Ney smoothing, and is due to Chen and Goodman (1998). Rather than use a single fixed discount d, modified Kneser-Ney uses three different discounts d1, d2, and d3+ for n-grams with counts of 1, 2 and three or more, respectively. See Chen and Goodman (1998, p. 19) or Heafield et al. (2013) for the details.
3.6 Huge Language Models and Stupid Backoff
By using text from the web or other enormous collections, it is possible to build extremely large language models. The Web 1 Trillion 5-gram corpus released by Google includes various large sets of n-grams, including 1-grams through 5-grams from all the five-word sequences that appear in at least 40 distinct books from

48
CHAPTER 3 • N-GRAM LANGUAGE MODELS
4-gram   Count
serve as the incoming 92
  serve as the incubator 99
 serve as the independent 794
 serve as the index 223
 serve as the indication 72
 serve as the indicator 120
 serve as the indicators 45
 Bloom filters
1,024,908,267,229 words of text from publicly accessible Web pages in English (Franz and Brants, 2006). Google has also released Google Books Ngrams cor- pora with n-grams drawn from their book collections, including another 800 billion tokens of of n-grams from Chinese, English, French, German, Hebrew, Italian, Rus- sian, and Spanish (Lin et al., 2012a). Smaller but more carefully curated n-gram cor- pora for English include the million most frequent n-grams drawn from the COCA (Corpus of Contemporary American English) 1 billion word corpus of American English (Davies, 2020). COCA is a balanced corpora, meaning that it has roughly equal numbers of words from different genres: web, newspapers, spoken conversa- tion transcripts, fiction, and so on, drawn from the period 1990-2019, and has the context of each n-gram as well as labels for genre and provenance).
Some example 4-grams from the Google Web corpus:
Efficiency considerations are important when building language models that use such large sets of n-grams. Rather than store each word as a string, it is generally represented in memory as a 64-bit hash number, with the words themselves stored on disk. Probabilities are generally quantized using only 4-8 bits (instead of 8-byte floats), and n-grams are stored in reverse tries.
N-grams can also be shrunk by pruning, for example only storing n-grams with counts greater than some threshold (such as the count threshold of 40 used for the Google n-gram release) or using entropy to prune less-important n-grams (Stolcke, 1998). Another option is to build approximate language models using techniques like Bloom filters (Talbot and Osborne 2007, Church et al. 2007). Finally, effi- cient language model toolkits like KenLM (Heafield 2011, Heafield et al. 2013) use sorted arrays, efficiently combine probabilities and backoffs in a single value, and use merge sorts to efficiently build the probability tables in a minimal number of passes through a large corpus.
Although with these toolkits it is possible to build web-scale language models using full Kneser-Ney smoothing, Brants et al. (2007) show that with very large lan- guage models a much simpler algorithm may be sufficient. The algorithm is called stupid backoff. Stupid backoff gives up the idea of trying to make the language model a true probability distribution. There is no discounting of the higher-order probabilities. If a higher-order n-gram has a zero count, we simply backoff to a lower order n-gram, weighed by a fixed (context-independent) weight. This algo- rithm does not produce a probability distribution, so we’ll follow Brants et al. (2007) in referring to it as S:
stupid backoff
S(w |wi−1 ) = i i−k+1
 count(wi−k+1) count(wi−1 )
if count(wi i−k+1
otherwise
) > 0
(3.40)
 i−k+1
 λS(wi|wi−1 )
i−k+2
The backoff terminates in the unigram, which has probability S(w) = count(w) . Brants et al. (2007) find that a value of 0.4 worked well for λ . N
 
3.7
3.7 • ADVANCED: PERPLEXITY’S RELATION TO ENTROPY 49 Advanced: Perplexity’s Relation to Entropy
Entropy
We introduced perplexity in Section 3.2.1 as a way to evaluate n-gram models on a test set. A better n-gram model is one that assigns a higher probability to the test data, and perplexity is a normalized version of the probability of the test set. The perplexity measure actually arises from the information-theoretic concept of cross-entropy, which explains otherwise mysterious properties of perplexity (why the inverse probability, for example?) and its relationship to entropy. Entropy is a measure of information. Given a random variable X ranging over whatever we are predicting (words, letters, parts of speech, the set of which we’ll call χ) and with a particular probability function, call it p(x), the entropy of the random variable X is:
H(X) = −􏰑 p(x)log2 p(x) (3.41) x∈χ
The log can, in principle, be computed in any base. If we use log base 2, the resulting value of entropy will be measured in bits.
One intuitive way to think about entropy is as a lower bound on the number of bits it would take to encode a certain decision or piece of information in the optimal coding scheme.
Consider an example from the standard information theory textbook Cover and Thomas (1991). Imagine that we want to place a bet on a horse race but it is too far to go all the way to Yonkers Racetrack, so we’d like to send a short message to the bookie to tell him which of the eight horses to bet on. One way to encode this message is just to use the binary representation of the horse’s number as the code; thus, horse 1 would be 001, horse 2 010, horse 3 011, and so on, with horse 8 coded as 000. If we spend the whole day betting and each horse is coded with 3 bits, on average we would be sending 3 bits per race.
Can we do better? Suppose that the spread is the actual distribution of the bets placed and that we represent it as the prior probability of each horse as follows:
1
64 1
64 1
64 1
64
The entropy of the random variable X that ranges over horses gives us a lower bound on the number of bits and is
(3.42)
 Horse 1 Horse 2 Horse 3 Horse 4
 1
2 1
4 1
8 1
16
Horse 5 Horse 6 Horse 7 Horse 8
  􏰑i=8 i=1
H(X) = −
= −1log1−1log1−1log1−1 log 1 −4(1 log 1 )
= 2bits
p(i)logp(i)
2 2 4 4 8 8 16 16 64 64
A code that averages 2 bits per race can be built with short encodings for more probable horses, and longer encodings for less probable horses. For example, we could encode the most likely horse with the code 0, and the remaining horses as 10, then 110, 1110, 111100, 111101, 111110, and 111111.

50
CHAPTER 3 • N-GRAM LANGUAGE MODELS
entropy rate
What if the horses are equally likely? We saw above that if we used an equal- length binary code for the horse numbers, each horse took 3 bits to code, so the average was 3. Is the entropy the same? In this case each horse would have a probability of 18 . The entropy of the choice of horses is then
H(X) = −􏰑i=8 18 log 81 = −log 18 = 3 bits (3.43) i=1
Until now we have been computing the entropy of a single variable. But most of what we will use entropy for involves sequences. For a grammar, for example, we willbecomputingtheentropyofsomesequenceofwordsW ={w0,w1,w2,...,wn}. One way to do this is to have a variable that ranges over sequences of words. For example we can compute the entropy of a random variable that ranges over all finite sequences of words of length n in some language L as follows:
H(w1,w2,...,wn) = − 􏰑 p(W1n)log p(W1n) (3.44) W 1n ∈ L
We could define the entropy rate (we could also think of this as the per-word entropy) as the entropy of this sequence divided by the number of words:
n1H(W1n) = −1n 􏰑 p(W1n)log p(W1n) (3.45) W 1n ∈ L
But to measure the true entropy of a language, we need to consider sequences of infinite length. If we think of a language as a stochastic process L that produces a sequence of words, and allow W to represent the sequence of words w1 , . . . , wn , then L’s entropy rate H(L) is defined as
H(L) = lim 1H(w1,w2,...,wn) n→∞ n 1 􏰑
= −lim p(w1,...,wn)logp(w1,...,wn) (3.46) n→∞ n W ∈L
The Shannon-McMillan-Breiman theorem (Algoet and Cover 1988, Cover and Thomas 1991) states that if the language is regular in certain ways (to be exact, if it is both stationary and ergodic),
H(L) = lim −1 log p(w1w2 ...wn) (3.47) n→∞ n
That is, we can take a single sequence that is long enough instead of summing over all possible sequences. The intuition of the Shannon-McMillan-Breiman the- orem is that a long-enough sequence of words will contain in it many other shorter sequences and that each of these shorter sequences will reoccur in the longer se- quence according to their probabilities.
A stochastic process is said to be stationary if the probabilities it assigns to a sequence are invariant with respect to shifts in the time index. In other words, the probability distribution for words at time t is the same as the probability distribution at time t + 1. Markov models, and hence n-grams, are stationary. For example, in a bigram, Pi is dependent only on Pi−1. So if we shift our time index by x, Pi+x is still dependent on Pi+x−1. But natural language is not stationary, since as we show
Stationary

cross-entropy
3.7 • ADVANCED: PERPLEXITY’S RELATION TO ENTROPY 51
in Chapter 12, the probability of upcoming words can be dependent on events that were arbitrarily distant and time dependent. Thus, our statistical models only give an approximation to the correct distributions and entropies of natural language.
To summarize, by making some incorrect but convenient simplifying assump- tions, we can compute the entropy of some stochastic process by taking a very long sample of the output and computing its average log probability.
Now we are ready to introduce cross-entropy. The cross-entropy is useful when we don’t know the actual probability distribution p that generated some data. It allows us to use some m, which is a model of p (i.e., an approximation to p). The cross-entropy of m on p is defined by
H(p,m) = lim −1 􏰑 p(w1,...,wn)logm(w1,...,wn) (3.48) n→∞ nW∈L
That is, we draw sequences according to the probability distribution p, but sum the log of their probabilities according to m.
Again, following the Shannon-McMillan-Breiman theorem, for a stationary er- godic process:
H(p,m) = lim −1 logm(w1w2 ...wn) (3.49) n→∞ n
This means that, as for entropy, we can estimate the cross-entropy of a model m on some distribution p by taking a single sequence that is long enough instead of summing over all possible sequences.
What makes the cross-entropy useful is that the cross-entropy H(p,m) is an up- per bound on the entropy H(p). For any model m:
H(p) ≤ H(p,m) (3.50)
This means that we can use some simplified model m to help estimate the true en- tropy of a sequence of symbols drawn according to probability p. The more accurate m is, the closer the cross-entropy H(p,m) will be to the true entropy H(p). Thus, the difference between H(p,m) and H(p) is a measure of how accurate a model is. Between two models m1 and m2, the more accurate model will be the one with the lower cross-entropy. (The cross-entropy can never be lower than the true entropy, so a model cannot err by underestimating the true entropy.)
We are finally ready to see the relation between perplexity and cross-entropy as we saw it in Eq. 3.49. Cross-entropy is defined in the limit as the length of the observed word sequence goes to infinity. We will need an approximation to cross- entropy, relying on a (sufficiently long) sequence of fixed length. This approxima- tion to the cross-entropy of a model M = P(wi|wi−N+1...wi−1) on a sequence of words W is
H(W) = −N1 logP(w1w2 ...wN) (3.51)
The perplexity of a model P on a sequence of words W is now formally defined as the exp of this cross-entropy:
perplexity

52 CHAPTER 3
i=1 P(wi|w1 ...wi−1)
This chapter introduced language modeling and the n-gram, one of the most widely
used tools in language processing.
• Language models offer a way to assign a probability to a sentence or other sequence of words, and to predict a word from preceding words.
• n-grams are Markov models that estimate words from a fixed window of pre- vious words. n-gram probabilities can be estimated by counting in a corpus and normalizing (the maximum likelihood estimate).
• n-gram language models are evaluated extrinsically in some task, or intrinsi- cally using perplexity.
• The perplexity of a test set according to a language model is the geometric mean of the inverse test set probability computed by the model.
• Smoothingalgorithmsprovideamoresophisticatedwaytoestimatetheprob- ability of n-grams. Commonly used smoothing algorithms for n-grams rely on lower-order n-gram counts through backoff or interpolation.
• Bothbackoffandinterpolationrequirediscountingtocreateaprobabilitydis- tribution.
• Kneser-Ney smoothing makes use of the probability of a word being a novel continuation. The interpolated Kneser-Ney smoothing algorithm mixes a discounted probability with a lower-order continuation probability.
Bibliographical and Historical Notes
The underlying mathematics of the n-gram was first proposed by Markov (1913), who used what are now called Markov chains (bigrams and trigrams) to predict whether an upcoming letter in Pushkin’s Eugene Onegin would be a vowel or a con- sonant. Markov classified 20,000 letters as V or C and computed the bigram and trigram probability that a given letter would be a vowel given the previous one or two letters. Shannon (1948) applied n-grams to compute approximations to English word sequences. Based on Shannon’s work, Markov models were commonly used in engineering, linguistic, and psychological work on modeling word sequences by the 1950s. In a series of extremely influential papers starting with Chomsky (1956) and including Chomsky (1957) and Miller and Chomsky (1963), Noam Chomsky argued that “finite-state Markov processes”, while a possibly useful engineering heuristic,
• N-GRAM LANGUAGE MODELS
Perplexity(W) = 2H(W)
= P􏰗(w1w2...wN)−N1
 1 􏰚P(w1w2 ...wN)
=N
= 􏰙􏰙􏰘N 􏰒N 1
(3.52)
   3.8 Summary

class-based n-gram
EXERCISES 53
were incapable of being a complete cognitive model of human grammatical knowl- edge. These arguments led many linguists and computational linguists to ignore work in statistical modeling for decades.
The resurgence of n-gram models came from Jelinek and colleagues at the IBM Thomas J. Watson Research Center, who were influenced by Shannon, and Baker
at CMU, who was influenced by the work of Baum and colleagues. Independently
these two labs successfully used n-grams in their speech recognition systems (Baker 1975b, Jelinek 1976, Baker 1975a, Bahl et al. 1983, Jelinek 1990).
Add-one smoothing derives from Laplace’s 1812 law of succession and was first applied as an engineering solution to the zero frequency problem by Jeffreys (1948) based on an earlier Add-K suggestion by Johnson (1932). Problems with the add- one algorithm are summarized in Gale and Church (1994).
A wide variety of different language modeling and smoothing techniques were proposed in the 80s and 90s, including Good-Turing discounting—first applied to the n-gram smoothing at IBM by Katz (Na ́das 1984, Church and Gale 1991)— Witten-Bell discounting (Witten and Bell, 1991), and varieties of class-based n- gram models that used information about word classes.
Starting in the late 1990s, Chen and Goodman performed a number of carefully controlled experiments comparing different discounting algorithms, cache models, class-based models, and other language model parameters (Chen and Goodman 1999, Goodman 2006, inter alia). They showed the advantages of Modified Interpolated Kneser-Ney, which became the standard baseline for n-gram language modeling, especially because they showed that caches and class-based models provided only minor additional improvement. These papers are recommended for any reader with further interest in n-gram language modeling. SRILM (Stolcke, 2002) and KenLM (Heafield 2011, Heafield et al. 2013) are publicly available toolkits for building n- gram language models.
Modern language modeling is more commonly done with neural network lan- guage models, which solve the major problems with n-grams: the number of param- eters increases exponentially as the n-gram order increases, and n-grams have no way to generalize from training to test set. Neural language models instead project words into a continuous space in which words with similar contexts have simi- lar representations. We’ll introduce both feedforward language models (Bengio et al. 2006, Schwenk 2007) in Chapter 7, and recurrent language models (Mikolov, 2012) in Chapter 9.
Exercises
3.1 Write out the equation for trigram probability estimation (modifying Eq. 3.11). Now write out all the non-zero trigram probabilities for the I am Sam corpus on page 32.
3.2 Calculate the probability of the sentence i want chinese food. Give two probabilities, one using Fig. 3.2 and the ‘useful probabilities’ just below it on page 34, and another using the add-1 smoothed table in Fig. 3.6. Assume the additional add-1 smoothed probabilities P(i|<s>) = 0.19 and P(</s>|food) = 0.40.
3.3 Which of the two probabilities you computed in the previous exercise is higher, unsmoothed or smoothed? Explain why.
3.4 We are given the following corpus, modified from the one in the chapter:

54 CHAPTER 3 •
3.5
N-GRAM LANGUAGE MODELS
<s> I am Sam </s>
<s> Sam I am </s>
<s> I am Sam </s>
<s> I do not like green eggs and Sam </s>
Using a bigram language model with add-one smoothing, what is P(Sam | am)? Include <s> and </s> in your counts just like any other token.
Suppose we didn’t use the end-symbol </s>. Train an unsmoothed bigram grammar on the following training corpus without using the end-symbol </s>:
  <s> a b
  <s> b b
  <s> b a
  <s> a a
Demonstrate that your bigram model does not assign a single probability dis- tribution across all sentence lengths by showing that the sum of the probability of the four possible 2 word sentences over the alphabet {a,b} is 1.0, and the sum of the probability of all possible 3 word sentences over the alphabet {a,b} is also 1.0.
Suppose we train a trigram language model with add-one smoothing on a given corpus. The corpus contains V word types. Express a formula for esti- mating P(w3|w1,w2), where w3 is a word which follows the bigram (w1,w2), in terms of various N-gram counts and V. Use the notation c(w1,w2,w3) to denote the number of times that trigram (w1,w2,w3) occurs in the corpus, and so on for bigrams and unigrams.
We are given the following corpus, modified from the one in the chapter:
<s> I am Sam </s>
<s> Sam I am </s>
<s> I am Sam </s>
<s> I do not like green eggs and Sam </s>
If we use linear interpolation smoothing between a maximum-likelihood bi- gram model and a maximum-likelihood unigram model with λ1 = 21 and λ2 = 12 , what is P(Sam|am)? Include <s> and </s> in your counts just like any
other token.
Write a program to compute unsmoothed unigrams and bigrams.
Run your n-gram program on two different small corpora of your choice (you might use email text or newsgroups). Now compare the statistics of the two corpora. What are the differences in the most common unigrams between the two? How about interesting differences in bigrams?
Add an option to your program to generate random sentences.
Add an option to your program to compute the perplexity of a test set.
You are given a training set of 100 numbers that consists of 91 zeros and 1 eachoftheotherdigits1-9. Nowweseethefollowingtestset: 00000300 0 0. What is the unigram perplexity?
3.6
3.7
3.8 3.9
3.10 3.11 3.12

 CHAPTER
4
Naive Bayes and Sentiment Classification
Classification lies at the heart of both human and machine intelligence. Deciding what letter, word, or image has been presented to our senses, recognizing faces or voices, sorting mail, assigning grades to homeworks; these are all examples of assigning a category to an input. The potential challenges of this task are highlighted by the fabulist Jorge Luis Borges (1964), who imagined classifying animals into:
(a) those that belong to the Emperor, (b) embalmed ones, (c) those that are trained, (d) suckling pigs, (e) mermaids, (f) fabulous ones, (g) stray dogs, (h) those that are included in this classification, (i) those that tremble as if they were mad, (j) innumerable ones, (k) those drawn with a very fine camel’s hair brush, (l) others, (m) those that have just broken a flower vase, (n) those that resemble flies from a distance.
Many language processing tasks involve classification, although luckily our classes are much easier to define than those of Borges. In this chapter we introduce the naive Bayes algorithm and apply it to text categorization, the task of assigning a label or category to an entire text or document.
We focus on one common text categorization task, sentiment analysis, the ex- traction of sentiment, the positive or negative orientation that a writer expresses toward some object. A review of a movie, book, or product on the web expresses the author’s sentiment toward the product, while an editorial or political text expresses sentiment toward a candidate or political action. Extracting consumer or public sen- timent is thus relevant for fields from marketing to politics.
The simplest version of sentiment analysis is a binary classification task, and the words of the review provide excellent cues. Consider, for example, the follow- ing phrases extracted from positive and negative reviews of movies and restaurants. Words like great, richly, awesome, and pathetic, and awful and ridiculously are very informative cues:
+ ...zany characters and richly applied satire, and some great plot twists − It was pathetic. The worst part about it was the boxing scenes...
+ ...awesome caramel sauce and sweet toasty almonds. I love this place! − ...awful pizza and ridiculously overpriced...
Spam detection is another important commercial application, the binary clas- sification task of assigning an email to one of the two classes spam or not-spam. Many lexical and other features can be used to perform this classification. For ex- ample you might quite reasonably be suspicious of an email containing phrases like “online pharmaceutical” or “WITHOUT ANY COST” or “Dear Winner”.
Another thing we might want to know about a text is the language it’s written in. Texts on social media, for example, can be in any number of languages and we’ll need to apply different processing. The task of language id is thus the first step in most language processing pipelines. Related text classification tasks like au- thorship attribution— determining a text’s author— are also relevant to the digital humanities, social sciences, and forensic linguistics.
text categorization
sentiment analysis
spam detection
language id
authorship attribution

56
CHAPTER 4 • NAIVE BAYES AND SENTIMENT CLASSIFICATION
4.1
supervised machine learning
naive Bayes classifier
In this section we introduce the multinomial naive Bayes classifier, so called be- cause it is a Bayesian classifier that makes a simplifying (naive) assumption about
Finally, one of the oldest tasks in text classification is assigning a library sub- ject category or topic label to a text. Deciding whether a research paper concerns epidemiology or instead, perhaps, embryology, is an important component of infor- mation retrieval. Various sets of subject categories exist, such as the MeSH (Medical Subject Headings) thesaurus. In fact, as we will see, subject category classification is the task for which the naive Bayes algorithm was invented in 1961.
Classification is essential for tasks below the level of the document as well. We’ve already seen period disambiguation (deciding if a period is the end of a sen- tence or part of a word), and word tokenization (deciding if a character should be a word boundary). Even language modeling can be viewed as classification: each word can be thought of as a class, and so predicting the next word is classifying the context-so-far into a class for each next word. A part-of-speech tagger (Chapter 8) classifies each occurrence of a word in a sentence as, e.g., a noun or a verb.
The goal of classification is to take a single observation, extract some useful features, and thereby classify the observation into one of a set of discrete classes. One method for classifying text is to use handwritten rules. There are many areas of language processing where handwritten rule-based classifiers constitute a state-of- the-art system, or at least part of it.
Rules can be fragile, however, as situations or data change over time, and for some tasks humans aren’t necessarily good at coming up with the rules. Most cases of classification in language processing are instead done via supervised machine learning, and this will be the subject of the remainder of this chapter. In supervised learning, we have a data set of input observations, each associated with some correct output (a ‘supervision signal’). The goal of the algorithm is to learn how to map from a new observation to a correct output.
Formally, the task of supervised classification is to take an input x and a fixed set of output classes Y = y1,y2,...,yM and return a predicted class y ∈ Y. For text classification, we’ll sometimes talk about c (for “class”) instead of y as our output variable, and d (for “document”) instead of x as our input variable. In the supervised situation we have a training set of N documents that have each been hand-labeled with a class: (d1,c1),....,(dN,cN). Our goal is to learn a classifier that is capable of mapping from a new document d to its correct class c ∈ C. A probabilistic classifier additionally will tell us the probability of the observation being in the class. This full distribution over the classes can be useful information for downstream decisions; avoiding making discrete decisions early on can be useful when combining systems.
Many kinds of machine learning algorithms are used to build classifiers. This chapter introduces naive Bayes; the following one introduces logistic regression. These exemplify two ways of doing classification. Generative classifiers like naive Bayes build a model of how a class could generate some input data. Given an ob- servation, they return the class most likely to have generated the observation. Dis- criminative classifiers like logistic regression instead learn what features from the input are most useful to discriminate between the different possible classes. While discriminative systems are often more accurate and hence more commonly used, generative classifiers still have a role.
Naive Bayes Classifiers

bag-of-words
4.1 • NAIVE BAYES CLASSIFIERS 57
how the features interact.
The intuition of the classifier is shown in Fig. 4.1. We represent a text document
as if it were a bag-of-words, that is, an unordered set of words with their position ignored, keeping only their frequency in the document. In the example in the figure, instead of representing the word order in all the phrases like “I love this movie” and “I would recommend it”, we simply note that the word I occurred 5 times in the entire excerpt, the word it 6 times, the words love, recommend, and movie once, and so on.
  I love this movie! It's sweet, but with satirical humor. The dialogue is great and the adventure scenes are fun... It manages to be whimsical and romantic while laughing at the conventions of the fairy tale genre. I would recommend it to just about anyone. I've seen it several times, and I'm always happy to see it again whenever I have a friend who hasn't seen it yet!
   fairy always love to it it whimsical it I
it 6 I5 the 4 to 3 and 3 seen 2 yet 1 would 1 whimsical 1 times 1 sweet 1 satirical 1 adventure 1 genre 1 fairy 1 humor 1 have 1 great 1 ......
and seen are anyone friend dialogue
happy recommend
adventure satirical whosweet of movie
 it it I but to romantic I
several yet humor the again it the
seen would
to scenes I the manages
fun I the timesand
and about whenever have
conventions with
while
  Figure 4.1
Intuition of the multinomial naive Bayes classifier applied to a movie review. The position of the words is ignored (the bag of words assumption) and we make use of the frequency of each word.
Naive Bayes is a probabilistic classifier, meaning that for a document d, out of all classes c ∈ C the classifier returns the class cˆ which has the maximum posterior ˆ probability given the document. In Eq. 4.1 we use the hat notation ˆ to mean “our
 Bayesian inference
This idea of Bayesian inference has been known since the work of Bayes (1763), and was first applied to text classification by Mosteller and Wallace (1964). The intuition of Bayesian classification is to use Bayes’ rule to transform Eq. 4.1 into other probabilities that have some useful properties. Bayes’ rule is presented in Eq. 4.2; it gives us a way to break down any conditional probability P(x|y) into three other probabilities:
estimate of the correct class”.
cˆ = argmaxP(c|d) (4.1) c∈C
P(x|y) = P(y|x)P(x) P(y)
We can then substitute Eq. 4.2 into Eq. 4.1 to get Eq. 4.3:
cˆ = argmaxP(c|d) = argmax P(d|c)P(c) c∈C c∈C P(d)
(4.2)
(4.3)
  
58
CHAPTER 4 • NAIVE BAYES AND SENTIMENT CLASSIFICATION
We can conveniently simplify Eq. 4.3 by dropping the denominator P(d). This
 prior probability
likelihood
is possible because we will be computing P(d|c)P(c) for each possible class. But P(d) P(d)
doesn’t change for each class; we are always asking about the most likely class for the same document d, which must have the same probability P(d). Thus, we can choose the class that maximizes this simpler formula:
cˆ = argmaxP(c|d) = argmaxP(d|c)P(c) (4.4) c∈C c∈C
We call Naive Bayes a generative model because we can read Eq. 4.4 as stating a kind of implicit assumption about how a document is generated: first a class is sampled from P(c), and then the words are generated by sampling from P(d|c). (In fact we could imagine generating artificial documents, or at least their word counts, by following this process). We’ll say more about this intuition of generative models in Chapter 5.
To return to classification: we compute the most probable class cˆ given some document d by choosing the class which has the highest product of two probabilities: the prior probability of the class P(c) and the likelihood of the document P(d|c):
naive Bayes assumption
Unfortunately, Eq. 4.6 is still too hard to compute directly: without some sim- plifying assumptions, estimating the probability of every possible combination of features (for example, every possible set of words and positions) would require huge numbers of parameters and impossibly large training sets. Naive Bayes classifiers therefore make two simplifying assumptions.
The first is the bag of words assumption discussed intuitively above: we assume position doesn’t matter, and that the word “love” has the same effect on classification whether it occurs as the 1st, 20th, or last word in the document. Thus we assume that the features f1, f2,..., fn only encode word identity and not position.
The second is commonly called the naive Bayes assumption: this is the condi- tional independence assumption that the probabilities P( fi|c) are independent given the class c and hence can be ‘naively’ multiplied as follows:
P(f1, f2,...., fn|c) = P(f1|c)·P(f2|c)·...·P(fn|c) (4.7) The final equation for the class chosen by a naive Bayes classifier is thus:
cNB = argmaxP(c)􏰒P(f|c) (4.8) c∈C f∈F
To apply the naive Bayes classifier to text, we need to consider word positions, by simply walking an index through every word position in the document:
positions ← allwordpositio􏰒nsintestdocument
cN B = argmax P(c) P(wi |c) (4.9) c∈C i∈ posit ions
likelihood prior
􏰛 􏰞􏰝 􏰜 􏰛􏰞􏰝􏰜
cˆ = argmax P(d|c) P(c) (4.5) c∈C
Without loss of generalization, we can represent a document d as a set of features f1, f2,..., fn:
prior
􏰛 􏰞􏰝 􏰜 􏰛􏰞􏰝􏰜
cˆ=argmaxP(f1,f2,....,fn|c) P(c) c∈C
likelihood
(4.6)

linear classifiers
4.2 • TRAINING THE NAIVE BAYES CLASSIFIER 59
Naive Bayes calculations, like calculations for language modeling, are done in log space, to avoid underflow and increase speed. Thus Eq. 4.9 is generally instead expressed as
cN B = argmax log P(c) + 􏰑 log P(wi |c) (4.10) c∈C i∈ posit ions
By considering features in log space, Eq. 4.10 computes the predicted class as a lin- ear function of input features. Classifiers that use a linear combination of the inputs to make a classification decision —like naive Bayes and also logistic regression— are called linear classifiers.
4.2 Training the Naive Bayes Classifier
How can we learn the probabilities P(c) and P(fi|c)? Let’s first consider the maxi- mum likelihood estimate. We’ll simply use the frequencies in the data. For the class prior P(c) we ask what percentage of the documents in our training set are in each class c. Let Nc be the number of documents in our training data with class c and Ndoc be the total number of documents. Then:
Pˆ(c) = Nc (4.11) Ndoc
To learn the probability P( fi|c), we’ll assume a feature is just the existence of a word in the document’s bag of words, and so we’ll want P(wi|c), which we compute as the fraction of times the word wi appears among all words in all documents of topic c. We first concatenate all documents with category c into one big “category c” text. Then we use the frequency of wi in this concatenated document to give a maximum likelihood estimate of the probability:
Pˆ(wi|c) = 􏰐count(wi,c) (4.12) w∈V count(w,c)
Here the vocabulary V consists of the union of all the word types in all classes, not just the words in one class c.
There is a problem, however, with maximum likelihood training. Imagine we are trying to estimate the likelihood of the word “fantastic” given class positive, but suppose there are no training documents that both contain the word “fantastic” and are classified as positive. Perhaps the word “fantastic” happens to occur (sarcasti- cally?) in the class negative. In such a case the probability for this feature will be zero:
ˆ count (“fantastic”, positive) P(“fantastic”|positive) = 􏰐w∈V count (w, positive) = 0 (4.13)
But since naive Bayes naively multiplies all the feature likelihoods together, zero probabilities in the likelihood term for any class will cause the probability of the class to be zero, no matter the other evidence!
The simplest solution is the add-one (Laplace) smoothing introduced in Chap- ter 3. While Laplace smoothing is usually replaced by more sophisticated smoothing
  
60 CHAPTER 4 • NAIVE BAYES AND SENTIMENT CLASSIFICATION
algorithms in language modeling, it is commonly used in naive Bayes text catego-
rization:
ˆ count(wi,c)+1 count(wi,c)+1
P(wi |c) = 􏰐w∈V (count (w, c) + 1) = 􏰀􏰐w∈V count (w, c)􏰁 + |V | (4.14)
  unknown word stop words
Note once again that it is crucial that the vocabulary V consists of the union of all the word types in all classes, not just the words in one class c (try to convince yourself why this must be true; see the exercise at the end of the chapter).
What do we do about words that occur in our test data but are not in our vocab- ulary at all because they did not occur in any training document in any class? The solution for such unknown words is to ignore them—remove them from the test document and not include any probability for them at all.
Finally, some systems choose to completely ignore another class of words: stop words, very frequent words like the and a. This can be done by sorting the vocabu- lary by frequency in the training set, and defining the top 10–100 vocabulary entries as stop words, or alternatively by using one of the many predefined stop word list available online. Then every instance of these stop words are simply removed from both training and test documents as if they had never occurred. In most text classi- fication applications, however, using a stop word list doesn’t improve performance, and so it is more common to make use of the entire vocabulary and not use a stop word list.
Fig. 4.2 shows the final algorithm.
   function TRAIN NAIVE BAYES(D, C) returns log P(c) and log P(w|c)
for each class c ∈ C # Calculate P(c) terms Ndoc = number of documents in D
Nc = number of documents from D in class c
logprior[c]← log Nc Ndoc
V←vocabulary of D
bigdoc[c]←append(d) for d ∈ D with class c
for each word w in V # Calculate P(w|c) terms
count(w,c)←# of occurrences of w in bigdoc[c]
loglikelihood[w,c]← log 􏰐 count(w,c) + 1 return logprior, loglikelihood, V w′ in V (count (w′,c) + 1)
function TEST NAIVE BAYES(testdoc, logprior, loglikelihood, C, V) returns best c
for each class c ∈ C
sum[c]← logprior[c]
for each position i in testdoc
word ← testdoc[i] if word ∈ V
sum[c]←sum[c]+ loglikelihood[word,c] return argmaxc sum[c]
  Figure 4.2
 The naive Bayes algorithm, using add-1 smoothing. To use add-α smoothing instead, change the +1 to +α for loglikelihood counts in training.

4.3 Worked example
Let’s walk through an example of training and testing naive Bayes with add-one smoothing. We’ll use a sentiment analysis domain with the two classes positive (+) and negative (-), and take the following miniature training and test documents simplified from actual movie reviews.
?
The prior P(c) for the two classes is computed via Eq. 4.11 as Nc :
P(−) = 53 P(+) = 25
Training
Cat
- - - + +
1 + 1 14+20 1+1 14+20 0 + 1 14+20
0 + 1 9+20
P(“predictable”|−) = P(“no”|−) = P(“fun”|−) =
P(−)P(S|−) = 3 × 2×2×1 = 6.1×10−5 5 343
P(+)P(S|+) = 2 × 1×1×2 = 3.2×10−5 5 293
The model thus predicts the class negative for the test sentence. 4.4 Optimizing for Sentiment Analysis
While standard naive Bayes text classification can work well for sentiment analysis, some small changes are generally employed that improve performance.
First, for sentiment classification and a number of other text classification tasks, whether a word occurs or not seems to matter more than its frequency. Thus it often improves performance to clip the word counts in each document at 1 (see the end of the chapter for pointers to these results). This variant is called binary
4.3 • WORKED EXAMPLE 61
Documents
   just plain boring
entirely predictable and lacks energy no surprises and very few laughs very powerful
the most fun film of the summer
   Test
predictable with no fun
   The word with doesn’t occur in the training set, so we drop it completely (as mentioned above, we don’t use unknown word models for naive Bayes). The like- lihoods from the training set for the remaining three words “predictable”, “no”, and “fun”, are as follows, from Eq. 4.14 (computing the probabilities for the remainder of the words in the training set is left as an exercise for the reader):
P(“predictable”|+) =
Ndoc
  P(“no”|+) =
0+1 9+20 1 + 1
  P(“fun”|+) =
For the test sentence S = “predictable with no fun”, after removing the word ‘with’,
  9+20 the chosen class, via Eq. 4.9, is therefore computed as follows:
  
62
CHAPTER 4 • NAIVE BAYES AND SENTIMENT CLASSIFICATION
binary NB
multinomial naive Bayes or binary NB. The variant uses the same Eq. 4.10 except that for each document we remove all duplicate words before concatenating them into the single big document. Fig. 4.3 shows an example in which a set of four documents (shortened and text-normalized for this example) are remapped to binary, with the modified counts shown in the table on the right. The example is worked without add-1 smoothing to make the differences clearer. Note that the results counts need not be 1; the word great has a count of 2 even for Binary NB, because it appears in multiple documents.
   Four original documents:
− it was pathetic the worst part was the boxing scenes
− no plot twists or great scenes
+ and satire and great plot twists
+ great scenes great film
After per-document binarization:
− it was pathetic the worst part boxing scenes
− no plot twists or great scenes
+ and satire great plot twists
+ great scenes film
NB Binary Counts Counts +−+−
and 2010 boxing 0 1 0 1 film 1010 great 3121 it 0101 no 0101 or 0101 part 0101 pathetic 0 1 0 1 plot 1111 satire 1010 scenes 1 2 1 2 the 0201 twists 1 1 1 1 was 0201 worst 0 1 0 1
      Figure 4.3
 An example of binarization for the binary naive Bayes algorithm.
A second important addition commonly made when doing text classification for sentiment is to deal with negation. Consider the difference between I really like this movie (positive) and I didn’t like this movie (negative). The negation expressed by didn’t completely alters the inferences we draw from the predicate like. Similarly, negation can modify a negative word to produce a positive review (don’t dismiss this film, doesn’t let us get bored).
A very simple baseline that is commonly used in sentiment analysis to deal with negation is the following: during text normalization, prepend the prefix NOT to every word after a token of logical negation (n’t, not, no, never) until the next punc- tuation mark. Thus the phrase
      didn’t like this movie , but I
becomes
      didn’t NOT_like NOT_this NOT_movie , but I
Newly formed ‘words’ like NOT like, NOT recommend will thus occur more of- ten in negative document and act as cues for negative sentiment, while words like NOT bored, NOT dismiss will acquire positive associations. We will return in Chap- ter 16 to the use of parsing to deal more accurately with the scope relationship be- tween these negation words and the predicates they modify, but this simple baseline works quite well in practice.
Finally, in some situations we might have insufficient labeled training data to train accurate naive Bayes classifiers using all words in the training set to estimate positive and negative sentiment. In such cases we can instead derive the positive

4.5
spam detection
4.5 • NAIVE BAYES FOR OTHER TEXT CLASSIFICATION TASKS 63
and negative word features from sentiment lexicons, lists of words that are pre- annotated with positive or negative sentiment. Four popular lexicons are the General Inquirer (Stone et al., 1966), LIWC (Pennebaker et al., 2007), the opinion lexicon
LIWC of Hu and Liu (2004a) and the MPQA Subjectivity Lexicon (Wilson et al., 2005). For example the MPQA subjectivity lexicon has 6885 words, 2718 positive and 4912 negative, each marked for whether it is strongly or weakly biased. Some sam-
ples of positive and negative words from the MPQA lexicon include:
+ : admirable, beautiful, confident, dazzling, ecstatic, favor, glee, great
− : awful, bad, bias, catastrophe, cheat, deny, envious, foul, harsh, hate
A common way to use lexicons in a naive Bayes classifier is to add a feature that is counted whenever a word from that lexicon occurs. Thus we might add a feature called ‘this word occurs in the positive lexicon’, and treat all instances of words in the lexicon as counts for that one feature, instead of counting each word separately. Similarly, we might add as a second feature ‘this word occurs in the negative lexicon’ of words in the negative lexicon. If we have lots of training data, and if the test data matches the training data, using just two features won’t work as well as using all the words. But when training data is sparse or not representative of the test set, using dense lexicon features instead of sparse individual-word features may generalize better.
We’ll return to this use of lexicons in Chapter 20, showing how these lexicons can be learned automatically, and how they can be applied to many other tasks be- yond sentiment classification.
Naive Bayes for other text classification tasks
In the previous section we pointed out that naive Bayes doesn’t require that our classifier use all the words in the training data as features. In fact features in naive Bayes can express any property of the input text we want.
Consider the task of spam detection, deciding if a particular piece of email is an example of spam (unsolicited bulk email) — and one of the first applications of naive Bayes to text classification (Sahami et al., 1998).
A common solution here, rather than using all the words as individual features, is to predefine likely sets of words or phrases as features, combined with features that are not purely linguistic. For example the open-source SpamAssassin tool1 predefines features like the phrase “one hundred percent guaranteed”, or the feature mentions millions of dollars, which is a regular expression that matches suspiciously large sums of money. But it also includes features like HTML has a low ratio of text to image area, that aren’t purely linguistic and might require some sophisticated computation, or totally non-linguistic features about, say, the path that the email took to arrive. More sample SpamAssassin features:
• Email subject line is all capital letters
• Contains phrases of urgency like “urgent reply”
• Email subject line contains “online pharmaceutical” • HTML has unbalanced “head” tags
• Claims you can be removed from the list
For other tasks, like language ID—determining what language a given piece 1 https://spamassassin.apache.org
sentiment lexicons
General Inquirer
language ID
 
64
CHAPTER 4 • NAIVE BAYES AND SENTIMENT CLASSIFICATION
of text is written in—the most effective naive Bayes features are not words at all, but character n-grams, 2-grams (‘zw’) 3-grams (‘nya’, ‘ Vo’), or 4-grams (‘ie z’, ‘thei’), or, even simpler byte n-grams, where instead of using the multibyte Unicode character representations called codepoints, we just pretend everything is a string of raw bytes. Because spaces count as a byte, byte n-grams can model statistics about the beginning or ending of words. A widely used naive Bayes system, langid.py (Lui and Baldwin, 2012) begins with all possible n-grams of lengths 1-4, using fea- ture selection to winnow down to the most informative 7000 final features.
Language ID systems are trained on multilingual text, such as Wikipedia (Wiki- pedia text in 68 different languages were used in (Lui and Baldwin, 2011)), or newswire. To make sure that this multilingual text correctly reflects different re- gions, dialects, and socioeconomic classes, systems also add Twitter text in many languages geotagged to many regions (important for getting world English dialects from countries with large Anglophone populations like Nigeria or India), Bible and Quran translations, slang websites like Urban Dictionary, corpora of African Amer- ican Vernacular English (Blodgett et al., 2016), and so on (Jurgens et al., 2017).
Naive Bayes as a Language Model
As we saw in the previous section, naive Bayes classifiers can use any sort of fea- ture: dictionaries, URLs, email addresses, network features, phrases, and so on. But if, as in the previous section, we use only individual word features, and we use all of the words in the text (not a subset), then naive Bayes has an important similar- ity to language modeling. Specifically, a naive Bayes model can be viewed as a set of class-specific unigram language models, in which the model for each class instantiates a unigram language model.
Since the likelihood features from the naive Bayes model assign a probability to each word P(word|c), the model also assigns a probability to each sentence:
P(s|c) = 􏰒 P(wi|c) (4.15) i∈ posit ions
Thus consider a naive Bayes model with the classes positive (+) and negative (-) and the following model parameters:
w
I love this fun film ...
Each of the two columns above instantiates a language model that can assign a probability to the sentence “I love this fun film”:
P(“Ilovethisfunfilm”|+) = 0.1×0.1×0.01×0.05×0.1=0.0000005 P(“Ilovethisfunfilm”|−) = 0.2×0.001×0.01×0.005×0.1=.0000000010
4.6
P(w|+) P(w|-)
 0.1 0.2
 0.1 0.001
 0.01 0.01
 0.05 0.005
 0.1 0.1
 ... ...
  
4.7 • EVALUATION: PRECISION, RECALL, F-MEASURE 65
As it happens, the positive model assigns a higher probability to the sentence: P(s|pos) > P(s|neg). Note that this is just the likelihood part of the naive Bayes model; once we multiply in the prior a full naive Bayes model might well make a different classification decision.
4.7 Evaluation: Precision, Recall, F-measure
gold labels
confusion matrix
To introduce the methods for evaluating text classification, let’s first consider some simple binary detection tasks. For example, in spam detection, our goal is to label every text as being in the spam category (“positive”) or not in the spam category (“negative”). For each item (email document) we therefore need to know whether our system called it spam or not. We also need to know whether the email is actually spam or not, i.e. the human-defined labels for each document that we are trying to match. We will refer to these human labels as the gold labels.
Or imagine you’re the CEO of the Delicious Pie Company and you need to know what people are saying about your pies on social media, so you build a system that detects tweets concerning Delicious Pie. Here the positive class is tweets about Delicious Pie and the negative class is all other tweets.
In both cases, we need a metric for knowing how well our spam detector (or pie-tweet-detector) is doing. To evaluate any system for detecting things, we start by building a confusion matrix like the one shown in Fig. 4.4. A confusion matrix is a table for visualizing how an algorithm performs with respect to the human gold labels, using two dimensions (system output and gold labels), and each cell labeling a set of possible outcomes. In the spam detection case, for example, true positives are documents that are indeed spam (indicated by human-created gold labels) that our system correctly said were spam. False negatives are documents that are indeed spam but our system incorrectly labeled as non-spam.
To the bottom right of the table is the equation for accuracy, which asks what percentage of all the observations (for the spam or pie examples that means all emails or tweets) our system labeled correctly. Although accuracy might seem a natural metric, we generally don’t use it for text classification tasks. That’s because accuracy doesn’t work well when the classes are unbalanced (as indeed they are with spam, which is a large majority of email, or with tweets, which are mainly not about pie).
      system output labels
system positive
system negative
precision = tp tp+fp
gold standard labels
gold positive
gold negative
 true positive
    false negative
false positive
true negative
    recall = tp tp+fn
accuracy =
tp+tn tp+fp+tn+fn
   Figure 4.4
 A confusion matrix for visualizing how well a binary classification system per- forms against gold standard labels.
To make this more explicit, imagine that we looked at a million tweets, and let’s say that only 100 of them are discussing their love (or hatred) for our pie,

66
CHAPTER 4 • NAIVE BAYES AND SENTIMENT CLASSIFICATION
precision
recall
while the other 999,900 are tweets about something completely unrelated. Imagine a simple classifier that stupidly classified every tweet as “not about pie”. This classifier would have 999,900 true negatives and only 100 false negatives for an accuracy of 999,900/1,000,000 or 99.99%! What an amazing accuracy level! Surely we should be happy with this classifier? But of course this fabulous ‘no pie’ classifier would be completely useless, since it wouldn’t find a single one of the customer comments we are looking for. In other words, accuracy is not a good metric when the goal is to discover something that is rare, or at least not completely balanced in frequency, which is a very common situation in the world.
That’s why instead of accuracy we generally turn to two other metrics shown in Fig. 4.4: precision and recall. Precision measures the percentage of the items that the system detected (i.e., the system labeled as positive) that are in fact positive (i.e., are positive according to the human gold labels). Precision is defined as
Precision = true positives
true positives + false positives
Recall measures the percentage of items actually present in the input that were correctly identified by the system. Recall is defined as
Recall = true positives
true positives + false negatives
Precision and recall will help solve the problem with the useless “nothing is pie” classifier. This classifier, despite having a fabulous accuracy of 99.99%, has a terrible recall of 0 (since there are no true positives, and 100 false negatives, the recall is 0/100). You should convince yourself that the precision at finding relevant tweets is equally problematic. Thus precision and recall, unlike accuracy, emphasize true positives: finding the things that we are supposed to be looking for.
There are many ways to define a single metric that incorporates aspects of both precision and recall. The simplest of these combinations is the F-measure (van Rijsbergen, 1975) , defined as:
F =(β2+1)PR β β2P+R
The β parameter differentially weights the importance of recall and precision, based perhaps on the needs of an application. Values of β > 1 favor recall, while values of β < 1 favor precision. When β = 1, precision and recall are equally bal- anced; this is the most frequently used metric, and is called Fβ=1 or just F1:
F1 = 2PR (4.16) P+R
F-measure comes from a weighted harmonic mean of precision and recall. The harmonic mean of a set of numbers is the reciprocal of the arithmetic mean of recip-
  F-measure
F1
  rocals:
and hence F-measure is
F = 1 or 􏰆with β 2 = 1 − α 􏰇 αP1 +(1−α)R1 α
HarmonicMean(a1,a2,a3,a4,...,an) = n
1 + 1 + 1 +...+ 1
(4.17)
(4.18)
 a1 a2 a3 an
F = (β 2 + 1)PR β2P+R
   
4.8 • TEST SETS AND CROSS-VALIDATION 67
Harmonic mean is used because it is a conservative metric; the harmonic mean of two values is closer to the minimum of the two values than the arithmetic mean is. Thus it weighs the lower of the two numbers more heavily.
4.7.1 Evaluating with more than two classes
Up to now we have been describing text classification tasks with only two classes. But lots of classification tasks in language processing have more than two classes. For sentiment analysis we generally have 3 classes (positive, negative, neutral) and even more classes are common for tasks like part-of-speech tagging, word sense disambiguation, semantic role labeling, emotion detection, and so on. Luckily the naive Bayes algorithm is already a multi-class classification algorithm.
    urgent
gold labels
normal
spam
       urgent
system
output normal
spam
precisionu= 8 8+10+1
precisionn= 60 5+60+50
precisions= 200 3+30+200
8
10
1
     5
60
50
      3
     recallu =
8
30
recalln = recalls =
60 200
8+5+3 10+60+30 1+50+200
200
    Figure 4.5
 macroaveraging microaveraging
Confusion matrix for a three-class categorization task, showing for each pair of classes (c1,c2), how many documents from c1 were (in)correctly assigned to c2
But we’ll need to slightly modify our definitions of precision and recall. Con- sider the sample confusion matrix for a hypothetical 3-way one-of email catego- rization decision (urgent, normal, spam) shown in Fig. 4.5. The matrix shows, for example, that the system mistakenly labeled one spam document as urgent, and we have shown how to compute a distinct precision and recall value for each class. In order to derive a single metric that tells us how well the system is doing, we can com- bine these values in two ways. In macroaveraging, we compute the performance for each class, and then average over classes. In microaveraging, we collect the de- cisions for all classes into a single confusion matrix, and then compute precision and recall from that table. Fig. 4.6 shows the confusion matrix for each class separately, and shows the computation of microaveraged and macroaveraged precision.
As the figure shows, a microaverage is dominated by the more frequent class (in this case spam), since the counts are pooled. The macroaverage better reflects the statistics of the smaller classes, and so is more appropriate when performance on all the classes is equally important.
4.8 Test sets and Cross-validation
development test set
The training and testing procedure for text classification follows what we saw with language modeling (Section 3.2): we use the training set to train the model, then use the development test set (also called a devset) to perhaps tune some parameters,
devset

68 CHAPTER 4 • NAIVE BAYES AND SENTIMENT CLASSIFICATION
    Class 1: Urgent
true true urgent not
system
urgent 8 11
system 8 340 not
precision = 8 = .42 8+11
Class 2: Normal
true true normal not
system
normal 60 55
system 40 212 not
Class 3: Spam
true true spam not
system
spam 200 33
system 51 83 not
Pooled
true true yes no
system
yes 268 99
system 99 635 no
microaverage = 268 = .73 precision 268+99
precision =
60 60+55
= .52
precision =
200 200+33
= .86
 macroaverage = .42+.52+.86 = .60 precision 3
  Figure 4.6
 Separate confusion matrices for the 3 classes from the previous figure, showing the pooled confu- sion matrix and the microaveraged and macroaveraged precision.
cross-validation
10-fold cross-validation
and in general decide what the best model is. Once we come up with what we think is the best model, we run it on the (hitherto unseen) test set to report its performance. While the use of a devset avoids overfitting the test set, having a fixed train- ing set, devset, and test set creates another problem: in order to save lots of data for training, the test set (or devset) might not be large enough to be representative. Wouldn’t it be better if we could somehow use all our data for training and still use all our data for test? We can do this by cross-validation: we randomly choose a training and test set division of our data, train our classifier, and then compute the error rate on the test set. Then we repeat with a different randomly selected training set and test set. We do this sampling process 10 times and average these 10 runs to
get an average error rate. This is called 10-fold cross-validation.
The only problem with cross-validation is that because all the data is used for testing, we need the whole corpus to be blind; we can’t examine any of the data to suggest possible features and in general see what’s going on, because we’d be peeking at the test set, and such cheating would cause us to overestimate the perfor- mance of our system. However, looking at the corpus to understand what’s going on is important in designing NLP systems! What to do? For this reason, it is com- mon to create a fixed training set and test set, then do 10-fold cross-validation inside the training set, but compute error rate the normal way in the test set, as shown in
Fig. 4.7.
    Training Iterations 1
2
3 4 5 6 7 8 9 10
Testing
 Dev Training
 Dev Training
 Dev Training
 Dev Training
 Training Dev Training
 Training Dev
 Training Dev
 Training Dev
 Training Dev
 Training Dev
Test Set
 Figure 4.7
 10-fold cross-validation

4.9 • STATISTICAL SIGNIFICANCE TESTING 69 4.9 Statistical Significance Testing
effect size
In building systems we often need to compare the performance of two systems. How can we know if the new system we just built is better than our old one? Or better than the some other system described in the literature? This is the domain of statistical hypothesis testing, and in this section we introduce tests for statistical significance for NLP classifiers, drawing especially on the work of Dror et al. (2020) and Berg- Kirkpatrick et al. (2012).
Suppose we’re comparing the performance of classifiers A and B on a metric M such as F1, or accuracy. Perhaps we want to know if our logistic regression senti- ment classifier A (Chapter 5) gets a higher F1 score than our naive Bayes sentiment classifier B on a particular test set x. Let’s call M(A,x) the score that system A gets on test set x, and δ (x) the performance difference between A and B on x:
δ (x) = M(A, x) − M(B, x) (4.19)
We would like to know if δ (x) > 0, meaning that our logistic regression classifier has a higher F1 than our naive Bayes classifier on X. δ(x) is called the effect size; a bigger δ means that A seems to be way better than B; a small δ means A seems to be only a little better.
Why don’t we just check if δ(x) is positive? Suppose we do, and we find that the F1 score of A is higher than Bs by .04. Can we be certain that A is better? We cannot! That’s because A might just be accidentally better than B on this particular x. We need something more: we want to know if A’s superiority over B is likely to hold again if we checked another test set x′, or under some other set of circumstances.
In the paradigm of statistical hypothesis testing, we test this by formalizing two hypotheses.
H0 :δ(x)≤0
H1 : δ(x)>0 (4.20)
The hypothesis H0, called the null hypothesis, supposes that δ(x) is actually nega- tive or zero, meaning that A is not better than B. We would like to know if we can confidently rule out this hypothesis, and instead support H1, that A is better.
We do this by creating a random variable X ranging over all test sets. Now we ask how likely is it, if the null hypothesis H0 was correct, that among these test sets we would encounter the value of δ (x) that we found. We formalize this likelihood as the p-value: the probability, assuming the null hypothesis H0 is true, of seeing the δ (x) that we saw or one even greater
P(δ (X ) ≥ δ (x)|H0 is true) (4.21)
So in our example, this p-value is the probability that we would see δ (x) assuming A is not better than B. If δ(x) is huge (let’s say A has a very respectable F1 of .9 and B has a terrible F1 of only .2 on x), we might be surprised, since that would be extremely unlikely to occur if H0 were in fact true, and so the p-value would be low (unlikely to have such a large δ if A is in fact not better than B). But if δ (x) is very small, it might be less surprising to us even if H0 were true and A is not really better than B, and so the p-value would be higher.
A very small p-value means that the difference we observed is very unlikely under the null hypothesis, and we can reject the null hypothesis. What counts as very
null hypothesis
p-value

70
CHAPTER 4 • NAIVE BAYES AND SENTIMENT CLASSIFICATION
statistically significant
small? It is common to use values like .05 or .01 as the thresholds. A value of .01 means that if the p-value (the probability of observing the δ we saw assuming H0 is true) is less than .01, we reject the null hypothesis and assume that A is indeed better than B. We say that a result (e.g., “A is better than B”) is statistically significant if the δ we saw has a probability that is below the threshold and we therefore reject this null hypothesis.
How do we compute this probability we need for the p-value? In NLP we gen- erally don’t use simple parametric tests like t-tests or ANOVAs that you might be familiar with. Parametric tests make assumptions about the distributions of the test statistic (such as normality) that don’t generally hold in our cases. So in NLP we usually use non-parametric tests based on sampling: we artificially create many ver- sions of the experimental setup. For example, if we had lots of different test sets x′ we could just measure all the δ(x′) for all the x′. That gives us a distribution. Now we set a threshold (like .01) and if we see in this distribution that 99% or more of those deltas are smaller than the delta we observed, i.e. that p-value(x)—the proba- bility of seeing a δ (x) as big as the one we saw, is less than .01, then we can reject the null hypothesis and agree that δ (x) was a sufficiently surprising difference and A is really a better algorithm than B.
There are two common non-parametric tests used in NLP: approximate ran- domization (Noreen, 1989). and the bootstrap test. We will describe bootstrap below, showing the paired version of the test, which again is most common in NLP. Paired tests are those in which we compare two sets of observations that are aligned: each observation in one set can be paired with an observation in another. This hap- pens naturally when we are comparing the performance of two systems on the same test set; we can pair the performance of system A on an individual observation xi with the performance of system B on the same xi.
4.9.1 The Paired Bootstrap Test
The bootstrap test (Efron and Tibshirani, 1993) can apply to any metric; from pre- cision, recall, or F1 to the BLEU metric used in machine translation. The word bootstrapping refers to repeatedly drawing large numbers of smaller samples with replacement (called bootstrap samples) from an original larger sample. The intu- ition of the bootstrap test is that we can create many virtual test sets from an observed test set by repeatedly sampling from it. The method only makes the assumption that the sample is representative of the population.
Consider a tiny text classification example with a test set x of 10 documents. The first row of Fig. 4.8 shows the results of two classifiers (A and B) on this test set, with each document labeled by one of the four possibilities: (A and B both right, both wrong, A right and B wrong, A wrong and B right); a slash through a letter (􏰠B) means that that classifier got the answer wrong. On the first document both A and B get the correct class (AB), while on the second document A got it right but B got it wrong (A􏰠B). If we assume for simplicity that our metric is accuracy, A has an accuracy of .70 and B of .50, so δ (x) is .20.
Now we create a large number b (perhaps 105) of virtual test sets x(i), each of size n = 10. Fig. 4.8 shows a couple examples. To create each virtual test set x(i), we repeatedly (n = 10 times) select a cell from row x with replacement. For example, to create the first cell of the first virtual test set x(1), if we happened to randomly select the second cell of the x row; we would copy the value A􏰠B into our new cell, and move on to create the second cell of x(1), each time sampling (randomly choosing) from the original x with replacement.
approximate randomization
paired
bootstrap test bootstrapping

4.9 • STATISTICAL SIGNIFICANCE TESTING 71
1 2 3 4 5 6 7 8 9 10A%B%δ() AB AB􏰠􏰠 AB 􏰟􏰟AB AB􏰠􏰠 􏰟􏰟AB AB􏰠􏰠 AB 􏰟􏰟AB􏰠􏰠 AB􏰠􏰠 .70 .50 .20 AB􏰠􏰠 AB AB􏰠􏰠 􏰟􏰟AB 􏰟􏰟AB AB􏰠􏰠 􏰟􏰟AB AB 􏰟􏰟AB􏰠􏰠 AB .60 .60 .00 AB􏰠􏰠 AB 􏰟􏰟AB􏰠􏰠 􏰟􏰟AB 􏰟􏰟AB AB 􏰟􏰟AB AB􏰠􏰠 AB AB .60 .70 -.10
The paired bootstrap test: Examples of b pseudo test sets x(i) being created from an initial true test set x. Each pseudo test set is created by sampling n = 10 times with replacement; thus an individual sample is a single cell, a document with its gold label and the correct or incorrect performance of classifiers A and B. Of course real test sets don’t have only 10 examples, and b needs to be large as well.
Now that we have the b test sets, providing a sampling distribution, we can do statistics on how often A has an accidental advantage. There are various ways to compute this advantage; here we follow the version laid out in Berg-Kirkpatrick et al. (2012). Assuming H0 (A isn’t better than B), we would expect that δ (X ), esti- mated over many test sets, would be zero; a much higher value would be surprising, since H0 specifically assumes A isn’t better than B. To measure exactly how surpris- ing is our observed δ(x) we would in other circumstances compute the p-value by counting over many test sets how often δ(x(i)) exceeds the expected zero value by δ (x) or more:
􏰑b􏰄(i) 􏰅 p-value(x) = 1 δ(x )−δ(x) ≥ 0
i=1
However, although it’s generally true that the expected value of δ (X ) over many test sets, (again assuming A isn’t better than B) is 0, this isn’t true for the bootstrapped test sets we created. That’s because we didn’t draw these samples from a distribution with 0 mean; we happened to create them from the original test set x, which happens to be biased (by .20) in favor of A. So to measure how surprising is our observed δ(x), we actually compute the p-value by counting over many test sets how often δ(x(i)) exceeds the expected value of δ(x) by δ(x) or more:
􏰑b 􏰄 (i) 􏰅
 x x(1)
x(2)
...
x(b)
  Figure 4.8
  p-value(x) = =
1 δ(x )−δ(x) ≥ δ(x) 􏰑b􏰄(i) 􏰅
1 δ(x )≥2δ(x)
i=1
i=1
(4.22)
So if for example we have 10,000 test sets x(i) and a threshold of .01, and in only 47 of the test sets do we find that δ(x(i)) ≥ 2δ(x), the resulting p-value of .0047 is smaller than .01, indicating δ (x) is indeed sufficiently surprising, and we can reject the null hypothesis and conclude A is better than B.
The full algorithm for the bootstrap is shown in Fig. 4.9. It is given a test set x, a number of samples b, and counts the percentage of the b bootstrap test sets in which δ (x∗(i) ) > 2δ (x). This percentage then acts as a one-sided empirical p-value

72 CHAPTER 4 • NAIVE BAYES AND SENTIMENT CLASSIFICATION
   function BOOTSTRAP(test set x, num of samples b) returns p-value(x)
Calculate δ (x) # how much better does algorithm A do than B on x s=0
fori= 1tobdo
forj=1tondo #Drawabootstrapsamplex(i) ofsizen Select a member of x at random and add it to x(i)
Calculate δ(x(i)) # how much better does algorithm A do than B on x(i)
s←s + 1 if δ(x(i)) > 2δ(x)
p-value(x) ≈ bs # on what % of the b samples did algorithm A beat expectations? return p-value(x) # if very few did, our observed δ is probably not accidental
 Figure 4.9
 A version of the paired bootstrap algorithm after Berg-Kirkpatrick et al. (2012). 4.10 Avoiding Harms in Classification
representational harms
It is important to avoid harms that may result from classifiers, harms that exist both for naive Bayes classifiers and for the other classification algorithms we introduce in later chapters.
One class of harms is representational harms (Crawford 2017, Blodgett et al. 2020), harms caused by a system that demeans a social group, for example by perpetuating negative stereotypes about them. For example Kiritchenko and Mohammad (2018) examined the performance of 200 sentiment analysis systems on pairs of sentences that were identical except for containing either a common African American first name (like Shaniqua) or a common European American first name (like Stephanie), chosen from the Caliskan et al. (2017) study discussed in Chapter 6. They found that most systems assigned lower sentiment and more negative emotion to sentences with African American names, reflecting and perpetuating stereotypes that associate African Americans with negative emotions (Popp et al., 2003).
In other tasks classifiers may lead to both representational harms and other harms, such as censorship. For example the important text classification task of toxicity detection is the task of detecting hate speech, abuse, harassment, or other kinds of toxic language. While the goal of such classifiers is to help reduce soci- etal harm, toxicity classifiers can themselves cause harms. For example, researchers have shown that some widely used toxicity classifiers incorrectly flag as being toxic sentences that are non-toxic but simply mention minority identities like women (Park et al., 2018), blind people (Hutchinson et al., 2020) or gay people (Dixon et al., 2018), or simply use linguistic features characteristic of varieties like African- American Vernacular English (Sap et al. 2019, Davidson et al. 2019). Such false positive errors, if employed by toxicity detection systems without human oversight, could lead to the censoring of discourse by or about these groups.
These model problems can be caused by biases or other problems in the training data; in general, machine learning systems replicate and even amplify the biases in their training data. But these problems can also be caused by the labels (for exam- ple caused by biases in the human labelers) by the resources used (like lexicons, or model components like pretrained embeddings), or even by model architecture (like what the model is trained to optimized). While the mitigation of these biases (for example by carefully considering the training data sources) is an important area of research, we currently don’t have general solutions. For this reason it’s impor-
toxicity detection

model card
4.11 • SUMMARY 73
tant, when introducing any NLP model, to study these these kinds of factors and make them clear. One way to do this is by releasing a model card (Mitchell et al., 2019) for each version of a model, that documents a machine learning model with information like:
• training algorithms and parameters
• training data sources, motivation, and preprocessing
• evaluation data sources, motivation, and preprocessing
• intended use and users
• model performance across different demographic or other groups and envi-
ronmental situations
4.11 Summary
This chapter introduced the naive Bayes model for classification and applied it to the text categorization task of sentiment analysis.
• Many language processing tasks can be viewed as tasks of classification.
• Textcategorization,inwhichanentiretextisassignedaclassfromafiniteset, includes such tasks as sentiment analysis, spam detection, language identi- fication, and authorship attribution.
• Sentiment analysis classifies a text as reflecting the positive or negative orien- tation (sentiment) that a writer expresses toward some object.
• Naive Bayes is a generative model that makes the bag of words assumption (position doesn’t matter) and the conditional independence assumption (words are conditionally independent of each other given the class)
• Naive Bayes with binarized features seems to work better for many text clas- sification tasks.
• Classifiers are evaluated based on precision and recall.
• Classifiers are trained using distinct training, dev, and test sets, including the
use of cross-validation in the training set.
• Statistical significance tests should be used to determine whether we can be
confident that one version of a classifier is better than another.
• Designers of classifiers should carefully consider harms that may be caused by the model, including its training data and other components, and report model characteristics in a model card.
Bibliographical and Historical Notes
Multinomial naive Bayes text classification was proposed by Maron (1961) at the RAND Corporation for the task of assigning subject categories to journal abstracts. His model introduced most of the features of the modern form presented here, ap- proximating the classification task with one-of categorization, and implementing add-δ smoothing and information-based feature selection.
The conditional independence assumptions of naive Bayes and the idea of Bayes- ian analysis of text seems to have arisen multiple times. The same year as Maron’s paper, Minsky (1961) proposed a naive Bayes classifier for vision and other arti- ficial intelligence problems, and Bayesian techniques were also applied to the text

74
CHAPTER 4 • NAIVE BAYES AND SENTIMENT CLASSIFICATION
information gain
classification task of authorship attribution by Mosteller and Wallace (1963). It had long been known that Alexander Hamilton, John Jay, and James Madison wrote the anonymously-published Federalist papers in 1787–1788 to persuade New York to ratify the United States Constitution. Yet although some of the 85 essays were clearly attributable to one author or another, the authorship of 12 were in dispute between Hamilton and Madison. Mosteller and Wallace (1963) trained a Bayesian probabilistic model of the writing of Hamilton and another model on the writings of Madison, then computed the maximum-likelihood author for each of the disputed essays. Naive Bayes was first applied to spam detection in Heckerman et al. (1998).
Metsis et al. (2006), Pang et al. (2002), and Wang and Manning (2012) show that using boolean attributes with multinomial naive Bayes works better than full counts. Binary multinomial naive Bayes is sometimes confused with another variant of naive Bayes that also use a binary representation of whether a term occurs in a document: Multivariate Bernoulli naive Bayes. The Bernoulli variant instead estimates P(w|c) as the fraction of documents that contain a term, and includes a probability for whether a term is not in a document. McCallum and Nigam (1998) and Wang and Manning (2012) show that the multivariate Bernoulli variant of naive Bayes doesn’t work as well as the multinomial algorithm for sentiment or other text tasks.
There are a variety of sources covering the many kinds of text classification tasks. For sentiment analysis see Pang and Lee (2008), and Liu and Zhang (2012). Stamatatos (2009) surveys authorship attribute algorithms. On language identifica- tion see Jauhiainen et al. (2018); Jaech et al. (2016) is an important early neural system. The task of newswire indexing was often used as a test case for text classi- fication algorithms, based on the Reuters-21578 collection of newswire articles.
See Manning et al. (2008) and Aggarwal and Zhai (2012) on text classification; classification in general is covered in machine learning textbooks (Hastie et al. 2001, Witten and Frank 2005, Bishop 2006, Murphy 2012).
Non-parametric methods for computing statistical significance were used first in NLP in the MUC competition (Chinchor et al., 1993), and even earlier in speech recognition (Gillick and Cox 1989, Bisani and Ney 2004). Our description of the bootstrap draws on the description in Berg-Kirkpatrick et al. (2012). Recent work has focused on issues including multiple test sets and multiple metrics (Søgaard et al. 2014, Dror et al. 2017).
Feature selection is a method of removing features that are unlikely to generalize well. Features are generally ranked by how informative they are about the classifica- tion decision. A very common metric, information gain, tells us how many bits of information the presence of the word gives us for guessing the class. Other feature selection metrics include χ2, pointwise mutual information, and GINI index; see Yang and Pedersen (1997) for a comparison and Guyon and Elisseeff (2003) for an introduction to feature selection.
Exercises
4.1 Assume the following likelihoods for each word being part of a positive or negative movie review, and equal prior probabilities for each class.

pos neg I 0.09 0.16 always 0.07 0.06 like 0.29 0.06 foreign 0.04 0.15 films 0.08 0.11
EXERCISES 75
 What class will Naive bayes assign to the sentence “I always like foreign films.”?
4.2 Given the following short movie reviews, each labeled with a genre, either comedy or action:
1. fun, couple, love, love comedy
2. fast, furious, shoot action
3. couple, fly, fast, fun, fun comedy
4. furious, shoot, shoot, fun action
5. fly, fast, shoot, love action
and a new document D: fast, couple, shoot, fly
compute the most likely class for D. Assume a naive Bayes classifier and use add-1 smoothing for the likelihoods.
4.3 Train two models, multinomial naive Bayes and binarized naive Bayes, both with add-1 smoothing, on the following document counts for key sentiment words, with positive or negative class assigned as noted.
doc “good” “poor” “great” (class) d1.3 0 3 pos d2.0 1 2 pos d3.1 3 0 neg d4.1 5 2 neg d5.0 2 0 neg
Use both naive Bayes models to assign a class (pos or neg) to this sentence: A good, good plot and great characters, but poor acting.
Recall from page 60 that with naive Bayes text classification, we simply ig- nore (throw out) any word that never occurred in the training document. (We don’t throw out words that appear in some classes but not others; that’s what add-one smoothing is for.) Do the two models agree or disagree?

76 CHAPTER 5 CHAPTER
5
logistic regression
• LOGISTIC REGRESSION
Logistic Regression
“And how do you know that these fine begonias are not of equal importance?” Hercule Poirot, in Agatha Christie’s The Mysterious Affair at Styles
Detective stories are as littered with clues as texts are with words. Yet for the poor reader it can be challenging to know how to weigh the author’s clues in order to make the crucial classification task: deciding whodunnit.
In this chapter we introduce an algorithm that is admirably suited for discovering the link between features or cues and some particular outcome: logistic regression. Indeed, logistic regression is one of the most important analytic tools in the social and natural sciences. In natural language processing, logistic regression is the base- line supervised machine learning algorithm for classification, and also has a very close relationship with neural networks. As we will see in Chapter 7, a neural net- work can be viewed as a series of logistic regression classifiers stacked on top of each other. Thus the classification and machine learning techniques introduced here will play an important role throughout the book.
Logistic regression can be used to classify an observation into one of two classes (like ‘positive sentiment’ and ‘negative sentiment’), or into one of many classes. Because the mathematics for the two-class case is simpler, we’ll describe this special case of logistic regression first in the next few sections, and then briefly summarize the use of multinomial logistic regression for more than two classes in Section 5.6.
We’ll introduce the mathematics of logistic regression in the next few sections. But let’s begin with some high-level issues.
Generative and Discriminative Classifiers: The most important difference be- tween naive Bayes and logistic regression is that logistic regression is a discrimina- tive classifier while naive Bayes is a generative classifier.
These are two very different frameworks for how
to build a machine learning model. Consider a visual
metaphor: imagine we’re trying to distinguish dog
images from cat images. A generative model would
have the goal of understanding what dogs look like
and what cats look like. You might literally ask such
a model to ‘generate’, i.e., draw, a dog. Given a test
image, the system then asks whether it’s the cat model or the dog model that better fits (is less surprised by) the image, and chooses that as its label.
A discriminative model, by contrast, is only try- ing to learn to distinguish the classes (perhaps with- out learning much about them). So maybe all the dogs in the training data are wearing collars and the cats aren’t. If that one feature neatly separates the classes, the model is satisfied. If you ask such a model what it knows about cats all it can say is that they don’t wear collars.
   
generative model
discriminative model
5.1
cation.
3. An objective function for learning, usually involving minimizing error on
training examples. We will introduce the cross-entropy loss function.
4. Analgorithmforoptimizingtheobjectivefunction.Weintroducethestochas-
tic gradient descent algorithm.
Logistic regression has two phases:
training: we train the system (specifically the weights w and b) using stochastic gradient descent and the cross-entropy loss.
test: Given a test example x we compute p(y|x) and return the higher probability label y = 1 or y = 0.
Classification: the sigmoid
The goal of binary logistic regression is to train a classifier that can make a binary decision about the class of a new input observation. Here we introduce the sigmoid classifier that will help us make this decision.
Consider a single input observation x, which we will represent by a vector of fea- tures [x1,x2,...,xn] (we’ll show sample features in the next subsection). The classifier output y can be 1 (meaning the observation is a member of the class) or 0 (the ob- servation is not a member of the class). We want to know the probability P(y = 1|x) that this observation is a member of the class. So perhaps the decision is “positive
5.1 • CLASSIFICATION: THE SIGMOID 77 More formally, recall that the naive Bayes assigns a class c to a document d not
by directly computing P(c|d) but by computing a likelihood and a prior likelihood prior
cˆ = argmax P(d|c) P(c) c∈C
A generative model like naive Bayes makes use of this likelihood term, which expresses how to generate the features of a document if we knew it was of class c.
By contrast a discriminative model in this text categorization scenario attempts to directly compute P(c|d). Perhaps it will learn to assign a high weight to document features that directly improve its ability to discriminate between possible classes, even if it couldn’t generate an example of one of the classes.
Components of a probabilistic machine learning classifier: Like naive Bayes, logistic regression is a probabilistic classifier that makes use of supervised machine learning. Machine learning classifiers require a training corpus of m input/output pairs (x(i),y(i)). (We’ll use superscripts in parentheses to refer to individual instances in the training set—for sentiment classification each instance might be an individual document to be classified). A machine learning system for classification then has four components:
1. A feature representation of the input. For each input observation x(i), this will be a vector of features [x1,x2,...,xn]. We will generally refer to feature
􏰛 􏰞􏰝 􏰜 􏰛􏰞􏰝􏰜
(5.1)
i for input x(j) as x(j), sometimes simplified as xi, but we will also see the i
notation fi, fi(x), or, for multiclass classification, fi(c,x).
2. A classification function that computes yˆ, the estimated class, via p(y|x). In the next section we will introduce the sigmoid and softmax tools for classifi-

78
CHAPTER 5 • LOGISTIC REGRESSION
bias term intercept
dot product
sentiment” versus “negative sentiment”, the features represent counts of words in a document, P(y = 1|x) is the probability that the document has positive sentiment, and P(y = 0|x) is the probability that the document has negative sentiment.
Logistic regression solves this task by learning, from a training set, a vector of weights and a bias term. Each weight wi is a real number, and is associated with one of the input features xi. The weight wi represents how important that input feature is to the classification decision, and can be positive (providing evidence that the in- stance being classified belongs in the positive class) or negative (providing evidence that the instance being classified belongs in the negative class). Thus we might expect in a sentiment task the word awesome to have a high positive weight, and abysmal to have a very negative weight. The bias term, also called the intercept, is another real number that’s added to the weighted inputs.
To make a decision on a test instance— after we’ve learned the weights in training— the classifier first multiplies each xi by its weight wi, sums up the weighted features, and adds the bias term b. The resulting single number z expresses the weighted sum of the evidence for the class.
􏰋􏰑n 􏰌
z= wixi +b (5.2)
i=1
In the rest of the book we’ll represent such sums using the dot product notation from linear algebra. The dot product of two vectors a and b, written as a · b is the sum of the products of the corresponding elements of each vector. Thus the following is an equivalent formation to Eq. 5.2:
z = w·x+b (5.3)
But note that nothing in Eq. 5.3 forces z to be a legal probability, that is, to lie between 0 and 1. In fact, since weights are real-valued, the output might even be negative; z ranges from −∞ to ∞.
     Figure 5.1
 sigmoid
logistic function
To create a probability, we’ll pass z through the sigmoid function, σ(z). The sigmoid function (named because it looks like an s) is also called the logistic func- tion, and gives logistic regression its name. The sigmoid has the following equation, shown graphically in Fig. 5.1:
y=σ(z)= 1 = 1 (5.4) 1+e−z 1+exp(−z)
(For the rest of the book, we’ll use the notation exp(x) to mean ex.) The sigmoid has a number of advantages; it takes a real-valued number and maps it into the range
The sigmoid function y = 1 −z takes a real value and maps it to the range [0, 1]. 1+e
It is nearly linear around 0 but outlier values get squashed toward 0 or 1.
  
5.1 • CLASSIFICATION: THE SIGMOID 79
[0, 1], which is just what we want for a probability. Because it is nearly linear around 0 but flattens toward the ends, it tends to squash outlier values toward 0 or 1. And it’s differentiable, which as we’ll see in Section 5.8 will be handy for learning.
We’re almost there. If we apply the sigmoid to the sum of the weighted features, we get a number between 0 and 1. To make it a probability, we just need to make sure that the two cases, p(y = 1) and p(y = 0), sum to 1. We can do this as follows:
P(y = 1)
P(y = 0)
The sigmoid function has the property
1−σ(x) = σ(−x)
= σ(w·x+b) =1
1+exp(−(w·x+b)) = 1−σ(w·x+b)
= 1− 1 1+exp(−(w·x+b))
= exp(−(w·x+b)) 1+exp(−(w·x+b))
(5.5)
(5.6)
   decision boundary
so we could also have expressed P(y = 0) as σ (−(w · x + b)).
Now we have an algorithm that given an instance x computes the probability
P(y = 1|x). How do we make a decision? For a test instance x, we say yes if the probability P(y = 1|x) is more than .5, and no otherwise. We call .5 the decision boundary:
yˆ = 􏰊1 if P(y=1|x)>0.5 0 otherwise
5.1.1 Example: sentiment classification
Let’s have an example. Suppose we are doing binary sentiment classification on movie review text, and we would like to know whether to assign the sentiment class + or − to a review document doc. We’ll represent each input observation by the 6 features x1...x6 of the input shown in the following table; Fig. 5.2 shows the features in a sample mini test document.
Var x1 x2
x3 x4 x5 x6
Definition
c􏰊ount(positive lexicon) ∈ doc) count(negative lexicon) ∈ doc)
1 if “no”∈doc
0 otherwise
c􏰊ount(1st and 2nd pronouns ∈ doc)
1 if “!”∈doc
0 otherwise log(word count of doc)
Value in Fig. 5.2 3
2
1
3
0
ln(66) = 4.19
 Let’s assume for the moment that we’ve already learned a real-valued weight for each of these features, and that the 6 weights corresponding to the 6 features are [2.5,−5.0,−1.2,0.5,2.0,0.7], while b = 0.1. (We’ll discuss in the next section how

80 CHAPTER 5 • LOGISTIC REGRESSION
   x2=2
x3=1
It's hokey . There are virtually no surprises , and the writing is second-rate . So why was it so enjoyable ? For one thing , the cast is
great . Another nice touch is the music . I was overcome with the urge to get off
  the couch and start dancing . It sucked me in , and it'll do the same to you .
x1=3 x5=0 x6=4.19
x4=3
        Figure 5.2
 A sample mini test document showing the extracted features in the vector x.
the weights are learned.) The weight w1, for example indicates how important a feature the number of positive lexicon words (great, nice, enjoyable, etc.) is to a positive sentiment decision, while w2 tells us the importance of negative lexicon words. Note that w1 = 2.5 is positive, while w2 = −5.0, meaning that negative words are negatively associated with a positive sentiment decision, and are about twice as important as positive words.
Given these 6 features and the input review x, P(+|x) and P(−|x) can be com- puted using Eq. 5.5:
p(+|x) = P(Y = 1|x) p(−|x) = P(Y = 0|x)
= σ(w·x+b)
= σ([2.5,−5.0,−1.2,0.5,2.0,0.7]·[3,2,1,3,0,4.19]+0.1) = σ(.833)
= 0.70 (5.7) = 1−σ(w·x+b)
= 0.30
Logistic regression is commonly applied to all sorts of NLP tasks, and any property of the input can be a feature. Consider the task of period disambiguation: deciding if a period is the end of a sentence or part of a word, by classifying each period into one of two classes EOS (end-of-sentence) and not-EOS. We might use features like x1 below expressing that the current word is lower case and the class is EOS (perhaps with a positive weight), or that the current word is in our abbreviations dictionary (“Prof.”) and the class is EOS (perhaps with a negative weight). A feature can also express a quite complex combination of properties. For example a period following an upper case word is likely to be an EOS, but if the word itself is St. and the previous word is capitalized, then the period is likely part of a shortening of the word street.
x1 = 􏰊 1 if “Case(wi) = Lower”
􏰊 0 otherwise
1 if “wi ∈ AcronymDict”
􏰊 0 otherwise
1 if “wi = St. & Case(wi−1) = Cap”
0 otherwise
Features are generally designed by examining the training set with an eye to linguistic intuitions and the linguistic literature on the domain. A careful error analysis on the training set or devset of an early version of a system
often provides insights into features.
Designing features:
x2 =
x3 =

feature interactions
feature templates
5.2 • LEARNING IN LOGISTIC REGRESSION 81
For some tasks it is especially helpful to build complex features that are combi- nations of more primitive features. We saw such a feature for period disambiguation above, where a period on the word St. was less likely to be the end of the sentence if the previous word was capitalized. For logistic regression and naive Bayes these combination features or feature interactions have to be designed by hand.
For many tasks (especially when feature values can reference specific words) we’ll need large numbers of features. Often these are created automatically via fea- ture templates, abstract specifications of features. For example a bigram template for period disambiguation might create a feature for every pair of words that occurs before a period in the training set. Thus the feature space is sparse, since we only have to create a feature if that n-gram exists in that position in the training set. The feature is generally created as a hash from the string descriptions. A user description of a feature as, “bigram(American breakfast)” is hashed into a unique integer i that becomes the feature number fi.
In order to avoid the extensive human effort of feature design, recent research in NLP has focused on representation learning: ways to learn features automatically in an unsupervised way from the input. We’ll introduce methods for representation learning in Chapter 6 and Chapter 7.
Choosing a classifier Logistic regression has a number of advantages over naive Bayes. Naive Bayes has overly strong conditional independence assumptions. Con- sider two features which are strongly correlated; in fact, imagine that we just add the same feature f1 twice. Naive Bayes will treat both copies of f1 as if they were sep- arate, multiplying them both in, overestimating the evidence. By contrast, logistic regression is much more robust to correlated features; if two features f1 and f2 are perfectly correlated, regression will simply assign part of the weight to w1 and part to w2. Thus when there are many correlated features, logistic regression will assign a more accurate probability than naive Bayes. So logistic regression generally works better on larger documents or datasets and is a common default.
Despite the less accurate probabilities, naive Bayes still often makes the correct classification decision. Furthermore, naive Bayes can work extremely well (some- times even better than logistic regression) on very small datasets (Ng and Jordan, 2002) or short documents (Wang and Manning, 2012). Furthermore, naive Bayes is easy to implement and very fast to train (there’s no optimization step). So it’s still a reasonable approach to use in some situations.
5.2 Learning in Logistic Regression
How are the parameters of the model, the weights w and bias b, learned? Logistic regression is an instance of supervised classification in which we know the correct label y (either 0 or 1) for each observation x. What the system produces via Eq. 5.5 is yˆ, the system’s estimate of the true y. We want to learn parameters (meaning w and b) that make yˆ for each training observation as close as possible to the true y.
This requires two components that we foreshadowed in the introduction to the chapter. The first is a metric for how close the current label (yˆ) is to the true gold label y. Rather than measure similarity, we usually talk about the opposite of this: the distance between the system output and the gold output, and we call this distance
loss the loss function or the cost function. In the next section we’ll introduce the loss function that is commonly used for logistic regression and also for neural networks,

82
5.3
CHAPTER 5 • LOGISTIC REGRESSION
the cross-entropy loss.
The second thing we need is an optimization algorithm for iteratively updating
the weights so as to minimize this loss function. The standard algorithm for this is gradient descent; we’ll introduce the stochastic gradient descent algorithm in the following section.
The cross-entropy loss function
We need a loss function that expresses, for an observation x, how close the classifier output (yˆ = σ (w · x + b)) is to the correct output (y, which is 0 or 1). We’ll call this:
L(yˆ,y) = Howmuchyˆdiffersfromthetruey (5.8)
We do this via a loss function that prefers the correct class labels of the train- ing examples to be more likely. This is called conditional maximum likelihood estimation: we choose the parameters w,b that maximize the log probability of the true y labels in the training data given the observations x. The resulting loss function is the negative log likelihood loss, generally called the cross-entropy loss.
Let’s derive this loss function, applied to a single observation x. We’d like to learn weights that maximize the probability of the correct label p(y|x). Since there are only two discrete outcomes (1 or 0), this is a Bernoulli distribution, and we can express the probability p(y|x) that our classifier produces for one observation as the following (keeping in mind that if y=1, Eq. 5.9 simplifies to yˆ; if y=0, Eq. 5.9 simplifies to 1 − yˆ):
p(y|x) = yˆy(1−yˆ)1−y (5.9)
Now we take the log of both sides. This will turn out to be handy mathematically, and doesn’t hurt us; whatever values maximize a probability will also maximize the log of the probability:
logp(y|x) = log􏰂yˆy(1−yˆ)1−y􏰃
= ylogyˆ+(1−y)log(1−yˆ) (5.10)
Eq. 5.10 describes a log likelihood that should be maximized. In order to turn this into loss function (something that we need to minimize), we’ll just flip the sign on Eq. 5.10. The result is the cross-entropy loss LCE:
LCE(yˆ,y)=−logp(y|x) = −[ylogyˆ+(1−y)log(1−yˆ)] (5.11) Finally, we can plug in the definition of yˆ = σ(w·x+b):
LCE(yˆ,y) = −[ylogσ(w·x+b)+(1−y)log(1−σ(w·x+b))] (5.12)
Let’s see if this loss function does the right thing for our example from Fig. 5.2. We want the loss to be smaller if the model’s estimate is close to correct, and bigger if the model is confused. So first let’s suppose the correct gold label for the sentiment example in Fig. 5.2 is positive, i.e., y = 1. In this case our model is doing well, since from Eq. 5.7 it indeed gave the example a higher probability of being positive (.69) than negative (.31). If we plug σ(w·x+b) = .69 and y = 1 into Eq. 5.12, the right
cross-entropy loss

5.4 • GRADIENT DESCENT 83 side of the equation drops out, leading to the following loss (we’ll use log to mean
natural log when the base is not specified):
LCE(yˆ,y) = −[ylogσ(w·x+b)+(1−y)log(1−σ(w·x+b))] = −[logσ(w·x+b)]
= − log(.69) = .37
By contrast, let’s pretend instead that the example in Fig. 5.2 was actually negative, i.e., y = 0 (perhaps the reviewer went on to say “But bottom line, the movie is terrible! I beg you not to see it!”). In this case our model is confused and we’d want the loss to be higher. Now if we plug y = 0 and 1−σ(w·x+b) = .31 from Eq. 5.7 into Eq. 5.12, the left side of the equation drops out:
LCE(yˆ,y) = −[ylogσ(w·x+b)+(1−y)log(1−σ(w·x+b))] = −[log(1−σ(w·x+b))]
= − log (.31)
= 1.17
Sure enough, the loss for the first classifier (.37) is less than the loss for the second classifier (1.17).
Why does minimizing this negative log probability do what we want? A per- fect classifier would assign probability 1 to the correct outcome (y=1 or y=0) and probability 0 to the incorrect outcome. That means the higher yˆ (the closer it is to 1), the better the classifier; the lower yˆ is (the closer it is to 0), the worse the classifier. The negative log of this probability is a convenient loss metric since it goes from 0 (negative log of 1, no loss) to infinity (negative log of 0, infinite loss). This loss function also ensures that as the probability of the correct answer is max- imized, the probability of the incorrect answer is minimized; since the two sum to one, any increase in the probability of the correct answer is coming at the expense of the incorrect answer. It’s called the cross-entropy loss, because Eq. 5.10 is also the formula for the cross-entropy between the true probability distribution y and our estimated distribution yˆ.
Now we know what we want to minimize; in the next section, we’ll see how to find the minimum.
5.4 Gradient Descent
Our goal with gradient descent is to find the optimal weights: minimize the loss function we’ve defined for the model. In Eq. 5.13 below, we’ll explicitly represent the fact that the loss function L is parameterized by the weights, which we’ll refer to in machine learning in general as θ (in the case of logistic regression θ = w, b). So the goal is to find the set of weights which minimizes the loss function, averaged over all examples:
ˆ 1􏰑m
θ = argmin m LCE(f(x(i);θ),y(i)) (5.13)
θ i=1

84
CHAPTER 5 • LOGISTIC REGRESSION
convex
How shall we find the minimum of this (or any) loss function? Gradient descent is a method that finds a minimum of a function by figuring out in which direction (in the space of the parameters θ) the function’s slope is rising the most steeply, and moving in the opposite direction. The intuition is that if you are hiking in a canyon and trying to descend most quickly down to the river at the bottom, you might look around yourself 360 degrees, find the direction where the ground is sloping the steepest, and walk downhill in that direction.
For logistic regression, this loss function is conveniently convex. A convex func- tion has just one minimum; there are no local minima to get stuck in, so gradient descent starting from any point is guaranteed to find the minimum. (By contrast, the loss for multi-layer neural networks is non-convex, and gradient descent may get stuck in local minima for neural network training and never find the global opti- mum.)
Although the algorithm (and the concept of gradient) are designed for direction vectors, let’s first consider a visualization of the case where the parameter of our system is just a single scalar w, shown in Fig. 5.3.
Given a random initialization of w at some value w1, and assuming the loss function L happened to have the shape in Fig. 5.3, we need the algorithm to tell us whether at the next iteration we should move left (making w2 smaller than w1) or right (making w2 bigger than w1) to reach the minimum.
    Loss
slope of loss at w1 is negative
one step of gradient descent
w1 wmin
0 (goal)
w
 Figure 5.3
 gradient
learning rate
The first step in iteratively finding the minimum of this loss function, by moving w in the reverse direction from the slope of the function. Since the slope is negative, we need to move w in a positive direction, to the right. Here superscripts are used for learning steps, so w1 means the initial value of w (which is 0), w2 at the second step, and so on.
The gradient descent algorithm answers this question by finding the gradient of the loss function at the current point and moving in the opposite direction. The gradient of a function of many variables is a vector pointing in the direction of the greatest increase in a function. The gradient is a multi-variable generalization of the slope, so for a function of one variable like the one in Fig. 5.3, we can informally think of the gradient as the slope. The dotted line in Fig. 5.3 shows the slope of this hypothetical loss function at point w = w1. You can see that the slope of this dotted line is negative. Thus to find the minimum, gradient descent tells us to go in the opposite direction: moving w in a positive direction.
The magnitude of the amount to move in gradient descent is the value of the slope d f (x; w) weighted by a learning rate η . A higher (faster) learning rate means that
dw
we should move w more on each step. The change we make in our parameter is the

5.4 • GRADIENT DESCENT 85 learning rate times the gradient (or the slope, in our single-variable example):
wt+1=wt−η d f(x;w) (5.14) dw
Now let’s extend the intuition from a function of one scalar variable w to many variables, because we don’t just want to move left or right, we want to know where in the N-dimensional space (of the N parameters that make up θ ) we should move. The gradient is just such a vector; it expresses the directional components of the sharpest slope along each of those N dimensions. If we’re just imagining two weight dimensions (say for one weight w and one bias b), the gradient might be a vector with two orthogonal components, each of which tells us how much the ground slopes in the w dimension and in the b dimension. Fig. 5.4 shows a visualization of the value of a 2-dimensional gradient vector taken at the red point.
Visualization of the gradient vector at the red point in two dimensions w and b, showing the gradient as a red arrow in the x-y plane.
In an actual logistic regression, the parameter vector w is much longer than 1 or 2, since the input feature vector x can be quite long, and we need a weight wi for each xi. For each dimension/variable wi in w (plus the bias b), the gradient will have a component that tells us the slope with respect to that variable. Essentially we’re asking: “How much would a small change in that variable wi influence the total loss function L?”
   Cost(w,b)
w
b
   Figure 5.4
 In each dimension wi, we express the slope as a partial derivative ∂ of the loss ∂wi
function. The gradient is then defined as a vector of these partials. We’ll represent yˆ as f (x; θ ) to make the dependence on θ more obvious:
∇θL(f(x;θ),y)) = ∂w2 . .
The final equation for updating θ based on the gradient is thus θt+1 = θt −η∇L(f(x;θ),y)
 ∂ L(f(x;θ),y) ∂w1
 ∂ L(f(x;θ),y)
∂ L(f(x;θ),y) ∂wn

(5.15)
(5.16)

86 CHAPTER 5 • LOGISTIC REGRESSION
5.4.1 The Gradient for Logistic Regression
In order to update θ , we need a definition for the gradient ∇L( f (x; θ ), y). Recall that for logistic regression, the cross-entropy loss function is:
LCE(yˆ,y) = −[ylogσ(w·x+b)+(1−y)log(1−σ(w·x+b))] (5.17) It turns out that the derivative of this function for one observation vector x is
Eq. 5.18 (the interested reader can see Section 5.8 for the derivation of this equation): ∂LCE(yˆ,y) = [σ(w·x+b)−y]xj (5.18)
Note in Eq. 5.18 that the gradient with respect to a single weight w j represents a very intuitive value: the difference between the true y and our estimated yˆ = σ (w · x + b) for that observation, multiplied by the corresponding input value x j .
5.4.2 The Stochastic Gradient Descent Algorithm
Stochastic gradient descent is an online algorithm that minimizes the loss function by computing its gradient after each training example, and nudging θ in the right direction (the opposite direction of the gradient). Fig. 5.5 shows the algorithm.
 ∂wj
   function STOCHASTIC GRADIENT DESCENT(L(), f (), x, y) returns θ # where: L is the loss function
# f is a function parameterized by θ
# x is the set of training inputs x(1), x(2),..., x(m)
# y is the set of training outputs (labels) y(1), y(2),..., y(m)
θ←0
repeat til done # see caption
For each training tuple (x(i), y(i)) (in random order)
1. Optional (for reporting): Compute yˆ(i) = f(x(i);θ) Compute the loss L(yˆ(i),y(i))
2. g←∇θL(f(x(i);θ),y(i))
3.θ←θ − η g return θ
# How are we doing on this tuple?
# What is our estimated output yˆ?
# How far off is yˆ(i)) from the true output y(i)? # How should we move θ to maximize loss? #Gotheotherwayinstead
 Figure 5.5
 hyperparameter
The stochastic gradient descent algorithm. Step 1 (computing the loss) is used to report how well we are doing on the current tuple. The algorithm can terminate when it converges (or when the gradient norm < ε), or when progress halts (for example when the loss starts going up on a held-out set).
The learning rate η is a hyperparameter that must be adjusted. If it’s too high, the learner will take steps that are too large, overshooting the minimum of the loss function. If it’s too low, the learner will take steps that are too small, and take too long to get to the minimum. It is common to start with a higher learning rate and then slowly decrease it, so that it is a function of the iteration k of training; the notation ηk can be used to mean the value of the learning rate at iteration k.
We’ll discuss hyperparameters in more detail in Chapter 7, but briefly they are a special kind of parameter for any machine learning model. Unlike regular param- eters of a model (weights like w and b), which are learned by the algorithm from the training set, hyperparameters are special parameters chosen by the algorithm designer that affect how the algorithm works.

5.4 • GRADIENT DESCENT 87 5.4.3 Working through an example
Let’s walk though a single step of the gradient descent algorithm. We’ll use a sim- plified version of the example in Fig. 5.2 as it sees a single observation x, whose correct value is y = 1 (this is a positive review), and with only two features:
x1 = 3 (count of positive lexicon words)
x2 = 2 (count of negative lexicon words)
Let’s assume the initial weights and bias in θ 0 are all set to 0, and the initial learning rate η is 0.1:
w1=w2=b = 0 η = 0.1
The single update step requires that we compute the gradient, multiplied by the learning rate
θt+1 =θt −η∇θL(f(x(i);θ),y(i))
In our mini example there are three parameters, so the gradient vector has 3 dimen-
sions, for w1, w2, and b. We can compute the first gradient as follows: ∂LCE(yˆ,y)        
−1.5 ∇w,b =  ∂LCE(yˆ,y)  =  (σ(w·x+b)−y)x2  =  (σ(0)−1)x2  =  −0.5x2  =  −1.0 
 ∂w1  (σ(w·x+b)−y)x1 (σ(0)−1)x1 −0.5x1
 ∂w2
∂LCE(yˆ,y) σ(w·x+b)−y σ(0)−1 −0.5 −0.5
  batch training
mini-batch
∂b
Now that we have a gradient, we compute the new parameter vector θ1 by moving
θ 0 in the opposite direction from the gradient:
1 w1  −1.5 .15 θ = w2 −η −1.0 = .1
b −0.5 .05
So after one step of gradient descent, the weights have shifted to be: w1 = .15, w2 =.1,andb=.05.
Note that this observation x happened to be a positive example. We would expect that after seeing more negative examples with high counts of negative words, that the weight w2 would shift to have a negative value.
5.4.4 Mini-batch training
Stochastic gradient descent is called stochastic because it chooses a single random example at a time, moving the weights so as to improve performance on that single example. That can result in very choppy movements, so it’s common to compute the gradient over batches of training instances rather than a single instance.
For example in batch training we compute the gradient over the entire dataset. By seeing so many examples, batch training offers a superb estimate of which di- rection to move the weights, at the cost of spending a lot of time processing every single example in the training set to compute this perfect direction.
A compromise is mini-batch training: we train on a group of m examples (per- haps 512, or 1024) that is less than the whole dataset. (If m is the size of the dataset,

88 CHAPTER 5 • LOGISTIC REGRESSION
then we are doing batch gradient descent; if m = 1, we are back to doing stochas- tic gradient descent). Mini-batch training also has the advantage of computational efficiency. The mini-batches can easily be vectorized, choosing the size of the mini- batch based on the computational resources. This allows us to process all the exam- ples in one mini-batch in parallel and then accumulate the loss, something that’s not possible with individual or batch training.
We just need to define mini-batch versions of the cross-entropy loss function we defined in Section 5.3 and the gradient in Section 5.4.1. Let’s extend the cross- entropy loss for one example from Eq. 5.11 to mini-batches of size m. We’ll continue to use the notation that x(i) and y(i) mean the ith training features and training label, respectively. We make the assumption that the training examples are independent:
log p(training labels) = log
p(y(i)|x(i)) log p(y(i)|x(i))
LCE(yˆ(i),y(i))
Now the cost function for the mini-batch of m examples is the average loss for each
example:
1 􏰑m
Cost(yˆ,y) = m LCE(yˆ(i),y(i))
=
= −
􏰑m i=1
􏰑m i=1
i=1
1􏰑m 􏰄􏰅
= −m y(i) logσ(w·x(i) +b)+(1−y(i))log 1−σ(w·x(i) +b) i=1
(5.20) The mini-batch gradient is the average of the individual gradients from Eq. 5.18:
􏰒m i=1
∂Cost(yˆ,y) = 1 􏰑m 􏰓σ(w·x(i) +b)−y(i)􏰔x(i) (5.21) ∂wjm j
(5.19)
 i=1
Numquam ponenda est pluralitas sine necessitate
‘Plurality should never be proposed unless needed’ William of Occam
There is a problem with learning weights that make the model perfectly match the training data. If a feature is perfectly predictive of the outcome because it happens to only occur in one class, it will be assigned a very high weight. The weights for features will attempt to perfectly fit details of the training set, in fact too perfectly, modeling noisy factors that just accidentally correlate with the class. This problem is called overfitting. A good model should be able to generalize well from the training
5.5 Regularization
overfitting generalize

regularization
5.5 • REGULARIZATION 89
data to the unseen test set, but a model that overfits will have poor generalization. To avoid overfitting, a new regularization term R(θ) is added to the objective function in Eq. 5.13, resulting in the following objective for a batch of m exam- ples (slightly rewritten from Eq. 5.13 to be maximizing log probability rather than
minimizing loss, and removing the m1 term which doesn’t affect the argmax):
ˆ 􏰑m
θ = argmax log P(y(i) |x(i) ) − α R(θ ) (5.22)
θ
The new regularization term R(θ) is used to penalize large weights. Thus a setting of the weights that matches the training data perfectly— but uses many weights with high values to do so—will be penalized more than a setting that matches the data a little less well, but does so using smaller weights. There are two common ways to compute this regularization term R(θ ). L2 regularization is a quadratic function of the weight values, named because it uses the (square of the) L2 norm of the weight values. The L2 norm, ||θ||2, is the same as the Euclidean distance of the vector θ from the origin. If θ consists of n weights, then:
L2 regularization
L1 regularization
L1 regularization is a linear function of the weight values, named after the L1 norm ||W||1, the sum of the absolute values of the weights, or Manhattan distance (the Manhattan distance is the distance you’d have to walk between two points in a city with a street grid like New York):
􏰑n
R(θ) = ||θ||1 = The L1 regularized objective function becomes:
θ = argmax logP(y(i)|x(i)) −α |θj|
lasso ridge
2 􏰑n 2 R(θ) = ||θ||2 = θj
j=1 The L2 regularized objective function becomes:
(5.23)
(5.24)
i=1
ˆ 􏰍􏰑m 􏰎􏰑n
θ = argmax log P(y(i) |x(i) ) − α θ j2
θ
i=1 j=1
(5.25)
(5.26)
These kinds of regularization come from statistics, where L1 regularization is called lasso regression (Tibshirani, 1996) and L2 regularization is called ridge regression, and both are commonly used in language processing. L2 regularization is easier to optimize because of its simple derivative (the derivative of θ2 is just 2θ), while L1 regularization is more complex (the derivative of |θ | is non-continuous at zero). But where L2 prefers weight vectors with many small weights, L1 prefers sparse solutions with some larger weights but many more weights set to zero. Thus L1 regularization leads to much sparser weight vectors, that is, far fewer features.
Both L1 and L2 regularization have Bayesian interpretations as constraints on the prior of how weights should look. L1 regularization can be viewed as a Laplace prior on the weights. L2 regularization corresponds to assuming that weights are
|θi|
ˆ 􏰍􏰑m 􏰎􏰑n
θ
1=i j=1
i=1

90
CHAPTER 5 • LOGISTIC REGRESSION
distributed according to a Gaussian distribution with mean μ = 0. In a Gaussian or normal distribution, the further away a value is from the mean, the lower its probability (scaled by the variance σ ). By using a Gaussian prior on the weights, we are saying that weights prefer to have the value 0. A Gaussian for a weight θ j is
􏰕1 exp􏰋−(θj−μj)2􏰌 (5.27) 2 π σ 2j 2 σ 2j
If we multiply each weight by a Gaussian prior on the weight, we are thus maximiz- ing the following constraint:
   5.6
multinomial logistic regression
softmax
Sometimes we need more than two classes. Perhaps we might want to do 3-way sentiment classification (positive, negative, or neutral). Or we could be assigning some of the labels we will introduce in Chapter 8, like the part of speech of a word (choosing from 10, 30, or even 50 different parts of speech), or the named entity type of a phrase (choosing from tags like person, location, organization).
In such cases we use multinomial logistic regression, also called softmax re- gression (or, historically, the maxent classifier). In multinomial logistic regression the target y is a variable that ranges over more than two classes; we want to know the probability of y being in each potential class c ∈ C, p(y = c|x).
The multinomial logistic classifier uses a generalization of the sigmoid, called the softmax function, to compute the probability p(y = c|x). The softmax function takes a vector z = [z1,z2,...,zk] of k arbitrary values and maps them to a probability distribution, with each value in the range (0,1), and all the values summing to 1. Like the sigmoid, it is an exponential function.
(5.30)
(5.31)
ˆ 􏰒M 􏰒n 1 􏰋(θj−μj)2􏰌 θ = argmax P(y(i)|x(i))× 􏰕 2 exp − 2σ2
θ i=1 j=1 2πσj j which in log space, with μ = 0, and assuming 2σ 2 = 1, corresponds to
ˆ 􏰑m 􏰑n
θ = argmax log P(y(i) |x(i) ) − α θ j2
θ
Multinomial logistic regression
(5.28)
(5.29)
   i=1 j=1 which is in the same form as Eq. 5.24.
For a vector z of dimensionality k, the softmax is defined as: softmax(zi) = 􏰐 exp(zi) 1 ≤ i ≤ k
kj=1exp(zj)
The softmax of an input vector z = [z1,z2,...,zk] is thus a vector itself:
 softmax(z) = 􏰍􏰐exp(z1) , 􏰐exp(z2) ,..., 􏰐exp(zk) 􏰎 ki=1 exp(zi) ki=1 exp(zi) ki=1 exp(zi)
   
5.6 • MULTINOMIAL LOGISTIC REGRESSION 91 The denominator 􏰐ki=1 exp(zi) is used to normalize all the values into probabil-
ities. Thus for example given a vector:
z = [0.6, 1.1, −1.5, 1.2, 3.2, −1.1]
the resulting (rounded) softmax(z) is
[0.055, 0.090, 0.006, 0.099, 0.74, 0.010]
Again like the sigmoid, the input to the softmax will be the dot product between a weight vector w and an input vector x (plus a bias). But now we’ll need separate weight vectors (and bias) for each of the K classes.
p(y = c|x) = 􏰑exp(wc ·x+bc) (5.32) k
exp(wj ·x+bj) j=1
Like the sigmoid, the softmax has the property of squashing values toward 0 or 1. Thus if one of the inputs is larger than the others, it will tend to push its probability toward 1, and suppress the probabilities of the smaller inputs.
5.6.1 Features in Multinomial Logistic Regression
Features in multinomial logistic regression function similarly to binary logistic re- gression, with one difference that we’ll need separate weight vectors (and biases) for each of the K classes. Recall our binary exclamation point feature x5 from page 79:
x5 = 􏰊1 if “!”∈doc 0 otherwise
In binary classification a positive weight w5 on a feature influences the classifier toward y = 1 (positive sentiment) and a negative weight influences it toward y = 0 (negative sentiment) with the absolute value indicating how important the feature is. For multinominal logistic regression, by contrast, with separate weights for each class, a feature can be evidence for or against each individual class.
In 3-way multiclass sentiment classification, for example, we must assign each document one of the 3 classes +, −, or 0 (neutral). Now a feature related to excla- mation marks might have a negative weight for 0 documents, and a positive weight for + or − documents:
 Feature D􏰊efinition w5,+ w5,− w5,0 f5(x) 1 if “!” ∈ doc 3.5 3.1 −5.3
5.6.2 Learning in Multinomial Logistic Regression
The loss function for multinomial logistic regression generalizes the loss function for binary logistic regression from 2 to K classes. Recall that that the cross-entropy loss for binary logistic regression (repeated from Eq. 5.11) is:
LCE(yˆ,y)=−logp(y|x) = −[ylogyˆ+(1−y)log(1−yˆ)] (5.33)
 0 otherwise

92
CHAPTER 5 • LOGISTIC REGRESSION
The loss function for multinominal logistic regression generalizes the two terms in Eq. 5.33 (one that is non-zero when y = 1 and one that is non-zero when y = 0) to K terms. The loss function for a single example x is thus the sum of the logs of the K output classes, each weighted by yk, the probability of the true class :
(5.34)
􏰑K L(yˆ,y)=− ylogyˆ
CE kk k=1
= −
􏰑K k=1
yklogpˆ(y=k|x)
Because only one class (let’s call it i) is the correct one, the vector y takes the value 1onlyforthisvalueofk,i.e.,hasyi =1andyj =0 ∀j̸=i. Avectorlikethis, with one value=1 and the rest 0, is called a one-hot vector. The terms in the sum in Eq. 5.34 will thus be 0 except for the term corresponding to the true class, i.e.:
􏰑K k=1
􏰑K k=1
LCE(yˆ,y) = − = −
1{y=k}logpˆ(y=k|x)
exp(wk ·x+bk)
1{y = k}log 􏰐K exp(wj ·x+bj) (5.35) j=1
 negative log likelihood loss
Hence the cross-entropy loss is simply the log of the output probability correspond- ing to the correct class, and we therefore also call this the negative log likelihood loss:
LCE(yˆ,y)
= −logyˆk, (where k is the correct class)
= −log􏰐exp(wk·x+bk) (wherekisthecorrectclass)(5.36)
Kj=1 exp(wj ·x+bj)
 The gradient for a single example turns out to be very similar to the gradient for binary logistic regression, although we don’t show the derivation here. It is the difference between the value for the true class k (which is 1) and the probability the classifier outputs for class k, weighted by the value of the input xi corresponding to the ith element of the weight for class k wk,i:
∂LCE = ∂wk,i
−(1{y = k}− p(y = k|x))xi
􏰋 exp(wk ·x+bk) 􏰌
Often we want to know more than just the correct classification of an observation.
We want to know why the classifier made the decision it did. That is, we want our interpretable decision to be interpretable. Interpretability can be hard to define strictly, but the core idea is that as humans we should know why our algorithms reach the conclu- sions they do. Because the features to logistic regression are often human-designed,
 − 1{y = k}− 􏰐Kj=1 exp(wj ·x+bj) 5.7 Interpreting models
xi (5.37)
=
 
5.8 • ADVANCED: DERIVING THE GRADIENT EQUATION 93
one way to understand a classifier’s decision is to understand the role each feature plays in the decision. Logistic regression can be combined with statistical tests (the likelihood ratio test, or the Wald test); investigating whether a particular feature is significant by one of these tests, or inspecting its magnitude (how large is the weight w associated with the feature?) can help us interpret why the classifier made the decision it makes. This is enormously important for building transparent models.
Furthermore, in addition to its use as a classifier, logistic regression in NLP and many other fields is widely used as an analytic tool for testing hypotheses about the effect of various explanatory variables (features). In text classification, perhaps we want to know if logically negative words (no, not, never) are more likely to be asso- ciated with negative sentiment, or if negative reviews of movies are more likely to discuss the cinematography. However, in doing so it’s necessary to control for po- tential confounds: other factors that might influence sentiment (the movie genre, the year it was made, perhaps the length of the review in words). Or we might be study- ing the relationship between NLP-extracted linguistic features and non-linguistic outcomes (hospital readmissions, political outcomes, or product sales), but need to control for confounds (the age of the patient, the county of voting, the brand of the product). In such cases, logistic regression allows us to test whether some feature is associated with some outcome above and beyond the effect of other features.
5.8 Advanced: Deriving the Gradient Equation
chain rule
Finally, the chain rule of derivatives. Suppose we are computing the derivative of a composite function f (x) = u(v(x)). The derivative of f (x) is the derivative of u(x) with respect to v(x) times the derivative of v(x) with respect to x:
df = du·dv (5.40) dx dvdx
First, we want to know the derivative of the loss function with respect to a single weight w j (we’ll need to compute it for each weight, and for the bias):
In this section we give the derivation of the gradient of the cross-entropy loss func- tion LCE for logistic regression. Let’s start with some quick calculus refreshers. First, the derivative of ln(x):
d ln(x) = 1 dx x
Second, the (very elegant) derivative of the sigmoid: dσ(z) = σ(z)(1−σ(z))
(5.38)
(5.39)
 dz
∂LCE = ∂ −[ylogσ(w·x+b)+(1−y)log(1−σ(w·x+b))] ∂wj ∂wj
 = −􏰈 ∂ ylogσ(w·x+b)+ ∂ (1−y)log[1−σ(w·x+b)]􏰉 ∂wj ∂wj
(5.41)

94 CHAPTER 5 • LOGISTIC REGRESSION
Next, using the chain rule, and relying on the derivative of log:
(5.42)
(5.43)
And now plugging in the derivative of the sigmoid, and using the chain rule one more time, we end up with Eq. 5.44:
∂LCE = −􏰈 y−σ(w·x+b) 􏰉σ(w·x+b)[1−σ(w·x+b)]∂(w·x+b) ∂wj 􏰈σ(w·x+b)[1−σ(w·x+b)]􏰉 ∂wj
∂LCE = − y ∂ σ(w·x+b)− 1−y ∂ 1−σ(w·x+b)
   ∂wj σ(w·x+b) ∂wj 1−σ(w·x+b) ∂wj Rearranging terms:
∂LCE =−􏰈 y − 1−y 􏰉 ∂ σ(w·x+b) ∂wj σ(w·x+b) 1−σ(w·x+b) ∂wj
      = − y−σ(w·x+b) σ(w·x+b)[1−σ(w·x+b)]
= −[y−σ(w·x+b)]xj = [σ(w·x+b)−y]xj
5.9 Summary
σ(w·x+b)[1−σ(w·x+b)]xj
(5.44)
 This chapter introduced the logistic regression model of classification.
• Logistic regression is a supervised machine learning classifier that extracts real-valued features from the input, multiplies each by a weight, sums them, and passes the sum through a sigmoid function to generate a probability. A threshold is used to make a decision.
• Logistic regression can be used with two classes (e.g., positive and negative sentiment) or with multiple classes (multinomial logistic regression, for ex- ample for n-ary text classification, part-of-speech labeling, etc.).
• Multinomial logistic regression uses the softmax function to compute proba- bilities.
• The weights (vector w and bias b) are learned from a labeled training set via a loss function, such as the cross-entropy loss, that must be minimized.
• Minimizingthislossfunctionisaconvexoptimizationproblem,anditerative algorithms like gradient descent are used to find the optimal weights.
• Regularization is used to avoid overfitting.
• Logistic regression is also one of the most useful analytic tools, because of its
ability to transparently study the importance of individual features.
Bibliographical and Historical Notes
Logistic regression was developed in the field of statistics, where it was used for the analysis of binary data by the 1960s, and was particularly common in medicine (Cox, 1969). Starting in the late 1970s it became widely used in linguistics as one

maximum entropy
EXERCISES 95
of the formal foundations of the study of linguistic variation (Sankoff and Labov, 1979).
Nonetheless, logistic regression didn’t become common in natural language pro- cessing until the 1990s, when it seems to have appeared simultaneously from two directions. The first source was the neighboring fields of information retrieval and speech processing, both of which had made use of regression, and both of which lent many other statistical techniques to NLP. Indeed a very early use of logistic regression for document routing was one of the first NLP applications to use (LSI) embeddings as word representations (Schu ̈tze et al., 1995).
At the same time in the early 1990s logistic regression was developed and ap- plied to NLP at IBM Research under the name maximum entropy modeling or maxent (Berger et al., 1996), seemingly independent of the statistical literature. Un- der that name it was applied to language modeling (Rosenfeld, 1996), part-of-speech tagging (Ratnaparkhi, 1996), parsing (Ratnaparkhi, 1997), coreference resolution (Kehler, 1997b), and text classification (Nigam et al., 1999).
More on classification can be found in machine learning textbooks (Hastie et al. 2001, Witten and Frank 2005, Bishop 2006, Murphy 2012).
Exercises

96 CHAPTER 6 • VECTOR SEMANTICS AND EMBEDDINGS CHAPTER
6
  distributional hypothesis
vector semantics embeddings
representation learning
Vector Semantics and Embeddings
荃者所以在鱼，得鱼而忘荃 Netsareforfish;
Once you get the fish, you can forget the net.
言者所以在意，得意而忘言 Wordsareformeaning;
Once you get the meaning, you can forget the words
庄子(Zhuangzi), Chapter 26
The asphalt that Los Angeles is famous for occurs mainly on its freeways. But in the middle of the city is another patch of asphalt, the La Brea tar pits, and this asphalt preserves millions of fossil bones from the last of the Ice Ages of the Pleis- tocene Epoch. One of these fossils is the Smilodon, or saber-toothed tiger, instantly recognizable by its long canines. Five million years ago or so, a completely different sabre-tooth tiger called Thylacosmilus lived
in Argentina and other parts of South Amer-
ica. Thylacosmilus was a marsupial whereas
Smilodon was a placental mammal, but Thy-
lacosmilus had the same long upper canines
and, like Smilodon, had a protective bone
flange on the lower jaw. The similarity of
these two mammals is one of many examples
of parallel or convergent evolution, in which particular contexts or environments lead to the evolution of very similar structures in different species (Gould, 1980).
The role of context is also important in the similarity of a less biological kind of organism: the word. Words that occur in similar contexts tend to have similar meanings. This link between similarity in how words are distributed and similarity in what they mean is called the distributional hypothesis. The hypothesis was first formulated in the 1950s by linguists like Joos (1950), Harris (1954), and Firth (1957), who noticed that words which are synonyms (like oculist and eye-doctor) tended to occur in the same environment (e.g., near words like eye or examined) with the amount of meaning difference between two words “corresponding roughly to the amount of difference in their environments” (Harris, 1954, 157).
In this chapter we introduce vector semantics, which instantiates this linguistic hypothesis by learning representations of the meaning of words, called embeddings, directly from their distributions in texts. These representations are used in every nat- ural language processing application that makes use of meaning, and the static em- beddings we introduce here underlie the more powerful dynamic or contextualized embeddings like BERT that we will see in Chapter 10.
These word representations are also the first example in this book of repre- sentation learning, automatically learning useful representations of the input text. Finding such self-supervised ways to learn representations of the input, instead of creating representations by hand via feature engineering, is an important focus of NLP research (Bengio et al., 2013).

6.1
6.1 • LEXICAL SEMANTICS 97
Let’s begin by introducing some basic principles of word meaning. How should we represent the meaning of a word? In the n-gram models of Chapter 3, and in classical NLP applications, our only representation of a word is as a string of letters, or an index in a vocabulary list. This representation is not that different from a tradition in philosophy, perhaps you’ve seen it in introductory logic classes, in which the meaning of words is represented by just spelling the word with small capital letters; representing the meaning of “dog” as DOG, and “cat” as CAT.
Representing the meaning of a word by capitalizing it is a pretty unsatisfactory model. You might have seen a joke due originally to semanticist Barbara Partee (Carlson, 1977):
Q: What’s the meaning of life? A: LIFE’
Surely we can do better than this! After all, we’ll want a model of word meaning to do all sorts of things for us. It should tell us that some words have similar mean- ings (cat is similar to dog), others are antonyms (cold is the opposite of hot), some have positive connotations (happy) while others have negative connotations (sad). It should represent the fact that the meanings of buy, sell, and pay offer differing perspectives on the same underlying purchasing event (If I buy something from you, you’ve probably sold it to me, and I likely paid you). More generally, a model of word meaning should allow us to draw inferences to address meaning-related tasks like question-answering or dialogue.
In this section we summarize some of these desiderata, drawing on results in the linguistic study of word meaning, which is called lexical semantics; we’ll return to and expand on this list in Chapter 18 and Chapter 10.
Lemmas and Senses Let’s start by looking at how one word (we’ll choose mouse)
might be defined in a dictionary (simplified from the online dictionary WordNet):
mouse (N)
1.  any of numerous small rodents...
2.  a hand-operated device that controls a cursor...
Here the form mouse is the lemma, also called the citation form. The form mouse would also be the lemma for the word mice; dictionaries don’t have separate definitions for inflected forms like mice. Similarly sing is the lemma for sing, sang, sung. In many languages the infinitive form is used as the lemma for the verb, so Spanish dormir “to sleep” is the lemma for duermes “you sleep”. The specific forms sung or carpets or sing or duermes are called wordforms.
As the example above shows, each lemma can have multiple meanings; the lemma mouse can refer to the rodent or the cursor control device. We call each of these aspects of the meaning of mouse a word sense. The fact that lemmas can be polysemous (have multiple senses) can make interpretation difficult (is someone who types “mouse info” into a search engine looking for a pet or a tool?). Chapter 18 will discuss the problem of polysemy, and introduce word sense disambiguation, the task of determining which sense of a word is being used in a particular context.
Synonymy One important component of word meaning is the relationship be- tween word senses. For example when one word has a sense whose meaning is identical to a sense of another word, or nearly identical, we say the two senses of those two words are synonyms. Synonyms include such pairs as
lexical semantics
lemma citation form
wordform
synonym
Lexical Semantics

98 CHAPTER 6 • VECTOR SEMANTICS AND EMBEDDINGS
couch/sofa vomit/throwup filbert/hazelnut car/automobile
propositional meaning
principle of contrast
A more formal definition of synonymy (between words rather than senses) is that two words are synonymous if they are substitutable for one another in any sentence without changing the truth conditions of the sentence, the situations in which the sentence would be true. We often say in this case that the two words have the same propositional meaning.
While substitutions between some pairs of words like car / automobile or wa- ter / H2O are truth preserving, the words are still not identical in meaning. Indeed, probably no two words are absolutely identical in meaning. One of the fundamen- tal tenets of semantics, called the principle of contrast (Girard 1718, Bre ́al 1897, Clark 1987), states that a difference in linguistic form is always associated with some difference in meaning. For example, the word H2O is used in scientific contexts and would be inappropriate in a hiking guide—water would be more appropriate— and this genre difference is part of the meaning of the word. In practice, the word syn- onym is therefore used to describe a relationship of approximate or rough synonymy.
Word Similarity While words don’t have many synonyms, most words do have lots of similar words. Cat is not a synonym of dog, but cats and dogs are certainly similar words. In moving from synonymy to similarity, it will be useful to shift from talking about relations between word senses (like synonymy) to relations between words (like similarity). Dealing with words avoids having to commit to a particular representation of word senses, which will turn out to simplify our task.
The notion of word similarity is very useful in larger semantic tasks. Know- ing how similar two words are can help in computing how similar the meaning of two phrases or sentences are, a very important component of natural language un- derstanding tasks like question answering, paraphrasing, and summarization. One way of getting values for word similarity is to ask humans to judge how similar one word is to another. A number of datasets have resulted from such experiments. For example the SimLex-999 dataset (Hill et al., 2015) gives values on a scale from 0 to 10, like the examples below, which range from near-synonyms (vanish, disappear) to pairs that scarcely seem to have anything in common (hole, agreement):
9.8 5.95 3.65 0.98 0.3
The meaning of two words can be related in ways other than similarity. One such class of connections is called word relatedness (Budanitsky
and Hirst, 2006), also traditionally called word association in psychology. Consider the meanings of the words coffee and cup. Coffee is not similar to cup; they share practically no features (coffee is a plant or a beverage, while a cup is a manufactured object with a particular shape). But coffee and cup are clearly related; they are associated by co-participating in an everyday event (the event of drinking coffee out of a cup). Similarly scalpel and surgeon are not similar but are related
eventively (a surgeon tends to make use of a scalpel).
One common kind of relatedness between words is if they belong to the same
semantic field. A semantic field is a set of words which cover a particular semantic domain and bear structured relations with each other. For example, words might be related by being in the semantic field of hospitals (surgeon, scalpel, nurse, anes- thetic, hospital), restaurants (waiter, menu, plate, food, chef), or houses (door, roof,
similarity
 vanish disappear
 belief impression
 muscle bone
 modest flexible
 hole agreement
  relatedness association
semantic field
Word Relatedness

topic models
semantic frame
6.1 • LEXICAL SEMANTICS 99
kitchen, family, bed). Semantic fields are also related to topic models, like Latent Dirichlet Allocation, LDA, which apply unsupervised learning on large sets of texts to induce sets of associated words from text. Semantic fields and topic models are very useful tools for discovering topical structure in documents.
In Chapter 18 we’ll introduce more relations between senses like hypernymy or IS-A, antonymy (opposites) and meronymy (part-whole relations).
Semantic Frames and Roles Closely related to semantic fields is the idea of a semantic frame. A semantic frame is a set of words that denote perspectives or participants in a particular type of event. A commercial transaction, for example, is a kind of event in which one entity trades money to another entity in return for some good or service, after which the good changes hands or perhaps the service is performed. This event can be encoded lexically by using verbs like buy (the event from the perspective of the buyer), sell (from the perspective of the seller), pay (focusing on the monetary aspect), or nouns like buyer. Frames have semantic roles (like buyer, seller, goods, money), and words in a sentence can take on these roles.
Knowing that buy and sell have this relation makes it possible for a system to know that a sentence like Sam bought the book from Ling could be paraphrased as Ling sold the book to Sam, and that Sam has the role of the buyer in the frame and Ling the seller. Being able to recognize such paraphrases is important for question answering, and can help in shifting perspective for machine translation.
Connotation Finally, words have affective meanings or connotations. The word connotation has different meanings in different fields, but here we use it to mean the aspects of a word’s meaning that are related to a writer or reader’s emotions, sentiment, opinions, or evaluations. For example some words have positive conno- tations (happy) while others have negative connotations (sad). Even words whose meanings are similar in other ways can vary in connotation; consider the difference in connotations between fake, knockoff, forgery, on the one hand, and copy, replica, reproduction on the other, or innocent (positive connotation) and naive (negative connotation). Some words describe positive evaluation (great, love) and others neg- ative evaluation (terrible, hate). Positive or negative evaluation language is called sentiment, as we saw in Chapter 4, and word sentiment plays a role in important tasks like sentiment analysis, stance detection, and applications of NLP to the lan- guage of politics and consumer reviews.
Early work on affective meaning (Osgood et al., 1957) found that words varied along three important dimensions of affective meaning:
valence: the pleasantness of the stimulus
arousal: the intensity of emotion provoked by the stimulus dominance: the degree of control exerted by the stimulus
Thus words like happy or satisfied are high on valence, while unhappy or an- noyed are low on valence. Excited is high on arousal, while calm is low on arousal. Controlling is high on dominance, while awed or influenced are low on dominance. Each word is thus represented by three numbers, corresponding to its value on each of the three dimensions:
connotations
sentiment
  Valence Arousal Dominance
 courageous music heartbreak cub
 8.05 5.5 7.38
 7.67 5.57 6.5
 2.45 5.65 3.58
 6.71 3.95 4.24
   
100
6.2
CHAPTER 6 • VECTOR SEMANTICS AND EMBEDDINGS
Osgood et al. (1957) noticed that in using these 3 numbers to represent the meaning of a word, the model was representing each word as a point in a three- dimensional space, a vector whose three dimensions corresponded to the word’s rating on the three scales. This revolutionary idea that word meaning could be rep- resented as a point in space (e.g., that part of the meaning of heartbreak can be represented as the point [2.45,5.65,3.58]) was the first expression of the vector se- mantics models that we introduce next.
Vector Semantics
vector semantics
Vectors semantics is the standard way to represent word meaning in NLP, helping us model many of the aspects of word meaning we saw in the previous section. The roots of the model lie in the 1950s when two big ideas converged: Osgood’s (1957) idea mentioned above to use a point in three-dimensional space to represent the connotation of a word, and the proposal by linguists like Joos (1950), Harris (1954), and Firth (1957) to define the meaning of a word by its distribution in language use, meaning its neighboring words or grammatical environments. Their idea was that two words that occur in very similar distributions (whose neighboring words are similar) have similar meanings.
For example, suppose you didn’t know the meaning of the word ongchoi (a re- cent borrowing from Cantonese) but you see it in the following contexts:
(6.1) Ongchoiisdelicioussauteedwithgarlic. (6.2) Ongchoiissuperboverrice.
(6.3) ...ongchoileaveswithsaltysauces...
And suppose that you had seen many of these context words in other contexts:
(6.4) ...spinachsauteedwithgarlicoverrice... (6.5) ...chardstemsandleavesaredelicious... (6.6) ...collardgreensandothersaltyleafygreens
The fact that ongchoi occurs with words like rice and garlic and delicious and salty, as do words like spinach, chard, and collard greens might suggest that ongchoi is a leafy green similar to these other leafy greens.1 We can do the same thing computationally by just counting words in the context of ongchoi.
The idea of vector semantics is to represent a word as a point in a multidimen- sional semantic space that is derived (in ways we’ll see) from the distributions of word neighbors. Vectors for representing words are called embeddings (although the term is sometimes more strictly applied only to dense vectors like word2vec (Section 6.8), rather than sparse tf-idf or PPMI vectors (Section 6.3-Section 6.6)). The word “embedding” derives from its mathematical sense as a mapping from one space or structure to another, although the meaning has shifted; see the end of the chapter.
Fig. 6.1 shows a visualization of embeddings learned for sentiment analysis, showing the location of selected words projected down from 60-dimensional space into a two dimensional space. Notice the distinct regions containing positive words, negative words, and neutral function words.
1 It’s in fact Ipomoea aquatica, a relative of morning glory sometimes called water spinach in English.
embeddings
 
6.3
A two-dimensional (t-SNE) projection of embeddings for some words and phrases, showing that words with similar meanings are nearby in space. The original 60- dimensional embeddings were trained for sentiment analysis. Simplified from Li et al. (2015) with colors added for explanation.
The fine-grained model of word similarity of vector semantics offers enormous power to NLP applications. NLP applications like the sentiment classifiers of Chap- ter 4 or Chapter 5 depend on the same words appearing in the training and test sets. But by representing words as embeddings, classifiers can assign sentiment as long as it sees some words with similar meanings. And as we’ll see, vector semantic models can be learned automatically from text without supervision.
In this chapter we’ll introduce the two most commonly used models. In the tf-idf model, an important baseline, the meaning of a word is defined by a simple function of the counts of nearby words. We will see that this method results in very long vectors that are sparse, i.e. mostly zeros (since most words simply never occur in the context of others). We’ll introduce the word2vec model family for construct- ing short, dense vectors that have useful semantic properties. We’ll also introduce the cosine, the standard way to use embeddings to compute semantic similarity, be- tween two words, two sentences, or two documents, an important tool in practical applications like question answering, summarization, or automatic essay grading.
Words and Vectors
“The most important attributes of a vector in 3-space are {Location, Location, Location}” Randall Munroe, https://xkcd.com/2358/
Vector or distributional models of meaning are generally based on a co-occurrence matrix, a way of representing how often words co-occur. We’ll look at two popular matrices: the term-document matrix and the term-term matrix.
6.3.1 Vectors and documents
In a term-document matrix, each row represents a word in the vocabulary and each column represents a document from some collection of documents. Fig. 6.2 shows a small selection from a term-document matrix showing the occurrence of four words in four plays by Shakespeare. Each cell in this matrix represents the number of times a particular word (defined by the row) occurs in a particular document (defined by the column). Thus fool appeared 58 times in Twelfth Night.
The term-document matrix of Fig. 6.2 was first defined as part of the vector space model of information retrieval (Salton, 1971). In this model, a document is
term-document matrix
vector space model
6.3 • WORDS AND VECTORS 101
    to by
that now ai
than
’s
not good bad dislike
incredibly bad
incredibly good
worst worse
with
you is
are
very good amazing
fantastic wonderful terrific nice
good
 Figure 6.1
 
102 CHAPTER 6 • VECTOR SEMANTICS AND EMBEDDINGS
As You Like It Twelfth Night Julius Caesar Henry V
  vector
vector space dimension
The term-document matrix for four words in four Shakespeare plays. Each cell contains the number of times the (row) word occurs in the (column) document.
represented as a count vector, a column in Fig. 6.3.
To review some basic linear algebra, a vector is, at heart, just a list or array of
numbers. So As You Like It is represented as the list [1,114,36,20] (the first column vector in Fig. 6.3) and Julius Caesar is represented as the list [7,62,1,2] (the third column vector). A vector space is a collection of vectors, characterized by their dimension. In the example in Fig. 6.3, the document vectors are of dimension 4, just so they fit on the page; in real term-document matrices, the vectors representing each document would have dimensionality |V |, the vocabulary size.
The ordering of the numbers in a vector space indicates different meaningful di- mensions on which documents vary. Thus the first dimension for both these vectors corresponds to the number of times the word battle occurs, and we can compare each dimension, noting for example that the vectors for As You Like It and Twelfth Night have similar values (1 and 0, respectively) for the first dimension.
The term-document matrix for four words in four Shakespeare plays. The red boxes show that each document is represented as a column vector of length four.
We can think of the vector for a document as a point in |V |-dimensional space; thus the documents in Fig. 6.3 are points in 4-dimensional space. Since 4-dimensional spaces are hard to visualize, Fig. 6.4 shows a visualization in two dimensions; we’ve arbitrarily chosen the dimensions corresponding to the words battle and fool.
battle 1 0 7 13 good 114 80 62 89 fool 36 58 1 4 wit 20 15 2 3
 Figure 6.2
  As You Like It Twelfth Night Julius Caesar Henry V
 battle 1 0 7 13 good 114 80 62 89 fool 36 58 1 4 wit 20 15 2 3
     Figure 6.3
       40 15 10 5
Henry V [4,13]
Julius Caesar [1,7]
As You Like It [36,1]
Twelfth Night [58,0]
5 10 15 20 25 30 35 40 45 50 55 60
fool
 Figure 6.4
 A spatial visualization of the document vectors for the four Shakespeare play documents, showing just two of the dimensions, corresponding to the words battle and fool. The comedies have high values for the fool dimension and low values for the battle dimension.
Term-document matrices were originally defined as a means of finding similar documents for the task of document information retrieval. Two documents that are
battle

information retrieval
6.3 • WORDS AND VECTORS 103
similar will tend to have similar words, and if two documents have similar words their column vectors will tend to be similar. The vectors for the comedies As You Like It [1,114,36,20] and Twelfth Night [0,80,58,15] look a lot more like each other (more fools and wit than battles) than they look like Julius Caesar [7,62,1,2] or Henry V [13,89,4,3]. This is clear with the raw numbers; in the first dimension (battle) the comedies have low numbers and the others have high numbers, and we can see it visually in Fig. 6.4; we’ll see very shortly how to quantify this intuition more formally.
A real term-document matrix, of course, wouldn’t just have 4 rows and columns, let alone 2. More generally, the term-document matrix has |V| rows (one for each word type in the vocabulary) and D columns (one for each document in the collec- tion); as we’ll see, vocabulary sizes are generally in the tens of thousands, and the number of documents can be enormous (think about all the pages on the web).
Information retrieval (IR) is the task of finding the document d from the D documents in some collection that best matches a query q. For IR we’ll therefore also represent a query by a vector, also of length |V |, and we’ll need a way to compare two vectors to find how similar they are. (Doing IR will also require efficient ways to store and manipulate these vectors by making use of the convenient fact that these vectors are sparse, i.e., mostly zeros).
Later in the chapter we’ll introduce some of the components of this vector com- parison process: the tf-idf term weighting, and the cosine similarity metric.
6.3.2 Words as vectors: document dimensions
We’ve seen that documents can be represented as vectors in a vector space. But vector semantics can also be used to represent the meaning of words. We do this by associating each word with a word vector— a row vector rather than a column vector, hence with different dimensions, as shown in Fig. 6.5. The four dimensions of the vector for fool, [36,58,1,4], correspond to the four Shakespeare plays. Word counts in the same four dimensions are used to form the vectors for the other 3 words: wit, [20,15,2,3]; battle, [1,0,7,13]; and good [114,80,62,89].
The term-document matrix for four words in four Shakespeare plays. The red boxes show that each word is represented as a row vector of length four.
For documents, we saw that similar documents had similar vectors, because sim- ilar documents tend to have similar words. This same principle applies to words: similar words have similar vectors because they tend to occur in similar documents. The term-document matrix thus lets us represent the meaning of a word by the doc- uments it tends to occur in.
6.3.3 Words as vectors: word dimensions
An alternative to using the term-document matrix to represent words as vectors of document counts, is to use the term-term matrix, also called the word-word ma- trix or the term-context matrix, in which the columns are labeled by words rather than documents. This matrix is thus of dimensionality |V | × |V | and each cell records
row vector
As You Like It Twelfth Night Julius Caesar Henry V
 battle 1 0 7 13 good 114 80 62 89 fool 36 58 1 4 wit 20 15 2 3
  Figure 6.5
   word-word matrix

104 CHAPTER 6 • VECTOR SEMANTICS AND EMBEDDINGS
the number of times the row (target) word and the column (context) word co-occur in some context in some training corpus. The context could be the document, in which case the cell represents the number of times the two words appear in the same document. It is most common, however, to use smaller contexts, generally a win- dow around the word, for example of 4 words to the left and 4 words to the right, in which case the cell represents the number of times (in some training corpus) the column word occurs in such a ±4 word window around the row word. For example here is one example each of some words in their windows:
istraditionallyfollowedby cherry often mixed, such as strawberry
pie,atraditionaldessert
rhubarb pie. Apple pie assistants.Thesedevicesusually
computerperipheralsandpersonal digital
acomputer.Thisincludes information availableontheinternet
If we then take every occurrence of each word (say strawberry) and count the context words around it, we get a word-word co-occurrence matrix. Fig. 6.6 shows a simplified subset of the word-word co-occurrence matrix for these four words com- puted from the Wikipedia corpus (Davies, 2015).
Co-occurrence vectors for four words in the Wikipedia corpus, showing six of the dimensions (hand-picked for pedagogical purposes). The vector for digital is outlined in red. Note that a real vector would have vastly more dimensions and thus be much sparser.
Note in Fig. 6.6 that the two words cherry and strawberry are more similar to each other (both pie and sugar tend to occur in their window) than they are to other words like digital; conversely, digital and information are more similar to each other than, say, to strawberry. Fig. 6.7 shows a spatial visualization.
aardvark ... computer data result pie sugar ...
 cherry 0 ... 2 8 9 442 25 ... strawberry 0 ... 0 0 1 60 19 ... digital 0 ... 1670 1683 85 5 4 ... information 0 ... 3325 3982 378 5 13 ...
  Figure 6.6
       4000
3000
2000 [1683,1670] 1000
information
[3982,3325]
digital
1000 2000 3000 4000
data
 Figure 6.7
 A spatial visualization of word vectors for digital and information, showing just two of the dimensions, corresponding to the words data and computer.
Note that |V |, the length of the vector, is generally the size of the vocabulary, of- ten between 10,000 and 50,000 words (using the most frequent words in the training corpus; keeping words after about the most frequent 50,000 or so is generally not helpful). Since most of these numbers are zero these are sparse vector representa- tions; there are efficient algorithms for storing and computing with sparse matrices.
Now that we have some intuitions, let’s move on to examine the details of com- puting word similarity. Afterwards we’ll discuss methods for weighting cells.
computer

6.4 • COSINE FOR MEASURING SIMILARITY 105 6.4 Cosine for measuring similarity
dot product inner product
vector length
To measure similarity between two target words v and w, we need a metric that takes two vectors (of the same dimensionality, either both with words as dimensions, hence of length |V |, or both with documents as dimensions as documents, of length |D|) and gives a measure of their similarity. By far the most common similarity metric is the cosine of the angle between the vectors.
The cosine—like most measures for vector similarity used in NLP—is based on the dot product operator from linear algebra, also called the inner product:
􏰑N i=1
As we will see, most metrics for similarity between vectors are based on the dot product. The dot product acts as a similarity metric because it will tend to be high just when the two vectors have large values in the same dimensions. Alternatively, vectors that have zeros in different dimensions—orthogonal vectors—will have a dot product of 0, representing their strong dissimilarity.
This raw dot product, however, has a problem as a similarity metric: it favors long vectors. The vector length is defined as
􏰚􏰙􏰙􏰑N
|v|=􏰘 v2i (6.8)
i=1
The dot product is higher if a vector is longer, with higher values in each dimension. More frequent words have longer vectors, since they tend to co-occur with more words and have higher co-occurrence values with each of them. The raw dot product thus will be higher for frequent words. But this is a problem; we’d like a similarity metric that tells us how similar two words are regardless of their frequency.
We modify the dot product to normalize for the vector length by dividing the dot product by the lengths of each of the two vectors. This normalized dot product turns out to be the same as the cosine of the angle between the two vectors, following from the definition of the dot product between two vectors a and b:
a·b = |a||b|cosθ
a·b = cosθ (6.9)
dot product(v,w) = v·w =
viwi = v1w1 +v2w2 +...+vNwN (6.7)
  cosine
unit vector
|a||b|
The cosine similarity metric between two vectors v and w thus can be computed as:
cosine(v,w) =
􏰑N
vi wi
v·w = 􏰚 i=1 􏰚 |v||w| 􏰙􏰙􏰑N 􏰙􏰙􏰑N
􏰘 v 2i 􏰘 i=1 i=1
(6.10)
    For some applications we pre-normalize each vector, by dividing it by its length, creating a unit vector of length 1. Thus we could compute a unit vector from a by dividing it by |a|. For unit vectors, the dot product is the same as the cosine.
w 2i

106
CHAPTER 6 • VECTOR SEMANTICS AND EMBEDDINGS
The cosine value ranges from 1 for vectors pointing in the same direction, through 0 for orthogonal vectors, to -1 for vectors pointing in opposite directions. But since raw frequency values are non-negative, the cosine for these vectors ranges from 0–1.
Let’s see how the cosine computes which of the words cherry or digital is closer in meaning to information, just using raw counts from the following shortened table:
pie data computer cherry 442 8 2
digital 5 1683 1670 information 5 3982 3325
442∗5+8∗3982+2∗3325
cos(cherry, information) = √4422 + 82 + 22 √52 + 39822 + 33252 = .017
5∗5+1683∗3982+1670∗3325
cos(digital, information) = √52 + 16832 + 16702 √52 + 39822 + 33252 = .996
The model decides that information is way closer to digital than it is to cherry, a result that seems sensible. Fig. 6.8 shows a visualization.
              500
cherry
digital information
500 1000 1500 2000 2500 3000
Dimension 2: ‘computer’
 Figure 6.8
 6.5
A (rough) graphical demonstration of cosine similarity, showing vectors for three words (cherry, digital, and information) in the two dimensional space defined by counts of the words computer and pie nearby. Note that the angle between digital and information is smaller than the angle between cherry and information. When two vectors are more similar, the cosine is larger but the angle is smaller; the cosine has its maximum (1) when the angle between two vectors is smallest (0◦); the cosine of all other angles is less than 1.
TF-IDF: Weighing terms in the vector
The co-occurrence matrices above represent each cell by frequencies, either of words with documents (Fig. 6.5), or words with other words (Fig. 6.6). But raw frequency is not the best measure of association between words. Raw frequency is very skewed and not very discriminative. If we want to know what kinds of contexts are shared by cherry and strawberry but not by digital and information, we’re not going to get good discrimination from words like the, it, or they, which occur frequently with all sorts of words and aren’t informative about any particular word. We saw this also in Fig. 6.3 for the Shakespeare corpus; the dimension for the word good is not very discriminative between plays; good is simply a frequent word and has roughly equivalent high frequencies in each of the plays.
It’s a bit of a paradox. Words that occur nearby frequently (maybe pie nearby cherry) are more important than words that only appear once or twice. Yet words
Dimension 1: ‘pie’

term frequency
6.5 • TF-IDF: WEIGHING TERMS IN THE VECTOR 107
that are too frequent—ubiquitous, like the or good— are unimportant. How can we balance these two conflicting constraints?
There are two common solutions to this problem: in this section we’ll describe the tf-idf algorithm, usually used when the dimensions are documents. In the next we introduce the PPMI algorithm (usually used when the dimensions are words).
The tf-idf algorithm (the ‘-’ here is a hyphen, not a minus sign) is the product of two terms, each term capturing one of these two intuitions:
The first is the term frequency (Luhn, 1957): the frequency of the word t in the document d. We can just use the raw count as the term frequency:
tft,d = count(t,d) (6.11)
More commonly we squash the raw frequency a bit, by using the log10 of the fre- quency instead. The intuition is that a word appearing 100 times in a document doesn’t make that word 100 times more likely to be relevant to the meaning of the document. Because we can’t take the log of 0, we normally add 1 to the count:2
tft,d = log10(count(t,d)+1) (6.12)
If we use log weighting, terms which occur 0 times in a document would have tf = log10(1) = 0, 10 times in a document tf = log10(11) = 1.4, 100 times tf = log10(101) = 2.004, 1000 times tf = 3.00044, and so on.
The second factor in tf-idf is used to give a higher weight to words that occur only in a few documents. Terms that are limited to a few documents are useful for discriminating those documents from the rest of the collection; terms that occur frequently across the entire collection aren’t as helpful. The document frequency dft of a term t is the number of documents it occurs in. Document frequency is not the same as the collection frequency of a term, which is the total number of times the word appears in the whole collection in any document. Consider in the collection of Shakespeare’s 37 plays the two words Romeo and action. The words have identical collection frequencies (they both occur 113 times in all the plays) but very different document frequencies, since Romeo only occurs in a single play. If our goal is to find documents about the romantic tribulations of Romeo, the word Romeo should be highly weighted, but not action:
We emphasize discriminative words like Romeo via the inverse document fre- quency or idf term weight (Sparck Jones, 1972). The idf is defined using the frac- tion N/dft, where N is the total number of documents in the collection, and dft is the number of documents in which term t occurs. The fewer documents in which a term occurs, the higher this weight. The lowest weight of 1 is assigned to terms that occur in all the documents. It’s usually clear what counts as a document: in Shake- speare we would use a play; when processing a collection of encyclopedia articles like Wikipedia, the document is a Wikipedia page; in processing newspaper articles, the document is a single article. Occasionally your corpus might not have appropri- ate document divisions and you might need to break up the corpus into documents yourself for the purposes of computing idf.
2 􏰊 1+log10 count(t,d) if count(t,d) > 0 Or we can use this alternative: tft,d = 0 otherwise
document frequency
CollectionFrequency DocumentFrequency
  Romeo 113 1
 action 113 31
  idf
 
108 CHAPTER 6 • VECTOR SEMANTICS AND EMBEDDINGS
 Word
 Romeo salad Falstaff forest
 battle wit fool good sweet
   tf-idf
Because of the large number of documents in many collections, this measure too is usually squashed with a log function. The resulting definition for inverse document frequency (idf) is thus
idft = log10 􏰆 N 􏰇 (6.13) dft
Here are some idf values for some words in the Shakespeare corpus, ranging from extremely informative words which occur in only one play like Romeo, to those that occur in a few like salad or Falstaff, to those which are very common like fool or so common as to be completely non-discriminative since they occur in all 37 plays like good or sweet.3
df idf
1 1.57 2 1.27 4 0.967 12 0.489 21 0.246 34 0.037 36 0.012 37 0
37 0
The tf-idf weighted value wt,d for word t in document d thus combines term
frequency tft,d (defined either by Eq. 6.11 or by Eq. 6.12) with idf from Eq. 6.13:
wt,d = tft,d ×idft (6.14)
Fig. 6.9 applies tf-idf weighting to the Shakespeare term-document matrix in Fig. 6.2, using the tf equation Eq. 6.12. Note that the tf-idf values for the dimension corre- sponding to the word good have now all become 0; since this word appears in every document, the tf-idf algorithm leads it to be ignored. Similarly, the word fool, which appears in 36 out of the 37 plays, has a much lower weight.
A tf-idf weighted term-document matrix for four words in four Shakespeare plays, using the counts in Fig. 6.2. For example the 0.049 value for wit in As You Like It is the product of tf = log10 (20 + 1) = 1.322 and idf = .037. Note that the idf weighting has eliminated the importance of the ubiquitous word good and vastly reduced the impact of the almost-ubiquitous word fool.
The tf-idf weighting is the way for weighting co-occurrence matrices in infor- mation retrieval, but also plays a role in many other aspects of natural language processing. It’s also a great baseline, the simple thing to try first. We’ll look at other weightings like PPMI (Positive Pointwise Mutual Information) in Section 6.6.
3 Sweet was one of Shakespeare’s favorite adjectives, a fact probably related to the increased use of sugar in European recipes around the turn of the 16th century (Jurafsky, 2014, p. 175).
As You Like It Twelfth Night Julius Caesar Henry V
  battle 0.074 0 0.22 0.28 good0 0 0 0
fool 0.019 0.021 0.0036 0.0083 wit 0.049 0.044 0.018 0.022
 Figure 6.9
   
6.6 • POINTWISE MUTUAL INFORMATION (PMI) 109 6.6 Pointwise Mutual Information (PMI)
pointwise mutual information
An alternative weighting function to tf-idf, PPMI (positive pointwise mutual infor- mation), is used for term-term-matrices, when the vector dimensions correspond to words rather than documents. PPMI draws on the intuition that the best way to weigh the association between two words is to ask how much more the two words co-occur in our corpus than we would have a priori expected them to appear by chance.
Pointwise mutual information (Fano, 1961)4 is one of the most important con- cepts in NLP. It is a measure of how often two events x and y occur, compared with what we would expect if they were independent:
I(x, y) = log2 P(x, y) (6.16) P(x)P(y)
The pointwise mutual information between a target word w and a context word c (Church and Hanks 1989, Church and Hanks 1990) is then defined as:
PMI(w, c) = log2 P(w, c) (6.17) P(w)P(c)
The numerator tells us how often we observed the two words together (assuming we compute probability by using the MLE). The denominator tells us how often we would expect the two words to co-occur assuming they each occurred indepen- dently; recall that the probability of two independent events both occurring is just the product of the probabilities of the two events. Thus, the ratio gives us an esti- mate of how much more the two words co-occur than we expect by chance. PMI is a useful tool whenever we need to find words that are strongly associated.
PMI values range from negative to positive infinity. But negative PMI values (which imply things are co-occurring less often than we would expect by chance) tend to be unreliable unless our corpora are enormous. To distinguish whether two words whose individual probability is each 10−6 occur together less often than chance, we would need to be certain that the probability of the two occurring to- gether is significantly different than 10−12, and this kind of granularity would require an enormous corpus. Furthermore it’s not clear whether it’s even possible to evalu- ate such scores of ‘unrelatedness’ with human judgments. For this reason it is more common to use Positive PMI (called PPMI) which replaces all negative PMI values with zero (Church and Hanks 1989, Dagan et al. 1993, Niwa and Nitta 1994)5:
PPMI(w, c) = max(log2 P(w, c) , 0) (6.18) P(w)P(c)
More formally, let’s assume we have a co-occurrence matrix F with W rows (words) and C columns (contexts), where fi j gives the number of times word wi occurs in
4 PMI is based on the mutual information between two random variables X and Y , defined as:
I(X,Y) = 􏰑􏰑P(x,y)log2 P(x,y) (6.15)
In a confusion of terminology, Fano used the phrase mutual information to refer to what we now call pointwise mutual information and the phrase expectation of the mutual information for what we now call mutual information
5 Positive PMI also cleanly solves the problem of what to do with zero counts, using 0 to replace the −∞ from log(0).
  PPMI
   x y P(x)P(y)

110 CHAPTER 6 • VECTOR SEMANTICS AND EMBEDDINGS
context cj. This can be turned into a PPMI matrix where ppmiij gives the PPMI
􏰐 Wi = 1 f i j
p∗j = 􏰐Wi=1 􏰐Cj=1 fij (6.19)
,0) (6.20)
Let’s see some PPMI calculations. We’ll use Fig. 6.10, which repeats Fig. 6.6 plus all the count marginals, and let’s pretend for ease of calculation that these are the only words/contexts that matter.
Co-occurrence counts for four words in 5 contexts in the Wikipedia corpus, together with the marginals, pretending for the purpose of this calculation that no other word- s/contexts matter.
Thus for example we could compute PPMI(w=information,c=data), assuming we pretended that Fig. 6.6 encompassed all the relevant word contexts/dimensions, as follows:
value of word wi with context c j as follows:
f i j 􏰐 Cj = 1 f i j
pij = 􏰐Wi=1 􏰐Cj=1 fij pi∗ = 􏰐Wi=1 􏰐Cj=1 fij PPMIij =max(log2 pij
    pi∗p∗j
strawberry digital information
count(context)
0 0 1670 1683 3325 3982
4997 5673
1 60 19 80 85 5 4 3447 378 5 13 7703
Figure 6.10
computer data result pie sugar count(w)
 cherry 2 8 9 442 25 486
 473 512 61
11716
   P(w=information,c=data) P(w=information)
P(c=data) ppmi(information,data)
= 3982 =.3399 11716
= 7703 =.6575 11716
= 5673 =.4842 11716
= log2(.3399/(.6575∗.4842))=.0944
   Fig. 6.11 shows the joint probabilities computed from the counts in Fig. 6.10, and Fig. 6.12 shows the PPMI values. Not surprisingly, cherry and strawberry are highly associated with both pie and sugar, and data is mildly associated with information.
Replacing the counts in Fig. 6.6 with joint probabilities, showing the marginals around the outside.
PMI has the problem of being biased toward infrequent events; very rare words tend to have very high PMI values. One way to reduce this bias toward low frequency
cherry strawberry digital information
p(context)
0.0002 0.0007 0.0000 0.0000 0.1425 0.1436 0.2838 0.3399
0.4265 0.4842
0.0008 0.0377 0.0021 0.0001 0.0051 0.0016 0.0073 0.0004 0.0003 0.0323 0.0004 0.0011
0.0404 0.0437 0.0052
0.0415 0.0068 0.2942 0.6575
Figure 6.11
p(w,context) p(w)
computer data result pie sugar p(w)
     
cherry strawberry digital information
0 0
0 0 0.18 0.01 0.02 0.09
0 4.38 3.30 0 4.10 5.51 0 0 0
0.28 0 0
Figure 6.12
computer data result pie sugar
       6.7
6.7 • APPLICATIONS OF THE TF-IDF OR PPMI VECTOR MODELS 111
The PPMI matrix showing the association between words and context words, computed from the counts in Fig. 6.11. Note that most of the 0 PPMI values are ones that had a negative PMI; for example PMI(cherry,computer) = -6.7, meaning that cherry and computer co-occur on Wikipedia less often than we would expect by chance, and with PPMI we replace negative values by zero.
events is to slightly change the computation for P(c), using a different function Pα (c) that raises the probability of the context word to the power of α:
PPMIα (w, c) = max(log2 P(w, c) , 0) (6.21) P(w)Pα(c)
count (c)α
Pα (c) = 􏰐c count(c)α (6.22)
Levy et al. (2015) found that a setting of α = 0.75 improved performance of embeddings on a wide range of tasks (drawing on a similar weighting used for skip- grams described below in Eq. 6.32). This works because raising the count to α = 0.75 increases the probability assigned to rare contexts, and hence lowers their PMI (Pα (c) > P(c) when c is rare).
Another possible solution is Laplace smoothing: Before computing PMI, a small constant k (values of 0.1-3 are common) is added to each of the counts, shrinking (discounting) all the non-zero values. The larger the k, the more the non-zero counts are discounted.
Applications of the tf-idf or PPMI vector models
centroid
In summary, the vector semantics model we’ve described so far represents a target word as a vector with dimensions corresponding either to to the documents in a large collection (the term-document matrix) or to the counts of words in some neighboring window (the term-term matrix). The values in each dimension are counts, weighted by tf-idf (for term-document matrices) or PPMI (for term-term matrices), and the vectors are sparse (since most values are zero).
The model computes the similarity between two words x and y by taking the cosine of their tf-idf or PPMI vectors; high cosine, high similarity. This entire model is sometimes referred to as the tf-idf model or the PPMI model, after the weighting function.
The tf-idf model of meaning is often used for document functions like deciding if two documents are similar. We represent a document by taking the vectors of all the words in the document, and computing the centroid of all those vectors. The centroid is the multidimensional version of the mean; the centroid of a set of vectors is a single vector that has the minimum sum of squared distances to each of the vectors in the set. Given k word vectors w1,w2,...,wk, the centroid document vector d is:
d = w1 +w2 +...+wk (6.23) k
document vector
 
112 CHAPTER 6 • VECTOR SEMANTICS AND EMBEDDINGS
Given two documents, we can then compute their document vectors d1 and d2, and estimate the similarity between the two documents by cos(d1,d2). Document sim- ilarity is also useful for all sorts of applications; information retrieval, plagiarism detection, news recommender systems, and even for digital humanities tasks like comparing different versions of a text to see which are similar to each other.
Either the PPMI model or the tf-idf model can be used to compute word simi- larity, for tasks like finding word paraphrases, tracking changes in word meaning, or automatically discovering meanings of words in different corpora. For example, we can find the 10 most similar words to any target word w by computing the cosines between w and each of the V − 1 other words, sorting, and looking at the top 10.
6.8 Word2vec
skip-gram SGNS word2vec
static embeddings
In the previous sections we saw how to represent a word as a sparse, long vector with dimensions corresponding to words in the vocabulary or documents in a collection. We now introduce a more powerful word representation: embeddings, short dense vectors. Unlike the vectors we’ve seen so far, embeddings are short, with number of dimensions d ranging from 50-1000, rather than the much larger vocabulary size |V | or number of documents D we’ve seen. These d dimensions don’t have a clear interpretation. And the vectors are dense: instead of vector entries being sparse, mostly-zero counts or functions of counts, the values will be real-valued numbers that can be negative.
It turns out that dense vectors work better in every NLP task than sparse vectors. While we don’t completely understand all the reasons for this, we have some intu- itions. Representing words as 300-dimensional dense vectors requires our classifiers to learn far fewer weights than if we represented words as 50,000-dimensional vec- tors, and the smaller parameter space possibly helps with generalization and avoid- ing overfitting. Dense vectors may also do a better job of capturing synonymy. For example, in a sparse vector representation, dimensions for synonyms like car and automobile dimension are distinct and unrelated; sparse vectors may thus fail to capture the similarity between a word with car as a neighbor and a word with automobile as a neighbor.
In this section we introduce one method for computing embeddings: skip-gram with negative sampling, sometimes called SGNS. The skip-gram algorithm is one of two algorithms in a software package called word2vec, and so sometimes the al- gorithm is loosely referred to as word2vec (Mikolov et al. 2013, Mikolov et al. 2013a). The word2vec methods are fast, efficient to train, and easily available online with code and pretrained embeddings. Word2vec embeddings are static embeddings, meaning that the method learns one fixed embedding for each word in the vocabu- lary. In Chapter 10 we’ll introduce methods for learning dynamic contextual em- beddings like the popular BERT or ELMO representations, in which the vector for each word is different in different contexts.
The intuition of word2vec is that instead of counting how often each word w oc- curs near, say, apricot, we’ll instead train a classifier on a binary prediction task: “Is word w likely to show up near apricot?” We don’t actually care about this prediction task; instead we’ll take the learned classifier weights as the word embeddings.
The revolutionary intuition here is that we can just use running text as implicitly supervised training data for such a classifier; a word c that occurs near the target word apricot acts as gold ‘correct answer’ to the question “Is word c likely to show

self-supervision
6.8 • WORD2VEC 113
up near apricot?” This method, often called self-supervision, avoids the need for any sort of hand-labeled supervision signal. This idea was first proposed in the task of neural language modeling, when Bengio et al. (2003) and Collobert et al. (2011) showed that a neural language model (a neural network that learned to predict the next word from prior words) could just use the next word in running text as its supervision signal, and could be used to learn an embedding representation for each word as part of doing this prediction task.
We’ll see how to do neural networks in the next chapter, but word2vec is a much simpler model than the neural network language model, in two ways. First, word2vec simplifies the task (making it binary classification instead of word pre- diction). Second, word2vec simplifies the architecture (training a logistic regression classifier instead of a multi-layer neural network with hidden layers that demand more sophisticated training algorithms). The intuition of skip-gram is:
1. Treat the target word and a neighboring context word as positive examples. 2. Randomly sample other words in the lexicon to get negative samples.
3. Use logistic regression to train a classifier to distinguish those two cases. 4. Use the learned weights as the embeddings.
6.8.1 The classifier
Let’s start by thinking about the classification task, and then turn to how to train. Imagine a sentence like the following, with a target word apricot, and assume we’re using a window of ±2 context words:
       ... lemon,  a [tablespoon of apricot jam,      a] pinch ...
                      c1         c2    w     c3       c4
Our goal is to train a classifier such that, given a tuple (w,c) of a target word w paired with a candidate context word c (for example (apricot, jam), or perhaps (apricot, aardvark)) it will return the probability that c is a real context word (true for jam, false for aardvark):
P(+|w, c) (6.24) The probability that word c is not a real context word for w is just 1 minus
Eq. 6.24:
P(−|w, c) = 1 − P(+|w, c) (6.25)
How does the classifier compute the probability P? The intuition of the skip- gram model is to base this probability on embedding similarity: a word is likely to occur near the target if its embedding is similar to the target embedding. To compute similarity between these dense embeddings, we rely on the intuition that two vectors are similar if they have a high dot product (after all, cosine is just a normalized dot product). In other words:
Similarity(w,c) ≈ c·w (6.26)
The dot product c · w is not a probability, it’s just a number ranging from −∞ to ∞ (since the elements in word2vec embeddings can be negative, the dot product can be negative). To turn the dot product into a probability, we’ll use the logistic or sigmoid function σ (x), the fundamental core of logistic regression:
σ(x)= 1 (6.27) 1+exp(−x)
 
114 CHAPTER 6 • VECTOR SEMANTICS AND EMBEDDINGS
We model the probability that word c is a real context word for target word w as:
P(+|w,c) = σ(c·w)= 1 (6.28) 1+exp(−c·w)
The sigmoid function returns a number between 0 and 1, but to make it a probability we’ll also need the total probability of the two possible events (c is a context word, and c isn’t a context word) to sum to 1. We thus estimate the probability that word c is not a real context word for w as:
P(−|w,c) = 1−P(+|w,c)
= σ(−c·w)= 1 (6.29)
  Equation 6.28 gives us the probability for one word, but there are many context words in the window. Skip-gram makes the simplifying assumption that all context words are independent, allowing us to just multiply their probabilities:
P(+|w,c1:L) = logP(+|w,c1:L) =
􏰒L i=1
􏰑L i=1
In summary, skip-gram trains a probabilistic classifier that, given a test target word w and its context window of L words c1:L, assigns a probability based on how similar this context window is to the target word. The probability is based on applying the logistic (sigmoid) function to the dot product of the embeddings of the target word with each context word. To compute this probability, we just need embeddings for each target word and context word in the vocabulary.
1+exp(c·w)
σ(−ci ·w)
(6.30) (6.31)
logσ(−ci ·w)
     aardvark apricot
1
1..d
 ......
&= zebra |V| aardvark |V|+1
apricot
...... zebra 2V
W
C
target words
context & noise words
 Figure 6.13
 The embeddings learned by the skipgram model. The algorithm stores two embeddings for each word, the target embedding (sometimes called the input embedding) and the context embedding (sometimes called the output embedding). The parameter θ that the algorithm learns is thus a matrix of 2|V | vectors, each of dimension d, formed by concate- nating two matrices, the target embeddings W and the context+noise embeddings C.
Fig. 6.13 shows the intuition of the parameters we’ll need. Skip-gram actually stores two embeddings for each word, one for the word as a target, and one for the

6.8 • WORD2VEC 115
word considered as context. Thus the parameters we need to learn are two matrices W and C, each containing an embedding for every one of the |V | words in the vo- cabulary V .6 Let’s now turn to learning these embeddings (which is the real goal of training this classifier in the first place).
6.8.2 Learning skip-gram embeddings
Skip-gram learns embeddings by starting with random embedding vectors and then iteratively shifting the embedding of each word w to be more like the embeddings of words that occur nearby in texts, and less like the embeddings of words that don’t occur nearby. Let’s start by considering a single piece of training data:
... lemon,  a [tablespoon of apricot jam,      a] pinch ...
               c1         c2    w     c3       c4
This example has a target word w (apricot), and 4 context words in the L = ±2 window, resulting in 4 positive training instances (on the left below):
positive examples +
w cpos apricot tablespoon
apricot of apricot jam apricot a
negative examples -
w cneg w cneg apricot aardvark apricot seven apricot my apricot forever apricot where apricot dear apricot coaxial apricot if
  For training a binary classifier we also need negative examples. In fact skip- gram with negative sampling (SGNS) uses more negative examples than positive examples (with the ratio between them set by a parameter k). So for each of these (w,cpos) training instances we’ll create k negative samples, each consisting of the target w plus a ‘noise word’ cneg. A noise word is a random word from the lexicon, constrained not to be the target word w. The right above shows the setting where k = 2, so we’ll have 2 negative examples in the negative training set − for each positive example w,cpos.
The noise words are chosen according to their weighted unigram frequency pα (w), where α is a weight. If we were sampling according to unweighted fre- quency p(w), it would mean that with unigram probability p(“the”) we would choose the word the as a noise word, with unigram probability p(“aardvark”) we would choose aardvark, and so on. But in practice it is common to set α = .75, i.e. use the weighting p43 (w):
count (w)α
Pα(w)= 􏰐w′ count(w′)α (6.32)
Setting α = .75 gives better performance because it gives rare noise words slightly higher probability: for rare words, Pα (w) > P(w). To illustrate this intuition, it might help to work out the probabilities for an example with two events, P(a) = .99 and P(b) = .01:
.99.75
Pα (a) = .99.75 + .01.75 = .97
.01.75
Pα (b) = .99.75 + .01.75 = .03 (6.33)
6 In principle the target matrix and the context matrix could use different vocabularies, but we’ll simplify by assuming one shared vocabulary V .
    
116 CHAPTER 6 • VECTOR SEMANTICS AND EMBEDDINGS
Given the set of positive and negative training instances, and an initial set of embed-
dings, the goal of the learning algorithm is to adjust those embeddings to
• Maximize the similarity of the target word, context word pairs (w,cpos) drawn from the positive examples
• Minimize the similarity of the (w,cneg) pairs from the negative examples.
If we consider one word/context pair (w, cpos ) with its k noise words cneg1 ...cnegk , we can express these two goals as the following loss function L to be minimized (hence the −); here the first term expresses that we want the classifier to assign the real context word cpos a high probability of being a neighbor, and the second term expressesthatwewanttoassigneachofthenoisewordscnegi ahighprobabilityof being a non-neighbor, all multiplied because we assume independence:
􏰍 􏰒k 􏰎 LCE = − log P(+|w, cpos ) P(−|w, cnegi )
i=1
􏰍 􏰑k 􏰎
i=1
􏰍 􏰑k 􏰎
= − logP(+|w,cpos)+ logP(−|w,cnegi) i=1
􏰍 􏰑k􏰀 􏰁􏰎 = − logP(+|w,cpos)+ log 1−P(+|w,cnegi)
= − logσ(cpos ·w)+ logσ(−cnegi ·w) i=1
(6.34)
That is, we want to maximize the dot product of the word with the actual context words, and minimize the dot products of the word with the k negative sampled non- neighbor words.
We minimize this loss function using stochastic gradient descent. Fig. 6.14 shows the intuition of one step of learning.
     aardvark
W
!
C
k=2
zebra
apricot
zebra aardvark
w
 jam
matrix
Tolstoy
cpos
cneg1
cneg2
  move apricot and jam closer, increasing cpos 􏰡 w
“...apricot jam...”
move apricot and matrix apart decreasing cneg1 􏰡 w
move apricot and Tolstoy apart decreasing cneg2 􏰡 w
  Figure 6.14
 Intuition of one step of gradient descent. The skip-gram model tries to shift embeddings so the target embeddings (here for apricot) are closer to (have a higher dot prod- uct with) context embeddings for nearby words (here jam) and further from (lower dot product with) context embeddings for noise words that don’t occur nearby (here Tolstoy and matrix).
To get the gradient, we need to take the derivative of Eq. 6.34 with respect to the different embeddings. It turns out the derivatives are the following (we leave the

target embedding context embedding
fasttext
Just as in logistic regression, then, the learning algorithm starts with randomly ini- tialized W and C matrices, and then walks through the training corpus using gradient descent to move W and C so as to maximize the objective in Eq. 6.34 by making the updates in (Eq. 6.39)-(Eq. 6.40).
Recall that the skip-gram model learns two separate embeddings for each word i: the target embedding wi and the context embedding ci, stored in two matrices, the target matrix W and the context matrix C. It’s common to just add them together, representing word i with the vector wi + ci . Alternatively we can throw away the C matrix and just represent each word i by the vector wi.
As with the simple count-based methods like tf-idf, the context window size L affects the performance of skip-gram embeddings, and experiments often tune the parameter L on a devset.
6.8.3 Other kinds of static embeddings
There are many kinds of static embeddings. An extension of word2vec, fasttext (Bojanowski et al., 2017), deals with unknown words and sparsity in languages with rich morphology, by using subword models. Each word in fasttext is represented as itself plus a bag of constituent n-grams, with special boundary symbols < and > added to each word. For example, with n = 3 the word where would be represented by the sequence <where> plus the character n-grams:
     <wh, whe, her, ere, re>
Then a skipgram embedding is learned for each constituent n-gram, and the word where is represented by the sum of all of the embeddings of its constituent n-grams. A fasttext open-source library, including pretrained embeddings for 157 languages, is available at https://fasttext.cc.
The most widely used static embedding model besides word2vec is GloVe (Pen- nington et al., 2014), short for Global Vectors, because the model is based on cap- turing global corpus statistics. GloVe is based on ratios of probabilities from the word-word co-occurrence matrix, combining the intuitions of count-based models like PPMI while also capturing the linear structures used by methods like word2vec.
proof as an exercise at the end of the chapter): ∂LCE = [σ(cpos·w)−1]w
6.8 • WORD2VEC 117
(6.35) (6.36)
 ∂ cpos
∂LCE = [σ(cneg·w)]w
 ∂cneg ∂LCE
􏰑k
∂w = [σ(cpos·w)−1]cpos+
The update equations going from time step t to t + 1 in stochastic gradient descent
ct+1 = ct −η[σ(ct ·w)−1]w pos pos pos
ct+1 = ct −η[σ(ct ·w)]w neg neg neg
wt+1 = wt −η[σ(cpos ·wt)−1]cpos +
k
[σ(cnegi ·w)]cnegi
(6.37)
(6.38) (6.39)
(6.40)
 are thus:
i=1
i=1
􏰑
[σ(cnegi ·wt)]cnegi

      hde, Gonnerman, Plaut
Modeling Word Meaning Using Lexical Co-Occurrence
118
WRIST ARAMNKLE
EYE FACE
TOE LEG FOOT
TOOTH NOHSEAD
MOUSE
CHAPTER 6
•
RUSSIA FRANCE
CHINA
VECTOR SEMANTICS AND EMBEDDINGS
AFRICA AMERICA
BRAZIL
SHOULDER FINGER
It turns out that d
EARHAND
s
6.9
DOG CAT
PUPPY KITTEN
LION
OYSTER
NASHVILLE
COW
TURTLE
EUROPE ASIA
e
e embeddings like word2vec actually have an elegant math-
M
O
SC
OW
n
ematical relationships with sparse embeddings like PPMI, in which word2vec can
HAWAII TOKYO
MONTREAL
CHICAGO ATLANTA
Visualizing Embeddings
be seen as implicitly optimizing a shifted version of a PPMI matrix (Levy and Gold- berg, 2014c).
“I see well in many dimensions as long as the dimensions are around two.” BULL The late economist Martin Shubik
Figure 8: Multidimensional scaling for three noun classes.
Visualizing embeddings is an important goal in helping understand, apply, and improve these models of word meaning. But how can we visualize a (for example)
100-dimensional vector?
WRIST
ANKLE SHOULDER
ARM LEG
HAND FOOT
HEAD NOSE
FINGER TOE FACE
EAR EYE
TOOTH DOG
CAT
PUPPY
KITTEN COW
MOUSE
TURTLE
OYSTER LION
BULL CHICAGO
The simplest way to visualize the meaning of a word w embedded in a space is to list the most similar words to w by sorting the vectors for all words in the vocabulary by their cosine with the vector for w. For example the 7 closest words to frog using the GloVe embeddings are: frogs, toad, litoria, leptodactylidae, rana, lizard, and eleutherodactylus (Pennington et al., 2014).
Yet another visualization method is to use a clustering algorithm to show a hierarchical representation of which words are similar to others in the embedding space. The uncaptioned figure on the left uses hierarchical clustering of some embedding vectors for nouns as a visualization method (Rohde et al., 2006).
Probably the most common visualization method, how-
ever, is to project the 100 dimensions of a word down into 2
dimensions. Fig. 6.1 showed one such visualization, as does
       ATLANTA MONTREAL
  CHINA
RUSSIA AFRICA ASIA
EUROPE AMERICA
NASHVILLE TOKYO
  BRAZIL MOSCOW
FRANCE
Fig. 6.16, using a projection method called t-SNE (van der Figure 9: Hierarchical clustering for three noun classes using distances based on vector correlations.
HAWAII
Maaten and Hinton, 2008). 6.10 Semantic properties of embeddings
In this section we briefly summarize some of the semantic properties of embeddings that have been studied.
Different types of similarity or association: One parameter of vector semantic models that is relevant to both sparse tf-idf vectors and dense word2vec vectors is the size of the context window used to collect counts. This is generally between 1 and 10 words on each side of the target word (for a total context of 2-20 words).
The choice depends on the goals of the representation. Shorter context windows tend to lead to representations that are a bit more syntactic, since the information is coming from immediately nearby words. When the vectors are computed from short context windows, the most similar words to a target word w tend to be semantically similar words with the same parts of speech. When vectors are computed from long context windows, the highest cosine words to a target word w tend to be words that are topically related but not similar.
20

first-order co-occurrence
second-order co-occurrence
parallelogram model
6.10 • SEMANTIC PROPERTIES OF EMBEDDINGS 119
For example Levy and Goldberg (2014a) showed that using skip-gram with a window of ±2, the most similar words to the word Hogwarts (from the Harry Potter series) were names of other fictional schools: Sunnydale (from Buffy the Vampire Slayer) or Evernight (from a vampire series). With a window of ±5, the most similar words to Hogwarts were other words topically related to the Harry Potter series: Dumbledore, Malfoy, and half-blood.
It’s also often useful to distinguish two kinds of similarity or association between words (Schu ̈tze and Pedersen, 1993). Two words have first-order co-occurrence (sometimes called syntagmatic association) if they are typically nearby each other. Thus wrote is a first-order associate of book or poem. Two words have second-order co-occurrence (sometimes called paradigmatic association) if they have similar neighbors. Thus wrote is a second-order associate of words like said or remarked.
Analogy/Relational Similarity: Another semantic property of embeddings is their ability to capture relational meanings. In an important early vector space model of cognition, Rumelhart and Abrahamson (1973) proposed the parallelogram model for solving simple analogy problems of the form a is to b as a* is to what?. In such problems, a system given a problem like apple:tree::grape:?, i.e., apple is to tree as
grape is to   , and must fill in the word vine. In the parallelogram model, illus- #»#»
trated in Fig. 6.15, the vector from the word apple to the word tree (= apple − tree) #»
is added to the vector for grape (grape); the nearest word to that point is returned.
    apple
grape
tree
vine
 Figure 6.15
 The parallelogram model for analogy problems (Rumelhart and Abrahamson,
#» #»#»
#»
1973): the location of vine can be found by subtracting tree from apple and adding grape.
In early work with sparse embeddings, scholars showed that sparse vector mod- els of meaning could solve such analogy problems (Turney and Littman, 2005), but the parallelogram method received more modern attention because of its success
with word2vec or GloVe vectors (Mikolov et al. 2013b, Levy and Goldberg 2014b,
Pennington et al. 2014). For example, the result of the expression (king) − man +
For a a:b::a*:b* problem, meaning the algorithm is given a, b, and a* and must find b*, the parallelogram method is thus:
bˆ ∗ = argmax distance(x, a∗ − a + b) (6.41) x
with the distance function defined either as cosine or as Euclidean distance.
There are some caveats. For example, the closest value returned by the paral- lelogram algorithm in word2vec or GloVe embedding spaces is usually not in fact b* but one of the 3 input words or their morphological variants (i.e., cherry:red ::
#» #»
#»#»#»
woman is a vector close to queen. Similarly, Paris − France + Italy) results in a #»
vector that is close to Rome. The embedding model thus seems to be extracting rep- resentations of relations like MALE-FEMALE, or CAPITAL-CITY-OF, or even COM- PARATIVE/SUPERLATIVE, as shown in Fig. 6.16 from GloVe.
#»
#»

120 CHAPTER 6 • VECTOR SEMANTICS AND EMBEDDINGS
Relational properties of the GloVe vector space, shown by projecting vectors onto two dimen-
#»
     (a) (b)
 Figure 6.16
 #»#»#»
sions. (a) (king) − man + woman is close to queen. (b) offsets seem to capture comparative and superlative morphology (Pennington et al., 2014).
potato:x returns potato or potatoes instead of brown), so these must be explicitly excluded. Furthermore while embedding spaces perform well if the task involves frequent words, small distances, and certain relations (like relating countries with their capitals or verbs/nouns with their inflected forms), the parallelogram method with embeddings doesn’t work as well for other relations (Linzen 2016, Gladkova et al. 2016, Ethayarajh et al. 2019a), and indeed Peterson et al. (2020) argue that the parallelogram method is in general too simple to model the human cognitive process of forming analogies of this kind.
6.10.1 Embeddings and Historical Semantics
Embeddings can also be a useful tool for studying how meaning changes over time, by computing multiple embedding spaces, each from texts written in a particular time period. For example Fig. 6.17 shows a visualization of changes in meaning in English words over the last two centuries, computed by building separate embedding spaces for each decade from historical corpora like Google N-grams (Lin et al., 2012b) and the Corpus of Historical American English (Davies, 2012).
6.11 Bias and Embeddings
allocational harm
In addition to their ability to learn word meaning from text, embeddings, alas, also reproduce the implicit biases and stereotypes that were latent in the text. As the prior section just showed, embeddings can roughly model relational similar- ity: ‘queen’ as the closest word to ‘king’ - ‘man’ + ‘woman’ implies the analogy man:woman::king:queen. But these same embedding analogies also exhibit gender stereotypes. For example Bolukbasi et al. (2016) find that the closest occupation to ‘man’ - ‘computer programmer’ + ‘woman’ in word2vec embeddings trained on news text is ‘homemaker’, and that the embeddings similarly suggest the analogy ‘father’ is to ‘doctor’ as ‘mother’ is to ‘nurse’. This could result in what Crawford (2017) and Blodgett et al. (2020) call an allocational harm, when a system allo- cates resources (jobs or credit) unfairly to different groups. For example algorithms

bias amplification
actuallybrokenÓ tosubjectivestatements eàgà,ÒIcanÕtbelieveheactuallydidthatÓ,
representational harm
while European-American names (‘Brad’, ‘Greg’, ‘Courtney’) had a higher cosine with pleasant words. These problems with embeddings are an example of a repre- sentational harm (Crawford 2017, Blodgett et al. 2020), which is a harm caused by a system demeaning or even ignoring some social groups. Any embedding-aware al- gorithm that made use of word sentiment could thus exacerbate bias against African Americans.
Recent research focuses on ways to try to remove these kinds of biases, for ex- ample by developing a transformation of the embedding space that removes gender stereotypes but preserves definitional gender (Bolukbasi et al. 2016, Zhao et al. 2017)
7 Roughly speaking, if humans associate ‘flowers’ with ‘pleasantness’ and ‘insects’ with ‘unpleasant- ness’, when they are instructed to push a green button for ‘flowers’ (daisy, iris, lilac) and ‘pleasant words’ (love, laughter, pleasure) and a red button for ‘insects’ (flea, spider, mosquito) and ‘unpleasant words’ (abuse, hatred, ugly) they are faster than in an incongruous condition where they push a red button for ‘flowers’ and ‘unpleasant words’ and a green button for ‘insects’ and ‘pleasant words’.
CHAPTER5à DYNAMICSOCIALREPRESENTATIONSOFWORDMEANINGà9 6.11 • BIAS AND EMBEDDINGS 121
    Figure 6.17
  A t-SNE visualization of the semantic change of 3 words in English using
Figure 5à: Two-dimensional visualization of semantic change in English using SGNS word2vec vectors. The modern sense of each word, and the grey context words, are com-
vectors see Section 5à8 for the visualization algorithm à A, The word gay shifted puted from the most recent (modern) time-point embedding space. Earlier points are com-
from meaning ÒcheerfulÓ or ÒfrolicsomeÓ to referring to homosexualityà A, In the early puted from earlier historical embedding spaces. The visualizations show the changes in the
2àth century broadcast referred to Òcasting out seedsÓà with the rise of television and word gay from meanings related to “cheerful” or “frolicsome” to referring to homosexuality,
radio its meaning shifted to Òtransmitting signalsÓà C, Awful underwent a process of the development of the modern “transmission” sense of broadcast from its original sense of
pejoration, as it shifted from meaning Òfull of aweÓ to meaning Òterrible or appallingÓ
sowing seeds, and the pejoration of the word awful as it shifted from meaning “full of awe” t2om2eàaning “terrible or appalling” (Hamilton et al., 2016b).
thatuasdevemrbbiaedlsdinegàgsà,asacptauratlolyfahsaevaercahgfoernehriarilntgenpdoteennctyialtopruongdraemrgmoesrusbojercdtoiÞcctoartsion might thus incorrectly downweight documents with women’s names.
where they shift from objective statements about the world eàgà, ÒSorry, the car is
It turns out that embeddings don’t just reflect the statistics of their input, but
also amplify bias; gendered terms become more gendered in embedding space than indicating surprise disbelief à
they were in the input text statistics (Zhao et al. 2017, Ethayarajh et al. 2019b, Jia et al. 2020), and biases are more exaggerated than in actual labor employment statis-
tics (Garg et al., 2018).
5à2à2 Computational linguistic studies
Embeddings also encode the implicit associations that are a property of human reasoning. The Implicit Association Test (Greenwald et al., 1998) measures peo-
There are also a number of recent works analyzing semantic change using computational
ple’s associations between concepts (like ‘flowers’ or ‘insects’) and attributes (like
methodsà 2àà use latent semantic analysis to analyze how word meanings broaden
‘pleasantness’ and ‘unpleasantness’) by measuring differences in the latency with
and narrow over timeà 3 use raw co-occurrenc7e vectors to perform a number of which they label words in the various categories. Using such methods, people
in the United States have been shown to associate African-American names with unpleasant words (more than European-American names), male names more with
historical case-studies on semantic change, and 252 perform a similar set of small-
scale case-studies using temporal topic modelsà 8à construct point-wise mutual
mathematics and female names with the arts, and old people’s names with unpleas-
information-based embeddings and found that semantic changes uncovered by their
ant words (Greenwald et al. 1998, Nosek et al. 2002a, Nosek et al. 2002b). Caliskan method had reasonable agreement with human judgmentsà 29 and 9 use ÒneuralÓ
et al. (2017) replicated all these findings of implicit associations using GloVe vectors word-embedding methods to detect linguistic change pointsà Finally, 25à analyze
and cosine similarity instead of human latencies. For example African-American names like ‘Leroy’ and ‘Shaniqua’ had a higher GloVe cosine with unpleasant words
historical co-occurrences to test whether synonyms tend to change in similar waysà
 
122
CHAPTER 6 • VECTOR SEMANTICS AND EMBEDDINGS
debiasing
or changing the training procedure (Zhao et al., 2018b). However, although these sorts of debiasing may reduce bias in embeddings, they do not eliminate it (Gonen and Goldberg, 2019), and this remains an open problem.
Historical embeddings are also being used to measure biases in the past. Garg et al. (2018) used embeddings from historical texts to measure the association be- tween embeddings for occupations and embeddings for names of various ethnici- ties or genders (for example the relative cosine similarity of women’s names versus men’s to occupation words like ‘librarian’ or ‘carpenter’) across the 20th century. They found that the cosines correlate with the empirical historical percentages of women or ethnic groups in those occupations. Historical embeddings also repli- cated old surveys of ethnic stereotypes; the tendency of experimental participants in 1933 to associate adjectives like ‘industrious’ or ‘superstitious’ with, e.g., Chinese ethnicity, correlates with the cosine between Chinese last names and those adjectives using embeddings trained on 1930s text. They also were able to document historical gender biases, such as the fact that embeddings for adjectives related to competence (‘smart’, ‘wise’, ‘thoughtful’, ‘resourceful’) had a higher cosine with male than fe- male words, and showed that this bias has been slowly decreasing since 1960. We return in later chapters to this question about the role of bias in natural language processing.
6.12 Evaluating Vector Models
The most important evaluation metric for vector models is extrinsic evaluation on tasks, i.e., using vectors in an NLP task and seeing whether this improves perfor- mance over some other model.
Nonetheless it is useful to have intrinsic evaluations. The most common metric is to test their performance on similarity, computing the correlation between an algorithm’s word similarity scores and word similarity ratings assigned by humans. WordSim-353 (Finkelstein et al., 2002) is a commonly used set of ratings from 0 to 10 for 353 noun pairs; for example (plane, car) had an average score of 5.77. SimLex-999 (Hill et al., 2015) is a more difficult dataset that quantifies similarity (cup, mug) rather than relatedness (cup, coffee), and including both concrete and abstract adjective, noun and verb pairs. The TOEFL dataset is a set of 80 questions, each consisting of a target word with 4 additional word choices; the task is to choose which is the correct synonym, as in the example: Levied is closest in meaning to: imposed, believed, requested, correlated (Landauer and Dumais, 1997). All of these datasets present words without context.
Slightly more realistic are intrinsic similarity tasks that include context. The Stanford Contextual Word Similarity (SCWS) dataset (Huang et al., 2012) and the Word-in-Context (WiC) dataset (Pilehvar and Camacho-Collados, 2019) offer richer evaluation scenarios. SCWS gives human judgments on 2,003 pairs of words in their sentential context, while WiC gives target words in two sentential contexts that are either in the same or different senses; see Section 18.5.3. The semantic textual similarity task (Agirre et al. 2012, Agirre et al. 2015) evaluates the performance of sentence-level similarity algorithms, consisting of a set of pairs of sentences, each pair with human-labeled similarity scores.
Another task used for evaluation is the analogy task, discussed on page 119, where the system has to solve problems of the form a is to b as a* is to b*, given a, b, and a* and having to find b* (Turney and Littman, 2005). A number of sets of tuples

6.13 • SUMMARY 123
have been created for this task, (Mikolov et al. 2013, Mikolov et al. 2013b, Gladkova
et al. 2016), covering morphology (city:cities::child:children), lexicographic rela-
tions (leg:table::spout::teapot) and encyclopedia relations (Beijing:China::Dublin:Ireland), some drawing from the SemEval-2012 Task 2 dataset of 79 different relations (Jur-
gens et al., 2012).
All embedding algorithms suffer from inherent variability. For example because of randomness in the initialization and the random negative sampling, algorithms like word2vec may produce different results even from the same dataset, and in- dividual documents in a collection may strongly impact the resulting embeddings (Hellrich and Hahn 2016, Antoniak and Mimno 2018). When embeddings are used to study word associations in particular corpora, therefore, it is best practice to train multiple embeddings with bootstrap sampling over documents and average the re- sults (Antoniak and Mimno, 2018).
6.13 Summary
• Invectorsemantics,awordismodeledasavector—apointinhigh-dimensional space, also called an embedding. In this chapter we focus on static embed- dings, in each each word is mapped to a fixed embedding.
• Vector semantic models fall into two classes: sparse and dense. In sparse models each dimension corresponds to a word in the vocabulary V and cells are functions of co-occurrence counts. The term-document matrix has a row for each word (term) in the vocabulary and a column for each document. The word-context or term-term matrix has a row for each (target) word in the vocabulary and a column for each context term in the vocabulary. Two sparse weightings are common: the tf-idf weighting which weights each cell by its term frequency and inverse document frequency, and PPMI (pointwise positive mutual information) most common for for word-context matrices.
• Dense vector models have dimensionality 50–1000. Word2vec algorithms like skip-gram are a popular way to compute dense embeddings. Skip-gram trains a logistic regression classifier to compute the probability that two words are ‘likely to occur nearby in text’. This probability is computed from the dot product between the embeddings for the two words.
• Skip-gram uses stochastic gradient descent to train the classifier, by learning embeddings that have a high dot product with embeddings of words that occur nearby and a low dot product with noise words.
• Other important embedding algorithms include GloVe, a method based on ratios of word co-occurrence probabilities.
• Whether using sparse or dense vectors, word and document similarities are computed by some function of the dot product between vectors. The cosine of two vectors—a normalized dot product—is the most popular such metric.
Bibliographical and Historical Notes
The idea of vector semantics arose out of research in the 1950s in three distinct fields: linguistics, psychology, and computer science, each of which contributed a

124
CHAPTER 6 • VECTOR SEMANTICS AND EMBEDDINGS
mechanical indexing
fundamental aspect of the model.
The idea that meaning is related to the distribution of words in context was
widespread in linguistic theory of the 1950s, among distributionalists like Zellig Harris, Martin Joos, and J. R. Firth, and semioticians like Thomas Sebeok. As Joos (1950) put it,
the linguist’s “meaning” of a morpheme. . . is by definition the set of conditional probabilities of its occurrence in context with all other morphemes.
The idea that the meaning of a word might be modeled as a point in a multi- dimensional semantic space came from psychologists like Charles E. Osgood, who had been studying how people responded to the meaning of words by assigning val- ues along scales like happy/sad or hard/soft. Osgood et al. (1957) proposed that the meaning of a word in general could be modeled as a point in a multidimensional Euclidean space, and that the similarity of meaning between two words could be modeled as the distance between these points in the space.
A final intellectual source in the 1950s and early 1960s was the field then called mechanical indexing, now known as information retrieval. In what became known as the vector space model for information retrieval (Salton 1971, Sparck Jones 1986), researchers demonstrated new ways to define the meaning of words in terms of vec- tors (Switzer, 1965), and refined methods for word similarity based on measures of statistical association between words like mutual information (Giuliano, 1965) and idf (Sparck Jones, 1972), and showed that the meaning of documents could be represented in the same vector spaces used for words.
Some of the philosophical underpinning of the distributional way of thinking came from the late writings of the philosopher Wittgenstein, who was skeptical of the possibility of building a completely formal theory of meaning definitions for each word, suggesting instead that “the meaning of a word is its use in the language” (Wittgenstein, 1953, PI 43). That is, instead of using some logical language to define each word, or drawing on denotations or truth values, Wittgenstein’s idea is that we should define a word by how it is used by people in speaking and understanding in their day-to-day interactions, thus prefiguring the movement toward embodied and experiential models in linguistics and NLP (Glenberg and Robertson 2000, Lake and Murphy 2020, Bisk et al. 2020, Bender and Koller 2020).
More distantly related is the idea of defining words by a vector of discrete fea- tures, which has roots at least as far back as Descartes and Leibniz (Wierzbicka 1992, Wierzbicka 1996). By the middle of the 20th century, beginning with the work of Hjelmslev (Hjelmslev, 1969) (originally 1943) and fleshed out in early models of generative grammar (Katz and Fodor, 1963), the idea arose of representing mean- ing with semantic features, symbols that represent some sort of primitive meaning. For example words like hen, rooster, or chick, have something in common (they all describe chickens) and something different (their age and sex), representable as:
hen +female, +chicken, +adult rooster -female, +chicken, +adult chick +chicken, -adult
The dimensions used by vector models of meaning to define words, however, are only abstractly related to this idea of a small fixed number of hand-built dimensions. Nonetheless, there has been some attempt to show that certain dimensions of em- bedding models do contribute some specific compositional aspect of meaning like these early semantic features.
The use of dense vectors to model word meaning, and indeed the term embed- ding, grew out of the latent semantic indexing (LSI) model (Deerwester et al.,
semantic feature

BIBLIOGRAPHICAL AND HISTORICAL NOTES 125
1988) recast as LSA (latent semantic analysis) (Deerwester et al., 1990). In LSA SVD singular value decomposition—SVD— is applied to a term-document matrix (each cell weighted by log frequency and normalized by entropy), and then the first 300 dimensions are used as the LSA embedding. Singular Value Decomposition (SVD) is a method for finding the most important dimensions of a data set, those dimen- sions along which the data varies the most. LSA was then quickly widely applied: as a cognitive model Landauer and Dumais (1997), and for tasks like spell check- ing (Jones and Martin, 1997), language modeling (Bellegarda 1997, Coccaro and Jurafsky 1998, Bellegarda 2000) morphology induction (Schone and Jurafsky 2000, Schone and Jurafsky 2001b), multiword expressions (MWEs) (Schone and Jurafsky, 2001a), and essay grading (Rehder et al., 1998). Related models were simulta- neously developed and applied to word sense disambiguation by Schu ̈tze (1992b). LSA also led to the earliest use of embeddings to represent words in a probabilis- tic classifier, in the logistic regression document router of Schu ̈tze et al. (1995). The idea of SVD on the term-term matrix (rather than the term-document matrix) as a model of meaning for NLP was proposed soon after LSA by Schu ̈tze (1992b). Schu ̈tze applied the low-rank (97-dimensional) embeddings produced by SVD to the task of word sense disambiguation, analyzed the resulting semantic space, and also suggested possible techniques like dropping high-order dimensions. See Schu ̈tze
(1997a).
A number of alternative matrix models followed on from the early SVD work,
including Probabilistic Latent Semantic Indexing (PLSI) (Hofmann, 1999), Latent Dirichlet Allocation (LDA) (Blei et al., 2003), and Non-negative Matrix Factoriza- tion (NMF) (Lee and Seung, 1999).
The LSA community seems to have first used the word “embedding” in Landauer et al. (1997), in a variant of its mathematical meaning as a mapping from one space or mathematical structure to another. In LSA, the word embedding seems to have described the mapping from the space of sparse count vectors to the latent space of SVD dense vectors. Although the word thus originally meant the mapping from one space to another, it has metonymically shifted to mean the resulting dense vector in the latent space. and it is in this sense that we currently use the word.
By the next decade, Bengio et al. (2003) and Bengio et al. (2006) showed that neural language models could also be used to develop embeddings as part of the task of word prediction. Collobert and Weston (2007), Collobert and Weston (2008), and Collobert et al. (2011) then demonstrated that embeddings could be used to rep- resent word meanings for a number of NLP tasks. Turian et al. (2010) compared the value of different kinds of embeddings for different NLP tasks. Mikolov et al. (2011) showed that recurrent neural nets could be used as language models. The idea of simplifying the hidden layer of these neural net language models to create the skip-gram (and also CBOW) algorithms was proposed by Mikolov et al. (2013). The negative sampling training algorithm was proposed in Mikolov et al. (2013a). There are numerous surveys of static embeddings and their parameterizations (Bul- linaria and Levy 2007, Bullinaria and Levy 2012, Lapesa and Evert 2014, Kiela and Clark 2014, Levy et al. 2015).
See Manning et al. (2008) for a deeper understanding of the role of vectors in in- formation retrieval, including how to compare queries with documents, more details on tf-idf, and issues of scaling to very large datasets. See Kim (2019) for a clear and comprehensive tutorial on word2vec. Cruse (2004) is a useful introductory linguistic text on lexical semantics.

126 CHAPTER 6 • VECTOR SEMANTICS AND EMBEDDINGS Exercises

 CHAPTER
7
Neural Networks and Neural Language Models
“[M]achines of this character can behave in a very complicated manner when the number of units is large.”
Alan Turing (1948) “Intelligent Machines”, page 6
Neural networks are a fundamental computational tool for language process- ing, and a very old one. They are called neural because their origins lie in the McCulloch-Pitts neuron (McCulloch and Pitts, 1943), a simplified model of the human neuron as a kind of computing element that could be described in terms of propositional logic. But the modern use in language processing no longer draws on these early biological inspirations.
Instead, a modern neural network is a network of small computing units, each of which takes a vector of input values and produces a single output value. In this chapter we introduce the neural net applied to classification. The architecture we introduce is called a feedforward network because the computation proceeds iter- atively from one layer of units to the next. The use of modern neural nets is often called deep learning, because modern networks are often deep (have many layers).
Neural networks share much of the same mathematics as logistic regression. But neural networks are a more powerful classifier than logistic regression, and indeed a minimal neural network (technically one with a single ‘hidden layer’) can be shown to learn any function.
Neural net classifiers are different from logistic regression in another way. With logistic regression, we applied the regression classifier to many different tasks by developing many rich kinds of feature templates based on domain knowledge. When working with neural networks, it is more common to avoid most uses of rich hand- derived features, instead building neural networks that take raw words as inputs and learn to induce features as part of the process of learning to classify. We saw examples of this kind of representation learning for embeddings in Chapter 6. Nets that are very deep are particularly good at representation learning. For that reason deep neural nets are the right tool for large scale problems that offer sufficient data to learn features automatically.
In this chapter we’ll introduce feedforward networks as classifiers, and also ap- ply them to the simple task of language modeling: assigning probabilities to word sequences and predicting upcoming words. In subsequent chapters we’ll introduce many other aspects of neural models, such as recurrent neural networks and the Transformer (Chapter 9), contextual embeddings like BERT (Chapter 10), and encoder-decoder models and attention (Chapter 11).
feedforward deep learning

128 CHAPTER 7 • NEURAL NETWORKS AND NEURAL LANGUAGE MODELS 7.1 Units
bias term
vector
activation
sigmoid
The building block of a neural network is a single computational unit. A unit takes a set of real valued numbers as input, performs some computation on them, and produces an output.
At its heart, a neural unit is taking a weighted sum of its inputs, with one addi- tional term in the sum called a bias term. Given a set of inputs x1...xn, a unit has a set of corresponding weights w1...wn and a bias b, so the weighted sum z can be represented as: 􏰑
z=b+ wixi (7.1) i
Often it’s more convenient to express this weighted sum using vector notation; recall from linear algebra that a vector is, at heart, just a list or array of numbers. Thus we’ll talk about z in terms of a weight vector w, a scalar bias b, and an input vector x, and we’ll replace the sum with the convenient dot product:
z = w·x+b (7.2)
As defined in Eq. 7.2, z is just a real valued number.
Finally, instead of using z, a linear function of x, as the output, neural units
apply a non-linear function f to z. We will refer to the output of this function as the activation value for the unit, a. Since we are just modeling a single unit, the activation for the node is in fact the final output of the network, which we’ll generally call y. So the value y is defined as:
y=a= f(z)
We’ll discuss three popular non-linear functions f () below (the sigmoid, the tanh, and the rectified linear ReLU) but it’s pedagogically convenient to start with the sigmoid function since we saw it in Chapter 5:
y=σ(z)= 1 (7.3) 1+e−z
The sigmoid (shown in Fig. 7.1) has a number of advantages; it maps the output into the range [0,1], which is useful in squashing outliers toward 0 or 1. And it’s differentiable, which as we saw in Section 5.8 will be handy for learning.
The sigmoid function takes a real value and maps it to the range [0,1]. It is nearly linear around 0 but outlier values get squashed toward 0 or 1.
     Figure 7.1
  
7.1 • UNITS 129 Substituting Eq. 7.2 into Eq. 7.3 gives us the output of a neural unit:
y = σ(w·x+b) = 1 (7.4) 1+exp(−(w·x+b))
Fig. 7.2 shows a final schematic of a basic neural unit. In this example the unit takes 3 input values x1,x2, and x3, and computes a weighted sum, multiplying each value by a weight (w1, w2, and w3, respectively), adds them to a bias term b, and then passes the resulting sum through a sigmoid function to result in a number between 0 and 1.
A neural unit, taking 3 inputs x1, x2, and x3 (and a bias b that we represent as a weight for an input clamped at +1) and producing an output y. We include some convenient intermediate variables: the output of the summation, z, and the output of the sigmoid, a. In this case the output of the unit y is the same as a, but in deeper networks we’ll reserve y to mean the final output of the entire network, leaving a as the activation of an individual node.
Let’s walk through an example just to get an intuition. Let’s suppose we have a unit with the following weight vector and bias:
w = [0.2,0.3,0.9] b = 0.5
What would this unit do with the following input vector: x = [0.5,0.6,0.1]
The resulting output y would be:
y=σ(w·x+b)= 1 = 1 = 1 =.70
     y
a
σ z
∑
w1 w2 w3 b
x1 x2 x3 +1
   Figure 7.2
 1 + e−(w·x+b) 1 + e−(.5∗.2+.6∗.3+.1∗.9+.5) 1 + e−0.87
   In practice, the sigmoid is not commonly used as an activation function. A function tanh that is very similar but almost always better is the tanh function shown in Fig. 7.3a;
tanh is a variant of the sigmoid that ranges from -1 to +1:
y = ez − e−z (7.5)
The simplest activation function, and perhaps the most commonly used, is the rec- ReLU tified linear unit, also called the ReLU, shown in Fig. 7.3b. It’s just the same as x
when x is positive, and 0 otherwise:
y = max(x, 0) (7.6)
ez + e−z
 
130
CHAPTER 7 • NEURAL NETWORKS AND NEURAL LANGUAGE MODELS
     (a) (b)
 Figure 7.3
 7.2
The XOR problem
Early in the history of neural networks it was realized that the power of neural net- works, as with the real neurons that inspired them, comes from combining these units into larger networks.
One of the most clever demonstrations of the need for multi-layer networks was the proof by Minsky and Papert (1969) that a single neural unit cannot compute some very simple functions of its input. Consider the task of computing elementary logical functions of two inputs, like AND, OR, and XOR. As a reminder, here are the truth tables for those functions:
AND OR XOR x1x2y x1x2y x1x2y 000 000 000 010 011 011 100 101 101 111 111 110
This example was first shown for the perceptron, which is a very simple neural unit that has a binary output and does not have a non-linear activation function. The
saturated
vanishing gradient
These activation functions have different properties that make them useful for different language applications or network architectures. For example, the tanh func- tion has the nice properties of being smoothly differentiable and mapping outlier values toward the mean. The rectifier function, on the other hand has nice properties that result from it being very close to linear. In the sigmoid or tanh functions, very high values of z result in values of y that are saturated, i.e., extremely close to 1, and have derivatives very close to 0. Zero derivatives cause problems for learning, because as we’ll see in Section 7.4, we’ll train networks by propagating an error signal backwards, multiplying gradients (partial derivatives) from each layer of the network; gradients that are almost 0 cause the error signal to get smaller and smaller until it is too small to be used for training, a problem called the vanishing gradient problem. Rectifiers don’t have this problem, since the derivative of ReLU for high values of z is 1 rather than very close to 0.
The tanh and ReLU activation functions.
  perceptron

     x1
1 x2 1 -1
+1
 (a) (b)
x1
1 1 0
+1
 x2
     Figure 7.4
 decision boundary
linearly separable
7.2 • THE XOR PROBLEM 131 output y of a perceptron is 0 or 1, and is computed as follows (using the same weight
w, input x, and bias b as in Eq. 7.2):
y=􏰊0, ifw·x+b≤0 (7.7)
1, ifw·x+b>0
It’s very easy to build a perceptron that can compute the logical AND and OR
functions of its binary inputs; Fig. 7.4 shows the necessary weights.
The weights w and bias b for perceptrons for computing logical functions. The inputs are shown as x1 and x2 and the bias as a special node with value +1 which is multiplied with the bias weight b. (a) logical AND, showing weights w1 = 1 and w2 = 1 and bias weight b = −1. (b) logical OR, showing weights w1 = 1 and w2 = 1 and bias weight b = 0. These weights/biases are just one from an infinite number of possible sets of weights and biases that would implement the functions.
It turns out, however, that it’s not possible to build a perceptron to compute logical XOR! (It’s worth spending a moment to give it a try!)
The intuition behind this important result relies on understanding that a percep- tron is a linear classifier. For a two-dimensional input x1 and x2, the perception equation, w1 x1 + w2 x2 + b = 0 is the equation of a line. (We can see this by putting it in the standard linear format: x2 = (−w1/w2)x1 + (−b/w2).) This line acts as a decision boundary in two-dimensional space in which the output 0 is assigned to all inputs lying on one side of the line, and the output 1 to all input points lying on the other side of the line. If we had more than 2 inputs, the decision boundary becomes a hyperplane instead of a line, but the idea is the same, separating the space into two categories.
Fig. 7.5 shows the possible logical inputs (00, 01, 10, and 11) and the line drawn by one possible set of parameters for an AND and an OR classifier. Notice that there is simply no way to draw a line that separates the positive cases of XOR (01 and 10) from the negative cases (00 and 11). We say that XOR is not a linearly separable function. Of course we could draw a boundary with a curve, or some other function, but not a single line.
7.2.1 The solution: neural networks
While the XOR function cannot be calculated by a single perceptron, it can be cal- culated by a layered network of units. Let’s see an example of how to do this from Goodfellow et al. (2016) that computes XOR using two layers of ReLU-based units. Fig. 7.6 shows a figure with the input being processed by two layers of neural units. The middle layer (called h) has two units, and the output layer (called y) has one unit. A set of weights and biases are shown for each ReLU that correctly computes the XOR function.
Let’s walk through what happens with the input x = [0 0]. If we multiply each input value by the appropriate weight, sum, and then add the bias b, we get the

132 CHAPTER 7 • NEURAL NETWORKS AND NEURAL LANGUAGE MODELS
    x2 x2 x2 111
?
0 x10 x10 x1 010101
a) x1 AND x2 b) x1 OR x2 c) x1 XOR x2
         Figure 7.5
 The functions AND, OR, and XOR, represented with input x1 on the x-axis and input x2 on the y axis. Filled circles represent perceptron outputs of 1, and white circles perceptron outputs of 0. There is no way to draw a line that correctly separates the two categories for XOR. Figure styled after Russell and Norvig (2002).
    y1
1 -2 0 h1 h2
+1
-1
+1
    1
1110 x1 x2
 Figure 7.6
 XOR solution after Goodfellow et al. (2016). There are three ReLU units, in two layers; we’ve called them h1, h2 (h for “hidden layer”) and y1. As before, the numbers on the arrows represent the weights w for each unit, and we represent the bias b as a weight on a unit clamped to +1, with the bias weights/units in gray.
vector [0 -1], and we then apply the rectified linear transformation to give the output of the h layer as [0 0]. Now we once again multiply by the weights, sum, and add the bias (0 in this case) resulting in the value 0. The reader should work through the computation of the remaining 3 possible input pairs to see that the resulting y values are 1 for the inputs [0 1] and [1 0] and 0 for [0 0] and [1 1].
It’s also instructive to look at the intermediate results, the outputs of the two hidden nodes h1 and h2. We showed in the previous paragraph that the h vector for the inputs x = [0 0] was [0 0]. Fig. 7.7b shows the values of the h layer for all 4 inputs. Notice that hidden representations of the two input points x = [0 1] and x = [1 0] (the two cases with XOR output = 1) are merged to the single point h = [1 0]. The merger makes it easy to linearly separate the positive and negative cases of XOR. In other words, we can view the hidden layer of the network as forming a representation for the input.
In this example we just stipulated the weights in Fig. 7.6. But for real examples the weights for neural networks are learned automatically using the error backprop- agation algorithm to be introduced in Section 7.4. That means the hidden layers will learn to form useful representations. This intuition, that neural networks can auto- matically learn useful representations of the input, is one of their key advantages,

7.3 • FEED-FORWARD NEURAL NETWORKS 133
    x2 h2 11
0x10 h1 01012
a) The original x space b) The new (linearly separable) h space
      Figure 7.7
 The hidden layer forming a new representation of the input. (b) shows the representation of the hidden layer, h, compared to the original input representation x in (a). Notice that the input point [0 1] has been collapsed with the input point [1 0], making it possible to linearly separate the positive and negative cases of XOR. After Goodfellow et al. (2016).
and one that we will return to again and again in later chapters.
Note that the solution to the XOR problem requires a network of units with non-
linear activation functions. A network made up of simple linear (perceptron) units cannot solve the XOR problem. This is because a network formed by many layers of purely linear units can always be reduced (i.e., shown to be computationally identical to) a single layer of linear units with appropriate weights, and we’ve already shown (visually, in Fig. 7.5) that a single unit cannot solve the XOR problem.
7.3 Feed-Forward Neural Networks
feedforward network
multi-layer perceptrons
MLP
hidden layer fully-connected
Let’s now walk through a slightly more formal presentation of the simplest kind of neural network, the feedforward network. A feedforward network is a multilayer network in which the units are connected with no cycles; the outputs from units in each layer are passed to units in the next higher layer, and no outputs are passed back to lower layers. (In Chapter 9 we’ll introduce networks with cycles, called recurrent neural networks.)
For historical reasons multilayer networks, especially feedforward networks, are sometimes called multi-layer perceptrons (or MLPs); this is a technical misnomer, since the units in modern multilayer networks aren’t perceptrons (perceptrons are purely linear, but modern networks are made up of units with non-linearities like sigmoids), but at some point the name stuck.
Simple feedforward networks have three kinds of nodes: input units, hidden units, and output units. Fig. 7.8 shows a picture.
The input units are simply scalar values just as we saw in Fig. 7.2.
The core of the neural network is the hidden layer formed of hidden units, each of which is a neural unit as described in Section 7.1, taking a weighted sum of its inputs and then applying a non-linearity. In the standard architecture, each layer is fully-connected, meaning that each unit in each layer takes as input the outputs from all the units in the previous layer, and there is a link between every pair of units from two adjacent layers. Thus each hidden unit sums over all the input units.

134 CHAPTER 7 • NEURAL NETWORKS AND NEURAL LANGUAGE MODELS
    y1 y2... U
yn2
h1 h2 h3...hn1
       Wb x1 x2...xn0+1
 Figure 7.8
 A simple 2-layer feedforward network, with one hidden layer, one output layer, and one input layer (the input layer is usually not counted when enumerating layers).
Recall that a single hidden unit has parameters w (the weight vector) and b (the bias scalar). We represent the parameters for the entire hidden layer by combining the weight vector wi and bias bi for each unit i into a single weight matrix W and a single bias vector b for the whole layer (see Fig. 7.8). Each element Wji of the weight matrix W represents the weight of the connection from the ith input unit xi to the jth hidden unit hj.
The advantage of using a single matrix W for the weights of the entire layer is that now the hidden layer computation for a feedforward network can be done very efficiently with simple matrix operations. In fact, the computation only has three steps: multiplying the weight matrix by the input vector x, adding the bias vector b, and applying the activation function g (such as the sigmoid, tanh, or ReLU activation function defined above).
The output of the hidden layer, the vector h, is thus the following, using the sigmoid function σ:
h = σ(Wx+b) (7.8)
Notice that we’re applying the σ function here to a vector, while in Eq. 7.3 it was applied to a scalar. We’re thus allowing σ(·), and indeed any activation function g(·), to apply to a vector element-wise, so g[z1,z2,z3] = [g(z1),g(z2),g(z3)].
Let’s introduce some constants to represent the dimensionalities of these vectors and matrices. We’ll refer to the input layer as layer 0 of the network, and have n0 represent the number of inputs, so x is a vector of real numbers of dimension n0, or more formally x ∈ Rn0 , a column vector of dimensionality [n0 , 1]. Let’s call the hidden layer layer 1 and the output layer layer 2. The hidden layer has dimensional- ityn1,soh∈Rn1 andalsob∈Rn1 (sinceeachhiddenunitcantakeadifferentbias value). And the weight matrix W has dimensionality W ∈ Rn1 ×n0 , i.e. [n1 , n0 ].
Take a moment to convince yourself that the matrix multiplication in Eq. 7.8 will compute the value of each hj as σ 􏰀􏰐n0 Wjixi +bj􏰁.
i=1
As we saw in Section 7.2, the resulting value h (for hidden but also for hypoth-
esis) forms a representation of the input. The role of the output layer is to take this new representation h and compute a final output. This output could be a real- valued number, but in many cases the goal of the network is to make some sort of classification decision, and so we will focus on the case of classification.
If we are doing a binary task like sentiment classification, we might have a single output node, and its value y is the probability of positive versus negative sentiment.

normalizing softmax
7.3 • FEED-FORWARD NEURAL NETWORKS 135
If we are doing multinomial classification, such as assigning a part-of-speech tag, we might have one output node for each potential part-of-speech, whose output value is the probability of that part-of-speech, and the values of all the output nodes must sum to one. The output layer thus gives a probability distribution across the output nodes.
Let’s see how this happens. Like the hidden layer, the output layer has a weight matrix (let’s call it U), but some models don’t include a bias vector b in the output layer, so we’ll simplify by eliminating the bias vector in this example. The weight matrix is multiplied by its input vector (h) to produce the intermediate output z.
z=Uh
There are n2 output nodes, so z ∈ Rn2 , weight matrix U has dimensionality U ∈ Rn2 ×n1 , and element Ui j is the weight from unit j in the hidden layer to unit i in the output layer.
However, z can’t be the output of the classifier, since it’s a vector of real-valued numbers, while what we need for classification is a vector of probabilities. There is a convenient function for normalizing a vector of real values, by which we mean converting it to a vector that encodes a probability distribution (all the numbers lie between 0 and 1 and sum to 1): the softmax function that we saw on page 90 of Chapter 5. For a vector z of dimensionality d, the softmax is defined as:
ezi
softmax(zi) = 􏰐dj=1 ezj 1 ≤ i ≤ d (7.9)
Thus for example given a vector z=[0.6, 1.1, -1.5, 1.2, 3.2, -1.1], softmax(z) is [0.055, 0.090, 0.0067, 0.10, 0.74, 0.010].
You may recall that softmax was exactly what is used to create a probability distribution from a vector of real-valued numbers (computed from summing weights times features) in logistic regression in Chapter 5.
That means we can think of a neural network classifier with one hidden layer as building a vector h which is a hidden layer representation of the input, and then running standard logistic regression on the features that the network develops in h. By contrast, in Chapter 5 the features were mainly designed by hand via feature templates. So a neural network is like logistic regression, but (a) with many layers, since a deep neural network is like layer after layer of logistic regression classifiers, and (b) rather than forming the features by feature templates, the prior layers of the network induce the feature representations themselves.
Here are the final equations for a feedforward network with a single hidden layer, which takes an input vector x, outputs a probability distribution y, and is parameter- ized by weight matrices W and U and a bias vector b:
h = σ(Wx+b)
z = Uh
y = softmax(z) (7.10)
We’ll call this network a 2-layer network (we traditionally don’t count the input layer when numbering layers, but do count the output layer). So by this terminology logistic regression is a 1-layer network.
Let’s now set up some notation to make it easier to talk about deeper networks of depth more than 2. We’ll use superscripts in square brackets to mean layer num- bers, starting at 0 for the input layer. So W [1] will mean the weight matrix for the
 
136 CHAPTER 7 • NEURAL NETWORKS AND NEURAL LANGUAGE MODELS
(first) hidden layer, and b[1] will mean the bias vector for the (first) hidden layer. n j will mean the number of units at layer j. We’ll use g(·) to stand for the activation function, which will tend to be ReLU or tanh for intermediate layers and softmax for output layers. We’ll use a[i] to mean the output from layer i, and z[i] to mean the combination of weights and biases W [i] a[i−1] + b[i] . The 0th layer is for inputs, so the inputs x we’ll refer to more generally as a[0].
Thus we can re-represent our 2-layer net from Eq. 7.10 as follows:
z[1] = W[1]a[0] +b[1] a[1] = g[1] (z[1] )
z[2] = W[2]a[1] +b[2] a[2] = g[2] (z[2] )
yˆ = a[2]
(7.11)
Note that with this notation, the equations for the computation done at each layer are the same. The algorithm for computing the forward step in an n-layer feedforward network, given the input vector a[0] is thus simply:
for i in 1..n
z[i] = W[i] a[i−1] + b[i]
a[i] = g[i](z[i]) yˆ = a[n]
The activation functions g(·) are generally different at the final layer. Thus g[2] might be softmax for multinomial classification or sigmoid for binary classification, while ReLU or tanh might be the activation function g(·) at the internal layers.
Replacing the bias unit In describing networks, we will often use a slightly sim-
plified notation that represents exactly the same function without referring to an ex-
plicit bias node b. Instead, we add a dummy node a0 to each layer whose value will
always be 1. Thus layer 0, the input layer, will have a dummy node a[0] = 1, layer 1 [1] 0
will have a0 = 1, and so on. This dummy node still has an associated weight, and that weight represents the bias value b. For example instead of an equation like
we’ll use:
h = σ(Wx+b) (7.12) h = σ(Wx) (7.13)
But now instead of our vector x having n values: x = x1,...,xn, it will have n + 1 values, with a new 0th dummy value x0 = 1: x = x0,...,xn0 . And instead of computing each hj as follows:
we’ll instead use:
hj =σ
σ
n0 i=1
􏰋􏰑 􏰌
Wjixi+bj 􏰋􏰑 􏰌
Wjixi ,
,
(7.14)
(7.15)
n0 i=0

Replacing the bias node (shown in a) with x0 (b).
where the value Wj0 replaces what had been bj. Fig. 7.9 shows a visualization. We’ll continue showing the bias as b for the learning example in the next section, but then we’ll switch to this simplified notation without explicit bias terms for the
rest of the book.
7.4 Training Neural Nets
cross-entropy loss
A feedforward neural net is an instance of supervised machine learning in which we know the correct output y for each observation x. What the system produces, via Eq. 7.11, is yˆ, the system’s estimate of the true y. The goal of the training procedure is to learn parameters W[i] and b[i] for each layer i that make yˆ for each training observation as close as possible to the true y.
In general, we do all this by drawing on the methods we introduced in Chapter 5 for logistic regression, so the reader should be comfortable with that chapter before proceeding.
First, we’ll need a loss function that models the distance between the system output and the gold output, and it’s common to use the loss function used for logistic regression, the cross-entropy loss.
Second, to find the parameters that minimize this loss function, we’ll use the gradient descent optimization algorithm introduced in Chapter 5.
Third, gradient descent requires knowing the gradient of the loss function, the vector that contains the partial derivative of the loss function with respect to each of the parameters. Here is one part where learning for neural networks is more complex than for logistic regression. In logistic regression, for each observation we could directly compute the derivative of the loss function with respect to an individual w or b. But for neural networks, with millions of parameters in many layers, it’s much harder to see how to compute the partial derivative of some weight in layer 1 when the loss is attached to some much later layer. How do we partial out the loss over all those intermediate layers?
The answer is the algorithm called error backpropagation or reverse differen- tiation.
7.4.1 Loss function
The cross-entropy loss that is used in neural networks is the same one we saw for logistic regression.
In fact, if the neural network is being used as a binary classifier, with the sig-
7.4 • TRAINING NEURAL NETS 137
     y1 y2...yn2 U
h1 h2 h3...hn1
Wb x1 x2...xn0+1
  (a) (b)
y1 y2...yn2
h1 h2 h3...hn1
W
x0=1 x1 x2 ... xn0
  U
     Figure 7.9
 
138 CHAPTER 7 • NEURAL NETWORKS AND NEURAL LANGUAGE MODELS
moid at the final layer, the loss function is exactly the same as we saw with logistic
negative log likelihood loss
Hence the cross-entropy loss is simply the log of the output probability correspond- ing to the correct class, and we therefore also call this the negative log likelihood loss:
LCE(yˆ,y) = −logyˆi, (where i is the correct class) (7.19) Plugging in the softmax formula from Eq. 7.9, and with K the number of classes:
ezi
LCE(yˆ,y) = −log􏰐Kj=1ezj (whereiisthecorrectclass) (7.20)
7.4.2 Computing the Gradient
How do we compute the gradient of this loss function? Computing the gradient requires the partial derivative of the loss function with respect to each parameter. For a network with one weight layer and sigmoid output (which is what logistic regression is), we could simply use the derivative of the loss that we used for logistic regression in Eq. 7.21 (and derived in Section 5.8):
∂LCE(w,b) = (yˆ−y)xj ∂wj
= (σ(w·x+b)−y)xj (7.21)
regression in Eq. 5.11:
LCE(yˆ,y)=−logp(y|x) = −[ylogyˆ+(1−y)log(1−yˆ)] (7.16)
What about if the neural network is being used as a multinomial classifier? Let y be a vector over the C classes representing the true output probability distribution. The cross-entropy loss here is
􏰑C i=1
We can simplify this equation further. Assume this is a hard classification task, meaning that only one class is the correct one, and that there is one output unit in y foreachclass. Ifthetrueclassisi,thenyisavectorwhereyi =1andyj =0 ∀j̸=i. A vector like this, with one value=1 and the rest 0, is called a one-hot vector. The terms in the sum in Eq. 7.17 will be 0 except for the term corresponding to the true class, i.e.:
LCE(yˆ,y)
􏰑K
k=1
􏰑K
=− 1{y=k}logpˆ(y=k|x)
k=1
􏰑K ezk
= − 1{y=k}log􏰐K ezj k=1 j=1
LCE (yˆ, y) = −
yi log yˆi (7.17)
= −
1{y = k}logyˆi
(7.18)
   
error back- propagation
But these derivatives only give correct updates for one weight layer: the last one! For deep networks, computing the gradients for each weight is much more complex, since we are computing the derivative with respect to weight parameters that appear all the way back in the very early layers of the network, even though the loss is computed only at the very end of the network.
The solution to computing this gradient is an algorithm called error backprop- agation or backprop (Rumelhart et al., 1986). While backprop was invented spe- cially for neural networks, it turns out to be the same as a more general procedure called backward differentiation, which depends on the notion of computation graphs. Let’s see how that works in the next subsection.
7.4.3 Computation Graphs
A computation graph is a representation of the process of computing a mathematical expression, in which the computation is broken down into separate operations, each of which is modeled as a node in a graph.
Consider computing the function L(a, b, c) = c(a + 2b). If we make each of the component addition and multiplication operations explicit, and add names (d and e) for the intermediate outputs, the resulting series of computations is:
d = 2∗b e = a+d
L = c∗e
We can now represent this as a graph, with nodes for each operation, and di- rected edges showing the outputs from each operation as the inputs to the next, as in Fig. 7.10. The simplest use of computation graphs is to compute the value of the function with some given inputs. In the figure, we’ve assumed the inputs a = 3, b = 1, c = −2, and we’ve shown the result of the forward pass to compute the re- sult L(3, 1, −2) = −10. In the forward pass of a computation graph, we apply each operation left to right, passing the outputs of each computation as the input to the next node.
7.4.4 Backward differentiation on computation graphs
The importance of the computation graph comes from the backward pass, which is used to compute the derivatives that we’ll need for the weight update. In this example our goal is to compute the derivative of the output function L with respect to each of the input variables, i.e., ∂L, ∂L, and ∂L. The derivative ∂L, tells us how much a small change in a affects L.∂a ∂b ∂c ∂a
Backwards differentiation makes use of the chain rule in calculus. Suppose we are computing the derivative of a composite function f (x) = u(v(x)). The derivative
chain rule
7.4 • TRAINING NEURAL NETS 139 Or for a network with one hidden layer and softmax output, we could use the deriva-
tive of the softmax loss from Eq. 5.37:
∂LCE = ∂wk
=
(1{y = k}− p(y = k|x))xk
􏰋 exp(wk ·x+bk) 􏰌
xk (7.22)
 1{y = k}− 􏰐Kj=1 exp(wj ·x+bj)
 
140 CHAPTER 7 • NEURAL NETWORKS AND NEURAL LANGUAGE MODELS
    forward pass
e=5
e=a+d d = 2b
-2
c
3
a
1
b
d=2
L=-10
L=ce
        Figure 7.10
 Computation graph for the function L(a, b, c) = c(a + 2b), with values for input nodes a = 3, b = 1, c = −2, showing the forward pass computation of L.
of f (x) is the derivative of u(x) with respect to v(x) times the derivative of v(x) with respect to x:
df = du·dv (7.23) dx dvdx
The chain rule extends to more than two functions. If computing the derivative of a composite function f (x) = u(v(w(x))), the derivative of f (x) is:
df = du·dv·dw (7.24) dx dv dw dx
Let’s now compute the 3 derivatives we need. Since in the computation graph L = ce, we can directly compute the derivative ∂ L :
∂c
For the other two, we’ll need to use the chain rule:
of the derivatives):
L=ce : e=a+d : d=2b :
∂L=c,∂L=e ∂e ∂c
∂e=1,∂e=1 ∂a ∂d
∂d=2 ∂b
∂c
∂L=e (7.25)
∂L = ∂L∂e
∂a ∂L ∂b
=
∂e ∂a ∂L ∂e ∂d ∂e ∂d ∂b
(7.26) Eq. 7.26 thus requires five intermediate derivatives: ∂L, ∂L, ∂e, ∂e, and ∂d,
∂e ∂c ∂a ∂d ∂b which are as follows (making use of the fact that the derivative of a sum is the sum
In the backward pass, we compute each of these partials along each edge of the graph from right to left, multiplying the necessary partials to result in the final derivative we need. Thus we begin by annotating the final node with ∂ L = 1. Moving to the
∂L ∂L ∂L
left, we then compute ∂ c and ∂ e , and so on, until we have annotated the graph all
the way to the input variables. The forward pass conveniently already will have computed the values of the forward intermediate variables we need (like d and e)

7.4 • TRAINING NEURAL NETS 141
to compute these derivatives. Fig. 7.11 shows the backward pass. At each node we need to compute the local partial derivative with respect to the parent, multiply it by the partial derivative that is being passed down from the parent, and then pass it to the child.
   a=3
a
∂L=-2 ∂e
∂a ∂a=1 e=5
  b=1
b
c
∂L =5 ∂c
d=2
d = 2b
e=d+a
∂e ∂L ∂L=-2
L=-10
L=ce
  ∂L=-4 ∂b=2 ∂b
c=-2
∂L =-2
∂L ∂L
=1
∂d
∂d =1 =-2 ∂e
∂e
 ∂d
∂L =5 ∂c
 backward pass
 Figure 7.11
 Computation graph for the function L(a, b, c) = c(a + 2b), showing the back- ward pass computation of ∂L, ∂L, and ∂L.
∂a∂b ∂c
Backward differentiation for a neural network
Of course computation graphs for real neural networks are much more complex. Fig. 7.12 shows a sample computation graph for a 2-layer neural network with n0 = 2, n1 = 2, and n2 = 1, assuming binary classification and hence using a sigmoid output unit for simplicity. The function that the computation graph is computing is:
z[1] = W[1]x+b[1] a[1] = ReLU(z[1] )
z[2] = W[2]a[1] +b[2] a[2] = σ (z[2] )
yˆ = a[2] (7.27)
The weights that need updating (those for which we need to know the partial derivative of the loss function) are shown in orange. In order to do the backward pass, we’ll need to know the derivatives of all the functions in the graph. We already saw in Section 5.8 the derivative of the sigmoid σ :
dσ(z) = σ(z)(1−σ(z)) (7.28) dz
We’ll also need the derivatives of each of the other activation functions. The derivative of tanh is:
 dtanh(z) =1−tanh2(z) dz
The derivative of the ReLU is
dReLU(z) =􏰊 0 for x<0 dz 1 for x≥0
(7.29)
(7.30)
  
142
CHAPTER 7 • NEURAL NETWORKS AND NEURAL LANGUAGE MODELS
    w[1] 11
w[1]
12 *
*
  z[1] = +
a[1] = ReLU
 x1[1] *
 b1 w[2]
x2 11+
z[2] =
a[2] = σ
L (a[2],y)
   * 21 *z=a= 12
 w[1]
[1] [1] w[2]
+ ReLU [2]
b1
w[1] 22
b[1]
2
*
 Figure 7.12
 dropout hyperparameter
Sample computation graph for a simple 2-layer neural net (= 1 hidden layer) with two input dimensions and 2 hidden dimensions.
7.4.5 More details on learning
Optimization in neural networks is a non-convex optimization problem, more com- plex than for logistic regression, and for that and other reasons there are many best practices for successful learning.
For logistic regression we can initialize gradient descent with all the weights and biases having the value 0. In neural networks, by contrast, we need to initialize the weights with small random numbers. It’s also helpful to normalize the input values to have 0 mean and unit variance.
Various forms of regularization are used to prevent overfitting. One of the most important is dropout: randomly dropping some units and their connections from the network during training (Hinton et al. 2012, Srivastava et al. 2014). Tuning of hyperparameters is also important. The parameters of a neural network are the weights W and biases b; those are learned by gradient descent. The hyperparameters are things that are chosen by the algorithm designer; optimal values are tuned on a devset rather than by gradient descent learning on the training set. Hyperparameters include the learning rate η, the mini-batch size, the model architecture (the number of layers, the number of hidden nodes per layer, the choice of activation functions), how to regularize, and so on. Gradient descent itself also has many architectural variants such as Adam (Kingma and Ba, 2015).
Finally, most modern neural networks are built using computation graph for- malisms that make it easy and natural to do gradient computation and parallelization onto vector-based GPUs (Graphic Processing Units). PyTorch (Paszke et al., 2017) and TensorFlow (Abadi et al., 2015) are two of the most popular. The interested reader should consult a neural network textbook for further details; some sugges- tions are at the end of the chapter.
7.5 Neural Language Models
As our first application of neural networks, let’s consider language modeling: pre- dicting upcoming words from prior word context.
Neural net-based language models turn out to have many advantages over the n- gram language models of Chapter 3. Among these are that neural language models

7.5 • NEURAL LANGUAGE MODELS 143
don’t need smoothing, they can handle much longer histories, and they can general- ize over contexts of similar words. For a training set of a given size, a neural lan- guage model has much higher predictive accuracy than an n-gram language model. Furthermore, neural language models underlie many of the models we’ll introduce for tasks like machine translation, dialog, and language generation.
On the other hand, there is a cost for this improved performance: neural net language models are strikingly slower to train than traditional language models, and so for many tasks an n-gram language model is still the right tool.
In this chapter we’ll describe simple feedforward neural language models, first introduced by Bengio et al. (2003). Modern neural language models are generally not feedforward but recurrent, using the technology that we will introduce in Chap- ter 9.
A feedforward neural LM is a standard feedforward network that takes as in- put at time t a representation of some number of previous words (wt−1,wt−2, etc.) and outputs a probability distribution over possible next words. Thus—like the n- gram LM—the feedforward neural LM approximates the probability of a word given the entire prior context P(wt |w1 : t − 1) by approximating based on the N previous words:
P(wt|w1,...,wt−1) ≈ P(wt|wt−N+1,...,wt−1) (7.31) In the following examples we’ll use a 4-gram example, so we’ll show a net to esti-
mate the probability P(wt = i|wt−1,wt−2,wt−3). 7.5.1 Embeddings
In neural language models, the prior context is represented by embeddings of the previous words. Representing the prior context as embeddings, rather than by ex- act words as used in n-gram language models, allows neural language models to generalize to unseen data much better than n-gram language models. For example, suppose we’ve seen this sentence in training:
I have to make sure that the cat gets fed.
but have never seen the words “gets fed” after the word “dog”. Our test set has the prefix “I forgot to make sure that the dog gets”. What’s the next word? An n-gram language model will predict “fed” after “that the cat gets”, but not after “that the dog gets”. But a neural LM, knowing that “cat” and “dog” have similar embeddings, will be able to generalize from the “cat” context to assign a high enough probability to “fed” even after seeing “dog”.
Let’s see how this works in practice. For now we’ll assume we already have an embedding dictionary E that gives us, for each word in our vocabulary V , the embedding for that word.
Fig. 7.13 shows a sketch of this simplified feedforward neural language model with N=3; we have a moving window at time t with an embedding vector represent- ing each of the 3 previous words (words wt−1, wt−2, and wt−3). These 3 vectors are concatenated together to produce x, the input layer of a neural network whose output is a softmax with a probability distribution over words. Thus y42, the value of output node 42 is the probability of the next word wt being V42, the vocabulary word with index 42.
The model shown in Fig. 7.13 is quite sufficient, assuming we have already learned the embeddings separately by a method like the word2vec methods of Chap- ter 6. Relying on another algorithm to have already learned an embedding represen-

144
CHAPTER 7 • NEURAL NETWORKS AND NEURAL LANGUAGE MODELS
    softmax
U
h3 ...
p(aardvark|...) p(fish|...) p(for|...) p(zebra|...)
^ ^
...
^
^ ^
 Output layer
|V|⨉1
y1 ... y42 Hidden layer h1
y59
... y35102 ... y|V| |V|⨉dh
   h2
hdh dh⨉1
       Projection layer
embeddings
W
E
wt-1
embedding for word 45180
wt-1
dh⨉3d 3d⨉1
wt
     thanks
 for
 all
 the
 ?
... and
embedding for word 35
wt-3
embedding for word 9925
wt-2
...
  Figure 7.13
 pretraining
A simplified view of a feedforward neural language model moving through a text. At each timestep t the network takes the 3 context words, converts each to a d- dimensional embedding, and concatenates the 3 embeddings together to get the 1×Nd unit input layer x for the network. These units are multiplied by a weight matrix W and then an activation function is applied element-wise to produce the hidden layer h, which is then mul- tiplied by another weight matrix U . Finally, a softmax output layer predicts at each node i the probability that the next word wt will be vocabulary word Vi. (This picture is simplified be- cause it assumes we just look up in an embedding dictionary E the d-dimensional embedding vector for each word, precomputed by an algorithm like word2vec.)
tation for input words is called pretraining. If those pretrained embeddings are sufficient for your purposes, then this is all you need.
However, often we’d like to learn the embeddings simultaneously with training the network. This is true when the task the network is designed for (sentiment clas- sification, or translation, or parsing) places strong constraints on what makes a good representation.
Let’s therefore show an architecture that allows the embeddings to be learned. To do this, we’ll add an extra layer to the network, and propagate the error all the way back to the embedding vectors, starting with embeddings with random values and slowly moving toward sensible representations.
For this to work at the input layer, instead of pretrained embeddings, we’re going to represent each of the N previous words as a one-hot vector of length |V |, i.e., with one dimension for each word in the vocabulary. A one-hot vector is a vector that has one element equal to 1—in the dimension corresponding to that word’s index in the vocabulary— while all the other elements are set to zero.
Thus in a one-hot representation for the word “toothpaste”, supposing it is index 5inthevocabulary,x5 =1,andxi =0 ∀i̸=5,asshownhere:
[0 0 0 0 1 0 0 ... 0 0 0 0] 1234567... ...|V|
Fig. 7.14 shows the additional layers needed to learn the embeddings during LM training. Here the N=3 context words are represented as 3 one-hot vectors, fully connected to the embedding layer via 3 instantiations of the embedding matrix E.
one-hot vector

projection layer
1.
2.
3. 4.
Select three embeddings from E: Given the three previous words, we look up their indices, create 3 one-hot vectors, and then multiply each by the em- bedding matrix E. Consider wt−3. The one-hot vector for ‘the’ (index 35) is multiplied by the embedding matrix E, to give the first part of the first hidden layer, called the projection layer. Since each row of the input matrix E is just an embedding for a word, and the input is a one-hot column vector xi for word Vi, the projection layer for input w will be Exi = ei, the embedding for word i. We now concatenate the three embeddings for the context words.
Multiply by W: We now multiply by W (and add b) and pass through the rectified linear (or other) activation function to get the hidden layer h. Multiply by U: h is now multiplied by U
Apply softmax: After the softmax, each node i in the output layer estimates the probability P(wt = i|wt−1,wt−2,wt−3)
7.5 • NEURAL LANGUAGE MODELS 145
     wt=fish
   L = −log P(fish | for, all, the) p(aardvark|...) p(do|...) p(fish|...) p(zebra|...)
Output layer ^ ^ ^ ^ ^
 softmax
U
Hidden layer h1 W
h2
|V| 1
h3 ...
9925 |V| 1
|V|⨉dh hdh dh⨉1
dh⨉3d 3d⨉1
y1 ... y34 ... y42...y35102...y|V| |V|⨉1
      Projection layer
embeddings
Input layer
one-hot vectors
E |V|⨉1 1
d⨉|V|
E is shared
 59
45180 |V|
across words
...
  00100000100000100
“for” = index word 59
“all” = index word 9925
wt-2
“the” = index word 45180
wt-1
  for
 all
 the
 fish
 ... and thanks
wt-3
wt
  Figure 7.14
 Learning all the way back to embeddings. Notice that the embedding matrix E is shared among the 3 context words.
Note that we don’t want to learn separate weight matrices for mapping each of the 3 previous words to the projection layer, we want one single embedding dictionary E that’s shared among these three. That’s because over time, many different words will appear as wt−2 or wt−1, and we’d like to just represent each word with one vector, whichever context position it appears in. The embedding weight matrix E thus has a column for each word, each a column vector of d dimensions, and hence has dimensionality d × |V |.
Let’s walk through the forward pass of Fig. 7.14.
In summary, if we use e to represent the projection layer, formed by concate- nating the 3 embeddings for the three context vectors, the equations for a neural

146 CHAPTER 7 • NEURAL NETWORKS AND NEURAL LANGUAGE MODELS language model become:
e = (Ex1,Ex2,...,Ex) h = σ(We+b)
z = Uh
yˆ = softmax(z)
7.5.2 Training the neural language model
(7.32) (7.33) (7.34) (7.35)
To train the model, i.e. to set all the parameters θ = E,W,U,b, we do gradient descent (Fig. 5.5), using error backpropagation on the computation graph to compute the gradient. Training thus not only sets the weights W and U of the network, but also as we’re predicting upcoming words, we’re learning the embeddings E for each words that best predict upcoming words.
Generally training proceeds by taking as input a very long text, concatenating all the sentences, starting with random weights, and then iteratively moving through the text predicting each word wt . At each word wt , we use the cross-entropy (negative log likelihood) loss. Recall that the general form for this (repeated from Eq. 7.19 is:
LCE(yˆ,y) = −logyˆi, (where i is the correct class) (7.36) For language modeling, the classes are are the word in the vocabulary, so yˆi here
means the probability that the model assigns to the correct next word wt :
LCE =−logp(wt|wt−1,...,wt−n+1) (7.37)
The parameter update for stochastic gradient descent for this loss from step s to s + 1
is then:
θs+1 =θs−η∂−logp(wt|wt−1,...,wt−n+1) (7.38) ∂θ
 This gradient can be computed in any standard neural network framework which will then backpropagate through θ = E,W,U,b.
Training the parameters to minimize loss will result both in an algorithm for language modeling (a word predictor) but also a new set of embeddings E that can be used as word representations for other tasks.
7.6 Summary
• Neural networks are built out of neural units, originally inspired by human neurons but now simply an abstract computational device.
• Each neural unit multiplies input values by a weight vector, adds a bias, and then applies a non-linear activation function like sigmoid, tanh, or rectified linear.
• In a fully-connected, feedforward network, each unit in layer i is connected to each unit in layer i + 1, and there are no cycles.
• The power of neural networks comes from the ability of early layers to learn representations that can be utilized by later layers in the network.
• Neural networks are trained by optimization algorithms like gradient de- scent.

BIBLIOGRAPHICAL AND HISTORICAL NOTES 147
• Error backpropagation, backward differentiation on a computation graph, is used to compute the gradients of the loss function for a network.
• Neural language models use a neural network as a probabilistic classifier, to compute the probability of the next word given the previous n words.
• Neural language models can use pretrained embeddings, or can learn embed- dings from scratch in the process of language modeling.
Bibliographical and Historical Notes
connectionist
The origins of neural networks lie in the 1940s McCulloch-Pitts neuron (McCul- loch and Pitts, 1943), a simplified model of the human neuron as a kind of com- puting element that could be described in terms of propositional logic. By the late 1950s and early 1960s, a number of labs (including Frank Rosenblatt at Cornell and Bernard Widrow at Stanford) developed research into neural networks; this phase saw the development of the perceptron (Rosenblatt, 1958), and the transformation of the threshold into a bias, a notation we still use (Widrow and Hoff, 1960).
The field of neural networks declined after it was shown that a single percep- tron unit was unable to model functions as simple as XOR (Minsky and Papert, 1969). While some small amount of work continued during the next two decades, a major revival for the field didn’t come until the 1980s, when practical tools for building deeper networks like error backpropagation became widespread (Rumel- hart et al., 1986). During the 1980s a wide variety of neural network and related architectures were developed, particularly for applications in psychology and cog- nitive science (Rumelhart and McClelland 1986b, McClelland and Elman 1986, Rumelhart and McClelland 1986a, Elman 1990), for which the term connection- ist or parallel distributed processing was often used (Feldman and Ballard 1982, Smolensky 1988). Many of the principles and techniques developed in this period are foundational to modern work, including the ideas of distributed representations (Hinton, 1986), recurrent networks (Elman, 1990), and the use of tensors for com- positionality (Smolensky, 1990).
By the 1990s larger neural networks began to be applied to many practical lan- guage processing tasks as well, like handwriting recognition (LeCun et al. 1989) and speech recognition (Morgan and Bourlard 1990). By the early 2000s, improvements in computer hardware and advances in optimization and training techniques made it possible to train even larger and deeper networks, leading to the modern term deep learning (Hinton et al. 2006, Bengio et al. 2007). We cover more related history in Chapter 9 and Chapter 26.
There are a number of excellent books on the subject. Goldberg (2017) has superb coverage of neural networks for natural language processing. For neural networks in general see Goodfellow et al. (2016) and Nielsen (2015).

148 CHAPTER 8 • SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES CHAPTER
8
parts of speech
 named entity POS
Sequence Labeling for Parts of Speech and Named Entities
To each word a warbling note
A Midsummer Night’s Dream, V.I
Dionysius Thrax of Alexandria (c. 100 B.C.), or perhaps someone else (it was a long time ago), wrote a grammatical sketch of Greek (a “techne ̄”) that summarized the linguistic knowledge of his day. This work is the source of an astonishing proportion of modern linguistic vocabulary, including the words syntax, diphthong, clitic, and analogy. Also included are a description of eight parts of speech: noun, verb, pronoun, preposition, adverb, conjunction, participle, and article. Although earlier scholars (including Aristotle as well as the Stoics) had their own lists of parts of speech, it was Thrax’s set of eight that became the basis for descriptions of European languages for the next 2000 years. (All the way to the Schoolhouse Rock educational television shows of our childhood, which had songs about 8 parts of speech, like the late great Bob Dorough’s Conjunction Junction.) The durability of parts of speech through two millennia speaks to their centrality in models of human language.
Proper names are another important and anciently studied linguistic category. While parts of speech are generally assigned to individual words or morphemes, a proper name is often an entire multiword phrase, like the name “Marie Curie”, the location “New York City”, or the organization “Stanford University”. We’ll use the term named entity for, roughly speaking, anything that can be referred to with a proper name: a person, a location, an organization, although as we’ll see the term is commonly extended to include things that aren’t entities per se.
Parts of speech (also known as POS) and named entities are useful clues to sen- tence structure and meaning. Knowing whether a word is a noun or a verb tells us about likely neighboring words (nouns in English are preceded by determiners and adjectives, verbs by nouns) and syntactic structure (verbs have dependency links to nouns), making part-of-speech tagging a key aspect of parsing. Knowing if a named entity like Washington is a name of a person, a place, or a university is important to many natural language understanding tasks like question answering, stance detec- tion, or information extraction.
In this chapter we’ll introduce the task of part-of-speech tagging, taking a se- quence of words and assigning each word a part of speech like NOUN or VERB, and the task of named entity recognition (NER), assigning words or phrases tags like PERSON, LOCATION, or ORGANIZATION.
Such tasks in which we assign, to each word xi in an input word sequence, a label yi, so that the output sequence Y has the same length as the input sequence X are called sequence labeling tasks. We’ll introduce classic sequence labeling algo- rithms, one generative— the Hidden Markov Model (HMM)—and one discriminative— the Conditional Random Field (CRF). In following chapters we’ll introduce modern sequence labelers based on RNNs and Transformers.
sequence labeling

8.1 • (MOSTLY) ENGLISH WORD CLASSES 149 8.1 (Mostly) English Word Classes
Until now we have been using part-of-speech terms like noun and verb rather freely. In this section we give more complete definitions. While word classes do have semantic tendencies—adjectives, for example, often describe properties and nouns people— parts of speech are defined instead based on their grammatical relationship with neighboring words or the morphological properties about their affixes.
 Figure 8.1
Tag Description Example
ADJ Adjective: noun modifiers describing properties ADV Adverb: verb modifiers of time, place, manner NOUN words for persons, places, things, etc.
VERB words for actions and processes
PROPN Proper noun: name of a person, organization, place, etc.. INTJ Interjection: exclamation, greeting, yes/no response, etc.
red, young, awesome
very, slowly, home, yesterday algorithm, cat, mango, beauty draw, provide, go
Regina, IBM, Colorado
oh, um, yes, hello
  ADP Adposition (Preposition/Postposition): marks a noun’s spacial, temporal, or other relation
AUX Auxiliary: helping verb marking tense, aspect, mood, etc., CCONJ CoordinatingConjunction:joinstwophrases/clauses DET Determiner: marks noun phrase properties
NUM Numeral
PART Particle: a preposition-like form used together with a verb PRON Pronoun: a shorthand for referring to an entity or event SCONJ Subordinating Conjunction: joins a main clause with a
subordinate clause such as a sentential complement
in, on, by under
can, may, should, are and,or,but
a, an, the, this
one, two, first, second
up, down, on, off, in, out, at, by she, who, I, others
that, which
 PUNCT Punctuation
SYM Symbols like $ or emoji X Other
 ̇, , ()
$, %
asdf, qwfg
   The 17 parts of speech in the Universal Dependencies tagset (Nivre et al., 2016a). Features can be added to make finer-grained distinctions (with properties like number, case, definiteness, and so on).
closed class open class
function word
noun common noun
count noun mass noun
proper noun
Parts of speech fall into two broad categories: closed class and open class. Closed classes are those with relatively fixed membership, such as prepositions— new prepositions are rarely coined. By contrast, nouns and verbs are open classes— new nouns and verbs like iPhone or to fax are continually being created or borrowed. Closed class words are generally function words like of, it, and, or you, which tend to be very short, occur frequently, and often have structuring uses in grammar.
Four major open classes occur in the languages of the world: nouns (including proper nouns), verbs, adjectives, and adverbs, as well as the smaller open class of interjections. English has all five, although not every language does.
Nouns are words for people, places, or things, but include others as well. Com- mon nouns include concrete terms like cat and mango, abstractions like algorithm and beauty, and verb-like terms like pacing as in His pacing to and fro became quite annoying. Nouns in English can occur with determiners (a goat, its bandwidth) take possessives (IBM’s annual revenue), and may occur in the plural (goats, abaci). Many languages, including English, divide common nouns into count nouns and mass nouns. Count nouns can occur in the singular and plural (goat/goats, rela- tionship/relationships) and can be counted (one goat, two goats). Mass nouns are used when something is conceptualized as a homogeneous group. So snow, salt, and communism are not counted (i.e., *two snows or *two communisms). Proper nouns, like Regina, Colorado, and IBM, are names of specific persons or entities.
Other Closed Class Words Open Class

150
CHAPTER 8 • SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES
verb
adjective
adverb
locative degree
manner temporal
Verbs refer to actions and processes, including main verbs like draw, provide, and go. English verbs have inflections (non-third-person-singular (eat), third-person- singular (eats), progressive (eating), past participle (eaten)). While many scholars believe that all human languages have the categories of noun and verb, others have argued that some languages, such as Riau Indonesian and Tongan, don’t even make this distinction (Broschart 1997; Evans 2000; Gil 2000) .
Adjectives often describe properties or qualities of nouns, like color (white, black), age (old, young), and value (good, bad), but there are languages without adjectives. In Korean, for example, the words corresponding to English adjectives act as a subclass of verbs, so what is in English an adjective “beautiful” acts in Korean like a verb meaning “to be beautiful”.
Adverbs are a hodge-podge. All the italicized words in this example are adverbs: Actually, I ran home extremely quickly yesterday
Adverbs generally modify something (often verbs, hence the name “adverb”, but also other adverbs and entire verb phrases). Directional adverbs or locative ad- verbs (home, here, downhill) specify the direction or location of some action; degree adverbs (extremely, very, somewhat) specify the extent of some action, process, or property; manner adverbs (slowly, slinkily, delicately) describe the manner of some action or process; and temporal adverbs describe the time that some action or event took place (yesterday, Monday).
Interjections (oh, hey, alas, uh, um), are a smaller open class, that also includes greetings (hello, goodbye), and question responses (yes, no, uh-huh).
English adpositions occur before nouns, hence are called prepositions. They can indicate spatial or temporal relations, whether literal (on it, before then, by the house) or metaphorical (on time, with gusto, beside herself), and relations like marking the agent in Hamlet was written by Shakespeare.
A particle resembles a preposition or an adverb and is used in combination with a verb. Particles often have extended meanings that aren’t quite the same as the prepositions they resemble, as in the particle over in she turned the paper over. A verb and a particle acting as a single unit is called a phrasal verb. The meaning of phrasal verbs is often non-compositional—not predictable from the individual meanings of the verb and the particle. Thus, turn down means ‘reject’, rule out ‘eliminate’, and go on ‘continue’.
Determiners like this and that (this chapter, that page) can mark the start of an English noun phrase. Articles like a, an, and the, are a type of determiner that mark discourse properties of the noun and are quite frequent; the is the most common word in written English, with a and an right behind.
Conjunctions join two phrases, clauses, or sentences. Coordinating conjunc- tions like and, or, and but join two elements of equal status. Subordinating conjunc- tions are used when one of the elements has some embedded status. For example, the subordinating conjunction that in “I thought that you might like some milk” links the main clause I thought with the subordinate clause you might like some milk. This clause is called subordinate because this entire clause is the “content” of the main verb thought. Subordinating conjunctions like that which link a verb to its argument in this way are also called complementizers.
Pronouns act as a shorthand for referring to an entity or event. Personal pro- nouns refer to persons or entities (you, she, I, it, me, etc.). Possessive pronouns are forms of personal pronouns that indicate either actual possession or more often just an abstract relation between the person and some object (my, your, his, her, its, one’s, our, their). Wh-pronouns (what, who, whom, whoever) are used in certain
interjection preposition
particle phrasal verb
determiner article
conjunction
complementizer pronoun
wh

8.2
Penn Treebank part-of-speech tags.
Below we show some examples with each word tagged according to both the UD and Penn tagsets. Notice that the Penn tagset distinguishes tense and participles on verbs, and has a special tag for the existential there construction in English. Note that since New England Journal of Medicine is a proper noun, both tagsets mark its component nouns as NNP, including journal and medicine, which might otherwise be labeled as common nouns (NOUN/NN).
(8.1) There/PRO/EXare/VERB/VBP70/NUM/CDchildren/NOUN/NNS there/ADV/RB ./PUNC/.
(8.2) Preliminary/ADJ/JJ findings/NOUN/NNS were/AUX/VBD reported/VERB/VBN in/ADP/IN today/NOUN/NN ’s/PART/POS New/PROPN/NNP England/PROPN/NNP Journal/PROPN/NNP of/ADP/IN Medicine/PROPN/NNP
Part-of-Speech Tagging
auxiliary
copula modal
8.2 • PART-OF-SPEECH TAGGING 151
question forms, or act as complementizers (Frida, who married Diego. . . ). Auxiliary verbs mark semantic features of a main verb such as its tense, whether it is completed (aspect), whether it is negated (polarity), and whether an action is necessary, possible, suggested, or desired (mood). English auxiliaries include the copula verb be, the two verbs do and have, forms, as well as modal verbs used to mark the mood associated with the event depicted by the main verb: can indicates
ability or possibility, may permission or possibility, must necessity.
An English-specific tagset, the 45-tag Penn Treebank tagset (Marcus et al., 1993), shown in Fig. 8.2, has been used to label many syntactically annotated corpora like
the Penn Treebank corpora, so is worth knowing about.
 Tag Description Example Tag Description Example Tag Description Example
 CC coord. conj.
CD cardinal number DT determiner
EX existential ‘there’ FW foreign word
IN preposition/
subordin-conj JJ adjective
JJR comparative adj
JJS superlative adj
LS list item marker MD modal
NN sing or mass noun
and, but, or one, two
a, the
there
mea culpa of, in, by
yellow bigger wildest
1, 2, One can, should llama
NNP proper noun, sing. NNPS proper noun, plu. NNS noun, plural PDT predeterminer POS possessive ending PRP personal pronoun
PRP$ possess. pronoun RB adverb
RBR comparative adv RBS superlatv. adv RP particle
SYM symbol
IBM Carolinas llamas all, both ’s
I, you, he
your, one’s quickly faster fastest
up, off +,%, &
TO “to”
UH interjection
VB verb base
VBD verb past tense VBG verb gerund VBN verb past partici-
ple
VBP verb non-3sg-pr
VBZ verb 3sg pres WDT wh-determ. WP wh-pronoun WP$ wh-possess. WRB wh-adverb
to
ah, oops eat
ate eating eaten
eat
eats which, that what, who whose how, where
Figure 8.2
   part-of-speech tagging
ambiguous
Part-of-speech tagging is the process of assigning a part-of-speech to each word in a text. The input is a sequence x1,x2,...,xn of (tokenized) words and a tagset, and the output is a sequence y1,y2,...,yn of tags, each output yi corresponding exactly to one input xi, as shown in the intuition in Fig. 8.3.
Tagging is a disambiguation task; words are ambiguous —have more than one possible part-of-speech—and the goal is to find the correct tag for the situation. For example, book can be a verb (book that flight) or a noun (hand me that book). That can be a determiner (Does that flight serve dinner) or a complementizer (I
  
152
CHAPTER 8 • SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES
    y1 y2 y3 y4 y5
NOUN AUX VERB DET NOUN
Part of Speech Tagger
Janet will back the bill x1 x2 x3 x4 x5
 Figure 8.3
 ambiguity resolution
accuracy
The task of part-of-speech tagging: mapping from input words x1,x2,...,xn to output POS tags y1,y2,...,yn .
thought that your flight was earlier). The goal of POS-tagging is to resolve these ambiguities, choosing the proper tag for the context.
The accuracy of part-of-speech tagging algorithms (the percentage of test set tags that match human gold labels) is extremely high. One study found accuracies over 97% across 15 languages from the Universal Dependency (UD) treebank (Wu and Dredze, 2019). Accuracies on various English treebanks are also 97% (no matter the algorithm; HMMs, CRFs, BERT perform similarly). This 97% number is also about the human performance on this task, at least for English (Manning, 2011).
Tag ambiguity in the Brown and WSJ corpora (Treebank-3 45-tag tagset).
We’ll introduce algorithms for the task in the next few sections, but first let’s explore the task. Exactly how hard is it? Fig. 8.4 shows that most word types (85-86%) are unambiguous (Janet is always NNP, hesitantly is always RB). But the ambiguous words, though accounting for only 14-15% of the vocabulary, are very common, and 55-67% of word tokens in running text are ambiguous. Particularly ambiguous common words include that, back, down, put and set; here are some examples of the 6 different parts of speech for the word back:
earnings growth took a back/JJ seat
a small building in the back/NN
a clear majority of senators back/VBP the bill Dave began to back/VB toward the door enable the country to buy back/RP debt
I was twenty-one back/RB then
Nonetheless, many words are easy to disambiguate, because their different tags aren’t equally likely. For example, a can be a determiner or the letter a, but the determiner sense is much more likely.
This idea suggests a useful baseline: given an ambiguous word, choose the tag which is most frequent in the training corpus. This is a key concept:
Types:
Unambiguous (1 tag) Ambiguous (2+tags)
Tokens:
Unambiguous (1tag) Ambiguous (2+tags)
WSJ 44,432 (86%)
7,025 (14%)
Brown 45,799 (85%)
8,050 (15%)
  577,421 (45%) 384,349 (33%) 711,780 (55%) 786,646 (67%)
 Figure 8.4
 Most Frequent Class Baseline: Always compare a classifier against a baseline at least as good as the most frequent class baseline (assigning each token to the class it occurred in most often in the training set).
 
8.3 • NAMED ENTITIES AND NAMED ENTITY TAGGING 153 The most-frequent-tag baseline has an accuracy of about 92%1. The baseline
thus differs from the state-of-the-art and human ceiling (97%) by only 5%.
8.3 Named Entities and Named Entity Tagging
named entity
named entity recognition
NER
Part of speech tagging can tell us that words like Janet, Stanford University, and Colorado are all proper nouns; being a proper noun is a grammatical property of these words. But viewed from a semantic perspective, these proper nouns refer to different kinds of entities: Janet is a person, Stanford University is an organization,.. and Colorado is a location.
A named entity is, roughly speaking, anything that can be referred to with a proper name: a person, a location, an organization. The task of named entity recog- nition (NER) is to find spans of text that constitute proper names and tag the type of the entity. Four entity tags are most common: PER (person), LOC (location), ORG (organization), or GPE (geo-political entity). However, the term named entity is commonly extended to include things that aren’t entities per se, including dates, times, and other kinds of temporal expressions, and even numerical expressions like prices. Here’s an example of the output of an NER tagger:
Citing high fuel prices, [ORG United Airlines] said [TIME Friday] it has increased fares by [MONEY $6] per round trip on flights to some cities also served by lower-cost carriers. [ORG American Airlines], a unit of [ORG AMR Corp.], immediately matched the move, spokesman [PER Tim Wagner] said. [ORG United], a unit of [ORG UAL Corp.], said the increase took effect [TIME Thursday] and applies to most routes where it competes against discount carriers, such as [LOC Chicago] to [LOC Dallas] and [LOC Denver] to [LOC San Francisco].
The text contains 13 mentions of named entities including 5 organizations, 4 loca- tions, 2 times, 1 person, and 1 mention of money. Figure 8.5 shows typical generic named entity types. Many applications will also need to use specific entity types like proteins, genes, commercial products, or works of art.
Type Tag Sample Categories Example sentences
 People Organization Location Geo-Political Entity
PER people, characters
ORG companies, sports teams LOC regions, mountains, seas GPE countries, states
Turing is a giant of computer science. The IPCC warned about the cyclone. Mt. Sanitas is in Sunshine Canyon. Palo Alto is raising the fees for parking.
 Figure 8.5
  A list of generic named entity types with the kinds of entities they refer to.
Named entity tagging is a useful first step in lots of natural language understand- ing tasks. In sentiment analysis we might want to know a consumer’s sentiment toward a particular entity. Entities are a useful first stage in question answering, or for linking text to information in structured knowledge sources like Wikipedia. And named entity tagging is also central to natural language understanding tasks of building semantic representations, like extracting events and the relationship be- tween participants.
Unlike part-of-speech tagging, where there is no segmentation problem since each word gets one tag, the task of named entity recognition is to find and label
1 In English, on the WSJ corpus, tested on sections 22-24.
 
154 CHAPTER 8 • SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES
BIO
spans of text, and is difficult partly because of the ambiguity of segmentation; we need to decide what’s an entity and what isn’t, and where the boundaries are. Indeed, most words in a text will not be named entities. Another difficulty is caused by type ambiguity. The mention JFK can refer to a person, the airport in New York, or any number of schools, bridges, and streets around the United States. Some examples of this kind of cross-type confusion are given in Figure 8.6.
Examples of type ambiguities in the use of the name Washington.
The standard approach to sequence labeling for a span-recognition problem like NER is BIO tagging (Ramshaw and Marcus, 1995). This is a method that allows us to treat NER like a word-by-word sequence labeling task, via tags that capture both the boundary and the named entity type. Consider the following sentence:
[PER Jane Villanueva ] of [ORG United] , a unit of [ORG United Airlines Holding] , said the fare applies to the [LOC Chicago ] route.
Figure 8.7 shows the same excerpt represented with BIO tagging, as well as variants called IO tagging and BIOES tagging. In BIO tagging we label any token that begins a span of interest with the label B, tokens that occur inside a span are tagged with an I, and any tokens outside of any span of interest are labeled O. While there is only one O tag, we’ll have distinct B and I tags for each named entity class. The number of tags is thus 2n + 1 tags, where n is the number of entity types. BIO tagging can represent exactly the same information as the bracketed notation, but has the advantage that we can represent the task in the same simple sequence modeling way as part-of-speech tagging: assigning a single label yi to each input word xi:
[PER Washington] was born into slavery on the farm of James Burroughs. [ORG Washington] went up 2 games to 1 in the four-game series.
Blair arrived in [LOC Washington] for what may well be his last state visit. In June, [GPE Washington] passed a primary seatbelt law.
  Figure 8.6
   Words
IO Label
BIO Label
BIOES Label
    Jane Villanueva of
United Airlines Holding discussed the Chicago route
.
I-PER I-PER O I-ORG I-ORG I-ORG O
O I-LOC O
O
B-PER I-PER O B-ORG I-ORG I-ORG O
O B-LOC O
O
B-PER E-PER O B-ORG I-ORG E-ORG O
O S-LOC O
O
    Figure 8.7
   NER as a sequence model, showing IO, BIO, and BIOES taggings.
We’ve also shown two variant tagging schemes: IO tagging, which loses some information by eliminating the B tag, and BIOES tagging, which adds an end tag E for the end of a span, and a span tag S for a span consisting of only one word. A sequence labeler (HMM, CRF, RNN, Transformer, etc.) is trained to label each token in a text with tags that indicate the presence (or absence) of particular kinds of named entities.

8.4 • HMM PART-OF-SPEECH TAGGING 155 8.4 HMM Part-of-Speech Tagging
Markov chain
In this section we introduce our first sequence labeling algorithm, the Hidden Markov Model, and show how to apply it to part-of-speech tagging. Recall that a sequence labeler is a model whose job is to assign a label to each unit in a sequence, thus map- ping a sequence of observations to a sequence of labels of the same length. HMMs are a classic model that introduces many of the key concepts of sequence modeling that we will see again in more modern models.
An HMM is a probabilistic sequence model: given a sequence of units (words, letters, morphemes, sentences, whatever), it computes a probability distribution over possible sequences of labels and chooses the best label sequence.
8.4.1 Markov Chains
The HMM is based on augmenting the Markov chain. A Markov chain is a model that tells us something about the probabilities of sequences of random variables, states, each of which can take on values from some set. These sets can be words, or tags, or symbols representing anything, for example the weather. A Markov chain makes a very strong assumption that if we want to predict the future in the sequence, all that matters is the current state. All the states before the current state have no im- pact on the future except via the current state. It’s as if to predict tomorrow’s weather you could examine today’s weather but you weren’t allowed to look at yesterday’s weather.
A Markov chain for weather (a) and one for words (b), showing states and transitions. A start distribution π is required; setting π = [0.1, 0.7, 0.2] for (a) would mean a probability 0.7 of starting in state 2 (cold), probability 0.1 of starting in state 1 (hot), etc.
More formally, consider a sequence of state variables q1,q2,...,qi. A Markov model embodies the Markov assumption on the probabilities of this sequence: that when predicting the future, the past doesn’t matter, only the present.
Markov Assumption: P(qi = a|q1...qi−1) = P(qi = a|qi−1) (8.3)
Figure 8.8a shows a Markov chain for assigning a probability to a sequence of weather events, for which the vocabulary consists of HOT, COLD, and WARM. The states are represented as nodes in the graph, and the transitions, with their probabil- ities, as edges. The transitions are probabilities: the values of arcs leaving a given state must sum to 1. Figure 8.8b shows a Markov chain for assigning a probability to a sequence of words w1 ...wt . This Markov chain should be familiar; in fact, it repre- sents a bigram language model, with each edge expressing the probability p(wi|wj)! Given the two models in Fig. 8.8, we can assign a probability to any sequence from our vocabulary.
         .1 .1
HOT1
.8
.1 .3
.3
.1
WARM3
COLD2
    (a) (b)
.4
are
.5
.2 .5
charming
    uniformly
.5
.1 .6 .2
   .6
.6
 Figure 8.8
 Markov assumption

156 CHAPTER 8 • SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES Formally, a Markov chain is specified by the following components:
Q = q1q2 ...qN
A = a11a12 ...aN1 ...aNN
π = π1,π2,...,πN
a set of N states
a transition probability matrix A, each ai j represent- 􏰐ing the probability of moving from state i to state j, s.t.
nj = 1 a i j = 1 ∀ i
an initial probability distribution over states. πi is the probability that the Markov chain will start in state i. Some states j may have􏰐π j = 0, meaning that they cannot be initial states. Also, ni=1 πi = 1
   hidden
hidden Markov model
Before you go on, use the sample probabilities in Fig. 8.8a (with π = [0.1, 0.7, 0.2]) to compute the probability of each of the following sequences:
(8.4) hothothothot (8.5) coldhotcoldhot
What does the difference in these probabilities tell you about a real-world weather fact encoded in Fig. 8.8a?
8.4.2 The Hidden Markov Model
A Markov chain is useful when we need to compute a probability for a sequence of observable events. In many cases, however, the events we are interested in are hidden: we don’t observe them directly. For example we don’t normally observe part-of-speech tags in a text. Rather, we see words, and must infer the tags from the word sequence. We call the tags hidden because they are not observed.
A hidden Markov model (HMM) allows us to talk about both observed events (like words that we see in the input) and hidden events (like part-of-speech tags) that we think of as causal factors in our probabilistic model. An HMM is specified by the following components:
Q = q1q2 ...qN a set of N states
 A = a11 . . . ai j . . . aN N a transition probability matrix A, e􏰐ach ai j representing the probability of moving from state i to state j, s.t. Nj=1 aij = 1 ∀i
O = o1o2 ...oT a sequence of T observations, each one drawn from a vocabulary V = v1,v2,...,vV
  B = bi (ot ) a sequence of observation likelihoods, also called emission probabili- ties, each expressing the probability of an observation ot being generated
from a state qi
 π = π1,π2,...,πN an initial probability distribution over states. πi is the probability that the Markov chain will start in state i. Some sta􏰐tes j may have π j = 0,
meaning that they cannot be initial states. Also, ni=1 πi = 1
A first-order hidden Markov model instantiates two simplifying assumptions. First, as with a first-order Markov chain, the probability of a particular state depends only on the previous state:
Markov Assumption: P(qi|q1,...,qi−1) = P(qi|qi−1) (8.6) Second, the probability of an output observation oi depends only on the state that
produced the observation qi and not on any other states or any other observations: Output Independence: P(oi|q1,...qi,...,qT ,o1,...,oi,...,oT ) = P(oi|qi) (8.7)
 
8.4 • HMM PART-OF-SPEECH TAGGING 157 8.4.3 The components of an HMM tagger
Let’s start by looking at the pieces of an HMM tagger, and then we’ll see how to use it to tag. An HMM has two components, the A and B probabilities.
The A matrix contains the tag transition probabilities P(ti|ti−1) which represent the probability of a tag occurring given the previous tag. For example, modal verbs like will are very likely to be followed by a verb in the base form, a VB, like race, so we expect this probability to be high. We compute the maximum likelihood estimate of this transition probability by counting, out of the times we see the first tag in a labeled corpus, how often the first tag is followed by the second:
P(ti|ti−1) = C(ti−1,ti) (8.8) C(ti−1)
In the WSJ corpus, for example, MD occurs 13124 times of which it is followed by VB 10471, for an MLE estimate of
P(V B|MD) = C(MD,V B) = 10471 = .80 (8.9) C(MD) 13124
Let’s walk through an example, seeing how these probabilities are estimated and used in a sample tagging task, before we return to the algorithm for decoding.
In HMM tagging, the probabilities are estimated by counting on a tagged training corpus. For this example we’ll use the tagged WSJ corpus.
The B emission probabilities, P(wi|ti), represent the probability, given a tag (say MD), that it will be associated with a given word (say will). The MLE of the emis- sion probability is
P(wi|ti) = C(ti,wi) (8.10) C(ti)
Of the 13124 occurrences of MD in the WSJ corpus, it is associated with will 4046
    times:
P(will|MD) = C(MD,will) = 4046 = .31 (8.11) C(MD) 13124
  decoding
We saw this kind of Bayesian modeling in Chapter 4; recall that this likelihood term is not asking “which is the most likely tag for the word will?” That would be the posterior P(MD|will). Instead, P(will|MD) answers the slightly counterintuitive question “If we were going to generate a MD, how likely is it that this modal would be will?”
The A transition probabilities, and B observation likelihoods of the HMM are illustrated in Fig. 8.9 for three states in an HMM part-of-speech tagger; the full tagger would have one state for each tag.
8.4.4 HMM tagging as decoding
For any model, such as an HMM, that contains hidden variables, the task of deter- mining the hidden variables sequence corresponding to the sequence of observations is called decoding. More formally,
Decoding: Given as input an HMM λ = (A, B) and a sequence of ob- servations O = o1 , o2 , ..., oT , find the most probable sequence of states Q = q1q2q3 ...qT .

158 CHAPTER 8 • SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES
An illustration of the two parts of an HMM representation: the A transition probabilities used to compute the prior probability, and the B observation likelihoods that are associated with each state, one likelihood for each possible observation word.
For part-of-speech tagging, the goal of HMM decoding is to choose the tag sequence t1 . . . tn that is most probable given the observation sequence of n words
     B2
P("aardvark" | MD)
...
P(“will” | MD)
...
P("the" | MD)
...
P(“back” | MD) ...
P("zebra" | MD)
     a12 a11
VB1
a22
MD2
a21 a a13
a
a32
23
31
NN3
a33
B3
P("aardvark" | NN) ...
P(“will” | NN)
...
P("the" | NN) ...
P(“back” | NN) ...
P("zebra" | NN)
   B1
P("aardvark" | VB)
...
P(“will” | VB)
...
P("the" | VB)
...
P(“back” | VB) ...
P("zebra" | VB)
      Figure 8.9
 w1...wn:
The way we’ll do this in the HMM is to use Bayes’ rule to instead compute:
tˆ 1:n
n emission transition 􏰒 􏰛 􏰞􏰝 􏰜 􏰛 􏰞􏰝 􏰜
tˆ = argmaxP(t ...t |w ...w ) 1:n 1n1n
(8.12)
(8.13)
(8.14)
HMM taggers make two further simplifying assumptions. The first is that the probability of a word appearing depends only on its own tag and is independent of neighboring words and tags:
􏰒n i=1
Plugging the simplifying assumptions from Eq. 8.15 and Eq. 8.16 into Eq. 8.14 results in the following equation for the most probable tag sequence from a bigram tagger:
t1... tn
tˆ = argmax P(w1 ...wn|t1 ...tn)P(t1 ...tn)
1:n
Furthermore, we simplify Eq. 8.13 by dropping the denominator P(wn1):
 t1... tn P(w1 ...wn)
tˆ = argmaxP(w ...w |t ...t )P(t ...t )
1:n 1 n1 n 1 n t1... tn
P(w1...wn|t1...tn) ≈
The second assumption, the bigram assumption, is that the probability of a tag is
P(wi|ti) (8.15) dependent only on the previous tag, rather than the entire tag sequence;
P(t1...tn) ≈
P(ti|ti−1) (8.16)
= argmaxP(t ...t |w ...w ) ≈ argmax 1 n1 n
P(w |t ) P(t |t ) ii ii−1
i=1
(8.17)
t1... tn t1... tn
The two parts of Eq. 8.17 correspond neatly to the B emission probability and A transition probability that we just defined above!
􏰒n i=1

Viterbi algorithm
8.4 • HMM PART-OF-SPEECH TAGGING 159 8.4.5 The Viterbi Algorithm
The decoding algorithm for HMMs is the Viterbi algorithm shown in Fig. 8.10. As an instance of dynamic programming, Viterbi resembles the dynamic program- ming minimum edit distance algorithm of Chapter 2.
   function VITERBI(observations of len T,state-graph of len N) returns best-path, path-prob
create a path probability matrix viterbi[N,T] for each state s from 1 to N do
viterbi[s,1]←πs ∗ bs(o1)
backpointer[s,1] ← 0
for each time step t from 2 to T do
for each state s from 1 to N do
; initialization step ; recursion step
N′
viterbi[s,t] ← max viterbi[s , t − 1] ∗ as′ ,s ∗ bs (ot )
s′ =1
backpointer[s,t] ← argmax viterbi[s , t − 1] ∗ as′ ,s ∗ bs (ot )
N bestpathprob←max viterbi[s,T]
s=1
N bestpathpointer←argmax viterbi[s,T]
;terminationstep ;terminationstep
N′ s′ =1
s=1
bestpath ← the path starting at state bestpathpointer, that follows backpointer[] to states back in time
return bestpath, bestpathprob
 Figure 8.10
 Viterbi algorithm for finding the optimal sequence of tags. Given an observation sequence and an HMM λ = (A, B), the algorithm returns the state path through the HMM that assigns maximum likelihood to the observation sequence.
The Viterbi algorithm first sets up a probability matrix or lattice, with one col- umn for each observation ot and one row for each state in the state graph. Each col- umn thus has a cell for each state qi in the single combined automaton. Figure 8.11 shows an intuition of this lattice for the sentence Janet will back the bill.
Each cell of the lattice, vt ( j), represents the probability that the HMM is in state j after seeing the first t observations and passing through the most probable state sequence q1,...,qt−1, given the HMM λ. The value of each cell vt(j) is computed by recursively taking the most probable path that could lead us to this cell. Formally,
each cell expresses the probability
vt(j) = max P(q1...qt−1,o1,o2 ...ot,qt = j|λ) (8.18)
q1 ,...,qt −1
We represent the most probable path by taking the maximum over all possible
previous state sequences max . Like other dynamic programming algorithms, q1 ,...,qt −1
Viterbi fills each cell recursively. Given that we had already computed the probabil- ity of being in every state at time t − 1, we compute the Viterbi probability by taking the most probable of the extensions of the paths that lead to the current cell. For a given state qj at time t, the value vt(j) is computed as
N
vt(j) = maxvt−1(i) aij bj(ot) (8.19)
i=1
The three factors that are multiplied in Eq. 8.19 for extending the previous paths to compute the Viterbi probability at time t are

160 CHAPTER 8 • SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES
A sketch of the lattice for Janet will back the bill, showing the possible tags (qi) for each word and highlighting the path corresponding to the correct tag sequence through the hidden states. States (parts of speech) which have a zero probability of generating a particular word according to the B matrix (such as the probability that a determiner DT will be realized as Janet) are greyed out.
8.4.6 Working through an example
Let’s tag the sentence Janet will back the bill; the goal is the correct series of tags (see also Fig. 8.11):
(8.20) Janet/NNP will/MD back/VB the/DT bill/NN
        DT DT DT DT DT RB RB RB RB RB NN NN NN NN NN JJ JJ JJ JJ JJ VB VB VB VB VB MD MD MD MD MD
NNP NNP NNP NNP NNP Janet will back the bill
                                    Figure 8.11
 vt−1(i) the previous Viterbi path probability from the previous time step
 ai j the transition probability from previous state qi to current state q j
 bj(ot) the state observation likelihood of the observation symbol ot given the current state j
 NNP MD VB JJ NN RB DT
 <s> 0.2767 0.0006 0.0031 0.0453 0.0449 0.0510 0.2026 NNP 0.3777 0.0110 0.0009 0.0084 0.0584 0.0090 0.0025 MD 0.0008 0.0002 0.7968 0.0005 0.0008 0.1698 0.0041 VB 0.0322 0.0005 0.0050 0.0837 0.0615 0.0514 0.2231 JJ 0.0366 0.0004 0.0001 0.0733 0.4509 0.0036 0.0036 NN 0.0096 0.0176 0.0014 0.0086 0.1216 0.0177 0.0068 RB 0.0068 0.0102 0.1011 0.1012 0.0120 0.0728 0.0479 DT 0.1147 0.0021 0.0002 0.2157 0.4744 0.0102 0.0017
 Figure 8.12
   The A transition probabilities P(ti|ti−1) computed from the WSJ corpus with- out smoothing. Rows are labeled with the conditioning event; thus P(V B|MD) is 0.7968.
Let the HMM be defined by the two tables in Fig. 8.12 and Fig. 8.13. Figure 8.12 lists the ai j probabilities for transitioning between the hidden states (part-of-speech tags). Figure 8.13 expresses the bi(ot) probabilities, the observation likelihoods of words given tags. This table is (slightly simplified) from counts in the WSJ corpus. So the word Janet only appears as an NNP, back has 4 possible parts of speech, and

8.4 • HMM PART-OF-SPEECH TAGGING 161
Observation likelihoods B computed from the WSJ corpus without smoothing, simplified slightly.
the word the can appear as a determiner or as an NNP (in titles like “Somewhere Over the Rainbow” all words are tagged as NNP).
The first few entries in the individual state columns for the Viterbi algorithm. Each cell keeps the probability of the best path so far and a pointer to the previous cell along that path. We have only filled out columns 1 and 2; to avoid clutter most cells with value 0 are left empty. The rest is left as an exercise for the reader. After the cells are filled in, backtracing from the end state, we should be able to reconstruct the correct state sequence NNP MD VB DT NN.
Figure 8.14 shows a fleshed-out version of the sketch we saw in Fig. 8.11, the Viterbi lattice for computing the best hidden state sequence for the observation se- quence Janet will back the bill.
There are N = 5 state columns. We begin in column 1 (for the word Janet) by setting the Viterbi value in each cell to the product of the π transition probability (the start probability for that state i, which we get from the <s > entry of Fig. 8.12),
Figure 8.13
Janet will back the bill
 NNP 0.000032 0
MD 0 0.308431 VB 0 0.000028 JJ 0 0
NN 0 0.000200 RB 0 0
DT 0 0
0
0 0.000672 0.000340 0.000223 0.010446 0
0.000048 0
0 0
0 0.000028 0 0
0 0.002337 0 0 0.506099 0
                 q7 DT
v1(7)
v1(6)
v1(5)
v1(4)= . 045*0=0
v1(3)= .0031 x 0
=0
v1(2)= .0006x0=
0
v1(1) = .28*.000032
= .000009
start
Janet
v2(7)
v2(6) v2(5)=
max * .0002 = .0000000001
v2(4) v2(3)=
max * .000028 = 2.5e-13
v2(2) =
max*.308= 2.772e-8
v2(1)
start will
t
           q
q5 NN q4 JJ
q3 VB q2 MD
q1 NNP π
v3(6)= max * .0104
v3(5)= max * .
000223
v3(4)= max * .00034
v3(3)= max * .00067
start start start
6 RB
           * P(NN|NN)
                                                   backtrace backtrace
       back the bill o1 o2 o3 o4 o5
  Figure 8.14
 * P(RB|NN)
P(JJ |start) = .045
* P(MD|JJ) =0
P(VB|start) = .0031
* P(MD|VB) =0
P(MD|start) = .0006
* P(MD|MD) =0
P(NNP|start) = .28
* P(MD|NNP) .000009*.01 = .9e-8

162
CHAPTER 8 • SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES
and the observation likelihood of the word Janet given the tag for that cell. Most of the cells in the column are zero since the word Janet cannot be any of those tags. The reader should find this in Fig. 8.14.
Next, each cell in the will column gets updated. For each state, we compute the value viterbi[s,t] by taking the maximum over the extensions of all the paths from the previous column that lead to the current cell according to Eq. 8.19. We have shown the values for the MD, VB, and NN cells. Each cell gets the max of the 7 values from the previous column, multiplied by the appropriate transition probabil- ity; as it happens in this case, most of them are zero from the previous column. The remaining value is multiplied by the relevant observation probability, and the (triv- ial) max is taken. In this case the final value, 2.772e-8, comes from the NNP state at the previous column. The reader should fill in the rest of the lattice in Fig. 8.14 and backtrace to see whether or not the Viterbi algorithm returns the gold state sequence NNP MD VB DT NN.
Conditional Random Fields (CRFs)
8.5
unknown words
While the HMM is a useful and powerful model, it turns out that HMMs need a number of augmentations to achieve high accuracy. For example, in POS tagging as in other tasks, we often run into unknown words: proper names and acronyms are created very often, and even new common nouns and verbs enter the language at a surprising rate. It would be great to have ways to add arbitrary features to help with this, perhaps based on capitalization or morphology (words starting with capital letters are likely to be proper nouns, words ending with -ed tend to be past tense (VBD or VBN), etc.) Or knowing the previous or following words might be a useful feature (if the previous word is the, the current tag is unlikely to be a verb).
Although we could try to hack the HMM to find ways to incorporate some of these, in general it’s hard for generative models like HMMs to add arbitrary features directly into the model in a clean way. We’ve already seen a model for combining arbitrary features in a principled way: log-linear models like the logistic regression model of Chapter 5! But logistic regression isn’t a sequence model; it assigns a class to a single observation.
Luckily, there is a discriminative sequence model based on log-linear models: CRF the conditional random field (CRF). We’ll describe here the linear chain CRF, the version of the CRF most commonly used for language processing, and the one
whose conditioning closely matches the HMM.
Assuming we have a sequence of input words X = x1n = x1...xn and want to
compute a sequence of output tags Y = yn1 = y1...yn. In an HMM to compute the best tag sequence that maximizes P(Y |X ) we rely on Bayes’ rule and the likelihood P(X|Y):
Yˆ = argmaxp(Y|X) Y
= argmaxp(X|Y)p(Y) Y􏰒􏰒
= argmax p(xi|yi) p(yi|yi−1) (8.21) Yii
In a CRF, by contrast, we compute the posterior p(Y|X) directly, training the

linear chain CRF
8.5 • CONDITIONAL RANDOM FIELDS (CRFS) 163 CRF to discriminate among the possible tag sequences:
Yˆ = argmax P(Y |X ) (8.22) Y∈Y
However, the CRF does not compute a probability for each tag at each time step. In- stead, at each time step the CRF computes log-linear functions over a set of relevant features, and these local features are aggregated and normalized to produce a global probability for the whole sequence.
Let’s introduce the CRF more formally, again using X and Y as the input and output sequences. A CRF is a log-linear model that assigns a probability to an entire output (tag) sequence Y , out of all possible sequences Y, given the entire input (word) sequence X. We can think of a CRF as like a giant version of what multinomial logistic regression does for a single token. Recall that the feature function f in regular multinomial logistic regression maps a tuple of a token x and a label y into a feature vector. In a CRF, the function F maps an entire input sequence X and an entire output sequence Y to a feature vector. Let’s assume we have K features, with a weight wk for each feature Fk:
􏰋􏰑K 􏰌 exp wkFk(X,Y)
k=1
􏰋􏰑K 􏰌 (8.23)
a function Z(X):
p(Y|X) = 􏰑 Y′∈Y
 wkFk(X,Y′)
It’s common to also describe the same equation by pulling out the denominator into
exp
1􏰋􏰑K 􏰌 p(Y|X) = Z(X)exp wkFk(X,Y)
k=1
 􏰋 k=1 􏰌 􏰑 􏰑K
(8.24) (8.25)
Z(X) = exp wkFk(X,Y′) Y′∈Y k=1
We’ll call these K functions Fk(X,Y) global features, since each one is a property of the entire input sequence X and output sequence Y . We compute them by decom- posing into a sum of local features for each position i in Y :
􏰑n i=1
Each of these local features fk in a linear-chain CRF is allowed to make use of the current output token yi, the previous output token yi−1, the entire input string X (or any subpart of it), and the current position i. This constraint to only depend on the current and previous output tokens yi and yi−1 are what characterizes a linear chain CRF. As we will see, this limitation makes it possible to use versions of the efficient Viterbi and Forward-Backwards algorithms from the HMM. A general CRF, by contrast, allows a feature to make use of any output token, and are thus necessary for tasks in which the decision depend on distant output tokens, like yi−4. General CRFs require more complex inference, and are less commonly used for language processing.
Fk(X,Y) =
fk(yi−1,yi,X,i) (8.26)

164
CHAPTER 8 • SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES 8.5.1 Features in a CRF POS Tagger
 feature templates
Let’s look at some of these features in detail, since the reason to use a discriminative sequence model is that it’s easier to incorporate a lot of features.2
Again, in a linear-chain CRF, each local feature fk at position i can depend on any information from: (yi−1,yi,X,i). So some legal features representing common situations might be the following:
1{xi = the, yi = DET}
1{yi = PROPN, xi+1 = Street, yi−1 = NUM} 1{yi = VERB, yi−1 = AUX}
For simplicity, we’ll assume all CRF features take on the value 1 or 0. Above, we explicitly use the notation 1{x} to mean “1 if x is true, and 0 otherwise”. From now on, we’ll leave off the 1 when we define features, but you can assume each feature has it there implicitly.
Although the idea of what features to use is done by the system designer by hand, the specific features are automatically populated by using feature templates as we briefly mentioned in Chapter 5. Here are some templates that only use information from yi−1,yi,X,i):
⟨yi,xi⟩,⟨yi,yi−1⟩,⟨yi,xi−1,xi+2⟩
These templates automatically populate the set of features from every instance in the training and test set. Thus for our example Janet/NNP will/MD back/VB the/DT bill/NN, when xi is the word back, the following features would be generated and have the value 1 (we’ve assigned them arbitrary feature numbers):
f3743: yi = VB and xi = back
f156: yi = VB and yi−1 = MD
f99732: yi = VB and xi−1 = will and xi+2 = bill
It’s also important to have features that help with unknown words. One of the most important is word shape features, which represent the abstract letter pattern of the word by mapping lower-case letters to ‘x’, upper-case to ‘X’, numbers to ’d’, and retaining punctuation. Thus for example I.M.F would map to X.X.X. and DC10-30 would map to XXdd-dd. A second class of shorter word shape features is also used. In these features consecutive character types are removed, so words in all caps map to X, words with initial-caps map to Xx, DC10-30 would be mapped to Xd-d but I.M.F would still map to X.X.X. Prefix and suffix features are also useful. In summary, here are some sample feature templates that help with unknown words:
For example the word well-dressed might generate the following non-zero val- ued feature values:
2 Because in HMMs all computation is based on the two probabilities P(tag|tag) and P(word|tag), if we want to include some source of knowledge into the tagging process, we must find a way to encode the knowledge into one of these two probabilities. Each time we add a feature we have to do a lot of complicated conditioning which gets harder and harder as we have more and more such features.
word shape
xi contains a particular prefix (perhaps from all prefixes of length ≤ 2) xi contains a particular suffix (perhaps from all suffixes of length ≤ 2) xi’s word shape
xi’s short word shape
  
gazetteer
Typical features for a feature-based NER system.
One feature that is especially useful for locations is a gazetteer, a list of place names, often providing millions of entries for locations with detailed geographical and political information.3 This can be implemented as a binary feature indicating a phrase appears in the list. Other related resources like name-lists, for example from the United States Census Bureau4, can be used, as can other entity dictionaries like lists of corporations or products, although they may not be as helpful as a gazetteer (Mikheev et al., 1999).
The sample named entity token L’Occitane would generate the following non- zero valued feature values (assuming that L’Occitane is neither in the gazetteer nor the census).
3 www.geonames.org 4 www.census.gov
8.5 • CONDITIONAL RANDOM FIELDS (CRFS) 165
prefix(xi) = w
prefix(xi) = we
suffix(xi) = ed
suffix(xi) = d
word-shape(xi) = xxxx-xxxxxxx short-word-shape(xi) = x-x
The known-word templates are computed for every word seen in the training set; the unknown word features can also be computed for all words in training, or only on training words whose frequency is below some threshold. The result of the known-word templates and word-signature features is a very large set of features. Generally a feature cutoff is used in which features are thrown out if they have count < 5 in the training set.
Remember that in a CRF we don’t learn weights for each of these local features fk. Instead, we first sum the values of each local feature (for example feature f3743) over the entire sentence, to create each global feature (for example F3743). It is those global features that will then be multiplied by weight w3743. Thus for training and inference there is always a fixed set of K features with K weights, even though the
length of each sentence is different.
8.5.2 Features for CRF Named Entity Recognizers
A CRF for NER makes use of very similar features to a POS tagger, as shown in Figure 8.15.
identity of wi, identity of neighboring words
embeddings for wi, embeddings for neighboring words
part of speech of wi, part of speech of neighboring words presence of wi in a gazetteer
wi contains a particular prefix (from all prefixes of length ≤ 4) wi contains a particular suffix (from all suffixes of length ≤ 4) word shape of wi, word shape of neighboring words
short word shape of wi, short word shape of neighboring words gazetteer features
  Figure 8.15
  
166 CHAPTER 8 •
SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES
prefix(xi) = L
prefix(xi) = L’
prefix(xi) = L’O
prefix(xi) = L’Oc word-shape(xi ) = X’Xxxxxxxx
suffix(xi ) = tane
suffix(xi ) = ane
suffix(xi ) = ne
suffix(xi ) = e short-word-shape(xi ) = X’Xx
Figure 8.16 illustrates the result of adding part-of-speech tags and some shape information to our earlier example.
Words POS Short shape Gazetteer BIO Label
 NNP Xx 0 NNP Xx 1 INx 0 NNP Xx 0 NNP Xx 0 NNP Xx 0 VBD x 0 DTx 0 NNP Xx 1
B-PER I-PER O B-ORG I-ORG I-ORG O
O B-LOC
Jane
Villanueva
of
United
Airlines
Holding
discussed
the
Chicago
route NNx 0 O ...0O
 Figure 8.16
   Some NER features for a sample sentence, assuming that Chicago and Vil- lanueva are listed as locations in a gazetteer. We assume features only take on the values 0 or 1, so the first POS feature, for example, would be represented as 1{POS = NNP}.
8.5.3 Inference and Training for CRFs
How do we find the best tag sequence Yˆ for a given input X ? We start with Eq. 8.22:
Yˆ = argmaxP(Y|X) Y ∈ Y
= argmax 1 exp Y∈Y Z(X)
(8.27)
(8.28)
(8.29)
(8.30)
= argmaxexp Y∈Y
􏰑K
= argmax wk
Y∈Y k=1
􏰑n i=1
= argmax Y∈Y
􏰑n 􏰑K i=1 k=1
fk(yi−1,yi,X,i) wk fk(yi−1,yi,X,i)
􏰋 􏰑K 􏰌 wkFk(X,Y)
k=1
􏰋􏰑K􏰑n 􏰌
wk fk(yi−1,yi,X,i) k=1 i=1
 We can ignore the exp function and the denominator Z(X), as we do above, because exp doesn’t change the argmax, and the denominator Z(X) is constant for a given observation sequence X.
How should we decode to find this optimal tag sequence yˆ? Just as with HMMs, we’ll turn to the Viterbi algorithm, which works because, like the HMM, the linear- chain CRF depends at each timestep on only one previous output token yi−1.
Concretely, this involves filling an N × T array with the appropriate values, main- taining backpointers as we proceed. As with HMM Viterbi, when the table is filled, we simply follow pointers back from the maximum value in the final column to retrieve the desired set of labels.

8.6 • EVALUATION OF NAMED ENTITY RECOGNITION 167
The requisite changes from HMM Viterbi have to do only with how we fill each cell. Recall from Eq. 8.19 that the recursive step of the Viterbi equation computes the Viterbi value of time t for state j as
(8.31)
(8.32)
N
vt(j) = max vt−1(i)aijbj(ot); 1≤ j≤N,1<t≤T
i=1
which is the HMM implementation of
N
vt(j) = max vt−1(i)P(sj|si)P(ot|sj) 1≤ j≤N,1<t≤T
i=1
The CRF requires only a slight change to this latter formula, replacing the a and b
prior and likelihood probabilities with the CRF features:
􏰑K
vt(j) = max vt−1(i) wkfk(yt−1,yt,X,t) 1≤ j≤N,1<t≤T (8.33)
Learning in CRFs relies on the same supervised learning algorithms we presented for logistic regression. Given a sequence of observations, feature functions, and cor- responding outputs, we use stochastic gradient descent to train the weights to maxi- mize the log-likelihood of the training corpus. The local nature of linear-chain CRFs means that a CRF version of the forward-backward algorithm (see Appendix A) can be used to efficiently compute the necessary derivatives. As with logistic regression, L1 or L2 regularization is important,
8.6 Evaluation of Named Entity Recognition
Part-of-speech taggers are evaluated by the standard metric of accuracy. Named entity recognizers are evaluated by recall, precision, and F1 measure. Recall that recall is the ratio of the number of correctly labeled responses to the total that should have been labeled; precision is the ratio of the number of correctly labeled responses to the total labeled; and F-measure is the harmonic mean of the two.
To know if the difference between the F1 scores of two MT systems is a signif- icant difference, we use the paired bootstrap test, or the similar randomization test (Section 4.9).
For named entities, the entity rather than the word is the unit of response. Thus in the example in Fig. 8.16, the two entities Jane Villanueva and United Airlines Holding and the non-entity discussed would each count as a single response.
The fact that named entity tagging has a segmentation component which is not present in tasks like text categorization or part-of-speech tagging causes some prob- lems with evaluation. For example, a system that labeled Jane but not Jane Vil- lanueva as a person would cause two errors, a false positive for O and a false nega- tive for I-PER. In addition, using entities as the unit of response but words as the unit of training means that there is a mismatch between the training and test conditions.
8.7 Further Details
In this section we summarize a few remaining details of the data and models, be- ginning with data. Since the algorithms we have presented are supervised, hav-
N
i=1 k=1

168 CHAPTER 8 • SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES
ing labeled data is essential for training and test. A wide variety of datasets exist for part-of-speech tagging and/or NER. The Universal Dependencies (UD) dataset (Nivre et al., 2016b) has POS tagged corpora in 92 languages at the time of this writing, as do the Penn Treebanks in English, Chinese, and Arabic. OntoNotes has corpora labeled for named entities in English, Chinese, and Arabic (Hovy et al., 2006). Named entity tagged corpora also available in particular domains, such as for biomedical (Bada et al., 2012) and literary text (Bamman et al., 2019).
8.7.1 Bidirectionality
One problem with the CRF and HMM architectures as presented is that the models are exclusively run left-to-right. While the Viterbi algorithm still allows present decisions to be influenced indirectly by future decisions, it would help even more if a decision about word wi could directly use information about future tags ti+1 and ti+2 .
Alternatively, any sequence model can be turned into a bidirectional model by using multiple passes. For example, the first pass would use only part-of-speech features from already-disambiguated words on the left. In the second pass, tags for all words, including those on the right, can be used. Alternately, the tagger can be run twice, once left-to-right and once right-to-left. In Viterbi decoding, the labeler would chooses the higher scoring of the two sequences (left-to-right or right-to-left). Bidirectional models are quite standard for neural models, as we will see with the biLSTM models to be introduced in Chapter 9.
8.7.2 Rule-based Methods
While machine learned (neural or CRF) sequence models are the norm in academic research, commercial approaches to NER are often based on pragmatic combina- tions of lists and rules, with some smaller amount of supervised machine learning (Chiticariu et al., 2013). For example in the IBM System T architecture, a user specifies declarative constraints for tagging tasks in a formal query language that includes regular expressions, dictionaries, semantic constraints, and other operators, which the system compiles into an efficient extractor (Chiticariu et al., 2018).
One common approach is to make repeated rule-based passes over a text, starting with rules with very high precision but low recall, and, in subsequent stages, using machine learning methods that take the output of the first pass into account.
1. First, use high-precision rules to tag unambiguous entity mentions.
2. Then, search for substring matches of the previously detected names.
3. Use application-specific name lists to find likely domain-specific mentions.
4. Finally,applysupervisedsequencelabelingtechniquesthatusetagsfrompre- vious stages as additional features.
Rule-based methods were also the earliest methods for part-of-speech tagging. Rule-based taggers like the English Constraint Grammar system (Karlsson et al. 1995, Voutilainen 1999). use the two-stage formalism that was invented in the 1950s and 1960s: a morphological analyzer with tens of thousands of word stem entries re- turns all parts of speech for a word. Then a large set of thousands of constraints are applied to the input sentence to rule out parts of speech inconsistent with the context.

8.8 • SUMMARY 169 8.7.3 POS Tagging for Morphologically Rich Languages
Augmentations to tagging algorithms become necessary when dealing with lan- guages with rich morphology like Czech, Hungarian and Turkish.
These productive word-formation processes result in a large vocabulary for these languages: a 250,000 word token corpus of Hungarian has more than twice as many word types as a similarly sized corpus of English (Oravecz and Dienes, 2002), while a 10 million word token corpus of Turkish contains four times as many word types as a similarly sized English corpus (Hakkani-Tu ̈r et al., 2002). Large vocabular- ies mean many unknown words, and these unknown words cause significant per- formance degradations in a wide variety of languages (including Czech, Slovene, Estonian, and Romanian) (Hajicˇ, 2000).
Highly inflectional languages also have much more information than English coded in word morphology, like case (nominative, accusative, genitive) or gender (masculine, feminine). Because this information is important for tasks like pars- ing and coreference resolution, part-of-speech taggers for morphologically rich lan- guages need to label words with case and gender information. Tagsets for morpho- logically rich languages are therefore sequences of morphological tags rather than a single primitive tag. Here’s a Turkish example, in which the word izin has three pos- sible morphological/part-of-speech tags and meanings (Hakkani-Tu ̈r et al., 2002):
1. Yerdekiizintemizlenmesigerek.
The trace on the floor should be cleaned.
2. U ̈zerindeparmakizinkalmis ̧ Your finger print is left on (it).
3. Ic ̧erigirmekic ̧inizinalmangerekiyor. You need permission to enter.
iz+Noun+A3sg+Pnon+Gen
iz+Noun+A3sg+P2sg+Nom izin+Noun+A3sg+Pnon+Nom
Using a morphological parse sequence like Noun+A3sg+Pnon+Gen as the part- of-speech tag greatly increases the number of parts of speech, and so tagsets can be 4 to 10 times larger than the 50–100 tags we have seen for English. With such large tagsets, each word needs to be morphologically analyzed to generate the list of possible morphological tag sequences (part-of-speech tags) for the word. The role of the tagger is then to disambiguate among these tags. This method also helps with unknown words since morphological parsers can accept unknown stems and still segment the affixes properly.
8.8 Summary
This chapter introduced parts of speech and named entities, and the tasks of part- of-speech tagging and named entity recognition:
• Languages generally have a small set of closed class words that are highly frequent, ambiguous, and act as function words, and open-class words like nouns, verbs, adjectives. Various part-of-speech tagsets exist, of between 40 and 200 tags.
• Part-of-speech tagging is the process of assigning a part-of-speech label to each of a sequence of words.
• Namedentitiesarewordsforpropernounsreferringmainlytopeople,places, and organizations, but extended to many other types that aren’t strictly entities or even proper nouns.

170 CHAPTER 8
•
• •
•
SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES
Two common approaches to sequence modeling are a generative approach, HMM tagging, and a discriminative approach, CRF tagging. We will see a neural approach in following chapters.
The probabilities in HMM taggers are estimated by maximum likelihood es- timation on tag-labeled training corpora. The Viterbi algorithm is used for decoding, finding the most likely tag sequence ConditionalRandomFieldsorCRFtaggerstrainalog-linearmodelthatcan choose the best tag sequence given an observation sequence, based on features that condition on the output tag, the prior output tag, the entire input sequence, and the current timestep. They use the Viterbi algorithm for inference, to choose the best sequence of tags, and a version of the Forward-Backward algorithm (see Appendix A) for training,
Bibliographical and Historical Notes
What is probably the earliest part-of-speech tagger was part of the parser in Zellig Harris’s Transformations and Discourse Analysis Project (TDAP), implemented be- tween June 1958 and July 1959 at the University of Pennsylvania (Harris, 1962), although earlier systems had used part-of-speech dictionaries. TDAP used 14 hand- written rules for part-of-speech disambiguation; the use of part-of-speech tag se- quences and the relative frequency of tags for a word prefigures modern algorithms. The parser was implemented essentially as a cascade of finite-state transducers; see Joshi and Hopely (1999) and Karttunen (1999) for a reimplementation.
The Computational Grammar Coder (CGC) of Klein and Simmons (1963) had three components: a lexicon, a morphological analyzer, and a context disambigua- tor. The small 1500-word lexicon listed only function words and other irregular words. The morphological analyzer used inflectional and derivational suffixes to as- sign part-of-speech classes. These were run over words to produce candidate parts of speech which were then disambiguated by a set of 500 context rules by relying on surrounding islands of unambiguous words. For example, one rule said that between an ARTICLE and a VERB, the only allowable sequences were ADJ-NOUN, NOUN- ADVERB, or NOUN-NOUN. The TAGGIT tagger (Greene and Rubin, 1971) used the same architecture as Klein and Simmons (1963), with a bigger dictionary and more tags (87). TAGGIT was applied to the Brown corpus and, according to Francis and Kucˇera (1982, p. 9), accurately tagged 77% of the corpus; the remainder of the Brown corpus was then tagged by hand. All these early algorithms were based on a two-stage architecture in which a dictionary was first used to assign each word a set of potential parts of speech, and then lists of handwritten disambiguation rules winnowed the set down to a single part of speech per word.
Probabilities were used in tagging by Stolz et al. (1965) and a complete proba- bilistic tagger with Viterbi decoding was sketched by Bahl and Mercer (1976). The Lancaster-Oslo/Bergen (LOB) corpus, a British English equivalent of the Brown cor- pus, was tagged in the early 1980’s with the CLAWS tagger (Marshall 1983; Mar- shall 1987; Garside 1987), a probabilistic algorithm that approximated a simplified HMM tagger. The algorithm used tag bigram probabilities, but instead of storing the word likelihood of each tag, the algorithm marked tags either as rare (P(tag|word) < .01) infrequent (P(tag|word) < .10) or normally frequent (P(tag|word) > .10).
DeRose (1988) developed a quasi-HMM algorithm, including the use of dy- namic programming, although computing P(t|w)P(w) instead of P(w|t)P(w). The same year, the probabilistic PARTS tagger of Church (1988), (1989) was probably

EXERCISES 171
the first implemented HMM tagger, described correctly in Church (1989), although Church (1988) also described the computation incorrectly as P(t|w)P(w) instead of P(w|t)P(w). Church (p.c.) explained that he had simplified for pedagogical pur- poses because using the probability P(t|w) made the idea seem more understandable as “storing a lexicon in an almost standard form”.
Later taggers explicitly introduced the use of the hidden Markov model (Ku- piec 1992; Weischedel et al. 1993; Schu ̈tze and Singer 1994). Merialdo (1994) showed that fully unsupervised EM didn’t work well for the tagging task and that reliance on hand-labeled data was important. Charniak et al. (1993) showed the importance of the most frequent tag baseline; the 92.3% number we give above was from Abney et al. (1999). See Brants (2000) for HMM tagger implementa- tion details, including the extension to trigram contexts, and the use of sophisticated unknown word features; its performance is still close to state of the art taggers.
Log-linear models for POS tagging were introduced by Ratnaparkhi (1996), who introduced a system called MXPOST which implemented a maximum en- tropy Markov model (MEMM), a slightly simpler version of a CRF. Around the same time, sequence labelers were applied to the task of named entity tagging, first with HMMs (Bikel et al., 1997) and MEMMs (McCallum et al., 2000), and then once CRFs were developed (Lafferty et al. 2001), they were also applied to NER (McCallum and Li, 2003). A wide exploration of features followed (Zhou et al., 2005). Neural approaches to NER mainly follow from the pioneering results of Col- lobert et al. (2011), who applied a CRF on top of a convolutional net. BiLSTMs with word and character-based embeddings as input followed shortly and became a standard neural algorithm for NER (Huang et al. 2015, Ma and Hovy 2016, Lample et al. 2016) followed by the more recent use of Transformers and BERT.
The idea of using letter suffixes for unknown words is quite old; the early Klein and Simmons (1963) system checked all final letter suffixes of lengths 1-5. The un- known word features described on page 164 come mainly from Ratnaparkhi (1996), with augmentations from Toutanova et al. (2003) and Manning (2011).
State of the art POS taggers use neural algorithms, either bidirectional RNNs or Transformers like BERT; see Chapter 9 and Chapter 10. HMM (Brants 2000; Thede and Harper 1999) and CRF tagger accuracies are likely just a tad lower.
Manning (2011) investigates the remaining 2.7% of errors in a high-performing tagger (Toutanova et al., 2003). He suggests that a third or half of these remaining errors are due to errors or inconsistencies in the training data, a third might be solv- able with richer linguistic models, and for the remainder the task is underspecified or unclear.
Supervised tagging relies heavily on in-domain training data hand-labeled by experts. Ways to relax this assumption include unsupervised algorithms for cluster- ing words into part-of-speech-like classes, summarized in Christodoulopoulos et al. (2010), and ways to combine labeled and unlabeled data, for example by co-training (Clark et al. 2003; Søgaard 2010).
See Householder (1995) for historical notes on parts of speech, and Sampson (1987) and Garside et al. (1997) on the provenance of the Brown and other tagsets.
Exercises
8.1 Find one tagging error in each of the following sentences that are tagged with the Penn Treebank tagset:
1. I/PRP need/VBP a/DT flight/NN from/IN Atlanta/NN

172 CHAPTER 8
8.2
•
SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES
2. Does/VBZ this/DT flight/NN serve/VB dinner/NNS
3. I/PRP have/VB a/DT friend/NN living/VBG in/IN Denver/NNP
4. Can/VBPyou/PRPlist/VBthe/DTnonstop/JJafternoon/NNflights/NNS
Use the Penn Treebank tagset to tag each word in the following sentences from Damon Runyon’s short stories. You may ignore punctuation. Some of these are quite difficult; do your best.
1. It is a nice night.
2. This crap game is over a garage in Fifty-second Street. . .
3. ...Nobodyevertakesthenewspapersshesells...
4. He is a tall, skinny guy with a long, sad, mean-looking kisser, and a
mournful voice.
5. ...IamsittinginMindy’srestaurantputtingonthegefilltefish,whichis
a dish I am very fond of, ...
6. When a guy and a doll get to taking peeks back and forth at each other,
why there you are indeed.
Now compare your tags from the previous exercise with one or two friend’s answers. On which words did you disagree the most? Why?
Implement the “most likely tag” baseline. Find a POS-tagged training set, and use it to compute for each word the tag that maximizes p(t|w). You will need to implement a simple tokenizer to deal with sentence boundaries. Start by assuming that all unknown words are NN and compute your error rate on known and unknown words. Now write at least five rules to do a better job of tagging unknown words, and show the difference in error rates.
Build a bigram HMM tagger. You will need a part-of-speech-tagged corpus. First split the corpus into a training set and test set. From the labeled training set, train the transition and observation probabilities of the HMM tagger di- rectly on the hand-tagged data. Then implement the Viterbi algorithm so you can decode a test sentence. Now run your algorithm on the test set. Report its error rate and compare its performance to the most frequent tag baseline.
Do an error analysis of your tagger. Build a confusion matrix and investigate the most frequent errors. Propose some features for improving the perfor- mance of your tagger on these errors.
Develop a set of regular expressions to recognize the character shape features described on page 164.
The BIO and other labeling schemes given in this chapter aren’t the only possible one. For example, the B tag can be reserved only for those situations where an ambiguity exists between adjacent entities. Propose a new set of BIO tags for use with your NER system. Experiment with it and compare its performance with the schemes presented in this chapter.
Names of works of art (books, movies, video games, etc.) are quite different from the kinds of named entities we’ve discussed in this chapter. Collect a list of names of works of art from a particular category from a Web-based source (e.g., gutenberg.org, amazon.com, imdb.com, etc.). Analyze your list and give examples of ways that the names in it are likely to be problematic for the techniques described in this chapter.
Develop an NER system specific to the category of names that you collected in the last exercise. Evaluate your system on a collection of text likely to contain instances of these named entities.
8.3 8.4
8.5
8.6
8.7 8.8
8.9
8.10

 CHAPTER
9
Deep Learning Architectures for Sequence Processing
Time will explain. Jane Austen, Persuasion
Language is an inherently temporal phenomenon. When we comprehend and pro- duce spoken language, we process continuous input streams of indefinite length. Even when dealing with written text, we normally process it sequentially. The tem- poral nature of language is reflected in the metaphors we use; we talk of the flow of conversations, news feeds, and twitter streams, all of which call out the notion that language is a sequence that unfolds in time.
This temporal nature is reflected in the algorithms we use to process language. For example, when applied to the problem of part-of-speech tagging, the Viterbi algorithm works its way incrementally through the input a word at a time, carrying forward information gleaned along the way. On the other hand, the machine learning approaches we’ve studied for sentiment analysis and other text classification tasks don’t have this temporal nature – they assume simultaneous access to all aspects of their input. This is especially true of feedforward neural networks, including their application to neural language models. These fully-connected networks use fixed- size inputs, along with associated weights, to capture all the relevant aspects of an example at once. This makes it difficult to deal with sequences of varying length and fails to capture important temporal aspects of language.
A work-around for these problems is the sliding window approach employed with neural language models. These models operate by accepting fixed-sized win- dows of tokens as input; sequences longer than the window size are processed by walking through the input making predictions along the way, with the end result being a sequence of predictions spanning the input. Importantly, decisions made in one window have no impact on subsequent decisions. Fig. 9.1, reproduced here from Chapter 7, depicts the operation of a neural language model using this approach with a window of size 3. Here, we’re predicting which word will come next given the in- put for all the. Subsequent words are predicted by sliding the window forward a word at a time.
This general approach is problematic for a number of reasons. First, it shares the primary weakness of our earlier Markov N-gram approaches in that it limits the context from which information can be extracted; anything outside the context window has no impact on the decision being made. This is an issue since there are many tasks that require access to information that can be arbitrarily distant from the point at which processing is happening. Second, the use of windows makes it difficult for networks to learn systematic patterns arising from phenomena like constituency. For example, in Fig. 9.1 the phrase all the appears in two separate windows: first as the second and third positions in the window, and again in the next step where it appears as the first and second positions, thus forcing the network to

174 CHAPTER 9 • DEEP LEARNING ARCHITECTURES FOR SEQUENCE PROCESSING
    p(aardvark|...) p(fish|...) p(for|...) p(zebra|...)
^ ^
...
^
^ ^
 Output layer
|V|⨉1
y1 ... y42 Hidden layer h1
y59
... y35102 ... y|V| |V|⨉dh
... hdh dh⨉1
softmax
U
   h2
h3
          Projection layer
embeddings
W
E
wt-1
embedding for word 45180
wt-1
dh⨉3d 3d⨉1
wt
     thanks
 for
 all
 the
 ?
... and
embedding for word 35
wt-3
embedding for word 9925
wt-2
...
  Figure 9.1
 A simplified view of a feedforward neural language model moving through a text. At each time step t the network takes the 3 context words, converts each to a d-dimensional embedding, and concatenates the 3 embeddings together to get the 1×Nd unit input layer x for the network. The output of the network is a probability distribution over the vocabulary representing the models belief with respect to each word being the next possible word.
learn two separate patterns for what should be the same item.
This chapter covers two closely related deep learning architectures designed to
address these challenges: recurrent neural networks and transformer networks. Both approaches have mechanisms to deal directly with the sequential nature of language that allow them to handle variable length inputs without the use of arbitrary fixed- sized windows, and to capture and exploit the temporal nature of language.
9.1 Language Models Revisited
In this chapter, we’ll explore these two architectures primarily through the lens of probabilistic language models. Recall from Chapter 3 that probabilistic language models predict the next word in a sequence given some preceding context. For example, if the preceding context is “Thanks for all the” and we want to know how likely the next word is “fish” we would compute:
P(fish|Thanks for all the)
Language models give us the ability to assign such a conditional probability to every possible next word, giving us a distribution over the entire vocabulary. We can also assign probabilities to entire sequences by using these conditional probabilities in

perplexity
autoregressive generation
9.1 • LANGUAGE MODELS REVISITED 175
􏰒n
i=1
This formulation gives rise to a wide range of sequence labeling applications, and as we’ll see, it provides a clear training objective based on how well a model is predicting the next word in a sequence.
We’ve already seen two ways to instantiate probabilistic language models with the N-gram models from Chapter 3 and the feedforward neural networks with sliding windows from Chapter 7. Unfortunately, both of these methods are constrained by the Markov assumption embodied in the following equation.
P(wn|w1:n−1) ≈ P(wn|w(n−N+1):(n−1))
That is, the prediction is based on a fixed preceding context of size N; any input that occurred earlier than that has no bearing on the outcome. The methods we explore in this chapter will relax this assumption, allowing the models to make use of much larger contexts.
We evaluate language models by examining how well they predict unseen data drawn from the same source as the training data. Intuitively, good models are those that assign higher probabilities to unseen data. To make this intuition concrete, we use perplexity as a measure of model quality. The perplexity (PP) of a model θ with respect to an unseen test set is the probability the model assigns to it, normalized by its length.
PPθ(w1:n) = P(w1:n)n1
An alternative way of viewing perplexity, inspired by information theory, is in terms
of entropy.
PP(w1:n) = 2H(w1:n)
= 2−1n􏰐n1log2m(wn)
In this formulation, the value in the exponent is the cross-entropy of our current model with respect to the true distribution.
Another way to assess a language model is to use it to generate novel sequences. The extent to which a generated sequence mirrors the training data is an indication of the quality of the model. We saw how to do this in Chapter 3 by adapting a technique suggested contemporaneously by Claude Shannon (Shannon, 1951) and the psychologists George Miller and Selfridge (Miller and Selfridge, 1950). To get started, we randomly sample a word to begin a sequence based on its suitability as the start of a sequence. Having sampled the first word, we sample further words conditioned on our previous choices until we reach a pre-determined length, or an end of sequence token is generated. Today, this approach is called autoregressive generation and we’ll cover its practical application in problems like machine trans- lation and text summarization in this and later chapters.
combination with the chain rule:
P(w1:n) =
P(wi|w<i)

176
9.2
CHAPTER 9 • DEEP LEARNING ARCHITECTURES FOR SEQUENCE PROCESSING Recurrent Neural Networks
Elman Networks
A recurrent neural network (RNN) is any network that contains a cycle within its network connections. That is, any network where the value of a unit is directly, or indirectly, dependent on its own earlier outputs as an input. While powerful, such networks are difficult to reason about and to train. However, within the general class of recurrent networks there are constrained architectures that have proven to be extremely effective when applied to spoken and written language. In this section, we consider a class of recurrent networks referred to as Elman Networks (Elman, 1990) or simple recurrent networks. These networks are useful in their own right and serve as the basis for more complex approaches like the Long Short-Term Memory (LSTM) networks discussed later in this chapter. Going forward, when we use the term RNN we’ll be referring to these simpler more constrained networks.
    yt ht
xt
     Figure 9.2
 Simple recurrent neural network after Elman (Elman, 1990). The hidden layer includes a recurrent connection as part of its input. That is, the activation value of the hidden layer depends on the current input as well as the activation value of the hidden layer from the previous time step.
Fig. 9.2 illustrates the structure of an RNN. As with ordinary feedforward net- works, an input vector representing the current input, xt , is multiplied by a weight matrix and then passed through a non-linear activation function to compute the val- ues for a layer of hidden units. This hidden layer is then used to calculate a cor- responding output, yt . In a departure from our earlier window-based approach, se- quences are processed by presenting one item at a time to the network. The key difference from a feedforward network lies in the recurrent link shown in the figure with the dashed line. This link augments the input to the computation at the hidden layer with the value of the hidden layer from the preceding point in time.
The hidden layer from the previous time step provides a form of memory, or context, that encodes earlier processing and informs the decisions to be made at later points in time. Critically, this approach does not impose a fixed-length limit on this prior context; the context embodied in the previous hidden layer includes information extending back to the beginning of the sequence.
Adding this temporal dimension makes RNNs appear to be more complex than non-recurrent architectures. But in reality, they’re not all that different. Given an input vector and the values for the hidden layer from the previous time step, we’re still performing the standard feedforward calculation introduced in Chapter 7. To see this, consider Fig. 9.3 which clarifies the nature of the recurrence and how it

9.2 • RECURRENT NEURAL NETWORKS 177
factors into the computation at the hidden layer. The most significant change lies in the new set of weights, U , that connect the hidden layer from the previous time step to the current hidden layer. These weights determine how the network makes use of past context in calculating the output for the current input. As with the other weights in the network, these connections are trained via backpropagation.
    yt V ht
UW ht-1 xt
        Figure 9.3
 Simple recurrent neural network illustrated as a feedforward network.
9.2.1 Inference in RNNs
Forward inference (mapping a sequence of inputs to a sequence of outputs) in an RNN is nearly identical to what we’ve already seen with feedforward networks. To compute an output yt for an input xt, we need the activation value for the hidden layer ht . To calculate this, we multiply the input xt with the weight matrix W , and the hidden layer from the previous time step ht−1 with the weight matrix U. We add these values together and pass them through a suitable activation function, g, to arrive at the activation value for the current hidden layer, ht . Once we have the values for the hidden layer, we proceed with the usual computation to generate the output vector.
ht = g(Uht−1+Wxt) yt = f(Vht)
It’s worthwhile here to be careful about specifying the dimensions of the input, hid-
den and output layers, as well as the weight matrices to make sure these calculations
are correct. Let’s refer to the input, hidden and output layer dimensions as din, dh,
and dout respectively. Given this, our three parameter matrices are: W ∈ Rdh ×din , U ∈ Rdh ×dh , and V ∈ Rdout ×dh .
In the commonly encountered case of soft classification, computing yt consists of a softmax computation that provides a probability distribution over the possible output classes.
yt = softmax(V ht )
The fact that the computation at time t requires the value of the hidden layer from time t − 1 mandates an incremental inference algorithm that proceeds from the start of the sequence to the end as illustrated in Fig. 9.4. The sequential nature of simple recurrent networks can also be seen by unrolling the network in time as is shown in Fig. 9.5. In this figure, the various layers of units are copied for each time

178 CHAPTER 9 • DEEP LEARNING ARCHITECTURES FOR SEQUENCE PROCESSING
step to illustrate that they will have differing values over time. However, the various
   function FORWARDRNN(x, network) returns output sequence y
h0←0
for i←1 to LENGTH(x) do
hi←g(Uhi−1 +Wxi)
yi←f(V hi) return y
 Figure 9.4
 Backpropaga- tion Through Time
weight matrices are shared across time.
Forward inference in a simple recurrent network. The matrices U , V and W are shared across time, while new values for h and y are calculated with each time step.
9.2.2 Training
As with feedforward networks, we’ll use a training set, a loss function, and back- propagation to obtain the gradients needed to adjust the weights in these recurrent networks. As shown in Fig. 9.3, we now have 3 sets of weights to update: W, the weights from the input layer to the hidden layer, U, the weights from the previous hidden layer to the current hidden layer, and finally V , the weights from the hidden layer to the output layer.
Fig. 9.5 highlights two considerations that we didn’t have to worry about with backpropagation in feedforward networks. First, to compute the loss function for the output at time t we need the hidden layer from time t − 1. Second, the hidden layer at time t influences both the output at time t and the hidden layer at time t + 1 (and hence the output and loss at t + 1). It follows from this that to assess the error accruing to ht , we’ll need to know its influence on both the current output as well as the ones that follow.
Tailoring the backpropagation algorithm to this situation leads to a two-pass al- gorithm for training the weights in RNNs. In the first pass, we perform forward inference, computing ht , yt , accumulating the loss at each step in time, saving the value of the hidden layer at each step for use at the next time step. In the second phase, we process the sequence in reverse, computing the required gradients as we go, computing and saving the error term for use in the hidden layer for each step backward in time. This general approach is commonly referred to as Backpropaga- tion Through Time (Werbos 1974, Rumelhart et al. 1986, Werbos 1990).
Fortunately, with modern computational frameworks and adequate computing resources, there is no need for a specialized approach to training RNNs. As illus- trated in Fig. 9.5, explicitly unrolling a recurrent network into a feedforward com- putational graph eliminates any explicit recurrences, allowing the network weights to be trained directly. In such an approach, we provide a template that specifies the basic structure of the network, including all the necessary parameters for the input, output, and hidden layers, the weight matrices, as well as the activation and output functions to be used. Then, when presented with a specific input sequence, we can generate an unrolled feedforward network specific to that input, and use that graph to perform forward inference or training via ordinary backpropagation.
For applications that involve much longer input sequences, such as speech recog- nition, character-level processing, or streaming of continuous inputs, unrolling an entire input sequence may not be feasible. In these cases, we can unroll the input

9.2 • RECURRENT NEURAL NETWORKS 179
    y3 V
y2 h3
VUW
y1 h2 x3
             V
h1 x2
UW h0 x1
UW
        Figure 9.5
 A simple recurrent neural network shown unrolled in time. Network layers are copied for each time step, while the weights U , V and W are shared in common across all time steps.
into manageable fixed-length segments and treat each segment as a distinct training item.
9.2.3 RNNs as Language Models
RNN-based language models process sequences a word at a time, attempting to predict the next word in a sequence by using the current word and the previous hidden state as inputs (Mikolov et al., 2010). The limited context constraint inherent in N-gram models is avoided since the hidden state embodies information about all of the preceding words all the way back to the beginning of the sequence.
Forward inference in a recurrent language model proceeds exactly as described in Section 9.2.1. The input sequence x consists of word embeddings represented as one-hot vectors of size |V | × 1, and the output predictions, y, are represented as vectors representing a probability distribution over the vocabulary. At each step, the model uses the word embedding matrix E to retrieve the embedding for the current word, and then combines it with the hidden layer from the previous step to compute a new hidden layer. This hidden layer is then used to generate an output layer which is passed through a softmax layer to generate a probability distribution over the entire vocabulary. That is, at time t:
et = ETxt
ht = g(Uht−1+Wet) yt = softmax(V ht )
The vector resulting from V h can be thought of as a set of scores over the vocabulary given the evidence provided in h. Passing these scores through the softmax normal- izes the scores into a probability distribution. Given y, the probability of a particular

180 CHAPTER 9 • DEEP LEARNING ARCHITECTURES FOR SEQUENCE PROCESSING
word in the vocabulary, i, as the next word is just its corresponding component of y.
teacher forcing
To train an RNN as a language a model, we use a corpus of text as training material in combination with a training regimen called teacher forcing. The task is to minimize the error in predicting the next word in the training sequence, using cross-entropy as the loss function. Recall that the cross-entropy loss measures the difference between a predicted probability distribution and the correct distribution.
LCE = −􏰑ytwlogyˆtw w∈V
In the case of language modeling, the correct distribution y comes from knowing the next word. This is represented as a one-hot vector corresponding to the vocab- ulary where the entry for the actual next word is 1, and all the other entries are 0. Thus, the cross-entropy loss for language modeling is determined by the probability the model assigns to the correct next word. To be specific, at time t the CE loss is the negative log probability assigned to the next word in the training sequence.
LCE(yˆt,yt) = −logyˆtwt+1 (9.1)
In practice, the weights in the network are adjusted to minimize the average CE loss over the training sequence via gradient descent. Fig. 9.6 illustrates this training regimen.
Careful readers may have noticed that the input embedding matrix E and the final layer matrix V , which feeds the output softmax, are quite similar. The rows of E represent the word embeddings for each word in the vocabulary learned during the training process with the goal that words that have similar meaning and function will have similar embeddings. And, since the length of these embeddings corresponds to the size of the hidden layer dh, the embedding matrix shape E is |V|×dh.
The final layer matrix V provides a way to score the likelihood of each word in the vocabulary given the evidence present in the final hidden layer of the net- work through the calculation of V h. This entails that it also has the dimensionality |V|×dh. That is, the rows of V provide a second set of learned word embeddings that capture relevant aspects of word meaning and function. This leads to an obvi- ous question – is it even necessary to have both? Weight Tying is a method that dispenses with this redundancy and uses a single set of embeddings at the input and softmax layers. That is, E = V . To do this, we set the dimensionality of the fi- nal hidden layer to be the same dh, (or add an additional projection layer to do the same thing), and simply use the same matrix for both layers. In addition to provid- ing improved perplexity results, this approach significantly reduces the number of parameters required for the model.
Weight Tying
P(wt+1=i|w1:t) = yti
It follows from this that the probability of an entire sequence is just the product of
the probabilities of each item in the sequence.
􏰒n
P(w1:n) =
= ywi
P(wi|w1:i−1) 􏰒n i
i=1 i=1

autoregressive generation
Generation with RNN-Based Language Models
As with the probabilistic Shakespeare generator from Chapter 3, a useful way to gain insight into a language model is to use a trained model to generate random novel sentences. The procedure is basically the same as that described on 38.
• To begin, sample a word in the output from the softmax distribution that re- sults from using the beginning of sentence marker, <s>, as the first input.
• Use the word embedding for that first word as the input to the network at the next time step, and then sample the next word in the same fashion.
• Continue generating until the end of sentence marker, </s>, is sampled or a fixed length limit is reached.
This technique is called autoregressive generation since the word generated at each time step is conditioned on the word selected by the network from the previous step. Fig. 9.7 illustrates this approach. In this figure, the details of the RNN’s hidden layers and recurrent connections are hidden within the blue block.
While this is an entertaining exercise, this architecture has inspired state-of-the- art approaches to applications such as machine translation, summarization, and ques- tion answering. The key to these approaches is to prime the generation component with an appropriate context. That is, instead of simply using <s> to get things started we can provide a richer task-appropriate context. We’ll discuss the application of contextual generation to the problem of summarization in Section ?? in the context of Transformer-based language models.
9.2.4 Other Applications of RNNs
Recurrent neural networks have proven to be an effective approach to language mod- eling, sequence labeling tasks such as part-of-speech tagging, as well as sequence classification tasks such as sentiment analysis and topic classification. And as we’ll see in Chapter 11 and Chapter 11, they form the basis for sequence-to-sequence approaches to summarization, machine translation, and question answering.
Training RNNs as language models.
9.2 • RECURRENT NEURAL NETWORKS 181
    Next word
a hole in the ground
Loss  logya  logyhole  logyin  logythe  logyground Softmax over
... 1 XT
T LCE
t=
...
...
     Vocabulary
RNN Layer(s)
Input Embeddings
              In a hole in the
 Figure 9.6
 
182 CHAPTER 9 • DEEP LEARNING ARCHITECTURES FOR SEQUENCE PROCESSING
          Sampled Word Softmax
Embedding
Input Word
In a hole ?
RNN
<s> In a hole
           Figure 9.7
 Autoregressive generation with an RNN-based neural language model.
Sequence Labeling
In sequence labeling, the network’s task is to assign a label chosen from a small fixed set of labels to each element of a sequence. Canonical examples of sequence labeling include part-of-speech tagging and named entity recognition discussed in detail in Chapter 8. In an RNN approach to sequence labeling, inputs are word embeddings and the outputs are tag probabilities generated by a softmax layer over the given tagset, as illustrated in Fig. 9.8.
In this figure, the inputs at each time step are pre-trained word embeddings cor- responding to the input tokens. The RNN block is an abstraction that represents
         Argmax NNP MD VB DT NN
     Softmax
Embdeddings Words
Janet will back the bill
 RNN
              Figure 9.8 Part-of-speech tagging as sequence labeling with a simple RNN. Pre-trained word embeddings serve as inputs and a softmax layer provides a probability distribution over the part-of-speech tags as output at each time step.
 
9.2 • RECURRENT NEURAL NETWORKS 183
an unrolled simple recurrent network consisting of an input layer, hidden layer, and output layer at each time step, as well as the shared U , V and W weight matrices that comprise the network. The outputs of the network at each time step represent the distribution over the POS tagset generated by a softmax layer.
To generate a sequence of tags for a given input, we run forward inference over the input sequence and select the most likely tag from the softmax at each step. Since we’re using a softmax layer to generate the probability distribution over the output tagset at each time step, we will again employ the cross-entropy loss during training.
9.2.5 RNNs for Sequence Classification
Another use of RNNs is to classify entire sequences rather than the tokens within them. We’ve already encountered this task in Chapter 4 with our discussion of sen- timent analysis. Other examples include document-level topic classification, spam detection, message routing for customer service applications, and deception detec- tion. In all of these applications, sequences of text are classified as belonging to one of a small number of categories.
To apply RNNs in this setting, the text to be classified is passed through the RNN a word at a time generating a new hidden layer at each time step. The hidden layer for the final element of the text, hn, is taken to constitute a compressed representation of the entire sequence. In the simplest approach to classification, hn, serves as the input to a subsequent feedforward network that chooses a class via a softmax over the possible classes. Fig. 9.9 illustrates this approach.
     Softmax
hn
      RNN
    x1 x2 x3 xn
     Figure 9.9 Sequence classification using a simple RNN combined with a feedforward net- work. The final hidden state from the RNN is used as the input to a feedforward network that performs the classification.
Note that in this approach there are no intermediate outputs for the words in the sequence preceding the last element. Therefore, there are no loss terms associ- ated with those elements. Instead, the loss function used to train the weights in the network is based entirely on the final text classification task. Specifically, the out- put from the softmax output from the feedforward classifier together with a cross- entropy loss drives the training. The error signal from the classification is backprop-
 
184
CHAPTER 9 • DEEP LEARNING ARCHITECTURES FOR SEQUENCE PROCESSING
end-to-end training
agated all the way through the weights in the feedforward classifier through, to its input, and then through to the three sets of weights in the RNN as described earlier in Section 9.2.2. This combination of a simple recurrent network with a feedforward classifier is our first example of a deep neural network. And the training regimen that uses the loss from a downstream application to adjust the weights all the way through the network is referred to as end-to-end training.
9.2.6 Stacked and Bidirectional RNNs
As suggested by the sequence classification architecture shown in Fig. 9.9, recurrent networks are quite flexible. By combining the feedforward nature of unrolled com- putational graphs with vectors as common inputs and outputs, complex networks can be treated as modules that can be combined in creative ways. This section intro- duces two of the more common network architectures used in language processing with RNNs.
Stacked RNNs
In our examples thus far, the inputs to our RNNs have consisted of sequences of word or character embeddings (vectors) and the outputs have been vectors useful for predicting words, tags or sequence labels. However, nothing prevents us from using the entire sequence of outputs from one RNN as an input sequence to another one. Stacked RNNs consist of multiple networks where the output of one layer serves as the input to a subsequent layer, as shown in Fig. 9.10.
Stacked RNNs
     y1 y2 y3
yn
     RNN 3
RNN 2
RNN 1
  x1 x2 x3
xn
     Figure 9.10 Stacked recurrent networks. The output of a lower level serves as the input to higher levels with the output of the last network serving as the final output.
It has been demonstrated across numerous tasks that stacked RNNs can outper- form single-layer networks. One reason for this success has to do with the network’s ability to induce representations at differing levels of abstraction across layers. Just as the early stages of the human visual system detect edges that are then used for finding larger regions and shapes, the initial layers of stacked networks can induce representations that serve as useful abstractions for further layers — representations that might prove difficult to induce in a single RNN.
 
bidirectional RNN
9.2 • RECURRENT NEURAL NETWORKS 185
The optimal number of stacked RNNs is specific to each application and to each training set. However, as the number of stacks is increased the training costs rise quickly.
Bidirectional RNNs
In a simple recurrent network, the hidden state at a given time t represents everything the network knows about the sequence up to that point in the sequence. That is, the hidden state at time t is the result of a function of the inputs from the start up through time t. We can think of this as the context of the network to the left of the current time.
htf = RNNforward(xt1)
Wherehtf correspondstothenormalhiddenstateattimet,andrepresentseverything the network has gleaned from the sequence to that point.
In many applications we have access to the entire input sequence all at once. We might ask whether it is helpful to take advantage of the context to the right of the current input as well. One way to recover such information is to train an RNN on an input sequence in reverse, using exactly the same kind of networks that we’ve been discussing. With this approach, the hidden state at time t now represents information about the sequence to the right of the current input.
htb = RNNbackward(xtn)
Here, the hidden state htb represents all the information we have discerned about the sequence from t to the end of the sequence.
Combining the forward and backward networks results in a bidirectional RNN(Schuster and Paliwal, 1997). A Bi-RNN consists of two independent RNNs, one where the
input is processed from the start to the end, and the other from the end to the start.
We then combine the outputs of the two networks into a single representation that captures both the left and right contexts of an input at each point in time.
ht =htf⊕htb
Fig. 9.11 illustrates a bidirectional network where the outputs of the forward and backward pass are concatenated. Other simple ways to combine the forward and backward contexts include element-wise addition or multiplication. The output at each step in time thus captures information to the left and to the right of the current input. In sequence labeling applications, these concatenated outputs can serve as the basis for a local labeling decision.
Bidirectional RNNs have also proven to be quite effective for sequence classi- fication. Recall from Fig. 9.10, that for sequence classification we used the final hidden state of the RNN as the input to a subsequent feedforward classifier. A dif- ficulty with this approach is that the final state naturally reflects more information about the end of the sentence than its beginning. Bidirectional RNNs provide a simple solution to this problem; as shown in Fig. 9.12, we simply combine the final hidden states from the forward and backward passes and use that as input for follow- on processing. Again, concatenation is a common approach to combining the two outputs but element-wise summation, multiplication or averaging are also used.

186
CHAPTER 9 • DEEP LEARNING ARCHITECTURES FOR SEQUENCE PROCESSING
    y1 y2 y3 yn +++ +
x1 x2 x3 xn
         RNN 2 (Right to Left)
      RNN 1 (Left to Right)
    Figure 9.11 A bidirectional RNN. Separate models are trained in the forward and backward directions with the output of each model at each time point concatenated to represent the state of affairs at that point in time. The box wrapped around the forward and backward network emphasizes the modular nature of this architecture.
      Softmax
    +
 h1_back
RNN 2 (Right to Left)
   RNN 1 (Left to Right)
hn_forw
       x1 x2 x3
xn
      9.3
Figure 9.12 A bidirectional RNN for sequence classification. The final hidden units from the forward and backward passes are combined to represent the entire sequence. This com- bined representation serves as input to the subsequent classifier.
Managing Context in RNNs: LSTMs and GRUs
In practice, it is quite difficult to train RNNs for tasks that require a network to make use of information distant from the current point of processing. Despite having access to the entire preceding sequence, the information encoded in hidden states tends to be fairly local, more relevant to the most recent parts of the input sequence and recent decisions. It is often the case, however, that distant information is critical

vanishing gradients
Long short-term memory
9.3 • MANAGING CONTEXT IN RNNS: LSTMS AND GRUS 187 to many language applications. To see this, consider the following example in the
context of language modeling.
(9.2) Theflightstheairlinewascancellingwerefull.
Assigning a high probability to was following airline is straightforward since airline provides a strong local context for the singular agreement. However, assigning an appropriate probability to were is quite difficult, not only because the plural flights is quite distant, but also because the intervening context involves singular constituents. Ideally, a network should be able to retain the distant information about plural flights until it is needed, while still processing the intermediate parts of the sequence cor- rectly.
One reason for the inability of RNNs to carry forward critical information is that the hidden layers, and, by extension, the weights that determine the values in the hid- den layer, are being asked to perform two tasks simultaneously: provide information useful for the current decision, and updating and carrying forward information re- quired for future decisions.
A second difficulty with training SRNs arises from the need to backpropagate the error signal back through time. Recall from Section 9.2.2 that the hidden layer at time t contributes to the loss at the next time step since it takes part in that cal- culation. As a result, during the backward pass of training, the hidden layers are subject to repeated multiplications, as determined by the length of the sequence. A frequent result of this process is that the gradients are eventually driven to zero – the so-called vanishing gradients problem.
To address these issues, more complex network architectures have been designed to explicitly manage the task of maintaining relevant context over time. More specif- ically, the network needs to learn to forget information that is no longer needed and to remember information required for decisions still to come.
9.3.1 Long Short-Term Memory
Long short-term memory (LSTM) networks (Hochreiter and Schmidhuber, 1997) divide the context management problem into two sub-problems: removing informa- tion no longer needed from the context, and adding information likely to be needed for later decision making. The key to solving both problems is to learn how to man- age this context rather than hard-coding a strategy into the architecture. LSTMs accomplish this by first adding an explicit context layer to the architecture (in addi- tion to the usual recurrent hidden layer), and through the use of specialized neural units that make use of gates to control the flow of information into and out of the units that comprise the network layers. These gates are implemented through the use of additional weights that operate sequentially on the input, and previous hidden layer, and previous context layers.
The gates in an LSTM share a common design pattern; each consists of a feed- forward layer, followed by a sigmoid activation function, followed by a pointwise multiplication with the layer being gated. The choice of the sigmoid as the activation function arises from its tendency to push its outputs to either 0 or 1. Combining this with a pointwise multiplication has an effect similar to that of a binary mask. Values in the layer being gated that align with values near 1 in the mask are passed through nearly unchanged; values corresponding to lower values are essentially erased.
The first gate we’ll consider is the forget gate. The purpose of this gate to delete information from the context that is no longer needed. The forget gate computes a weighted sum of the previous state’s hidden layer and the current input and passes
forget gate

188
CHAPTER 9 • DEEP LEARNING ARCHITECTURES FOR SEQUENCE PROCESSING
that through a sigmoid. This mask is then multiplied by the context vector to remove
add gate
output gate
the information from context that is no longer required. ft = σ(Ufht−1+Wfxt)
kt =ct−1⊙ft
The next task is compute the actual information we need to extract from the previous hidden state and current inputs — the same basic computation we’ve been using for all our recurrent networks.
gt = tanh(Ught−1 +Wgxt) (9.3) Next, we generate the mask for the add gate to select the information to add to the
current context.
it = σ(Uiht−1 +Wixt) jt =gt⊙it
(9.4) (9.5)
(9.6)
Next, we add this to the modified context vector to get our new context vector.
ct = jt +kt
The final gate we’ll use is the output gate which is used to decide what informa- tion is required for the current hidden state (as opposed to what information needs to be preserved for future decisions).
ot = σ(Uoht−1 +Woxt) (9.7) ht = ot ⊙tanh(ct) (9.8) (9.9)
Fig. 9.13 illustrates the complete computation for a single LSTM unit. Given the appropriate weights for the various gates, an LSTM accepts as input the context layer, and hidden layer from the previous time step, along with the current input vector. It then generates updated context and hidden vectors as output. The hidden layer, ht , can be used as input to subsequent layers in a stacked RNN, or to generate an output for the final layer of a network.
9.3.2 Gated Recurrent Units
LSTMs introduce a considerable number of additional parameters to our recurrent networks. We now have 8 sets of weights to learn (i.e., the U and W for each of the 4 gates within each unit), whereas with simple recurrent units we only had 2. Training these additional parameters imposes a much significantly higher training cost. Gated Recurrent Units (GRUs)(Cho et al., 2014) ease this burden by dispensing with the use of a separate context vector, and by reducing the number of gates to 2 — a reset gate, r and an update gate, z.
rt = σ(Urht−1 +Wrxt) (9.10) zt = σ(Uzht−1 +Wzxt) (9.11)

9.3 • MANAGING CONTEXT IN RNNS: LSTMS AND GRUS 189
     ht
Y
+
YY
st-1 f g i o
ht-1 x t
  st
               Figure 9.13 A single LSTM unit displayed as a computation graph. The inputs to each unit consists of the current input, x, the previous hidden state, ht−1, and the previous context, ct−1. The outputs are a new hidden state, ht and an updated context, ct .
As with LSTMs, the use of the sigmoid in the design of these gates results in a binary-like mask that either blocks information with values near zero or allows information to pass through unchanged with values near one. The purpose of the reset gate is to decide which aspects of the previous hidden state are relevant to the current context and what can be ignored. This is accomplished by performing an element-wise multiplication of r with the value of the previous hidden state. We then use this masked value in computing an intermediate representation for the new hidden state at time t.
h ̃t = tanh(U(rt ⊙ht−1)+Wxt) (9.12)
The job of the update gate z is to determine which aspects of this new state will be used directly in the new hidden state and which aspects of the previous state need to be preserved for future use. This is accomplished by using the values in z to interpolate between the old hidden state and the new one.
ht = (1−zt)ht−1 +zth ̃t (9.13) 9.3.3 Gated Units, Layers and Networks
The neural units used in LSTMs and GRUs are obviously much more complex than those used in basic feedforward networks. Fortunately, this complexity is encapsu- lated within the basic processing units, allowing us to maintain modularity and to
 
190
CHAPTER 9 • DEEP LEARNING ARCHITECTURES FOR SEQUENCE PROCESSING
    h ht ct ht ht
a
a
z z LSTM GRU Unit
    gg
⌃⌃
x ht-1 (a)
(b)
xt ct-1 ht-1 xt ht-1 (c)
xt (d)
  9.4
Figure 9.14 Basic neural units used in feedforward, simple recurrent networks (SRN), long short-term memory (LSTM) and gate recurrent units.
easily experiment with different architectures. To see this, consider Fig. 9.14 which illustrates the inputs and outputs associated with each kind of unit.
At the far left, (a) is the basic feedforward unit where a single set of weights and a single activation function determine its output, and when arranged in a layer there are no connections among the units in the layer. Next, (b) represents the unit in a simple recurrent network. Now there are two inputs and an additional set of weights to go with it. However, there is still a single activation function and output.
The increased complexity of the LSTM (c) and GRU (d) units on the right is encapsulated within the units themselves. The only additional external complexity for the LSTM over the basic recurrent unit (b) is the presence of the additional context vector as an input and output. The GRU units have the same input and output architecture as the simple recurrent unit.
This modularity is key to the power and widespread applicability of LSTM and GRU units. LSTM and GRU units can be substituted into any of the network ar- chitectures described in Section 9.2.6. And, as with simple RNNs, multi-layered networks making use of gated units can be unrolled into deep feedforward networks and trained in the usual fashion with backpropagation.
Self-Attention Networks: Transformers
Transformers
Despite the ability of LSTMs to mitigate the loss of distant information due to the recurrence in RNNs, the underlying problem remains. Passing information forward through an extended series of recurrent connections leads to a loss of relevant in- formation and to difficulties in training. Moreover, the inherently sequential nature of recurrent networks inhibits the use of parallel computational resources. These considerations led to the development of Transformers – an approach to sequence processing that eliminates recurrent connections and returns to architectures remi- niscent of the fully connected networks described earlier in Chapter 7.
Transformers map sequences of input vectors (x1,...,xn) to sequences of output vectors (y1,...,yn) of the same length. Transformers are made up of stacks of net- work layers consisting of simple linear layers, feedforward networks, and custom

self-attention
9.4 • SELF-ATTENTION NETWORKS: TRANSFORMERS 191
connections around them. In addition to these standard components, the key inno- vation of transformers is the use of self-attention layers. We’ll start by describing how self-attention works and then return to how it fits into larger transformer blocks. Self-attention allows a network to directly extract and use information from arbitrar- ily large contexts without the need to pass it through intermediate recurrent connec- tions as in RNNs. In this chapter, we’ll focus on the application of self-attention to the problems of language modeling and autoregressive generation where the context to be used lies in the past. We’ll return to wider applications of self-attention and Transformers in later chapters.
Fig. 9.15 illustrates the flow of information in a single causal, or backward look- ing, self-attention layer. As with the overall Transformer, a self-attention layer maps input sequences (x1,...,xn) to output sequences of the same length (y1,...,yn). When processing each item in the input, the model has access to all of the inputs up to an including the one under consideration, but no access to information about inputs beyond the current one. In addition, the computation performed for each item is independent of all the other computations. The first point ensures that we can use this approach to create language models and use them for autoregressive generation, and the second point means that we can easily parallelize both forward inference and training of such models.
    y1 y2 y3 y4 y5
      Self-Attention Layer
     x1 x2 x3 x4 x5
                Figure 9.15
 Information flow in a causal (or masked) self-attention model. In processing each element of the sequence, the model attends to all the inputs up to, and including, the current one. Unlike RNNs, the computations at each time step are independent of all the other steps and therefore can be performed in parallel.
At the core of an attention-based approach is the ability to compare an item of interest to a collection of other items in way that reveals their relevance in the current context. In the case of self-attention, the set of comparisons are to other elements within a given sequence. The result of these comparisons is then used to compute an output for the current input. For example, returning to Fig. 9.15, the computation of y3 is based on a set of comparisons between the input x3 and its preceding elements x1 and x2, and to x3 itself. The simplest form of comparison between elements in a self-attention layer is a dot product. To allow for other possible comparisons, let’s refer to the result of these comparisons as scores.
score(xi,xj) = xi·xj (9.14)
The result of a dot product is a scalar value ranging from −∞ to ∞, the larger the value the more similar the vectors that are being compared. Continuing with our

192 CHAPTER 9 • DEEP LEARNING ARCHITECTURES FOR SEQUENCE PROCESSING
example, the first step in computing y3 would be to compute three scores: x3 · x1, x3 ·x2 and x3 ·x3. Then to make effective use of these scores, we’ll normalize them with a softmax to create a vector of weights, αij, that indicates the proportional relevance of each input to the input element i that is the current focus of attention.
αij = softmax(score(xi,xj)) ∀j ≤ i (9.15) = 􏰐exp(score(xi,xj)) ∀j≤i (9.16)
ik=1 exp(score(xi,xk))
Given the proportional scores in α, we then generate an output value yi by taking
the sum of the inputs seen so far, weighted by their respective α value.
yi = 􏰑αijxj (9.17)
j≤i
The steps embodied in Equations 9.14 through 9.17 represent the core of an attention-based approach: a set of comparisons to relevant items in some context, a normalization of those scores to provide a probability distribution, followed by a weighted sum using this distribution. The output y is the result of this straightfor- ward computation over the inputs.
Unfortunately, this simple mechanism provides no opportunity for learning, ev- erything is directly based on the original input values x. In particular, there are no opportunities to learn the diverse ways that words can contribute to the represen- tation of longer inputs. To allow for this kind of learning, Transformers include additional parameters in the form of a set of weight matrices that operate over the input embeddings. To motivate these new parameters, consider the different roles that each input embedding plays during the course of the attention process.
• As the current focus of attention when being compared to all of the other preceding inputs. We’ll refer to this role as a query.
• In its role as a preceding input being compared to the current focus of atten- tion. We’ll refer to this role as a key.
• And finally, as a value used to compute the output for the current focus of attention.
To capture the different roles that input embeddings play in each of these steps, Transformers introduce three sets of weights which we’ll call WQ, WK, and WV. These weights will be used to compute linear transformations of each input x with the resulting values being used in their respective roles in subsequent calculations.
qi =WQxi; ki =WKxi; vi =WVxi
Given input embeddings of size dm, the dimensionality of these matrices are dq ×dm, dk × dm and dv × dm , respectively. In the original Transformer work (Vaswani et al., 2017), dm was 1024 and 64 for dk, dq and dv.
Given these projections, the score between a current focus of attention, xi and an element in the preceding context, xj consists of a dot product between its query vector qi and the preceding elements key vectors k j . Let’s update our previous com- parison calculation to reflect this.
score(xi,xj) = qi·kj (9.18) The ensuing softmax calculation resulting in αi, j remains the same, but the output
calculation for yi is now based on a weighted sum over the value vectors v.
yi = 􏰑αijvj (9.19) j≤i
 
9.4 • SELF-ATTENTION NETWORKS: TRANSFORMERS 193
    Weight and Sum
value vectors ( * )
( * ) ( * )
Output Vector
y3
⌃
       Softmax
↵i,j Key/Query
Comparisons
Generate key, query value vectors
k1 q1
v1
k2 q2 v2
k3 q3 v3
       Wk Wq Wv Wk Wq Wv Wk Wq Wv
x1 x2 x3
    Figure 9.16
 Calculation of the value of the third element of a sequence using causal self-attention.
Fig. 9.16 illustrates this calculation in the case of computing the third output y3 in a sequence.
A practical consideration that arises in computing αi j arises from the use of a dot product as a comparison in combination with the exponential in the softmax. The result of dot product can be an arbitrarily large (positive or negative) value. Exponentiating such large values can lead to numerical issues and to an effective loss of gradients during training. To avoid this, the dot product needs to be scaled in a suitable fashion. A scaled dot-product approach divides the result of the dot product by a factor related to the size of the embeddings before passing them through the softmax. A typical approach is to divide the dot product by the square root of the dimensionality of the query and key vectors, leading us to update our scoring function one more time.
qi ·kj
score(xi , x j ) = √dk (9.20)
This description of the self-attention process has been from the perspective of computing a single output at a particular point in time. However, since each out- put, yi, is computed independently this entire process can be parallelized by taking advantage of efficient matrix multiplication routines by packing the input embed-
 
194
CHAPTER 9 • DEEP LEARNING ARCHITECTURES FOR SEQUENCE PROCESSING
dings into a single matrix and multiplying it by the key, query and value matrices to
produce matrices containing all the key, query and value vectors.
Q=WQX; K=WKX; V=WVX
Given these matrices we can compute all the requisite query-key comparisons simultaneously by multiplying K and Q in a single matrix multiplication. Taking this one step further, we can scale these scores, take the softmax, and then multiply the result by V , thus reducing the entire self-attention step for an entire sequence to the following computation.
􏰆QKT 􏰇 SelfAttention(Q,K,V) = softmax √dk V (9.21)
Unfortunately, this process goes a bit too far since the calculation of the compar- isons in QKT results in a score for each query value to every key value, including those that follow the query. This is inappropriate in the setting of language modeling since guessing the next word is pretty simple if you already know it. To fix this, the elements in the upper-triangular portion of the comparisons matrix are zeroed out (set to −∞), thus eliminating any knowledge of words that follow in the sequence.
Transformer Blocks
The self-attention calculation lies at the core of what’s called a transformer block, which, in addition to the self-attention layer, includes additional feedforward layers, residual connections, and normalizing layers. Fig. 9.17 illustrates a typical trans- former block consisting of a single attention layer followed by a fully-connected feedforward layer with residual connections and layer normalizations following each. These blocks can then be stacked just as was the case for stacked RNNs.
Multihead Attention
The different words in a sentence can relate to each other in many different ways si- multaneously. For example, distinct syntactic, semantic, and discourse relationships can hold between verbs and their arguments in a sentence. It would be difficult for a single transformer block to learn to capture all of the different kinds of parallel relations among its inputs. Transformers address this issue with multihead self- attention layers. These are sets of self-attention layers, called heads, that reside in parallel layers at the same depth in a model, each with its own set of parameters. Given these distinct sets of parameters, each head can learn different aspects of the relationships that exist among inputs at the same level of abstraction.
To implement this notion, each head, i, in a self-attention layer is provided with its own set of key, query and value matrices: WiK , WiQ and WiV . These are used to project the inputs to the layer, xi, separately for each head, with the rest of the self-attention computation remaining unchanged. The output of a multi-head layer with h heads consists of h vectors of the same length. To make use of these vec- tors in further processing, they are combined and then reduced down to the original input dimension dm. This is accomplished by concatenating the outputs from each head and then using yet another linear projection to reduce it to the original output dimension.
MultiHeadAttn(Q,K,V) = WO(head1 ⊕head2...⊕headh) headi = SelfAttention(WiQX,WiKX,WiV X)
 multihead self-attention layers

positional embeddings
Fig. 9.18 illustrates this approach with 4 self-attention heads. This multihead layer replaces the single self-attention layer in the transformer block shown earlier in Fig. 9.17, the rest of the Transformer block with its feedforward layer, residual connections, and layer norms remains the same.
Positional Embeddings
With RNNs information about the order of the inputs was baked into the nature of the models. Unfortunately, the same isn’t true for Transformers; there’s nothing that would allow such models to make use of information about the relative, or absolute, positions of the elements of an input sequence. This can be seen from the fact that if you scramble the order of inputs in the attention computation illustrated earlier you get exactly the same answer. To address this issue, Transformer inputs are combined with positional embeddings specific to each position in an input sequence.
Where do we get these positional embeddings? A simple and effective approach is to start with randomly initialized embeddings corresponding to each possible input position up to some maximum length. For example, just as we have an embedding for the word fish, we’ll have an embedding for the position 3. As with word embed- dings, these positional embeddings are learned along with other parameters during training. To produce an input embedding that captures positional information, we just add the word embedding for each input to its corresponding positional embed- ding. This new embedding serves as the input for further processing.
A potential problem with this approach is that there will be plenty of training examples for the initial positions in our inputs and correspondingly fewer at the outer length limits. These latter embeddings may be poorly trained and may not
with all the layers
9.4 • SELF-ATTENTION NETWORKS: TRANSFORMERS 195
               Transformer Block
y1 y2 y3 yn
Add and Normalize Feedforward Layer
Add and Normalize Self-Attention Layer
x1x2x3 xn
          Figure 9.17
 
196 CHAPTER 9 • DEEP LEARNING ARCHITECTURES FOR SEQUENCE PROCESSING
    WO
Multihead Attention Layer
W 4Q , W 4K , Q V4 W 3Q , W 3K , Q V3
W 2Q , W 2K , Q V2
Concat
Self-Attention Layer
y1y2y3 yn
...
         x1x2x3 xn
...
 Figure 9.18
 Multihead self-attention: Each of the multihead self-attention layers is provided with its own set of key, query and value weight matrices. The outputs from each of the layers are concatenated and then projected down to dmodel, thus producing an output of the right size.
generalize well during testing. An alternative approach to positional embeddings is to choose a static function that maps an integer inputs to real-valued vectors in a way that captures the inherent relationships among the positions. That is, it captures the fact that position 4 in an input is more closely related to position 5 than it is to position 17. A combination of sine and cosine functions with differing frequencies was used in the original Transformer work.
9.4.1 Transformers as Autoregressive Language Models
Now that we’ve seen all the major components of Transformers, let’s examine how to deploy them as language models via semi-supervised learning. To do this, we’ll proceed just as we did with the RNN-based approach: given a training corpus of plain text we’ll train a model to predict the next word in a sequence using teacher forcing. Fig. 9.19 illustrates the general approach. At each step, given all the pre- ceding words, the final Transformer layer produces an output distribution over the entire vocabulary. During training, the probability assigned to the correct word is used to calculate the cross-entropy loss for each item in the sequence. As with RNNs, the loss for a training sequence is the average cross-entropy loss over the entire sequence.
Note the key difference between this figure and the earlier RNN-based version for shown in Fig. 9.6. There the calculation of the outputs and the losses at each step was inherently serial given the recurrence in the calculation of the hidden states. With Transformers, each training item can be processed in parallel since the output for each element in the sequence is computed separately. Once trained, we can compute the perplexity of the resulting model, or autoregressively generate novel text just as with RNN-based models.

9.4 • SELF-ATTENTION NETWORKS: TRANSFORMERS 197
    Next word
Loss
Softmax over Vocabulary
Transformer Block(s)
Input Embeddings
a
hole in
 logyin
the
ground
 logya
  log yhole
  log ythe
... = 1 XT
T LCE
t=
       log yground
 ...
...
         In a hole in the
 Figure 9.19
 Training a Transformer as a language model.
Contextual Generation and Summarization
A simple variation on autoregressive generation that underlies a number of practi- cal applications uses a prior context to prime the autoregressive generation process. Fig. 9.20 illustrates this with the task of text completion. Here a standard language model is given the prefix to some text and is asked to generate a possible completion to it. Note that as the generation process proceeds, the model has direct access to the priming context as well as to all of its own subsequently generated outputs. This ability to incorporate the entirety of the earlier context and generated outputs at each time step is the key to the power of these models.
    Transformer Blocks
Input Embeddings
Sample from Softmax
Completion Text
 ground
there
ground
        In a
hole in the
Prefix Text
there
 ...
    Figure 9.20
 Text summarization
Autoregressive text completion with Transformers.
Text summarization is a practical application of context-based autoregressive generation. Here, the task is to take a full-length article and produce an effective summary of it. To train a Transformer-based autoregressive model to perform this task, we start with a corpus consisting of full-length articles accompanied by their

198 CHAPTER 9 • DEEP LEARNING ARCHITECTURES FOR SEQUENCE PROCESSING
corresponding summaries. Fig. 9.21 shows an example of this kind of data from a widely used summarization corpus consisting of CNN and Daily Mirror news arti- cles.
Original Article
The only thing crazier than a guy in snowbound Massachusetts boxing up the powdery white stuff and offering it for sale online? People are actually buying it. For $89, self-styled entrepreneur Kyle Waring will ship you 6 pounds of Boston-area snow in an insulated Styrofoam box – enough for 10 to 15 snowballs, he says.
But not if you live in New England or surrounding states. “We will not ship snow to any states in the northeast!” says Waring’s website, ShipSnowYo.com. “We’re in the business of expunging snow!”
His website and social media accounts claim to have filled more than 133 orders for snow – more than 30 on Tuesday alone, his busiest day yet. With more than 45 total inches, Boston has set a record this winter for the snowiest month in its history. Most residents see the huge piles of snow choking their yards and sidewalks as a nuisance, but Waring saw an opportunity.
According to Boston.com, it all started a few weeks ago, when Waring and his wife were shov- eling deep snow from their yard in Manchester-by-the-Sea, a coastal suburb north of Boston. He joked about shipping the stuff to friends and family in warmer states, and an idea was born. His business slogan: “Our nightmare is your dream!” At first, ShipSnowYo sold snow packed into empty 16.9-ounce water bottles for $19.99, but the snow usually melted before it reached its destination...
Summary
Kyle Waring will ship you 6 pounds of Boston-area snow in an insulated Styrofoam box – enough
for 10 to 15 snowballs, he says. But not if you live in New England or surrounding states.
Figure 9.21 Examples of articles and summaries from the CNN/Daily Mail corpus (Hermann et al., 2015b), (Nallapati et al., 2016).
A surprisingly effective approach to applying Transformers to summarization is to append a summary to each full-length article in a corpus, with a unique marker separating the two. More formally, each article-summary pair (x1,...,xm), (y1,...,yn) in a training corpus is converted into a single training instance (x1,...,xm,δ,y1,...yn) with an overall length of n + m + 1. These training instances are treated as long sentences and then used to train an autoregressive language model using teacher forcing, exactly as we did earlier.
Once trained, full articles ending with the special marker are used as the context to prime the generation process to produce a summary as illustrated in Fig. 9.22. Note that, in contrast to RNNs, the model has access to the original article as well as to the newly generated text throughout the process.
As we’ll see in later chapters, variations on this simple scheme are the basis for successful text-to-text applications including machine translation, summariza- tion and question answering.
9.5 Potential Harms from Language Models
Large neural language models exhibit many of the potential harms discussed in Chapter 4 and Chapter 6. Problems may occur whenever language models are used for text generation, such as in assistive technologies like web search query comple- tion or predictive typing for email (Olteanu et al., 2020).
             
9.5 • POTENTIAL HARMS FROM LANGUAGE MODELS 199
    Generated Summary
 Kyle Waring
will
 ...
The only ... reached its destination   Kyle Waring
will
 Original Story
Delimiter
      Figure 9.22
 Summarization with Transformers.
For example, language models can generate toxic language. Gehman et al. (2020) show that many kinds of completely non-toxic prompts can nonetheless lead large language models to output hate speech and abuse. Brown et al. (2020) and Sheng et al. (2019) showed that large language models generate sentences display- ing negative attitudes toward minority identities such as being Black or gay.
Indeed, language models are biased in a number of ways by the distributions of their training data. Gehman et al. (2020) shows that large language model train- ing datasets include toxic text scraped from banned sites. In addition to problems of toxicity, internet data is disproportionally generated by authors from developed countries, and many large language models train on data from Reddit, whose authors skew male and young. Such biased population samples likely skew the resulting generation away from the perspectives or topics of underrepresented populations. Furthermore, language models can amplify demographic and other biases in train- ing data, just as we saw for embedding models in Chapter 6.
Language models can also be a tool for generating text for misinformation, phishing, radicalization, and other socially harmful activities (Brown et al., 2020). (McGuffie and Newhouse, 2020) show how large language models generate text that emulates online extremists, with the risk of amplifying extremist movements and their attempt to radicalize and recruit.
Finally, there are important privacy issues. Language models, like other machine learning models, can leak information about their training data. It is thus possible for an adversary to extract individual training-data phrases from a language model such as an individual person’s name, phone number, and address (Carlini et al. 2020, using the techniques introduced by Henderson et al. 2017). This is a problem if large language models are trained on private datasets such has electronic health records (EHRs).
Mitigating all these harms is an important but unsolved research question in NLP. Extra pre-training (Gururangan et al., 2020) on non-toxic subcorpora seems to reduce a language model’s tendency to generate toxic language somewhat (Gehman et al., 2020). And analyzing the data used to pretrain large language models is important to understand toxicity and bias in generation, as well as privacy, making it extremely important that language models include datasheets (page ??) or model cards (page 73) giving full replicable information on the corpora used to train them.

200 CHAPTER 9 • DEEP LEARNING ARCHITECTURES FOR SEQUENCE PROCESSING 9.6 Summary
This chapter has introduced the concept of recurrent neural networks and how they can be applied to language problems. Here’s a summary of the main points that we covered:
• In simple Recurrent Neural Networks sequences are processed naturally as an element at a time.
• The output of a neural unit at a particular point in time is based both on the current input and value of the hidden layer from the previous time step.
• RNNs can be trained with a straightforward extension of the backpropagation algorithm, known as backpropagation through time (BPTT).
• Common language-based applications for RNNs include:
– Probabilistic language modeling, where the model assigns a probability to a sequence, or to the next element of a sequence given the preceding words.
– Auto-regressive generation using a trained language model.
– Sequencelabeling,whereeachelementofasequenceisassignedalabel,
as with part-of-speech tagging.
– Sequenceclassification,whereanentiretextisassignedtoacategory,as
in spam detection, sentiment analysis or topic classification.
• Simple recurrent networks often fail since it is extremely difficult to success- fully train them do to problems maintaining useful gradients over time.
• More complex gated architectures such as LSTMs and GRUs are designed to overcome these issues by explicitly managing the task of deciding what to remember and forget in their hidden and context layers.
Bibliographical and Historical Notes
Influential investigations of the kind of simple RNNs discussed here were conducted in the context of the Parallel Distributed Processing (PDP) group at UC San Diego in the 1980’s. Much of this work was directed at human cognitive modeling rather than practical NLP applications Rumelhart and McClelland 1986 McClelland and Rumelhart 1986. Models using recurrence at the hidden layer in a feedforward net- work (Elman networks) were introduced by Elman (1990). Similar architectures were investigated by Jordan (1986) with a recurrence from the output layer, and Mathis and Mozer (1995) with the addition of a recurrent context layer prior to the hidden layer. The possibility of unrolling a recurrent network into an equivalent feedforward network is discussed in (Rumelhart and McClelland, 1986).
In parallel with work in cognitive modeling, RNNs were investigated extensively in the continuous domain in the signal processing and speech communities (Giles et al., 1994). Schuster and Paliwal (1997) introduced bidirectional RNNs and de- scribed results on the TIMIT phoneme transcription task.
While theoretically interesting, the difficulty with training RNNs and manag- ing context over long sequences impeded progress on practical applications. This situation changed with the introduction of LSTMs in Hochreiter and Schmidhuber

BIBLIOGRAPHICAL AND HISTORICAL NOTES 201
(1997). Impressive performance gains were demonstrated on tasks at the bound- ary of signal processing and language processing including phoneme recognition (Graves and Schmidhuber, 2005), handwriting recognition (Graves et al., 2007) and most significantly speech recognition (Graves et al., 2013b).
Interest in applying neural networks to practical NLP problems surged with the work of Collobert and Weston (2008) and Collobert et al. (2011). These efforts made use of learned word embeddings, convolutional networks, and end-to-end training. They demonstrated near state-of-the-art performance on a number of standard shared tasks including part-of-speech tagging, chunking, named entity recognition and se- mantic role labeling without the use of hand-engineered features.
Approaches that married LSTMs with pre-trained collections of word-embeddings based on word2vec (Mikolov et al., 2013) and GLOVE (Pennington et al., 2014), quickly came to dominate many common tasks: part-of-speech tagging (Ling et al., 2015), syntactic chunking (Søgaard and Goldberg, 2016), and named entity recog- nition via IOB tagging Chiu and Nichols 2016, Ma and Hovy 2016, opinion mining (Irsoy and Cardie, 2014), semantic role labeling (Zhou and Xu, 2015a) and AMR parsing (Foland and Martin, 2016). As with the earlier surge of progress involving statistical machine learning, these advances were made possible by the availability of training data provided by CONLL, SemEval, and other shared tasks, as well as shared resources such as Ontonotes (Pradhan et al., 2007b), and PropBank (Palmer et al., 2005).

 CHAPTER
10 Contextual Embeddings Placeholder
202

 CHAPTER
11 Machine Translation and Encoder-Decoder Models
“I want to talk the dialect of your people. It’s no use of talking unless people understand what you say.”
Zora Neale Hurston, Moses, Man of the Mountain 1939, p. 121
This chapter introduces machine translation (MT), the use of computers to trans- MT late from one language to another.
machine translation
information access
Of course translation, in its full generality, such as the translation of literature, or poetry, is a difficult, fascinating, and intensely human endeavor, as rich as any other area of human creativity.
Machine translation in its present form therefore focuses on a number of very practical tasks. Perhaps the most common current use of machine translation is for information access. We might want to translate some instructions on the web, perhaps the recipe for a favorite dish, or the steps for putting together some furniture. Or we might want to read an article in a newspaper, or get information from an online resource like Wikipedia or a government webpage in a foreign language. MT for information
access is probably
one of the most com-
mon uses of NLP
technology, and Google
Translate alone (shown above) translates hundreds of billions of words a day be- tween over 100 languages.
 Another common use of machine translation is to aid human translators. MT sys- post-editing tems are routinely used to produce a draft translation that is fixed up in a post-editing phase by a human translator. This task is often called computer-aided translation CAT or CAT. CAT is commonly used as part of localization: the task of adapting content
localization or a product to a particular language community.
Finally, a more recent application of MT is to in-the-moment human commu-
nication needs. This includes incremental translation, translating speech on-the-fly before the entire sentence is complete, as is commonly used in simultaneous inter- pretation. Image-centric translation can be used for example to use OCR of the text on a phone camera image as input to an MT system to translate menus or street signs.
encoder- decoder
The standard algorithm for MT is the encoder-decoder network, also called the sequence to sequence network, an architecture that can be implemented with RNNs or with Transformers. We’ve seen in prior chapters that RNN or Transformer archi- tecture can be used to do classification (for example to map a sentence to a positive or negative sentiment tag for sentiment analysis), or can be used to do sequence la- beling (for example to assign each word in an input sentence with a part-of-speech, or with a named entity tag). For part-of-speech tagging, recall that the output tag is associated directly with each input word, and so we can just model the tag as output yt for each input word xt .

204 CHAPTER 11 • MACHINE TRANSLATION AND ENCODER-DECODER MODELS
Encoder-decoder or sequence-to-sequence models are used for a different kind of sequence modeling in which the output sequence is a complex function of the entire input sequencer; we must map from a sequence of input words or tokens to a sequence of tags that are not merely direct mappings from individual words.
Machine translation is exactly such a task: the words of the target language don’t necessarily agree with the words of the source language in number or order. Consider translating the following made-up English sentence into Japanese.
(11.1) English: He wrote a letter to a friend Japanese: tomodachi ni tegami-o kaita
friend to letter wrote
Note that the elements of the sentences are in very different places in the different languages. In English, the verb is in the middle of the sentence, while in Japanese, the verb kaita comes at the end. The Japanese sentence doesn’t require the pronoun he, while English does.
Such differences between languages can be quite complex. In the following ac- tual sentence from the United Nations, notice the many changes between the Chinese sentence (we’ve given in in red a word-by-word gloss of the Chinese characters) and its English equivalent.
(11.2) 大会/General Assembly 在/on 1982年/1982 12月/December 10日/10 通过 了/adopted 第37号/37th 决议/resolution ，核准了/approved 第二次/second 探索/exploration 及/and 和平peaceful 利用/using 外层空间/outer space 会 议/conference 的/of 各项/various 建议/suggestions 。
On 10 December 1982 , the General Assembly adopted resolution 37 in which it endorsed the recommendations of the Second United Nations Conference on the Exploration and Peaceful Uses of Outer Space .
Note the many ways the English and Chinese differ. For example the order- ing differs in major ways; the Chinese order of the noun phrase is “peaceful using outer space conference of suggestions” while the English has “suggestions of the ... conference on peaceful use of outer space”). And the order differs in minor ways (the date is ordered differently). English requires the in many places that Chinese doesn’t, and adds some details (like “in which” and “it”) that aren’t necessary in Chinese. Chinese doesn’t grammatically mark plurality on nouns (unlike English, which has the “-s” in “recommendations”), and so the Chinese must use the modi- fier 各项/various to make it clear that there is not just one recommendation. English capitalizes some words but not others.
Encoder-decoder networks are very successful at handling these sorts of com- plicated cases of sequence mappings. Indeed, the encoder-decoder algorithm is not just for MT; it’s the state of the art for many other tasks where complex mappings between two sequences are involved. These include summarization (where we map from a long text to its summary, like a title or an abstract), dialogue (where we map from what the user said to what our dialogue system should respond), semantic parsing (where we map from a string of words to a semantic representation like logic or SQL), and many others.
We’ll introduce the algorithm in sections Section 11.2, and in following sections give important components of the model like beam search decoding, and we’ll discuss how MT is evaluated, introducing the popular BLEU metric.
But first, in the next section, we begin by summarizing the linguistic background to MT: key differences among languages that are important to consider when con- sidering the task of translation.

11.1 • LANGUAGE DIVERGENCES AND TYPOLOGY 205 11.1 Language Divergences and Typology
universal Some aspects of human language seem to be universal, holding true for every lan- guage, or are statistical universals, holding true for most languages. Many universals arise from the functional role of language as a communicative system by humans. Every language, for example, seems to have words for referring to people, for talking about eating and drinking, for being polite or not. There are also structural linguistic universals; for example, every language seems to have nouns and verbs (Chapter 8), has ways to ask questions, or issue commands, linguistic mechanisms for indicating agreement or disagreement.
translation divergence
Yet languages also differ in many ways, and an understanding of what causes such translation divergences will help us build better MT models. We often distin- guish the idiosyncratic and lexical differences that must be dealt with one by one (the word for ”dog” differs wildly from language to language), from systematic dif- ferences that we can model in a general way (many languages put the verb before the direct object; others put the verb after the direct object). The study of these system-
typology atic cross-linguistic similarities and differences is called linguistic typology. This section sketches some typological facts that impact machine translation; the inter- ested reader should also look into WALS, the World Atlas of Language Structures, which gives many typological facts about languages (Dryer and Haspelmath, 2013).
11.1.1 Word Order Typology
As we hinted it in our example above comparing English and Japanese, languages
differ in the basic word order of verbs, subjects, and objects in simple declara- SVO tive clauses. German, French, English, and Mandarin, for example, are all SVO (Subject-Verb-Object) languages, meaning that the verb tends to come between SOV the subject and object. Hindi and Japanese, by contrast, are SOV languages, mean- ing that the verb tends to come at the end of basic clauses, and Irish and Arabic are VSO VSO languages. Two languages that share their basic word order type often have other similarities. For example, VO languages generally have prepositions, whereas
OV languages generally have postpositions.
Let’s look in more detail at the example we saw above. In this SVO English
sentence, the verb wrote is followed by its object a letter and the prepositional phrase to a friend, in which the preposition to is followed by its argument a friend. Arabic, with a VSO order, also has the verb before the object and prepositions. By contrast, in the Japanese example that follows, each of these orderings is reversed; the verb is preceded by its arguments, and the postposition follows its argument.
(11.3) English: He wrote a letter to a friend Japanese: tomodachi ni tegami-o kaita
friend to letter wrote
Arabic: katabt risa ̄la li s ̇adq wrote letter to friend
Other kinds of ordering preferences vary idiosyncratically from language to lan- guage. In some SVO languages (like English and Mandarin) adjectives tend to appear before verbs, while in others languages like Spanish and Modern Hebrew, adjectives appear after the noun:
(11.4) Spanish bruja verde English green witch

206
CHAPTER 11 • MACHINE TRANSLATION AND ENCODER-DECODER MODELS
              (a) (b)
 Figure 11.1
 lexical gap
Examples of other word order differences: (a) In German, adverbs occur in initial position that in English are more natural later, and tensed verbs occur in second posi- tion. (b) In Mandarin, preposition phrases expressing goals often occur pre-verbally, unlike in English.
Fig. 11.1 shows examples of other word order differences. All of these word order differences between languages can cause problems for translation, requiring the system to do huge structural reorderings as it generates the output.
11.1.2 Lexical Divergences
Of course we also need to translate the individual words from one language to an- other. For any translation, the appropriate word can vary depending on the context. The English source-language word bass, for example, can appear in Spanish as the fish lubina or the musical instrument bajo. German uses two distinct words for what in English would be called a wall: Wand for walls inside a building, and Mauer for walls outside a building. Where English uses the word brother for any male sib- ling, Chinese and many other languages have distinct words for older brother and younger brother (Mandarin gege and didi, respectively). In all these cases, trans- lating bass, wall, or brother from English would require a kind of specialization, disambiguating the different uses of a word. For this reason the fields of MT and Word Sense Disambiguation (Chapter 18) are closely linked.
Sometimes one language places more grammatical constraints on word choice than another. We saw above that English marks nouns for whether they are singular or plural. Mandarin doesn’t. Or French and Spanish, for example, mark grammat- ical gender on adjectives, so an English translation into French requires specifying adjective gender.
The way that languages differ in lexically dividing up conceptual space may be more complex than this one-to-many translation problem, leading to many-to-many mappings. For example, Fig. 11.2 summarizes some of the complexities discussed by Hutchins and Somers (1992) in translating English leg, foot, and paw, to French. For example, when leg is used about an animal it’s translated as French jambe; but about the leg of a journey, as French etape; if the leg is of a chair, we use French pied.
Further, one language may have a lexical gap, where no word or phrase, short of an explanatory footnote, can express the exact meaning of a word in the other language. For example, English does not have a word that corresponds neatly to Mandarin xia`o or Japanese oyako ̄ko ̄o (in English one has to make do with awkward phrases like filial piety or loving child, or good son/daughter for both).
Finally, languages differ systematically in how the conceptual properties of an event are mapped onto specific words. Talmy (1985, 1991) noted that languages can be characterized by whether direction of motion and manner of motion are marked on the verb or on the “satellites”: particles, prepositional phrases, or ad- verbial phrases. For example, a bottle floating out of a cave would be described in English with the direction marked on the particle out, while in Spanish the direction

     etape patte ANIMAL
 JOURNEY HUMAN
 leg
ANIMAL
jambe
BIRD foot CHAIR HUMAN
pied
    verb-framed satellite-framed
11.1 • LANGUAGE DIVERGENCES AND TYPOLOGY 207
Figure 11.2 The complex overlap between English leg, foot, etc., and various French trans- lations as discussed by Hutchins and Somers (1992).
would be marked on the verb:
(11.5) English: The bottle floated out.
Spanish: La botella salio ́ flotando. Thebottle exitedfloating.
Verb-framed languages mark the direction of motion on the verb (leaving the satellites to mark the manner of motion), like Spanish acercarse ‘approach’, al- canzar ‘reach’, entrar ‘enter’, salir ‘exit’. Satellite-framed languages mark the direction of motion on the satellite (leaving the verb to mark the manner of motion), like English crawl out, float off, jump down, run after. Languages like Japanese, Tamil, and the many languages in the Romance, Semitic, and Mayan languages fam- ilies, are verb-framed; Chinese as well as non-Romance Indo-European languages like English, Swedish, Russian, Hindi, and Farsi are satellite framed (Talmy 1991, Slobin 1996).
11.1.3 Morphological Typology
Morphologically, languages are often characterized along two dimensions of vari- ation. The first is the number of morphemes per word, ranging from isolating languages like Vietnamese and Cantonese, in which each word generally has one morpheme, to polysynthetic languages like Siberian Yupik (“Eskimo”), in which a single word may have very many morphemes, corresponding to a whole sentence in English. The second dimension is the degree to which morphemes are segmentable, ranging from agglutinative languages like Turkish, in which morphemes have rel- atively clean boundaries, to fusion languages like Russian, in which a single affix may conflate multiple morphemes, like -om in the word stolom (table-SG-INSTR- DECL1), which fuses the distinct morphological categories instrumental, singular, and first declension.
Translating between languages with rich morphology requires dealing with struc- ture below the word level, and for this reason modern systems generally use subword models like the wordpiece or BPE models of Section 11.7.1.
11.1.4 Referential density
Finally, languages vary along a typological dimension related to the things they tend to omit. Some languages, like English, require that we use an explicit pronoun when talking about a referent that is given in the discourse. In other languages, however, we can sometimes omit pronouns altogether, as the following example from Spanish shows1 :
1 Hereweusethe0/-notation;we’llintroducethisanddiscussthisissuefurtherinChapter22
isolating polysynthetic
agglutinative fusion
 paw

208
CHAPTER 11 • MACHINE TRANSLATION AND ENCODER-DECODER MODELS (11.6) [El jefe]i dio con un libro. 0/ i Mostro ́ a un descifrador ambulante.
pro-drop
referential density
[The boss] came upon a book. [He] showed it to a wandering decoder.
Languages that can omit pronouns are called pro-drop languages. Even among the pro-drop languages, there are marked differences in frequencies of omission. Japanese and Chinese, for example, tend to omit far more than does Spanish. This dimension of variation across languages is called the dimension of referential den- sity. We say that languages that tend to use more pronouns are more referentially dense than those that use more zeros. Referentially sparse languages, like Chinese or Japanese, that require the hearer to do more inferential work to recover antecedents are also called cold languages. Languages that are more explicit and make it easier for the hearer are called hot languages. The terms hot and cold are borrowed from Marshall McLuhan’s (1964) distinction between hot media like movies, which fill in many details for the viewer, versus cold media like comics, which require the reader to do more inferential work to fill out the representation (Bickel, 2003).
Translating from languages with extensive pro-drop, like Chinese or Japanese, to non-pro-drop languages like English can be difficult since the model must somehow identify each zero and recover who or what is being talked about in order to insert the proper pronoun.
cold language hot language
11.2 The Encoder-Decoder Model
encoder- decoder
Encoder-decoder networks, or sequence-to-sequence networks, are models ca- pable of generating contextually appropriate, arbitrary length, output sequences. Encoder-decoder networks have been applied to a very wide range of applications including machine translation, summarization, question answering, and dialogue.
The key idea underlying these networks is the use of an encoder network that takes an input sequence and creates a contextualized representation of it, often called the context. This representation is then passed to a decoder which generates a task- specific output sequence. Fig. 11.3 illustrates the architecture
    y1 y2
... ym
 Decoder
  Context
 Encoder
x1 x2 ... xn
 Figure 11.3
 The encoder-decoder architecture. The context is a function of the hidden representations of the input, and may be used by the decoder in a variety of ways.
Encoder-decoder networks consist of three components:
1. Anencoderthatacceptsaninputsequence,x1n,andgeneratesacorresponding sequence of contextualized representations, hn1. LSTMs, GRUs, convolutional networks, and Transformers can all be employed as encoders.
2. A context vector, c, which is a function of hn1, and conveys the essence of the input to the decoder.

11.3
11.3 • ENCODER-DECODER WITH RNNS 209
3. A decoder, which accepts c as input and generates an arbitrary length se- quence of hidden states hm1 , from which a corresponding sequence of output states ym1 , can be obtained. Just as with encoders, decoders can be realized by any kind of sequence architecture.
Encoder-Decoder with RNNs
source target
Let’s begin by describing an encoder-decoder network based on a pair of RNNs.2 Recall the conditional RNN language model from Chapter 9 for computing p(y), the probability of a sequence y. Like any language model, we can break down the probability as follows:
p(y) = p(y1)p(y2|y1)p(y3|y1,y2)...P(ym|y1,...,ym−1) (11.7)
At a particular time t, we pass the prefix of t − 1 tokens through the language model, using forward inference to produce a sequence of hidden states, ending with the hidden state corresponding to the last word of the prefix. We then use the final hidden state of the prefix as our starting point to generate the next token.
More formally, if g is an activation function like tanh or ReLU, a function of the input at time t and the hidden state at time t − 1, and f is a softmax over the set of possible vocabulary items, then at time t the output yt and hidden state ht are computed as:
ht = g(ht−1,xt) (11.8) yt = f(ht) (11.9)
We only have to make one slight change to turn this language model with au- toregressive generation into a translation model that can translate from a source text in one language to a target text in a second: add an sentence separation marker at the end of the source text, and then simply concatenate the target text. We briefly introduced this idea of a sentence separator token in Chapter 9 when we considered using a Transformer language model to do summarization, by training a conditional language model.
If we call the source text x and the target text y, we are computing the probability p(y|x) as follows:
p(y|x) = p(y1 |x) p(y2 |y1 , x) p(y3 |y1 , y2 , x)...P(ym |y1 , ..., ym−1 , x) (11.10)
Fig. 11.4 shows the setup for a simplified version of the encoder-decoder model (we’ll see the full model, which requires attention, in the next section).
Fig. 11.4 shows an English source text (“the green witch arrived”), a sentence separator token (<s>, and a Spanish target text (“llego ́ la bruja verde”). To trans- late a source text, we run it through the network performing forward inference to generate hidden states until we get to the end of the source. Then we begin autore- gressive generation, asking for a word in the context of the hidden layer from the end of the source input as well as the end-of-sentence marker. Subsequent words are conditioned on the previous hidden state and the embedding for the last word generated.
2 Later we’ll see how to use pairs of Transformers as well; it’s even possible to use separate architectures for the encoder and decoder.
 
210 CHAPTER 11 • MACHINE TRANSLATION AND ENCODER-DECODER MODELS
     softmax
hidden layer(s)
embedding layer
(output of source is ignored)
Target Text
llegó la bruja
<s> llegó la Separator
verde </s>
bruja verde
 the
green
witch
arrived
 Source Text
hn
     Figure 11.4
 Translating a single sentence (inference time) in the basic RNN version of encoder-decoder ap- proach to machine translation. Source and target sentences are concatenated with a separator token in between, and the decoder uses context information from the encoder’s last hidden state.
Let’s formalize and generalize this model a bit in Fig. 11.5. (To help keep things straight, we’ll use the superscripts e and d where needed to distinguish the hidden states of the encoder and the decoder.) The elements of the network on the left process the input sequence x and comprise the encoder. While our simplified fig- ure shows only a single network layer for the encoder, stacked architectures are the norm, where the output states from the top layer of the stack are taken as the fi- nal representation. A widely used encoder design makes use of stacked biLSTMs where the hidden states from top layers from the forward and backward passes are concatenated as described in Chapter 9 to provide the contextualized representations for each time step.
     softmax
hidden layer(s)
embedding layer
(output is ignored during encoding)
x1 x2 x3 xn
Encoder
Decoder
y1 y2 y3 y4 </s>
<s> y1 y2 y3 yn
   he1 he2 he3
he = c = hd hn n
0
hd1 hd2 hd3 hd4 hdn
       Figure 11.5
 A more formal version of translating a sentence at inference time in the basic RNN-based encoder-decoder architecture. The final hidden state of the encoder RNN, hen, serves as the context for the decoder in its role as hd0 in the decoder RNN.
The entire purpose of the encoder is to generate a contextualized representation of the input. This representation is embodied in the final hidden state of the encoder, hen. This representation, also called c for context, is then passed to the decoder.
The decoder network on the right takes this state and uses it to initialize the first

11.3 • ENCODER-DECODER WITH RNNS 211
hidden state of the decoder. That is, the first decoder RNN cell uses c as its prior hidden state hd0. The decoder autoregressively generates a sequence of outputs, an element at a time, until an end-of-sequence marker is generated. Each hidden state is conditioned on the previous hidden state and the output generated in the previous state.
Allowing every hidden state of the decoder (not just the first decoder state) to be influenced by the context c produced by the encoder.
One weakness of this approach as described so far is that the influence of the context vector, c, will wane as the output sequence is generated. A solution is to make the context vector c available at each step in the decoding process by adding it as a parameter to the computation of the current hidden state, using the following equation (illustrated in Fig. 11.6):
    y1 y2 yi
hd1 hd2 ... hdi ... c...
 Figure 11.6
 hd =g(yˆ ,hd
t t−1 t−1
,c) (11.11)
Now we’re ready to see the full equations for this version of the decoder in the basic encoder-decoder model, with context available at each decoding timestep. Recall that g is a stand-in for some flavor of RNN and yˆt−1 is the embedding for the output sampled from the softmax at the previous step:
c = hd0 =
hd = t
zt = yt =
hen
c
g(yˆ ,hd ,c) t−1 t−1
f(htd) softmax(zt )
(11.12)
Finally, as shown earlier, the output y at each time step consists of a softmax com- putation over the set of possible outputs (the vocabulary, in the case of language modeling or MT). We compute the most likely output at each time step by taking the argmax over the softmax output:
yˆ = argmax P(w|x,y ...y ) (11.13) t w∈V 1t−1
There are also various ways to make the model a bit more powerful. For example, we can help the model keep track of what has already been generated and what hasn’t by conditioning the output layer y not just solely on the hidden state htd and the context c but also on the output yt−1 generated at the previous timestep:
yt = softmax(yˆt−1,zt,c) (11.14) 11.3.1 Training the Encoder-Decoder Model
Encoder-decoder architectures are trained end-to-end, just as with the RNN language models of Chapter 9. Each training example is a tuple of paired strings, a source and

212 CHAPTER 11 • MACHINE TRANSLATION AND ENCODER-DECODER MODELS
a target. Concatenated with a separator token, these source-target pairs can now serve as training data.
For MT, the training data typically consists of sets of sentences and their transla- tions. These can be drawn from standard datasets of aligned sentence pairs, as we’ll discuss in Section 11.7.2. Once we have a training set, the training itself proceeds as with any RNN-based language model. The network is given the source text and then starting with the separator token is trained autoregressively to predict the next word, as shown in Fig. 11.7.
    Decoder
llegó la bruja verde </s> y1 y2 y3 y4 y5
gold answers
per-word loss
softmax
yˆ hidden
layer(s)
embedding layer
 Totallossistheaverage cross-entropy loss per target word:
1 XT
L = Li
L1 = -log P(y1)
<s>
L2 = -log P(y2)
llegó
L3 = -log P(y3)
la
L4 = -log P(y4)
bruja
L5 = -log P(y5)
verde
 x1 x2 x3 x4
the green witch arrived
Encoder
T i=
  Figure 11.7
 Training the basic RNN encoder-decoder approach to machine translation. Note that in the decoder we usually don’t propagate the model’s softmax outputs yˆt , but use teacher forcing to force each input to the correct gold value for training. We compute the softmax output distribution over yˆ in the decoder in order to compute the loss at each token, which can then be averaged to compute a loss for the sentence.
teacher forcing
Note the differences between training (Fig. 11.7) and inference (Fig. 11.4) with
respect to the outputs at each time step. The decoder during inference uses its own
estimated output yˆ as the input for the next time step x . Thus the decoder will t t+1
tend to deviate more and more from the gold target sentence as it keeps generating more tokens. In training, therefore, it is more common to use teacher forcing in the decoder. Teacher forcing means that we force the system to use the gold target token from training as the next input xt+1, rather than allowing it to rely on the (possibly erroneous) decoder output yˆ . This speeds up training.
11.4 Attention
t
The simplicity of the encoder-decoder model is its clean separation of the encoder — which builds a representation of the source text — from the decoder, which uses this context to generate a target text. In the model as we’ve described it so far, this context vector is hn, the hidden state of the last (nth) time step of the source text. This final hidden state is thus acting as a bottleneck: it must represent absolutely everything about the meaning of the source text, since the only thing the decoder knows about the source text is what’s in this context vector. Information at the

    attention mechanism
11.4 • ATTENTION 213 beginning of the sentence, especially for long sentences, may not be equally well
represented in the context vector.
Requiring the context c to be only the encoder’s final hidden state forces all the information from the entire source sentence to pass through this representational bottleneck.
The attention mechanism is a solution to the bottleneck problem, a way of allowing the decoder to get information from all the hidden states of the encoder, not just the last hidden state.
In the attention mechanism, as in the vanilla encoder-decoder model, the context vector c is a single vector that is a function of the hidden states of the encoder, that is, c = f (hn1). Because the number of hidden states varies with the size of the input, we can’t use the entire tensor of encoder hidden state vectors directly as the context for the decoder. The idea of attention is instead to create the single fixed-length vector c by taking a weighted sum of all the encoder hidden states hn1.
The weights are used to focus on a particular part of the source text that is rel- evant for the token currently being produced by the decoder. The context vector produced by the attention mechanism is thus dynamic, different for each token in decoding.
Attention thus replaces the static context vector with one that is dynamically derived from the encoder hidden states at each point during decoding. This context vector, ci, is generated anew with each decoding step i and takes all of the encoder hidden states into account in its derivation. We then make this context available during decoding by conditioning the computation of the current decoder hidden state on it (along with the prior hidden state and the previous output generated by the decoder): and the equation (and Fig. 11.9):
hdi = g(yˆi−1 , hdi−1 , ci )
The attention mechanism allows each hidden state of the decoder to see a different, dynamic, context, which is a function of all the encoder hidden states.
The first step in computing ci is to compute how much to focus on each encoder state, how relevant each encoder state is to the decoder state captured in hdi−1. We capture relevance by computing— at each state i during decoding—a score(hdi−1,hej) for each encoder state j.
The simplest such score, called dot-product attention, implements relevance as similarity: measuring how similar the decoder hidden state is to an encoder hidden state, by computing the dot product between them:
score(hdi−1,hej) = hdi−1 · hej (11.15)
bottleneck Decoder Encoder bottleneck
 Figure 11.8
      y1 y2 yi
hd1 hd2 ... hdi ... c1 c2 ci
 Figure 11.9
 dot-product attention

214 CHAPTER 11 • MACHINE TRANSLATION AND ENCODER-DECODER MODELS
The score that results from this dot product is a scalar that reflects the degree of similarity between the two vectors. The vector of these scores across all the encoder hidden states gives us the relevance of each encoder state to the current step of the decoder.
To make use of these scores, we’ll normalize them with a softmax to create a vector of weights, αi j , that tells us the proportional relevance of each encoder hidden state j to the prior hidden decoder state, hdi−1.
αi j = softmax(score(hdi−1 , hej ) ∀ j ∈ e) (11.16) exp(score(hdi−1 , hej )
= 􏰐k exp(score(hdi−1,hek)) (11.17)
 Finally, given the distribution in α, we can compute a fixed-length context vector for the current decoder state by taking a weighted average over all the encoder hidden states.
ci =􏰑αijhej (11.18) j
With this, we finally have a fixed-length context vector that takes into account information from the entire encoder state that is dynamically updated to reflect the needs of the decoder at each step of decoding. Fig. 11.10 illustrates an encoder- decoder network with attention, focusing on the computation of one context vector ci.
       attention weights ↵ij
ci .4 .3 .1 .2
hdi  · hej
X ↵ij hej j
Decoder
yi yi+1
 hidden he he he he ... hdi-1 hdi ...
layer(s)
123hnc
n i-1
x1 x2 x3 xn
Encoder
ci
yi-1
yi
  Figure 11.10
 A sketch of the encoder-decoder network with attention, focusing on the computation of ci. The context value ci is one of the inputs to the computation of hdi . It is computed by taking the weighted sum of all the encoder hidden states, each weighted by their dot product with the prior decoder hidden state hdi−1.
It’s also possible to create more sophisticated scoring functions for attention models. Instead of simple dot product attention, we can get a more powerful function that computes the relevance of each encoder hidden state to the decoder hidden state by parameterizing the score with its own set of weights, Ws.
score(hd ,he) = hd W he i−1 j t−1 s j

11.5 • BEAM SEARCH 215
The weights Ws, which are then trained during normal end-to-end training, give the network the ability to learn which aspects of similarity between the decoder and encoder states are important to the current application. This bilinear model also allows the encoder and decoder to use different dimensional vectors, whereas the simple dot-product attention requires the encoder and decoder hidden states have the same dimensionality.
11.5 Beam Search
greedy
search tree
The decoding algorithm we gave above for generating translations has a problem (as does the autoregressive generation we introduced in Chapter 9 for generating from a conditional language model). Recall that algorithm: at each time step in decoding, the output yt is chosen by computing a softmax over the set of possible outputs (the vocabulary, in the case of language modeling or MT), and then choosing the highest probability token (the argmax):
yˆ = argmax P(w|x,y ...y ) (11.19) t w∈V 1t−1
Choosing the single most probable token to generate at each step is called greedy decoding; a greedy algorithm is one that make a choice that is locally optimal, whether or not it will turn out to have been the best choice with hindsight.
Indeed, greedy search is not optimal, and may not find the highest probability translation. The problem is that the token that looks good to the decoder now might turn out later to have been the wrong choice!
Let’s see this by looking at the search tree, a graphical representation of the choices the decoder makes in searching for the best translation, in which we view the decoding problem as a heuristic state-space search and systematically explore the space of possible outputs. In such a search tree, the branches are the actions, in this case the action of generating a token, and the nodes are the states, in this case the state of having generated a particular prefix. We are searching for the best action sequence, i.e. the target string with the highest probability. Fig. 11.11 demonstrates the problem, using a made-up example. Notice that the most probable sequence is ok ok ¡/s¿ (with a probability of .4*.7*1.0), but a greedy search algorithm will fail to find it, because it incorrectly chooses yes as the first word since it has the highest local probability.
Recall from Chapter 8 that for part-of-speech tagging we used dynamic pro- gramming search (the Viterbi algorithm) to address this problem. Unfortunately, dynamic programming is not applicable to generation problems with long-distance dependencies between the output decisions. The only method guaranteed to find the best solution is exhaustive search: computing the probability of every one of the V T possible sentences (for some length value T ) which is obviously too slow.
Instead, decoding in MT and other sequence generation problems generally uses a method called beam search. In beam search, instead of choosing the best token to generate at each timestep, we keep k possible tokens at each step. This fixed-size memory footprint k is called the beam width, on the metaphor of a flashlight beam that can be parameterized to be wider or narrower.
Thus at the first step of decoding, we compute a softmax over the entire vocab- ulary, assigning a probability to each word. We then select the k-best options from this softmax output. These initial k outputs are the search frontier and these k initial
beam search beam width

216 CHAPTER 11 • MACHINE TRANSLATION AND ENCODER-DECODER MODELS
    p(t2|source, t1)
.7 p(t1|source) .2
p(t3|source, t1,t2)
ok 1.0 </s> yes 1.0 </s>
   start
ok   .1 </s> .4
.5 yes   .3 ok 1.0 </s>
  .1
.4 </s> .2
yes 1.0 </s> </s>
 t1 t2 t3
 Figure 11.11
 A search tree for generating the target string T = t1 , t2 , ... from the vocabulary V = {yes, ok, <s>}, given the source string, showing the probability of generating each token from that state. Greedy search would choose yes at the first time step followed by yes, instead of the globally most probable sequence ok ok.
words are called hypotheses. A hypothesis is an output sequence, a translation-so- far, together with its probability.
At subsequent steps, each of the k best hypotheses is extended incrementally by being passed to distinct decoders, which each generate a softmax over the entire vocabulary to extend the hypothesis to every possible next token. Each of these k∗V hypotheses is scored by P(yi|x,y<i): the product of the probability of current word choice multiplied by the probability of the path that led to it. We then prune the k∗V hypotheses down to the k best hypotheses, so there are never more than k hypotheses at the frontier of the search, and never more than k decoders.
Fig. 11.12 illustrates this process with a beam width of 2.
This process continues until a </s> is generated indicating that a complete can- didate output has been found. At this point, the completed hypothesis is removed from the frontier and the size of the beam is reduced by one. The search continues until the beam has been reduced to 0. The result will be k hypotheses.
Let’s see how the scoring works in detail, scoring each node by its log proba- bility. Recall from Eq. 11.10 that we can use the chain rule of probability to break down p(y|x) into the product of the probability of each word given its prior context, which we can turn into a sum of logs (for an output string of length t):
score(y) = logP(y|x)
= 􏰑log(P(y1|x)P(y2|y1,x)P(y3|y1,y2,x)...P(yt|y1,...,yt−1,x)) t
= log P(yi |y1 , ..., yi−1 , x) (11.20) i=1
Thus at each step, to compute the probability of a partial translation, we simply add the log probability of the prefix translation so far to the log probability of generating the next token. Fig. 11.13 shows the scoring for the example sentence shown in Fig. 11.12, using some simple made-up probabilities. Log probabilities are negative or 0, and the max of two log probabilities is the one that is greater (closer to 0).
Fig. 11.14 gives the algorithm.
One problem arises from the fact that the completed hypotheses may have differ- ent lengths. Because models generally assign lower probabilities to longer strings, a naive algorithm would also choose shorter strings for y. This was not an issue during the earlier steps of decoding; due to the breadth-first nature of beam search

11.6 • ENCODER-DECODER WITH TRANSFORMERS 217
     arrived y2 hd1 hd2
EOS arrived
the green y3
  y y 1
1
hd1
y2
y3
a hd1 hd2 hd2 a ... ...
   aardvark EOS the green mage a .. ..
...
    start
witch arrived zebra zebra
the the aardvark .. ..
.. witch
EOS ... ...
    ..
the y y3
   ...2
  zebra
t1
a arrived ......
y aardvark aardvark the2.. ..
   green .. witch
hd1 hd2 ... zebra
the
hd1
EOS
witch
hd2
the
green .. who
y3 ... zebra
   EOS the
t2
hd2
witch
t3
 Figure 11.12
 Beam search decoding with a beam width of k = 2. At each time step, we choose the k best hypotheses, compute the V possible extensions of each hypothesis, score the resulting k ∗ V possible hypotheses and choose the best k to continue. At time 1, the frontier is filled with the best 2 options from the initial state of the decoder: arrived and the. We then extend each of those, compute the probability of all the hypotheses so far (arrived the, arrived aardvark, the green, the witch) and compute the best 2 (in this case the green and the witch) to be the search frontier to extend on the next step. On the arcs we show the decoders that we run to score the extension words (although for simplicity we haven’t shown the context value ci that is input at each step).
all the hypotheses being compared had the same length. The usual solution to this is to apply some form of length normalization to each of the hypotheses, for example simply dividing the negative log probability by the number of words:
1 􏰑t
score(y) = − log P(y|x) = T i=1 − log P(yi |y1 , ..., yi−1 , x) (11.21)
Beam search is common in large production MT systems, generally with beam widths k between 5 and 10. What do we do with the resulting k hypotheses? In some cases, all we need from our MT algorithm is the single best hypothesis, so we can return that. In other cases our downstream application might want to look at all k hypotheses, so we can pass them all (or a subset) to the downstream application with their respective scores.
11.6 Encoder-Decoder with Transformers
TBD

218 CHAPTER 11 • MACHINE TRANSLATION AND ENCODER-DECODER MODELS
      log P(arrived|x) =-1.6
arrived
-.69 -2.3
log P (arrived the|x)
= -2.3
the
log P(arrived witch|x)
-3.2
mage
-2.1
witch
-2.2
arrived
-4.4
who
-2.7
END
-.22
-2.3 -4.8
at
= -3.9
witch
-2.5
arrived
-.36 -3.7 -1.6 came
-2.7
-.51 END
       start
-1.6
-.92 =-.92
the
log P(the green|x)
= -1.6
-.69 green
-1.6 -.51
log P(the|x)
     log P(the witch|x)
 -1.2
= -2.1
witch
 -.11 -2.3
log P(y3|y2,y1,x)
-1.61
log P(y4|y3,y2,y1,x)
-3.8
by
    log P(y1|x)
log P(y2|y1,x)
log P(y5|y4,y3,y2,y1,x)
y1 y2 y3 y4 y5
log P (“the green witch arrived”|x)
= log P (the|x) + log P(green|the,x)
+ log P(witch | the, green,x) +logP(arrived|the,green,witch,x) +log P(END|the,green,witch,arrived,x)
 Figure 11.13
 Scoring for beam search decoding with a beam width of k = 2. We maintain the log probability of each hypothesis in the beam by incrementally adding the logprob of generating each next token. Only the top k paths are extended to the next step.
11.7 Some practical details on building MT systems
wordpiece
11.7.1 Tokenization
Machine translation systems generally use a fixed vocabulary, A common way to generate this vocabulary is with the BPE or wordpiece algorithms sketched in Chap- ter 2. Generally a shared vocabulary is used for the source and target languages, which makes it easy to copy tokens (like names) from source to target, so we build the wordpiece/BPE lexicon on a corpus that contains both source and target lan- guage data. Wordpieces use a special symbol at the beginning of each token; here’s a resulting tokenization from the Google MT system (Wu et al., 2016):
words: Jet makers feud over seat width with big orders at stake wordpieces: Jet makers feud over seat width with big orders at stake
We gave the BPE algorithm in detail in Chapter 2; here’s more details on the wordpiece algorithm, which is given a training corpus and a desired vocabulary size V, and proceeds as follows:
1. Initialize the wordpiece lexicon with characters (for example a subset of Uni- code characters, collapsing all the remaining characters to a special unknown character token).
2. Repeat until there are V wordpieces:
(a) Trainann-gramlanguagemodelonthetrainingcorpus,usingthecurrent set of wordpieces.
(b) Consider the set of possible new wordpieces made by concatenating two wordpieces from the current lexicon. Choose the one new wordpiece that most increases the language model probability of the training corpus.
A vocabulary of 8K to 32K word pieces is commonly used.

11.7 • SOME PRACTICAL DETAILS ON BUILDING MT SYSTEMS 219
   function BEAMDECODE(c, beam width) returns best paths
y0, h0 ←0
path ← ()
complete paths←()
state←(c, y0, h0, path) ;initial state frontier←⟨state⟩ ;initial frontier
while frontier contains incomplete paths and beamwidth > 0 extended frontier←⟨⟩
for each state ∈ frontier do
y←DECODE(state)
for each word i ∈ Vocabulary do
successor←NEWSTATE(state, i, yi)
new agenda←ADDTOBEAM(successor, extended frontier, beam width)
for each state in extended frontier do if state is complete do
complete paths←APPEND(complete paths, state) extended frontier←REMOVE(extended frontier, state) beam width←beam width - 1
frontier←extended frontier return completed paths
function NEWSTATE(state, word, word prob) returns new state function ADDTOBEAM(state, frontier, width) returns updated frontier
if LENGTH(frontier) < width then frontier←INSERT(state, frontier)
else if SCORE(state) > SCORE(WORSTOF(frontier)) frontier←REMOVE(WORSTOF(frontier)) frontier←INSERT(state, frontier)
return frontier
 Figure 11.14
 parallel corpus Europarl
Beam search decoding.
11.7.2 MT corpora
Machine translation models are trained on a parallel corpus, sometimes called a bitext, a text that appears in two (or more) languages. Large numbers of paral- lel corpora are available. Some are governmental; the Europarl corpus (Koehn, 2005), extracted from the proceedings of the European Parliament, contains between 400,000 and 2 million sentences each from 21 European languages. The United Na- tions Parallel Corpus contains on the order of 10 million sentences in the six official languages of the United Nations (Arabic, Chinese, English, French, Russian, Span- ish) Ziemski et al. (2016). Other parallel corpora have been made from movie and TV subtitles, like the OpenSubtitles corpus (Lison and Tiedemann, 2016), or from general web text, like the ParaCrawl corpus of with 223 million sentence pairs be- tween 23 EU languages and English extracted from the CommonCrawl Ban ̃o ́n et al. (2020).

220 CHAPTER 11 • MACHINE TRANSLATION AND ENCODER-DECODER MODELS Sentence alignment
Standard training corpora for MT come as aligned pairs of sentences. When creating new corpora, for example for underresourced languages or new domains, these sen- tence alignments must be created. Fig. 11.15 gives a sample hypothetical sentence alignment.
     E1: “Good morning," said the little prince. F1: -Bonjour, dit le petit prince.
    E2: “Good morning," said the merchant.
 E3: This was a merchant who sold pills that had
   been perfected to quench thirst.
E4: You just swallow one pill a week and you
 won’t feel the need for anything to drink.
F2: -Bonjour, dit le marchand de pilules perfectionnées qui
apaisent la soif.
F3: On en avale une par semaine et l'on n'éprouve plus le
besoin de boire.
F4: -C’est une grosse économie de temps, dit le marchand.
   E5: “They save a huge amount of time," said the merchant.
E6: “Fifty−three minutes a week." F6: On épargne cinquante-trois minutes par semaine.
E8: “I would take a stroll to a spring of fresh water”
    E7: “If I had fifty−three minutes to spend?" said the
  little prince to himself.
F5: Les experts ont fait des calculs.
F7: “Moi, se dit le petit prince, si j'avais cinquante-trois minutes
à dépenser, je marcherais tout doucement vers une fontaine..."
    Figure 11.15
 A sample alignment between sentences in English and French, with sentences extracted from Antoine de Saint-Exupery’s Le Petit Prince and a hypothetical translation. Sentence alignment takes sentences e1,...,en, and f1,..., fn and finds minimal sets of sentences that are translations of each other, including single sentence mappings like (e1 ,f1 ), (e4 -f3 ), (e5 -f4 ), (e6 -f6 ) as well as 2-1 alignments (e2 /e3 ,f2 ), (e7 /e8 -f7 ), and null alignments (f5).
Given two documents that are translations of each other, we generally need two steps to produce sentence alignments:
• a cost function that takes a span of source sentences and a span of target sen- tences and returns a score measuring how likely these spans are to be transla- tions.
• an alignment algorithm that takes these scores to find a good alignment be- tween the documents.
Since it is possible to induce multilingual sentence embeddings (Artetxe and Schwenk, 2019), cosine similarity of such embeddings provides a natural scoring function (Schwenk, 2018). Thompson and Koehn (2019) give the following cost function between two sentences or spans x,y from the source and target documents respectively:
1 − cos(x, y))nSents(x) nSents(y)
c(x,y) = 􏰐Ss=1 1−cos(x,ys)+􏰐Ss=1 1−cos(xs,y) (11.22)
where nSents() gives the number of sentences (this biases the metric toward many alignments of single sentences instead of aligning very large spans). The denom- inator helps to normalize the similarities, and so x1,...,xS,y1,...,yS, are randomly selected sentences sampled from the respective documents.
Usually dynamic programming is used as the alignment algorithm (Gale and Church, 1993), in a simple extension of the the minimum edit distance algorithm we introduced in Chapter 2.
Finally, it’s helpful to do some corpus cleanup by removing noisy sentence pairs. This can involve handwritten rules to remove low-precision pairs (for example re- moving sentences that are too long, too short, have different URLs, or even pairs
 
backtranslation
Monte Carlo search
11.8
adequacy fluency
11.8 • MT EVALUATION 221
that are too similar, suggesting that they were copies rather than translations). Or pairs can be ranked by their multilingual embedding cosine score and low-scoring pairs discarded.
11.7.3 Backtranslation
We’re often short of data for training MT models, since parallel corpora may be limited for particular languages or domains. However, often we can find a large monolingual corpus, to add to the smaller parallel corpora that are available.
Backtranslation is a way of making use of monolingual corpora in the target language by creating synthetic bitexts. In backtranslation, we train an intermediate target-to-source MT system on the small bitext to translate the monolingual target data to the source language. Now we can add this synthetic bitext (natural target sentences, aligned with MT-produced source sentences) to our training data, and retrain our source-to-target MT model. For example suppose we want to translate from Navajo to English but only have a small Navajo-English bitext, although of course we can find lots of monolingual English data. We use the small bitext to build an MT engine going the other way (from English to Navajo). Once we translate the monolingual English text to Navajo, we can add this synthetic Navajo/English bitext to our training data.
Backtranslation has various parameters. One is how we generate the backtrans- lated data; we can run the decoder in greedy inference, or use beam search. Or we can do sampling, or Monte Carlo search. In Monte Carlo decoding, at each timestep, instead of always generating the word with the highest softmax proba- bility, we roll a weighted die, and use it to choose the next word according to its softmax probability. This works just like the sampling algorithm we saw in Chap- ter 3 for generating random sentences from n-gram language models. Imagine there are only 4 words and the softmax probability distribution at time t is (the: 0.6, green: 0.2, a: 0.1, witch: 0.1). We roll a weighted die, with the 4 sides weighted 0.6, 0.2, 0.1, and 0.1, and chose the word based on which side comes up. Another parameter is the ratio of backtranslated data to natural bitext data; we can choose to upsample the bitext data (include multiple copies of each sentence).
In general backtranslation works surprisingly well; one estimate suggests that a system trained on backtranslated text gets about 2/3 of the gain as would training on the same amount of natural bitext (Edunov et al., 2018).
MT Evaluation
Translations can be evaluated along two dimensions, adequacy and fluency.
adequacy: how well the translation captures the exact meaning of the source sen- tence. Sometimes called faithfulness or fidelity.
fluency: how fluent the translation is in the target language (is it grammatical, clear, readable, natural).
Both human and automatic evaluation metrics are used.
11.8.1 Using Human Raters to Evaluate MT
The most accurate evaluations use human raters to evaluate each translation along the two dimensions (often these raters are online crowdworkers hired specifically to

222
CHAPTER 11 • MACHINE TRANSLATION AND ENCODER-DECODER MODELS
ranking
evaluate).
For example, along the dimension of fluency, we can ask how intelligible, how
clear, how readable, or how natural the MT output (the target text) is. We can give the raters a scale, for example, from 1 (totally unintelligible) to 5 (totally intelligible, or 1 to 100, and ask them to rate each sentence or paragraph of the MT output.
We can do the same thing to judge the second dimension, adequacy, using raters to assign scores on a scale. If we have bilingual raters, we can give them the source sentence and a proposed target sentence, and rate, on a 5-point or 100-point scale, how much of the information in the source was preserved in the target. If we only have monolingual raters but we have a good human translation of the source text, we can give the monolingual raters the human reference translation and a target machine translation and again rate how much information is preserved. If we use a fine-grained enough scale, we can normalize raters by subtracting the mean from their scores and dividing by the variance.
An alternative is to do ranking: give the raters a pair of candidate translations, and ask them which one they prefer.
While humans produce the best evaluations of machine translation output, run- ning a human evaluation can be time consuming and expensive. In the next section we introduce an automatic metric that, while less accurate than human evaluation, is widely used because it can quickly evaluate potential system improvements, or even be used as an automatic loss function for training.
11.8.2 Automatic Evaluation: BLEU
The most popular automatic metric for machine translation is called BLEU (for BiLingual Evaluation Understudy). BLEU (along with the many alternative metrics (e.g., NIST, TER, Precision and Recall, and METEOR) is based on a simple intuition derived from the pioneering work of Miller and Beebe-Center (1958): a good machine translation will tend to contain words and phrases that occur in a human translation of the same sentence.
Consider a test set from a parallel corpus, in which each source sentence has both a gold human target translation and a candidate MT translation we’d like to evaluate. The BLEU metric ranks each MT target sentence by function of the number of n- gram overlaps with the human translation.
Figure 11.16 shows an intuition from two candidate translations of a Spanish source sentence, shown with a human reference translation. Note that Candidate 1 shares many more n-grams (in boxes) and especially longer n-grams (in darker boxes) with the reference translations than does Candidate 2.
The intuition in Fig. 11.16 shows a single sentence, but BLEU is actually not a score for a single sentence; it’s a score for an entire corpus of candidate translation sentences. More formally, the BLEU score for a corpus of candidate translation sentences is a function of the n-gram precision over all the sentences combined with a brevity penalty computed over the corpus as a whole.
What do we mean by n-gram precision? Consider a corpus composed of a single sentence. The unigram precision for this corpus is the percentage of unigram tokens in the candidate translation that also occur in the reference translation, and ditto for bigrams and so on, up to 4-grams. Candidate 1 in Fig. 11.16 has 19 unique unigrams, some of which occur multiple times, for a total of 26 tokens. Of these, 16 unique unigrams, totaling 23 tokens, also occur in the reference translation (3 don’t: voice, deposit, and actions). Thus the unigram precision for the Candidate 1 corpus is 23/26 = .88.

Intuition for BLEU: One of two candidate translations of a Spanish sentence shares more n-grams, and especially longer n-grams, with the reference human translation.
We extend this unigram metric to a whole corpus of many sentences as follows. For the numerator, we sum for each sentence the counts of all the unigram types that also occur in the reference translation, and then sum those counts over all sentences. The denominator is the total of the counts of all unigrams in all candidate sentences. We compute this n-gram precision for unigrams, bigrams, trigrams, and 4-grams. The n-gram precisions precn of a whole corpus of candidate sentences are thus:
􏰑 􏰑 Countmatch(n-gram)
C∈{Candidates} n-gram∈C precn = 􏰑 􏰑
C′ ∈{Candidates} n-gram′ ∈C′
Count(n-gram′ ) (11.23)
11.8 • MT EVALUATION 223
    Source
Reference Candidate 1
Candidate 2
la verdad, cuya madre es la historia, émula del tiempo, depósito de las acciones,
testigo de lo pasado, ejemplo y aviso de lo presente, advertencia de lo por venir.
 truth, whose mother is history, rival of time, storehouse of deeds,
 witness for the past, example and counsel for the present, and warning for the future.
 truth, whose mother is history,
 witness for the past, example and
   the truth, which
  witness of
mother is
the past, example and
voice of time, deposit of actions,
warning for the present, and warning for the future
the history, émula of the time, deposition of the shares,
notice of
the present, warning of it for coming
  Figure 11.16
  BLEU combines these four n-gram precisions by taking their geometric mean.
In addition, BLEU penalizes candidate translations that are too short. Imagine our machine translation engine returned the following terrible candidate translation
3 for the example in Fig. 11.16:
(11.24) for the
Because the words for and the and the bigram for the all appear in the human ref- erence, n-gram precision alone will assign candidate 3 a great score, since it has perfect unigram and bigram precisions of 1.0!
One option for dealing with this problem is to combine recall with precision, but BLEU chooses another option: adding a brevity penalty over the whole corpus, penalizing a system that produces translations that are on average shorter than the reference translations. Let sys len be the sum of the length of all the candidate trans- lation sentences, and ref len be the sum of the length of all the reference translation sentences. If the candidate translations are shorter than the reference, we assign a brevity penalty BP that is a function of their ratio:
BP = min􏰆1, exp􏰆1− ref len 􏰇􏰇 sys len
 􏰋 􏰒4 􏰌 14
BLEU = BP× precn (11.25)
n=1

224
CHAPTER 11 • MACHINE TRANSLATION AND ENCODER-DECODER MODELS Advanced details of BLEU
    Candidate: Reference 1: Reference 2:
the the the the
the cat is on there is a cat
the the the the mat
on the mat
 Figure 11.17
 modified n-gram precision
The above description was simplified in a number of ways. BLEU actually uses a slightly different version of n-gram precision than the one in Eq. 11.23. Eq. 11.23 has a flaw that rewards candidates that have extra repeated words. Figure 11.17 shows an example of a pathological candidate sentence composed of 7 instances of the single word the, leading to a unigram precision of 7/7!
A pathological example showing why BLEU uses a modified precision met- ric. Unigram precision would be unreasonably high (7/7). Modified unigram precision is appropriately low (2/7).
To avoid this problem, BLEU uses a modified n-gram precision metric. We first count the maximum number of times a word is used in any single reference translation. The count of each candidate word is then clipped by this maximum reference count. Thus, the modified unigram precision in the example in Fig. 11.17 would be 2/7, since Reference 1 has a maximum of 2 thes.
To compute a score over the whole test set, BLEU first computes the N-gram matches for each sentence and sums the clipped counts over all the candidate sen- tences, then divides by the total number of candidate N-grams in the test set. If we define the function Countmatch clipped to mean “the clipped count of all n-grams that match the reference,” the real precn of a whole corpus of candidate sentences
that BLEU uses are: 􏰑 􏰑 Countmatch clipped(n-gram) C∈{Candidates} n-gram∈C
precn = 􏰑 􏰑 Count(n-gram′ ) (11.26) C′ ∈{Candidates} n-gram′ ∈C′
 BLEU also work fine if we have multiple human reference translations for a source sentence. In fact BLEU works better in this situation, since a source sentence can be legitimately translated in many ways and n-gram precision will hence be more robust. We just match an n-gram if it occurs in any of the references. And for the brevity penalty, we choose for each candidate sentence the reference sentence that is the closest in length to compute the ref len. But in practice most translation corpora only have a single human translation to compare against.
Finally, implementing BLEU requires standardizing on many details of smooth- ing and tokenization; for this reason it is recommended to use standard implemen- tations like SACREBLEU (Post, 2018) rather than trying to implement BLEU from scratch.
Statistical Significance Testing for BLEU
BLEU scores are mainly used to compare two systems, with the goal of answering questions like: did the special new algorithm we invented improve our MT system? To know if the difference between the BLEU scores of two MT systems is a sig- nificant difference, we use the paired bootstrap test, or the similar randomization test.

11.8 • MT EVALUATION 225
To get a confidence interval on a single BLEU score using the bootstrap test, recall from Section 4.9 that we take our test set (or devset) and create thousands of pseudo-testsets by repeatedly sampling with replacement from the original test set. We now compute the BLEU score of each of the pseudo-testsets. If we drop the top 2.5% and bottom 2.5% of the scores, the remaining scores will give us the 95% confidence interval for the BLEU score of our system.
To compare two MT systems A and B, we draw the same set of pseudo-testsets, and compute the BLEU scores for each of them. We then compute the percentage of pseudo-test-sets in which A has a higher BLEU score than B.
BLEU: Limitations
While automatic metrics like BLEU are useful, they have important limitations. BLEU is very local: a large phrase that is moved around might not change the BLEU score at all, and BLEU can’t evaluate cross-sentence properties of a docu- ment like its discourse coherence (Chapter 22). BLEU and similar automatic met- rics also do poorly at comparing very different kinds of systems, such as comparing human-aided translation against machine translation, or different machine transla- tion architectures against each other (Callison-Burch et al., 2006). Such automatic metrics are probably most appropriate when evaluating changes to a single system.
11.8.3 Automatic Evaluation: Embedding-Based Methods
The BLEU metric is based on measuring the exact word or n-grams a human ref- erence and candidate machine translation have in common. However, this criterion is overly strict, since a good translation may use alternate words or paraphrases. A solution pioneered in early metrics like METEOR (Banerjee and Lavie, 2005) was to allow synonyms to match between the reference x and candidate x ̃. More recent metrics use BERT or other embeddings to implement this intuition.
For example, in some situations we might have datasets that have human as- sessments of translation quality. Such datasets consists of tuples (x, x ̃, r), where x = (x1,...,xn) is a reference translation, x ̃ = (x ̃1,...,x ̃m) is a candidate machine translation, and r ∈ R is a human rating that expresses the quality of x ̃ with respect to x. Given such data, algorithms like BLEURT (Sellam et al., 2020) train a pre- dictor on the human-labeled datasets, by passing x and x ̃ through a version of BERT (trained with extra pretraining, and then fine-tuned on the human-labeled sentences), followed by a linear layer that is trained to predict r. The output of such models cor- relates highly with human labels.
In other cases, however, we don’t have such human-labeled datasets. In that case we can measure the similarity of x and x ̃ by the similarity of their embeddings. The BERTSCORE algorithm (Zhang et al., 2020) shown in Fig. 11.18, for example, passes the reference x and the candidate x ̃ through BERT, computing a BERT em- bedding for each token xi and x ̃j. Each pair of tokens (xi,x ̃j) is scored by its cosine
xi ·x ̃ j . Each token in x is matched to a token in x ̃ to compute recall, and each token in | x i | | x ̃ j |
x ̃ is matched to a token in x to compute precision (with each token greedily matched to the most similar token in the corresponding sentence). BERTSCORE provides precision and recall (and hence F1):
RBERT = 1 􏰑maxxi ·x ̃j PBERT = 1 􏰑maxxi ·x ̃j (11.27) |x| xi∈x x ̃j∈x ̃ |x ̃| x ̃j∈x ̃ xi∈x
 
     Published as a conference paper at ICLR 2020
226 CHAPTER 11 • MACHINE TRANSLATION AND ENCODER-DECODER MODELS
    Contextual Embedding
Pairwise Cosine Similarity
Maximum Similarity
Importance Weighting (Optional)
RBERT = à.à3 .2à + à.55 à.94 +... .2à+à.94+.82+à.9à+8.88
  Reference x the weather is cold today
Candidate xˆ
it is freezing today
1.27 7.94 1.82 7.90 8.88
idf weights
    Candidate
 Figure 11.18
 candidate xˆ,
11.9 Bia
Figure 1: Illustration of the computation of the recall metric RBERT. Given the reference x and The computation of BERTSCORE recall from reference x and candidate xˆ,
we compute BERT embeddings and pairwise cosine similarity. We highlight the greedy from Figure 1 in Zhang et al. (2020). This version shows an extended version of the metric in
matching in red, and include the optional idf importance weighting. which tokens are also weighted by their idf values.
We experiment with different models (Section 4), using the tokenizer provided with each model.
s
a
G
s
iv
n
d
E
t
h
i
c
a
l
I
s
s
u
e
en
quence of vectors hx,...,xki. Similarly, the tokenized candidate xˆ = hxˆ,...,xˆmi is mapped to hxö, . . . , xöli. The main model we use is BERT, which tokenizes the input text into a sequence of word pieces (Wu et al., 2016), where unknown words are split into several commonly observed
a
toke
niz
e
dr
e
fer
en
ce
s
en
te
nce
x
= hx ,...,x i, the embedding model generates a se- k
Machine translation raises many of the same ethical issues that we’ve discussed in sequences of characters. The representation for each word piece is computed with a Transformer
encoder (Vaswani et al., 2017) by repeatedly applying self-attention and nonlinear transformations earlier chapters. For example, consider MT systems translating from Hungarian
in an alternating fashion. BERT embeddings have been shown to benefit various NLP tasks (Devlin (which has the gender neutral pronoun o ̋) or Spanish (which often drops pronouns)
et al., 2019; Liu, 2019; Huang et al., 2019; Yang et al., 2019a).
into English (in which pronouns are obligatory, and they have grammatical gender).
Similarity Measure The vector representation allows for a soft measure of similarity instead of
When translating a reference to a person described without specified gender, MT exact-string (Papineni et al., 2002) or heuristic (Banerjee & Lavie, 2005) matching. The cosine
systems often default to male gender (Schiebinger 201x4
Prates et al. 2019). And similarity of a reference token xi and a candidate token xˆj is > . We use pre-normalized
k x i k k xö j k
MT systems often assign gender according to culture>stereotypes of the sort we saw
vectors, which reduces this calculation to the inner product xi xöj. While this measure considers intoSkencstinoniso6la.t1io1n., thFeigco.n1te1x.t1ua9l esmhboewddsinegxsacmonptaliensinffrormat(ioPnrafrtoems tehte arels.,t o2f0th1e9s)e,ntienncwe.hich
Hungarian gender-neutral o ̋ is a nurse is translated with she, but gender-neutral o ̋ BERTSCORE The complete score matches each token in x to a token in xˆ to compute recall,
isanadCeaEcOh toisketnrainsxˆlattoeadtwokietnhihnex. tPorcaotmespuetet aplr.ec(i2si0o1n.9)Wfienudsethgraetedthyemsaetcshtienrgeototympaexsimciazen’t the matching similarity score,2 where each token is matched to the most similar token in the other
completely be accounted for by gender bias in US labor statistics, because the bi-
sentence. We combine precision and recall to compute an F1 measure. For a reference x and ases are amplified by MT systems, with pronouns being mapped to male or female
candidate xˆ, the recall, precision, and F1 scores are:
gender with a probability higher than if the mapping was based on actual labor em-
1X > plRoyBEmRTen=t statisticmsa.x xi xöj ,
PBERT =
1X > max xi xöj ,
FBERT = 2
PBERT·RBERT P B E R T + R B E R T
.
| x | x i 2 x xö j 2 xö
| xˆ | xö j 2 xö x i 2 x
i
,xöj
 confidence
Importance Weighting Previous work on similarity measures demonstrated that rare words can bemB etao
with
sentences x , the idf score of a word-piece token w is
where
 is an indicator function. We do not use the full tf-idf measure because we process single When translating from gender-neutral languages like Hungarian into English,
 Hungarian (gender neutral) source
ore indicative for sentence similarity than common words (
l.o, ̋2e0g15y).tuBdEo ́RsTSCORE enables us to easily incorporate imp
inverse document frequency (idf) scores computed from th
o ̋ egy me ́rno ̈k
iM
English MT output
  o ̋ egy a ́polo ́
she is a nurse
  Figure 11.19
I[·]
{}
i= o ̋ egy pe ́k
idf(w) =  log
anerjee & Lavie, 2005; Vedantam
rhtaenicse awesicgihetintgi.stWe experiment
e test corpus. Given M reference he is an engineer
he is a baker
she is a teacher
],
she is a wedding organizer
he is a CEO
  o ̋egytana ́r
o ̋ egy vesku ̈vo ̋szervezo ̋ o ̋ egy veze ́rigazgato ́
1 XM M i=
I[w 2 x i
 sentences, wh
ere the term frequency (tf) is likely 1. For example, recall with idf weighting is current MT systems interpret peoplePfrom traditionally male-dominated occupations as male,
and traditionally female-dominated occxu2pxationsi as femxöj
Similarly, a recent challenge set, the WinoMT dataset (Stanovsky et al., 2019) Because we use reference sentences to compute idf, the idf scores remain the same for all systems
sheovawlusattehdaotnMasTpescyifisctetemstsept.eWrfeoarpmplywpolurs-eonwehsmenoothienygtaorheanadslkeeudnktnoowtrnanwsolradtpeiescens.tences
a2lexö (Pirajtesetal.,2019). RBERT = i Pxi2x idf(xi) .
2We compare greedy matching with optimal assignment in Appendix C.
nurse to help her in the operation”.
idf(x)max x xö
that describe people with non-stereotypical gender roles, like “The doctor asked the
Many open ethical issues in MT require further research. One is the need for bet-
ter metrics for knowing what our systems don’t know. MT systems can be used in urgent situations where human translators may be unavailable or delayed: in medical domains, to help translate when patients and doctors don’t speak the same language, or in legal domains, to help judges or lawyers communicate with witnesses or de- fendants. In order to ‘do no harm’, systems need ways to assign confidence values
4
>
Reference

low-resourced languages
11.10 • SUMMARY 227
to candidate translations, so they can abstain from giving incorrect translations that may cause harm.
Another is the need for low-resource algorithms that can do translation to and from the vast majority of the world’s languages, which do not have large parallel texts available for training. This problem is exacerbated by the fact that cross-lingual transfer and multilingual approaches to MT tend to focus on the case where one of the languages is English (Anastasopoulos and Neubig, 2020). ∀ et al. (2020) propose a participatory design process to encourage content creators, curators, and language technologists who speak these low-resourced languages to participate in development of MT algorithms. Their method uses online groups, mentoring, and online infrastructure, and they report on a case study on developing MT algorithms for low-resource African languages.
11.10 Summary
Machine translation is one of the most widely used applications of NLP, and the encoder-decoder model, first developed for MT is a key tool that has applications throughout NLP.
• Languageshavedivergences,bothstructuralandlexical,thatmaketranslation difficult.
• The linguistic field of typology investigates some of these differences; lan- guages can be classified by their position along typological dimensions like whether verbs precede their objects.
• Encoder-decoder networks are composed of an encoder network that takes an input sequence and creates a contextualized representation of it, the con- text. This context representation is then passed to a decoder which generates a task-specific output sequence.
• Theattentionmechanismenrichesthecontextvectortoallowingthedecoder to view information from all the hidden states of the encoder, not just the last hidden state.
• The encoder-decoder architecture can be implemented by RNNs or by Trans- formers.
• For the decoder, choosing the single most probable token to generate at each step is called greedy decoding.
• Inbeamsearch,insteadofchoosingthebesttokentogenerateateachtimestep, we keep k possible tokens at each step. This fixed-size memory footprint k is called the beam width.
• Machinetranslationmodelsaretrainedonaparallelcorpus,sometimescalled a bitext, a text that appears in two (or more) languages.
• Backtranslation is a way of making use of monolingual corpora in the target language by running a pilot MT engine backwards to create synthetic bitexts.
• MT is evaluated by measuring a translation’s adequacy (how well it captures the meaning of the source sentence) and fluency (how fluent or natural it is in the target language). Human evaluation is the gold standard, but automatic evaluation metrics like BLEU, which measure word or n-gram overlap with human translations, or more recent metrics based on embedding similarity, are also commonly used.

228 CHAPTER 11 • MACHINE TRANSLATION AND ENCODER-DECODER MODELS Bibliographical and Historical Notes
Vauquois triangle
MT was proposed seriously by the late 1940s, soon after the birth of the computer (Weaver, 1955). In 1954, the first public demonstration of an MT system proto- type (Dostert, 1955) led to great excitement in the press (Hutchins, 1997). The next decade saw a great flowering of ideas, prefiguring most subsequent developments. But this work was ahead of its time—implementations were limited by, for exam- ple, the fact that pending the development of disks there was no good way to store dictionary information.
As high-quality MT proved elusive (Bar-Hillel, 1960), there grew a consensus on the need for better evaluation and more basic research in the new fields of formal and computational linguistics. This consensus culminated in the famous ALPAC (Automatic Language Processing Advisory Committee) report of 1966 (Pierce et al., 1966) that led in the mid 1960s to a dramatic cut in funding for MT in the US. As MT research lost academic respectability, the Association for Machine Translation and Computational Linguistics dropped MT from its name. Some MT developers, however, persevered, and there were early industrial engines like Systran, as well as early MT systems like Me ́te ́o, which translated weather forecasts from English to French (Chandioux, 1976).
In early years, the space of MT architectures spanned three general models. In perhaps the earliest developed method, direct translation, the system proceeds word-by-word through the source-language text, translating each word incremen- tally. Direct translation uses a large bilingual dictionary, each of whose entries is a small program with the job of translating one word. In transfer approaches, we first parse the input text and then apply rules to transform the source-language parse into a target language parse. We then generate the target language sentence from the parse tree. In interlingua approaches, we analyze the source language text into some abstract meaning representation, called an interlingua. We then generate into the target language from this interlingual representation. A common way to visualize these three early approaches was the Vauquois triangle shown in Fig. 11.20. The triangle shows the increasing depth of analysis required (on both the analysis and generation end) as we move from the direct approach through transfer approaches to interlingual approaches. In addition, it shows the decreasing amount of transfer knowledge needed as we move up the triangle, from huge amounts of transfer at the direct level (almost all knowledge is transfer knowledge for each word) through transfer (transfer rules only for parse trees or thematic roles) through interlingua (no specific transfer knowledge). We can view the encoder-decoder network as an interlingual approach, with attention acting as an integration of direct and transfer, allowing words or their representations to be directly accessed by the decoder.
Statistical methods began to be applied around 1990, enabled first by the devel- opment of large bilingual corpora like the Hansard corpus of the proceedings of the Canadian Parliament, which are kept in both French and English, and then by the growth of the Web. Early on, a number of researchers showed that it was possible to extract pairs of aligned sentences from bilingual corpora, using words or simple cues like sentence length (Kay and Ro ̈scheisen 1988, Gale and Church 1991, Gale and Church 1993, Kay and Ro ̈scheisen 1993).
At the same time, the IBM group, drawing directly on the noisy channel model for speech recognition, proposed algorithms for statistical MT, algorithms that be- came known as IBM Models 1 through 5, implemented in the Candide system.
IBM Models Candide

phrase-based translation
The Vauquois (1968) triangle.
The algorithms (except for the decoder) were published in full detail— encouraged by the US government which had partially funded the work— which gave them a huge impact on the research community (Brown et al. 1990, Brown et al. 1993). By the turn of the century, most academic research on machine translation used the statistical noisy channel model. Progress was made hugely easier by the develop- ment of publicly available toolkits, like the GIZA toolkit (Och and Ney, 2003) which implements IBM models 1–5 as well as the HMM alignment model.
Around the turn of the century, an extended approach, called phrase-based translation was developed, which was based on inducing translations for phrase- pairs (Och 1998, Marcu and Wong 2002, Koehn et al. (2003), Och and Ney 2004, Deng and Byrne 2005, inter alia). A log linear formulation (Och and Ney, 2004) was trained to directly optimize evaluation metrics like BLEU in a method known
BIBLIOGRAPHICAL AND HISTORICAL NOTES 229
    Interlingua
Transfer
Direct Translation
  Source Text: Semantic/Syntactic Structure
Target Text: Semantic/Syntactic Structure
 source text
target text
 Figure 11.20
 MERT as Minimum Error Rate Training, or MERT (Och, 2003), also drawing from speech recognition models (Chou et al., 1993). Popular toolkits were developed like
Moses Moses (Koehn et al. 2006, Zens and Ney 2007).
transduction grammar
inversion transduction grammar
There were also approaches around the turn of the century that were based on syntactic structure (Chapter 12). Models based on transduction grammars (also called synchronous grammars assign a parallel syntactic tree structure to a pair of sentences in different languages, with the goal of translating the sentences by ap- plying reordering operations on the trees. From a generative perspective, we can view a transduction grammar as generating pairs of aligned sentences in two lan- guages. Some of the most widely used models included the inversion transduction grammar (Wu, 1996) and synchronous context-free grammars (Chiang, 2005),
MODERN HISTORY OF encoder-decoder approach HERE; (Kalchbren- ner and Blunsom, 2013), (Cho et al., 2014), (Sutskever et al., 2014), etc
Beam-search has an interesting relationship with human language processing; (Meister et al., 2020) show that beam search enforces the cognitive property of uni- form information density in text. Uniform information density is the hypothe- sis that human language processors tend to prefer to distribute information equally across the sentence (Jaeger and Levy, 2007).
Research on evaluation of machine translation began quite early. Miller and Beebe-Center (1958) proposed a number of methods drawing on work in psycholin- guistics. These included the use of cloze and Shannon tasks to measure intelligibil- ity as well as a metric of edit distance from a human translation, the intuition that underlies all modern automatic evaluation metrics like BLEU. The ALPAC report included an early evaluation study conducted by John Carroll that was extremely in- fluential (Pierce et al., 1966, Appendix 10). Carroll proposed distinct measures for fidelity and intelligibility, and had raters score them subjectively on 9-point scales.
target language generation
source language analysis

230 CHAPTER 11 • MACHINE TRANSLATION AND ENCODER-DECODER MODELS
More recent work on evaluation has focused on coming up with automatic metrics, include the work on BLEU discussed in Section 11.8.2 (Papineni et al., 2002), as well as related measures like NIST (Doddington, 2002), TER (Translation Error Rate) (Snover et al., 2006), Precision and Recall (Turian et al., 2003), and ME- TEOR (Banerjee and Lavie, 2005).
Good surveys of the early history of MT are Hutchins (1986) and (1997). Niren- burg et al. (2002) is a collection of early readings in MT.
See Croft (1990) or Comrie (1989) for introductions to typology. Exercises

 CHAPTER
12 Constituency Grammars
syntax
If on a winter’s night a traveler by Italo Calvino
Nuclear and Radiochemistry by Gerhart Friedlander et al.
The Fire Next Time by James Baldwin
A Tad Overweight, but Violet Eyes to Die For by G. B. Trudeau Sometimes a Great Notion by Ken Kesey
Dancer from the Dance by Andrew Holleran
Six books in English whose titles are not constituents, from Pullum (1991, p. 195)
The study of grammar has an ancient pedigree; Panini’s grammar of Sanskrit was written over two thousand years ago and is still referenced today in teaching Sanskrit. And our word syntax comes from the Greek sy ́ntaxis, meaning “setting out together or arrangement”, and refers to the way words are arranged together. We have seen various syntactic notions in previous chapters: ordering of sequences of words (Chapter 2), probabilities for these word sequences (Chapter 3), and the use of part-of-speech categories as a grammatical equivalence class for words (Chapter 8). In this chapter and the next three we introduce a variety of syntactic phenomena that go well beyond these simpler approaches, together with formal models for capturing them in a computationally useful manner.
The bulk of this chapter is devoted to context-free grammars. Context-free gram- mars are the backbone of many formal models of the syntax of natural language (and, for that matter, of computer languages). As such, they play a role in many computa- tional applications, including grammar checking, semantic interpretation, dialogue understanding, and machine translation. They are powerful enough to express so- phisticated relations among the words in a sentence, yet computationally tractable enough that efficient algorithms exist for parsing sentences with them (as we show in Chapter 13). And in Chapter 16 we show how they provide a systematic frame- work for semantic interpretation. Here we also introduce the concept of lexicalized grammars, focusing on one example, combinatory categorial grammar, or CCG.
In Chapter 14 we introduce a formal model of grammar called syntactic depen- dencies that is an alternative to these constituency grammars, and we’ll give algo- rithms for dependency parsing. Both constituency and dependency formalisms are important for language processing.
Finally, we provide a brief overview of the grammar of English, illustrated from a domain with relatively simple sentences called ATIS (Air Traffic Information Sys- tem) (Hemphill et al., 1990). ATIS systems were an early spoken language system for users to book flights, by expressing sentences like I’d like to fly to Atlanta.

232 CHAPTER 12 • CONSTITUENCY GRAMMARS 12.1 Constituency
noun phrase
Syntactic constituency is the idea that groups of words can behave as single units, or constituents. Part of developing a grammar involves building an inventory of the constituents in the language. How do words group together in English? Consider the noun phrase, a sequence of words surrounding at least one noun. Here are some examples of noun phrases (thanks to Damon Runyon):
What evidence do we have that these words group together (or “form constituents”)? One piece of evidence is that they can all appear in similar syntactic environments, for example, before a verb.
But while the whole noun phrase can occur before a verb, this is not true of each of the individual words that make up a noun phrase. The following are not grammat- ical sentences of English (recall that we use an asterisk (*) to mark fragments that are not grammatical English sentences):
Thus, to correctly describe facts about the ordering of these words in English, we must be able to say things like “Noun Phrases can occur before verbs”.
Other kinds of evidence for constituency come from what are called preposed or postposed constructions. For example, the prepositional phrase on September sev- enteenth can be placed in a number of different locations in the following examples, including at the beginning (preposed) or at the end (postposed):
On September seventeenth, I’d like to fly from Atlanta to Denver I’d like to fly on September seventeenth from Atlanta to Denver I’d like to fly from Atlanta to Denver on September seventeenth
But again, while the entire phrase can be placed differently, the individual words making up the phrase cannot be:
*On September, I’d like to fly seventeenth from Atlanta to Denver *On I’d like to fly September seventeenth from Atlanta to Denver *I’d like to fly on September from Atlanta to Denver seventeenth
Context-Free Grammars
The most widely used formal system for modeling constituent structure in English CFG and other natural languages is the Context-Free Grammar, or CFG. Context-
Harry the Horse a high-class spot such as Mindy’s
 the Broadway coppers the reason he comes into the Hot Box
 they three parties from Brooklyn
 three parties from Brooklyn arrive. . .
a high-class spot such as Mindy’s attracts. . . the Broadway coppers love. . .
they sit
 *from arrive. . . *as attracts. . .
 *the is. . . *spot sat. . .
 preposed postposed
     12.2

rules
lexicon NP
12.2 • CONTEXT-FREE GRAMMARS 233
free grammars are also called Phrase-Structure Grammars, and the formalism is equivalent to Backus-Naur Form, or BNF. The idea of basing a grammar on constituent structure dates back to the psychologist Wilhelm Wundt (1900) but was not formalized until Chomsky (1956) and, independently, Backus (1959).
A context-free grammar consists of a set of rules or productions, each of which expresses the ways that symbols of the language can be grouped and ordered to- gether, and a lexicon of words and symbols. For example, the following productions express that an NP (or noun phrase) can be composed of either a ProperNoun or a determiner (Det) followed by a Nominal; a Nominal in turn can consist of one or more Nouns.
NP → DetNominal
NP → ProperNoun
Nominal → Noun | Nominal Noun
Context-free rules can be hierarchically embedded, so we can combine the pre- vious rules with others, like the following, that express facts about the lexicon:
Det → a
Det → the Noun → flight
The symbols that are used in a CFG are divided into two classes. The symbols that correspond to words in the language (“the”, “nightclub”) are called terminal symbols; the lexicon is the set of rules that introduce these terminal symbols. The symbols that express abstractions over these terminals are called non-terminals. In each context-free rule, the item to the right of the arrow (→) is an ordered list of one or more terminals and non-terminals; to the left of the arrow is a single non-terminal symbol expressing some cluster or generalization. The non-terminal associated with each word in the lexicon is its lexical category, or part of speech.
A CFG can be thought of in two ways: as a device for generating sentences and as a device for assigning a structure to a given sentence. Viewing a CFG as a generator, we can read the → arrow as “rewrite the symbol on the left with the string of symbols on the right”.
terminal non-terminal
derivation parse tree
dominates
start symbol
We say the string a flight can be derived from the non-terminal NP. Thus, a CFG can be used to generate a set of strings. This sequence of rule expansions is called a derivation of the string of words. It is common to represent a derivation by a parse tree (commonly shown inverted with the root at the top). Figure 12.1 shows the tree representation of this derivation.
In the parse tree shown in Fig. 12.1, we can say that the node NP dominates all the nodes in the tree (Det, Nom, Noun, a, flight). We can say further that it immediately dominates the nodes Det and Nom.
The formal language defined by a CFG is the set of strings that are derivable from the designated start symbol. Each grammar must have one designated start symbol, which is often called S. Since context-free grammars are often used to define sentences, S is usually interpreted as the “sentence” node, and the set of strings that are derivable from S is the set of sentences in some simplified version of English.
So starting from the symbol:
we can use our first rule to rewrite NP as: and then rewrite Nominal as:
and finally rewrite these parts-of-speech as:
NP
Det Nominal Det Noun
a flight

234 CHAPTER 12 • CONSTITUENCY GRAMMARS
   NP Det Nom
a Noun flight
 Figure 12.1
 verb phrase
A parse tree for “a flight”.
Let’s add a few additional rules to our inventory. The following rule expresses
the fact that a sentence can consist of a noun phrase followed by a verb phrase: S → NP VP I prefer a morning flight
A verb phrase in English consists of a verb followed by assorted other things; for example, one kind of verb phrase consists of a verb followed by a noun phrase:
VP → Verb NP prefer a morning flight
Or the verb may be followed by a noun phrase and a prepositional phrase:
VP → Verb NP PP leave Boston in the morning
Or the verb phrase may have a verb followed by a prepositional phrase alone:
VP → Verb PP leaving on Thursday
A prepositional phrase generally has a preposition followed by a noun phrase. For example, a common type of prepositional phrase in the ATIS corpus is used to indicate location or direction:
PP → Preposition NP from Los Angeles
The NP inside a PP need not be a location; PPs are often used with times and dates, and with other nouns as well; they can be arbitrarily complex. Here are ten examples from the ATIS corpus:
Figure 12.2 gives a sample lexicon, and Fig. 12.3 summarizes the grammar rules we’ve seen so far, which we’ll call L0. Note that we can use the or-symbol | to indicate that a non-terminal has alternate possible expansions.
We can use this grammar to generate sentences of this “ATIS-language”. We start with S, expand it to NP VP, then choose a random expansion of NP (let’s say, to I), and a random expansion of VP (let’s say, to Verb NP), and so on until we generate the string I prefer a morning flight. Figure 12.4 shows a parse tree that represents a complete derivation of I prefer a morning flight.
We can also represent a parse tree in a more compact format called bracketed notation; here is the bracketed representation of the parse tree of Fig. 12.4:
to Seattle on these flights
 in Minneapolis about the ground transportation in Chicago
 on Wednesday of the round trip flight on United Airlines
 in the evening of the AP fifty seven flight
 on the ninth of July with a stopover in Nashville
 bracketed notation

  Figure 12.2
Noun → Verb→ Adjective →
Pronoun→ Proper-Noun →
Determiner→
Preposition → Conjunction → The lexicon for L0.
NP VP
12.2 • CONTEXT-FREE GRAMMARS 235
flights | breeze | trip | morning is| prefer| like| need| want| fly cheapest | non-stop | first | latest | other | direct
me| I| you| it
Alaska | Baltimore | Los Angeles
| Chicago | United | American the| a| an| this| these| that from | to | on | near
and | or | but
I + want a morning flight
I
Los Angeles
a + flight morning + flight flights
do
want + a flight
leave + Boston + in the morning leaving + on Thursday
   Figure 12.3
Grammar Rules Examples
 S → NP →
 Nominal →
| Noun
Pronoun
| Proper-Noun
| Det Nominal
Nominal Noun
VP →
| VerbNP
| Verb NP PP
| VerbPP
Verb
PP →
The grammar for L0, with example phrases for each rule.
Preposition NP
from + Los Angeles
     S
NP VP
Pro Verb
I prefer Det
a
NP
Nom
Nom Noun Noun flight
morning
 Figure 12.4
 grammatical ungrammatical
The parse tree for “I prefer a morning flight” according to grammar L0. (12.1) [S [NP [Pro I]] [VP [V prefer] [NP [Det a] [Nom [N morning] [Nom [N flight]]]]]]
A CFG like that of L0 defines a formal language. We saw in Chapter 2 that a for- mal language is a set of strings. Sentences (strings of words) that can be derived by a grammar are in the formal language defined by that grammar, and are called gram- matical sentences. Sentences that cannot be derived by a given formal grammar are not in the language defined by that grammar and are referred to as ungrammatical.

236
CHAPTER 12 • CONSTITUENCY GRAMMARS
generative grammar
This hard line between “in” and “out” characterizes all formal languages but is only a very simplified model of how natural languages really work. This is because de- termining whether a given sentence is part of a given natural language (say, English) often depends on the context. In linguistics, the use of formal languages to model natural languages is called generative grammar since the language is defined by the set of possible sentences “generated” by the grammar.
12.2.1 Formal Definition of Context-Free Grammar
We conclude this section with a quick, formal description of a context-free gram- mar and the language it generates. A context-free grammar G is defined by four parameters: N, Σ, R, S (technically this is a “4-tuple”).
N
Σ
R S
For the remainder of the book we adhere to the following conventions when dis- cussing the formal properties of context-free grammars (as opposed to explaining particular facts about English or other languages).
A language is defined through the concept of derivation. One string derives an- other one if it can be rewritten as the second one by some series of rule applications. More formally, following Hopcroft and Ullman (1979),
ifA→β isaproductionofRandα andγ areanystringsintheset (Σ∪N)∗, then we say that αAγ directly derives αβγ, or αAγ ⇒ αβγ.
Derivation is then a generalization of direct derivation:
Let α1, α2, ..., αm be strings in (Σ∪N)∗,m ≥ 1, such that
α1 ⇒ α2,α2 ⇒ α3,...,αm−1 ⇒ αm We say that α1 derives αm, or α1 ⇒∗ αm.
We can then formally define the language LG generated by a grammar G as the set of strings composed of terminal symbols that can be derived from the designated start symbol S.
LG ={w|wisinΣ∗ andS⇒∗ w}
The problem of mapping from a string of words to its parse tree is called syn- tactic parsing; we define algorithms for constituency parsing in Chapter 13.
a set of non-terminal symbols (or variables)
a set of terminal symbols (disjoint from N)
a set of rules or productions, each of the form A → β ,
where A is a non-terminal,
β is a string of symbols from the infinite set of strings (Σ ∪ N )∗ a designated start symbol and a member of N
 directly derives
derives
syntactic parsing
Capital letters like A, B, and S
S
Lower-case Greek letters like α, β, and γ Lower-case Roman letters like u, v, and w
Non-terminals
The start symbol
Strings drawn from (Σ ∪ N)∗ Strings of terminals
  
12.3 • SOME GRAMMAR RULES FOR ENGLISH 237 12.3 Some Grammar Rules for English
declarative
imperative
yes-no question
In this section, we introduce a few more aspects of the phrase structure of English; for consistency we will continue to focus on sentences from the ATIS domain. Be- cause of space limitations, our discussion is necessarily limited to highlights. Read- ers are strongly advised to consult a good reference grammar of English, such as Huddleston and Pullum (2002).
12.3.1 Sentence-Level Constructions
In the small grammar L0, we provided only one sentence-level construction for declarative sentences like I prefer a morning flight. Among the large number of constructions for English sentences, four are particularly common and important: declaratives, imperatives, yes-no questions, and wh-questions.
Sentences with declarative structure have a subject noun phrase followed by a verb phrase, like “I prefer a morning flight”. Sentences with this structure have a great number of different uses that we follow up on in Chapter 24. Here are a number of examples from the ATIS domain:
I want a flight from Ontario to Chicago
The flight should be eleven a.m. tomorrow
The return flight should leave at around seven p.m.
Sentences with imperative structure often begin with a verb phrase and have no subject. They are called imperative because they are almost always used for commands and suggestions; in the ATIS domain they are commands to the system.
Show the lowest fare
Give me Sunday’s flights arriving in Las Vegas from New York City List all flights between five and seven p.m.
We can model this sentence structure with another rule for the expansion of S: S → VP
Sentences with yes-no question structure are often (though not always) used to ask questions; they begin with an auxiliary verb, followed by a subject NP, followed by a VP. Here are some examples. Note that the third example is not a question at all but a request; Chapter 24 discusses the uses of these question forms to perform different pragmatic functions such as asking, requesting, or suggesting.
Do any of these flights have stops?
Does American’s flight eighteen twenty five serve dinner? Can you give me the same information for United?
Here’s the rule:
S → AuxNPVP
The most complex sentence-level structures we examine here are the various wh- structures. These are so named because one of their constituents is a wh-phrase, that is, one that includes a wh-word (who, whose, when, where, what, which, how, why). These may be broadly grouped into two classes of sentence-level structures. The wh-subject-question structure is identical to the declarative structure, except that the first noun phrase contains some wh-word.
wh-phrase wh-word

238 CHAPTER 12 • CONSTITUENCY GRAMMARS
wh-non-subject- question
long-distance dependencies
What airlines fly from Burbank to Denver?
Which flights depart Burbank after noon and arrive in Denver by six p.m? Whose flights serve breakfast?
Here is a rule. Exercise 12.7 discusses rules for the constituents that make up the Wh-NP.
S → Wh-NP VP
In the wh-non-subject-question structure, the wh-phrase is not the subject of the sentence, and so the sentence includes another subject. In these types of sentences the auxiliary appears before the subject NP, just as in the yes-no question structures. Here is an example followed by a sample rule:
What flights do you have from Burbank to Tacoma Washington?
S → Wh-NPAuxNPVP
Constructions like the wh-non-subject-question contain what are called long- distance dependencies because the Wh-NP what flights is far away from the predi- cate that it is semantically related to, the main verb have in the VP. In some models of parsing and understanding compatible with the grammar rule above, long-distance dependencies like the relation between flights and have are thought of as a semantic relation. In such models, the job of figuring out that flights is the argument of have is done during semantic interpretation. Other models of parsing represent the relation- ship between flights and have as a syntactic relation, and the grammar is modified to insert a small marker called a trace or empty category after the verb. We discuss empty-category models when we introduce the Penn Treebank on page 245.
12.3.2 Clauses and Sentences
Before we move on, we should clarify the status of the S rules in the grammars we just described. S rules are intended to account for entire sentences that stand alone as fundamental units of discourse. However, S can also occur on the right-hand side of grammar rules and hence can be embedded within larger sentences. Clearly then, there’s more to being an S than just standing alone as a unit of discourse.
What differentiates sentence constructions (i.e., the S rules) from the rest of the grammar is the notion that they are in some sense complete. In this way they corre- spond to the notion of a clause, which traditional grammars often describe as form- ing a complete thought. One way of making this notion of “complete thought” more precise is to say an S is a node of the parse tree below which the main verb of the S has all of its arguments. We define verbal arguments later, but for now let’s just see an illustration from the tree for I prefer a morning flight in Fig. 12.4 on page 235. The verb prefer has two arguments: the subject I and the object a morning flight. One of the arguments appears below the VP node, but the other one, the subject NP, appears only below the S node.
12.3.3 The Noun Phrase
Our L0 grammar introduced three of the most frequent types of noun phrases that occur in English: pronouns, proper nouns and the NP → Det Nominal construction. The central focus of this section is on the last type since that is where the bulk of the syntactic complexity resides. These noun phrases consist of a head, the central noun in the noun phrase, along with various modifiers that can occur before or after the head noun. Let’s take a close look at the various parts.
clause

cardinal numbers ordinal numbers
quantifiers
Noun phrases can begin with simple lexical determiners:
a stop the flights this flight those flights any flights some flights
The role of the determiner can also be filled by more complex expressions:
United’s flight
United’s pilot’s union
Denver’s mayor’s mother’s canceled flight
In these examples, the role of the determiner is filled by a possessive expression consisting of a noun phrase followed by an ’s as a possessive marker, as in the following rule.
Det → NP ′s
The fact that this rule is recursive (since an NP can start with a Det) helps us model the last two examples above, in which a sequence of possessive expressions serves as a determiner.
Under some circumstances determiners are optional in English. For example, determiners may be omitted if the noun they modify is plural:
(12.2) Show me flights from San Francisco to Denver on weekdays
As we saw in Chapter 8, mass nouns also don’t require determination. Recall that mass nouns often (not always) involve something that is treated like a substance (including e.g., water and snow), don’t take the indefinite article “a”, and don’t tend to pluralize. Many abstract nouns are mass nouns (music, homework). Mass nouns in the ATIS domain include breakfast, lunch, and dinner:
(12.3) Does this flight serve dinner?
The Nominal
The nominal construction follows the determiner and contains any pre- and post- head noun modifiers. As indicated in grammar L0, in its simplest form a nominal can consist of a single noun.
Nominal → Noun
As we’ll see, this rule also provides the basis for the bottom of various recursive
rules used to capture more complex nominal constructions.
Before the Head Noun
A number of different kinds of word classes can appear before the head noun but after the determiner (the “postdeterminers”) in a nominal. These include cardi- nal numbers, ordinal numbers, quantifiers, and adjectives. Examples of cardinal numbers:
two friends one stop
Ordinal numbers include first, second, third, and so on, but also words like next,
last, past, other, and another:
the first one the next day the second leg
the last flight the other American flight
Some quantifiers (many, (a) few, several) occur only with plural count nouns:
The Determiner
12.3 • SOME GRAMMAR RULES FOR ENGLISH 239

240
CHAPTER 12 • CONSTITUENCY GRAMMARS
adjective phrase
Adjectives can also be grouped into a phrase called an adjective phrase or AP. APs can have an adverb before the adjective (see Chapter 8 for definitions of adjec- tives and adverbs):
the least expensive fare After the Head Noun
A head noun can be followed by postmodifiers. Three kinds of nominal postmodi- fiers are common in English:
non-finite gerundive
They are especially common in the ATIS corpus since they are used to mark the origin and destination of flights.
Here are some examples of prepositional phrase postmodifiers, with brackets inserted to show the boundaries of each PP; note that two or more PPs can be strung together within a single NP:
all flights [from Cleveland] [to Newark]
arrival [in San Jose] [before seven p.m.]
a reservation [on flight six oh six] [from Tampa] [to Montreal]
Here’s a new nominal rule to account for postnominal PPs: Nominal → Nominal PP
The three most common kinds of non-finite postmodifiers are the gerundive (- ing), -ed, and infinitive forms.
Gerundive postmodifiers are so called because they consist of a verb phrase that begins with the gerundive (-ing) form of the verb. Here are some examples:
any of those [leaving on Thursday]
any flights [arriving after eleven a.m.]
flights [arriving within thirty minutes of each other]
We can define the Nominals with gerundive modifiers as follows, making use of a new non-terminal GerundVP:
Nominal → NominalGerundVP
We can make rules for GerundVP constituents by duplicating all of our VP pro-
ductions, substituting GerundV for V. GerundVP → GerundVNP
| GerundV PP | GerundV | GerundV NP PP GerundV can then be defined as
GerundV → being| arriving| leaving| ...
The phrases in italics below are examples of the two other common kinds of non-finite clauses, infinitives and -ed forms:
many fares
Adjectives occur after quantifiers but before nouns.
a first-class fare a non-stop flight
the longest layover the earliest lunch flight
prepositional phrases non-finite clauses relative clauses
all flights from Cleveland
any flights arriving after eleven a.m. a flight that serves breakfast

relative pronoun
A postnominal relative clause (more correctly a restrictive relative clause), is a clause that often begins with a relative pronoun (that and who are the most com- mon). The relative pronoun functions as the subject of the embedded verb in the following examples:
a flight that serves breakfast flights that leave in the morning the one that leaves at ten thirty five
We might add rules like the following to deal with these:
Nominal → NominalRelClause RelClause → (who | that) VP
The relative pronoun may also function as the object of the embedded verb, as in the following example; we leave for the reader the exercise of writing grammar rules for more complex relative clauses of this kind.
the earliest American Airlines flight that I can get Various postnominal modifiers can be combined:
a flight [from Phoenix to Detroit] [leaving Monday evening] evening flights [from Nashville to Houston] [that serve dinner] a friend [living in Denver] [that would like to visit me in DC]
Before the Noun Phrase
Word classes that modify and appear before NPs are called predeterminers. Many of these have to do with number or amount; a common predeterminer is all:
all the flights all flights all non-stop flights
The example noun phrase given in Fig. 12.5 illustrates some of the complexity that arises when these rules are combined.
12.3.4 The Verb Phrase
The verb phrase consists of the verb and a number of other constituents. In the simple rules we have built so far, these other constituents include NPs and PPs and combinations of the two:
predeterminers
sentential complements
Verb phrases can be significantly more complicated than this. Many other kinds of constituents, such as an entire embedded sentence, can follow the verb. These are called sentential complements:
You [VP [V said [S you had a two hundred sixty-six dollar fare]] [VP [V Tell] [NP me] [S how to get from the airport to downtown]] I [VP [V think [S I would like to take the nine thirty flight]]
12.3 • SOME GRAMMAR RULES FOR ENGLISH 241
the last flight to arrive in Boston
I need to have dinner served
Which is the aircraft used by this flight?
VP → VP → VP → VP →
Verb disappear
Verb NP prefer a morning flight
Verb NP PP leave Boston in the morning Verb PP leaving on Thursday

242
CHAPTER 12 • CONSTITUENCY GRAMMARS
   PreDet
all Det the
NP
Nom
Nom
Nom
PP
to Tampa
GerundiveVP
leaving before 10
NP
      PP Nom Noun from Denver
Noun flights morning
Nom
  Figure 12.5
 transitive intransitive
VP → Verb S
Similarly, another potential constituent of the VP is another VP. This is often the
case for verbs like want, would like, try, intend, need: I want [VP to fly from Milwaukee to Orlando]
Hi, I want [VP to arrange three flights]
While a verb phrase can have many possible kinds of constituents, not every verb is compatible with every verb phrase. For example, the verb want can be used either with an NP complement (I want a flight . . . ) or with an infinitive VP comple- ment (I want to fly to . . . ). By contrast, a verb like find cannot take this sort of VP complement (* I found to fly to Dallas).
This idea that verbs are compatible with different kinds of complements is a very old one; traditional grammar distinguishes between transitive verbs like find, which take a direct object NP (I found a flight), and intransitive verbs like disappear, which do not (*I disappeared a flight).
Where traditional grammars subcategorize verbs into these two categories (tran- sitive and intransitive), modern grammars distinguish as many as 100 subcategories. We say that a verb like find subcategorizes for an NP, and a verb like want sub- categorizes for either an NP or a non-finite VP. We also call these constituents the complements of the verb (hence our use of the term sentential complement above). So we say that want can take a VP complement. These possible sets of complements are called the subcategorization frame for the verb. Another way of talking about the relation between the verb and these other constituents is to think of the verb as a logical predicate and the constituents as logical arguments of the predicate. So we can think of such predicate-argument relations as FIND(I, A FLIGHT) or WANT(I, TO FLY). We talk more about this view of verbs and arguments in Chapter 15 when we talk about predicate calculus representations of verb semantics. Subcategorization frames for a set of example verbs are given in Fig. 12.6.
subcategorize
subcategorizes for
complements
subcategorization frame
A parse tree for “all the morning flights from Denver to Tampa leaving before 10”. Here’s a rule for these:

   Frame
Verb
Example
   0/
NP
NP NP PPfrom PPto
eat, sleep
prefer, find, leave show, give
fly, travel
  NP PPwith VPto
S
help, load
prefer, want, need mean
I ate
Find [NP the flight from Pittsburgh to Boston]
Show [NP me] [NP airlines with flights from Pittsburgh] I would like to fly [PP from Boston] [PP to Philadelphia]
 Can you help [NP me] [PP with a flight]
I would prefer [VPto to go by United Airlines] Does this mean [S AA has a hub in Boston]
   Figure 12.6
 conjunctions coordinate
12.3 • SOME GRAMMAR RULES FOR ENGLISH 243
Subcategorization frames for a set of example verbs.
We can capture the association between verbs and their complements by making separate subtypes of the class Verb (e.g., Verb-with-NP-complement, Verb-with-Inf- VP-complement, Verb-with-S-complement, and so on):
Verb-with-NP-complement → find| leave| repeat| ... Verb-with-S-complement → think| believe| say| ...
Verb-with-Inf-VP-complement → want| try| need| ...
Each VP rule could then be modified to require the appropriate verb subtype:
VP → Verb-with-no-complement disappear
VP → Verb-with-NP-comp NP prefer a morning flight VP → Verb-with-S-comp S said there were two flights
A problem with this approach is the significant increase in the number of rules and the associated loss of generality.
12.3.5 Coordination
The major phrase types discussed here can be conjoined with conjunctions like and, or, and but to form larger constructions of the same type. For example, a coordinate noun phrase can consist of two other noun phrases separated by a conjunction:
Please repeat [NP [NP the flights] and [NP the costs]]
I need to know [NP [NP the aircraft] and [NP the flight number]]
Here’s a rule that allows these structures:
NP → NPandNP
Note that the ability to form coordinate phrases through conjunctions is often used as a test for constituency. Consider the following examples, which differ from the ones given above in that they lack the second determiner.
Please repeat the [Nom [Nom flights] and [Nom costs]]
I need to know the [Nom [Nom aircraft] and [Nom flight number]]
The fact that these phrases can be conjoined is evidence for the presence of the underlying Nominal constituent we have been making use of. Here’s a rule for this:
Nominal → NominalandNominal
The following examples illustrate conjunctions involving VPs and Ss.

244
CHAPTER 12 • CONSTITUENCY GRAMMARS
metarules
What flights do you have [VP [VP leaving Denver] and [VP arriving in San Francisco]]
[S [S I’m interested in a flight from Dallas to Washington] and [S I’m also interested in going to Baltimore]]
The rules for VP and S conjunctions mirror the NP one given above. VP → VPandVP
S → SandS
Since all the major phrase types can be conjoined in this fashion, it is also possible to represent this conjunction fact more generally; a number of grammar formalisms such as GPSG (Gazdar et al., 1985) do this using metarules like:
X → XandX
This metarule states that any non-terminal can be conjoined with the same non- terminal to yield a constituent of the same type; the variable X must be designated as a variable that stands for any non-terminal rather than a non-terminal itself.
12.4 Treebanks
treebank
Penn Treebank
Sufficiently robust grammars consisting of context-free grammar rules can be used to assign a parse tree to any sentence. This means that it is possible to build a corpus where every sentence in the collection is paired with a corresponding parse tree. Such a syntactically annotated corpus is called a treebank. Treebanks play an important role in parsing, as we discuss in Chapter 13, as well as in linguistic investigations of syntactic phenomena.
A wide variety of treebanks have been created, generally through the use of parsers (of the sort described in the next few chapters) to automatically parse each sentence, followed by the use of humans (linguists) to hand-correct the parses. The Penn Treebank project (whose POS tagset we introduced in Chapter 8) has pro- duced treebanks from the Brown, Switchboard, ATIS, and Wall Street Journal cor- pora of English, as well as treebanks in Arabic and Chinese. A number of treebanks use the dependency representation we will introduce in Chapter 14, including many that are part of the Universal Dependencies project (Nivre et al., 2016b).
12.4.1 Example: The Penn Treebank Project
Figure 12.7 shows sentences from the Brown and ATIS portions of the Penn Tree- bank.1 Note the formatting differences for the part-of-speech tags; such small dif- ferences are common and must be dealt with in processing treebanks. The Penn Treebank part-of-speech tagset was defined in Chapter 8. The use of LISP-style parenthesized notation for trees is extremely common and resembles the bracketed notation we saw earlier in (12.1). For those who are not familiar with it we show a standard node-and-line tree representation in Fig. 12.8.
Figure 12.9 shows a tree from the Wall Street Journal. This tree shows an- other feature of the Penn Treebanks: the use of traces (-NONE- nodes) to mark
1 The Penn Treebank project released treebanks in multiple languages and in various stages; for exam- ple, there were Treebank I (Marcus et al., 1993), Treebank II (Marcus et al., 1994), and Treebank III releases of English treebanks. We use Treebank III for our examples.
traces
 
   ((S
   (NP-SBJ (DT That)
     (JJ cold) (, ,)
     (JJ empty) (NN sky) )
   (VP (VBD was)
     (ADJP-PRD (JJ full)
       (PP (IN of)
         (NP (NN fire)
           (CC and)
           (NN light) ))))
(. .) ))
Figure 12.7
ATIS corpora.
12.4 • TREEBANKS 245
((S
   (NP-SBJ The/DT flight/NN )
   (VP should/MD
     (VP arrive/VB
       (PP-TMP at/IN
         (NP eleven/CD a.m/RB ))
       (NP-TMP tomorrow/NN )))))
(a) (b)
Parsed sentences from the LDC Treebank3 version of the (a) Brown and (b)
     S NP-SBJ VP
DT JJ , JJ NN VBD ADJP-PRD That cold , empty sky was JJ PP
NP
of NN CC NN
fire and light
.
.
  full IN
 Figure 12.8
 syntactic movement
long-distance dependencies or syntactic movement. For example, quotations often follow a quotative verb like say. But in this example, the quotation “We would have to wait until we have collected on those assets” precedes the words he said. An empty S containing only the node -NONE- marks the position after said where the quotation sentence often occurs. This empty node is marked (in Treebanks II and III) with the index 2, as is the quotation S at the beginning of the sentence. Such co-indexing may make it easier for some parsers to recover the fact that this fronted or topicalized quotation is the complement of the verb said. A similar -NONE- node marks the fact that there is no syntactic subject right before the verb to wait; instead, the subject is the earlier NP We. Again, they are both co-indexed with the index 1.
The Penn Treebank II and Treebank III releases added further information to make it easier to recover the relationships between predicates and arguments. Cer- tain phrases were marked with tags indicating the grammatical function of the phrase (as surface subject, logical topic, cleft, non-VP predicates) its presence in particular text categories (headlines, titles), and its semantic function (temporal phrases, lo-
The tree corresponding to the Brown corpus sentence in the previous figure.

246 CHAPTER 12 • CONSTITUENCY GRAMMARS
   ( (S (‘‘ ‘‘)
    (S-TPC-2
      (NP-SBJ-1 (PRP We) )
      (VP (MD would)
        (VP (VB have)
          (S
            (NP-SBJ (-NONE- *-1) )
            (VP (TO to)
              (VP (VB wait)
                (SBAR-TMP (IN until)
                  (S
                    (NP-SBJ (PRP we) )
                    (VP (VBP have)
                      (VP (VBN collected)
                        (PP-CLR (IN on)
                          (NP (DT those)(NNS assets)))))))))))))
    (, ,) (’’ ’’)
    (NP-SBJ (PRP he) )
    (VP (VBD said)
      (S (-NONE- *T*-2) ))
    (. .) ))
 Figure 12.9
 A sentence from the Wall Street Journal portion of the LDC Penn Treebank. Note the use of the empty -NONE- nodes.
cations) (Marcus et al. 1994, Bies et al. 1995). Figure 12.9 shows examples of the -SBJ (surface subject) and -TMP (temporal phrase) tags. Figure 12.8 shows in addi- tion the -PRD tag, which is used for predicates that are not VPs (the one in Fig. 12.8 is an ADJP). We’ll return to the topic of grammatical function when we consider dependency grammars and parsing in Chapter 14.
12.4.2 Treebanks as Grammars
The sentences in a treebank implicitly constitute a grammar of the language repre- sented by the corpus being annotated. For example, from the three parsed sentences in Fig. 12.7 and Fig. 12.9, we can extract each of the CFG rules in them. For sim- plicity, let’s strip off the rule suffixes (-SBJ and so on). The resulting grammar is shown in Fig. 12.10.
The grammar used to parse the Penn Treebank is relatively flat, resulting in very many and very long rules. For example, among the approximately 4,500 different rules for expanding VPs are separate rules for PP sequences of any length and every possible arrangement of verb arguments:
VP → VBD PP
VP → VBD PP
VP → VBD PP
VP → VBD PP
VP → VB ADVP PP VP → VB PP ADVP VP → ADVP VB PP
as well as even longer rules, such as
VP → VBP PP PP PP PP PP ADVP PP
PP
PP PP
PP PP PP

S→ NPVP.
S→ NPVP
S→ “S”,NPVP. S → -NONE- NP→ DTNN NP→ DTNNS NP→ NNCCNN NP→ CDRB NP→DTJJ,JJNN NP→PRP
NP → -NONE- VP→MDVP
VP → VBD ADJP VP→VBDS VP→VBNPP VP→VBS VP→VBSBAR VP→VBPVP VP→VBNPP VP→TOVP SBAR→INS ADJP→JJPP PP→INNP
12.4 • TREEBANKS 247
 Grammar
Lexicon
  PRP→we| he
DT → the | that | those
JJ → cold | empty | full
NN → sky | fire | light | flight | tomorrow NNS → assets
CC→and
IN→of| at| until| on
CD → eleven
RB → a.m.
VB → arrive | have | wait
VBD → was | said
VBP → have
VBN → collected
MD → should | would
TO→to
                        Figure 12.10
                          A sample of the CFG grammar rules and lexical entries that would be ex- tracted from the three treebank sentences in Fig. 12.7 and Fig. 12.9.
which comes from the VP marked in italics:
This mostly happens because we go from football in the fall to lifting in the
winter to football again in the spring. Some of the many thousands of NP rules include
NP → DT JJ NN
NP → DT JJ NNS
NP → DT JJ NN NN
NP → DT JJ JJ NN
NP → DT JJ CD NNS
NP → RB DT JJ NN NN
NP → RB DT JJ JJ NNS
NP → DT JJ JJ NNP NNS
NP → DT NNP NNP NNP NNP JJ NN
NP → DT JJ NNP CC JJ JJ NN NNS
NP → RB DT JJS NN NN SBAR
NP → DT VBG JJ NNP NNP CC NNP
NP → DT JJ NNS , NNS CC NN NNS NN NP → DT JJ JJ VBG NN NNP NNP FW NNP NP → NP JJ , JJ ‘‘ SBAR ’’ NNS
The last two of those rules, for example, come from the following two noun phrases:
[DT The] [JJ state-owned] [JJ industrial] [VBG holding] [NN company] [NNP Instituto] [NNP Nacional] [FW de] [NNP Industria]
[NP Shearson’s] [JJ easy-to-film], [JJ black-and-white] “[SBAR Where We Stand]” [NNS commercials]
Viewed as a large grammar in this way, the Penn Treebank III Wall Street Journal corpus, which contains about 1 million words, also has about 1 million non-lexical rule tokens, consisting of about 17,500 distinct rule types.

248 CHAPTER 12 • CONSTITUENCY GRAMMARS
 S(dumped)
VP(dumped) NNS(workers) VBD(dumped) NP(sacks)
workers dumped NNS(sacks) sacks
NP(workers)
PP(into)
P NP(bin)
into DT(a) NN(bin) a bin
Figure 12.11
 A lexicalized tree from Collins (1999).
Various facts about the treebank grammars, such as their large numbers of flat rules, pose problems for probabilistic parsing algorithms. For this reason, it is com- mon to make various modifications to a grammar extracted from a treebank. We discuss these further in Appendix C.
12.4.3 Heads and Head Finding
We suggested informally earlier that syntactic constituents could be associated with a lexical head; N is the head of an NP, V is the head of a VP. This idea of a head for each constituent dates back to Bloomfield (1914), and is central to the dependency grammars and dependency parsing we’ll introduce in Chapter 14. Heads are also important in probabilistic parsing (Appendix C) and in constituent-based grammar formalisms like Head-Driven Phrase Structure Grammar (Pollard and Sag, 1994)..
In one simple model of lexical heads, each context-free rule is associated with a head (Charniak 1997, Collins 1999). The head is the word in the phrase that is grammatically the most important. Heads are passed up the parse tree; thus, each non-terminal in a parse tree is annotated with a single word, which is its lexical head. Figure 12.11 shows an example of such a tree from Collins (1999), in which each non-terminal is annotated with its head.
For the generation of such a tree, each CFG rule must be augmented to identify one right-side constituent to be the head child. The headword for a node is then set to the headword of its head child. Choosing these head children is simple for textbook examples (NN is the head of NP) but is complicated and indeed controversial for most phrases. (Should the complementizer to or the verb be the head of an infinite verb phrase?) Modern linguistic theories of syntax generally include a component that defines heads (see, e.g., (Pollard and Sag, 1994)).
An alternative approach to finding a head is used in most practical computational systems. Instead of specifying head rules in the grammar itself, heads are identified dynamically in the context of trees for specific sentences. In other words, once a sentence is parsed, the resulting tree is walked to decorate each node with the appropriate head. Most current systems rely on a simple set of handwritten rules, such as a practical one for Penn Treebank grammars given in Collins (1999) but developed originally by Magerman (1995). For example, the rule for finding the head of an NP is as follows (Collins, 1999, p. 238):
• IfthelastwordistaggedPOS,returnlast-word.

12.5 • GRAMMAR EQUIVALENCE AND NORMAL FORM 249
• ElsesearchfromrighttoleftforthefirstchildwhichisanNN,NNP,NNPS,NX,POS, or JJR.
• ElsesearchfromlefttorightforthefirstchildwhichisanNP.
• Elsesearchfromrighttoleftforthefirstchildwhichisa$,ADJP,orPRN.
• ElsesearchfromrighttoleftforthefirstchildwhichisaCD.
• ElsesearchfromrighttoleftforthefirstchildwhichisaJJ,JJS,RBorQP.
• Elsereturnthelastword
Selected other rules from this set are shown in Fig. 12.12. For example, for VP rules of the form VP → Y1 ··· Yn, the algorithm would start from the left of Y1 ··· Yn looking for the first Yi of type TO; if no TOs are found, it would search for the first Yi of type VBD; if no VBDs are found, it would search for a VBN, and so on. See Collins (1999) for more details.
 Parent
Figure 12.12
Direction
Left
Right Left Right Left Left Left Left
Priority List
   ADJP
ADVP PRN PRT QP
S SBAR VP
NNS QP NN $ ADVP JJ VBN VBG ADJP JJR NP JJS DT FW RBR RBS SBAR RB
RB RBR RBS FW ADVP TO CD JJR JJ IN NP JJS NN
RP
$ IN NNS NN JJ RB DT CD NCD QP JJR JJS
TO IN VP S SBAR ADJP UCP NP
WHNP WHPP WHADVP WHADJP IN DT S SQ SINV SBAR FRAG TO VBD VBN MD VBZ VB VBG VBP VP ADJP NN NNS NP
     Some head rules from Collins (1999). The head rules are also called a head percolation table.
12.5 Grammar Equivalence and Normal Form
 normal form
Chomsky normal form
binary branching
A formal language is defined as a (possibly infinite) set of strings of words. This suggests that we could ask if two grammars are equivalent by asking if they gener- ate the same set of strings. In fact, it is possible to have two distinct context-free grammars generate the same language.
We usually distinguish two kinds of grammar equivalence: weak equivalence and strong equivalence. Two grammars are strongly equivalent if they generate the same set of strings and if they assign the same phrase structure to each sentence (allowing merely for renaming of the non-terminal symbols). Two grammars are weakly equivalent if they generate the same set of strings but do not assign the same phrase structure to each sentence.
It is sometimes useful to have a normal form for grammars, in which each of the productions takes a particular form. For example, a context-free grammar is in Chomsky normal form (CNF) (Chomsky, 1963) if it is ε-free and if in addition each production is either of the form A → B C or A → a. That is, the right-hand side of each rule either has two non-terminal symbols or one terminal symbol. Chomsky normal form grammars are binary branching, that is they have binary trees (down to the prelexical nodes). We make use of this binary branching property in the CKY parsing algorithm in Chapter 13.
Any context-free grammar can be converted into a weakly equivalent Chomsky normal form grammar. For example, a rule of the form
A→BCD

250
CHAPTER 12 • CONSTITUENCY GRAMMARS
can be converted into the following two CNF rules (Exercise 12.8 asks the reader to
Chomsky- adjunction
formulate the complete algorithm):
A→BX X→CD
Sometimes using binary branching can actually produce smaller grammars. For example, the sentences that might be characterized as
     VP -> VBD NP PP*
are represented in the Penn Treebank by this series of rules:
VP → VBD NP PP
VP → VBD NP PP PP
VP → VBD NP PP PP PP
VP → VBD NP PP PP PP PP ...
but could also be generated by the following two-rule grammar:
VP → VBD NP PP VP → VP PP
The generation of a symbol A with a potentially infinite sequence of symbols B with a rule of the form A → A B is known as Chomsky-adjunction.
12.6 Lexicalized Grammars
categorial grammar
combinatory categorial grammar
The approach to grammar presented thus far emphasizes phrase-structure rules while minimizing the role of the lexicon. However, as we saw in the discussions of agreement, subcategorization, and long-distance dependencies, this approach leads to solutions that are cumbersome at best, yielding grammars that are redundant, hard to manage, and brittle. To overcome these issues, numerous alternative ap- proaches have been developed that all share the common theme of making bet- ter use of the lexicon. Among the more computationally relevant approaches are Lexical-Functional Grammar (LFG) (Bresnan, 1982), Head-Driven Phrase Structure Grammar (HPSG) (Pollard and Sag, 1994), Tree-Adjoining Grammar (TAG) (Joshi, 1985), and Combinatory Categorial Grammar (CCG). These approaches differ with respect to how lexicalized they are — the degree to which they rely on the lexicon as opposed to phrase structure rules to capture facts about the language.
The following section provides an introduction to CCG, a heavily lexicalized approach motivated by both syntactic and semantic considerations, which we will return to in Chapter 15. Chapter 14 discusses dependency grammars, an approach that eliminates phrase-structure rules entirely.
12.6.1 Combinatory Categorial Grammar
In this section, we provide an overview of categorial grammar (Ajdukiewicz 1935, Bar-Hillel 1953), an early lexicalized grammar model, as well as an important mod- ern extension, combinatory categorial grammar, or CCG (Steedman 1996, Steed- man 1989, Steedman 2000).

12.6 • LEXICALIZED GRAMMARS 251
The categorial approach consists of three major elements: a set of categories, a lexicon that associates words with categories, and a set of rules that govern how categories combine in context.
Categories
Categories are either atomic elements or single-argument functions that return a cat- egory as a value when provided with a desired category as argument. More formally, we can define C, a set of categories for a grammar as follows:
• A ⊆ C, where A is a given set of atomic elements • (X/Y),(X\Y)∈C,ifX,Y∈C
The slash notation shown here is used to define the functions in the grammar. It specifies the type of the expected argument, the direction it is expected be found, and the type of the result. Thus, (X/Y) is a function that seeks a constituent of type Y to its right and returns a value of X; (X\Y) is the same except it seeks its argument to the left.
The set of atomic categories is typically very small and includes familiar el- ements such as sentences and noun phrases. Functional categories include verb phrases and complex noun phrases among others.
The Lexicon
The lexicon in a categorial approach consists of assignments of categories to words. These assignments can either be to atomic or functional categories, and due to lexical ambiguity words can be assigned to multiple categories. Consider the following sample lexical entries.
flight : N Miami : NP cancel: (S\NP)/NP
Nouns and proper nouns like flight and Miami are assigned to atomic categories, reflecting their typical role as arguments to functions. On the other hand, a transitive verb like cancel is assigned the category (S\NP)/NP: a function that seeks an NP on its right and returns as its value a function with the type (S\NP). This function can, in turn, combine with an NP on the left, yielding an S as the result. This captures the kind of subcategorization information discussed in Section 12.3.4, however here the information has a rich, computationally useful, internal structure.
Ditransitive verbs like give, which expect two arguments after the verb, would have the category ((S\NP)/NP)/NP: a function that combines with an NP on its right to yield yet another function corresponding to the transitive verb (S\NP)/NP category such as the one given above for cancel.
Rules
The rules of a categorial grammar specify how functions and their arguments com- bine. The following two rule templates constitute the basis for all categorial gram- mars.
X/Y Y ⇒ X (12.4) Y X\Y ⇒ X (12.5)

252 CHAPTER 12 • CONSTITUENCY GRAMMARS
The first rule applies a function to its argument on the right, while the second looks to the left for its argument. We’ll refer to the first as forward function appli- cation, and the second as backward function application. The result of applying either of these rules is the category specified as the value of the function being ap- plied.
Given these rules and a simple lexicon, let’s consider an analysis of the sentence United serves Miami. Assume that serves is a transitive verb with the category (S\NP)/NP and that United and Miami are both simple NPs. Using both forward and backward function application, the derivation would proceed as follows:
United serves Miami
NP (S\NP)/NP NP>
S\NP < S
Categorial grammar derivations are illustrated growing down from the words, rule applications are illustrated with a horizontal line that spans the elements in- volved, with the type of the operation indicated at the right end of the line. In this example, there are two function applications: one forward function application indi- cated by the > that applies the verb serves to the NP on its right, and one backward function application indicated by the < that applies the result of the first to the NP United on its left.
With the addition of another rule, the categorial approach provides a straight- forward way to implement the coordination metarule described earlier on page 244. Recall that English permits the coordination of two constituents of the same type, resulting in a new constituent of the same type. The following rule provides the mechanism to handle such examples.
X CONJ X ⇒ X (12.6)
This rule states that when two constituents of the same category are separated by a constituent of type CONJ they can be combined into a single larger constituent of the same type. The following derivation illustrates the use of this rule.
     We flew to Geneva and drove to
Chamonix
<Φ>
       NP (S\NP)/PP PP/NP PP
S\NP
NP > CONJ (S\NP)/PP PP/NP
NP > >
  >
PP S<
   S\NP
S\NP
 Here the two S\NP constituents are combined via the conjunction operator <Φ> to form a larger constituent of the same type, which can then be combined with the subject NP via backward function application.
These examples illustrate the lexical nature of the categorial grammar approach. The grammatical facts about a language are largely encoded in the lexicon, while the rules of the grammar are boiled down to a set of three rules. Unfortunately, the basic categorial approach does not give us any more expressive power than we had with traditional CFG rules; it just moves information from the grammar to the lexicon. To move beyond these limitations CCG includes operations that operate over functions.

forward composition
backward composition
type raising
The first rule, called forward composition, can be applied to adjacent con- stituents where the first is a function seeking an argument of type Y to its right, and the second is a function that provides Y as a result. This rule allows us to compose these two functions into a single one with the type of the first constituent and the argument of the second. Although the notation is a little awkward, the second rule, backward composition is the same, except that we’re looking to the left instead of to the right for the relevant arguments. Both kinds of composition are signalled by a B in CCG diagrams, accompanied by a < or > to indicate the direction.
The next operator is type raising. Type raising elevates simple categories to the status of functions. More specifically, type raising takes a category and converts it to function that seeks as an argument a function that takes the original category as its argument. The following schema show two versions of type raising: one for arguments to the right, and one for the left.
X ⇒ T/(T\X) (12.9) X ⇒ T\(T/X) (12.10)
The category T in these rules can correspond to any of the atomic or functional categories already present in the grammar.
A particularly useful example of type raising transforms a simple NP argument in subject position to a function that can compose with a following VP. To see how this works, let’s revisit our earlier example of United serves Miami. Instead of clas- sifying United as an NP which can serve as an argument to the function attached to serve, we can use type raising to reinvent it as a function in its own right as follows.
NP ⇒ S/(S\NP)
Combining this type-raised constituent with the forward composition rule (12.7)
permits the following alternative to our previous derivation.
United serves Miami
12.6 • LEXICALIZED GRAMMARS The first pair of operators permit us to compose adjacent functions.
X/Y Y/Z ⇒ X/Z Y\Z X\Y ⇒ X\Z
253
(12.7) (12.8)
   NP S/(S\NP)
(S\NP)/NP NP
>T S/NP
 >B
>
By type raising United to S/(S\NP), we can compose it with the transitive verb serves to yield the (S/NP) function needed to complete the derivation.
There are several interesting things to note about this derivation. First, it pro- vides a left-to-right, word-by-word derivation that more closely mirrors the way humans process language. This makes CCG a particularly apt framework for psy- cholinguistic studies. Second, this derivation involves the use of an intermediate unit of analysis, United serves, that does not correspond to a traditional constituent in English. This ability to make use of such non-constituent elements provides CCG with the ability to handle the coordination of phrases that are not proper constituents, as in the following example.
(12.11) We flew IcelandAir to Geneva and SwissAir to London.
 S
 
254
CHAPTER 12 • CONSTITUENCY GRAMMARS
Here, the segments that are being coordinated are IcelandAir to Geneva and SwissAir to London, phrases that would not normally be considered constituents, as can be seen in the following standard derivation for the verb phrase flew IcelandAir to Geneva.
flew IcelandAir to Geneva
(VP/PP)/NP NP PP/NP NP VP/PP > PP >
>
to Geneva, and hence no opportunity to make use of the <Φ> operator. Note that complex CCG categories can get a little cumbersome, so we’ll use VP as a shorthand for (S\NP) in this and the following derivations.
The following alternative derivation provides the required element through the use of both backward type raising (12.10) and backward function composition (12.8).
      VP
In this derivation, there is no single constituent that corresponds to IcelandAir
 flew
(V P/PP)/NP
IcelandAir to Geneva
    NP PP/NP NP <T >
  (V P/PP)\((V P/PP)/N P) PP
V P\(V P/PP)
  V P\((V P/PP)/N P)
<T <B <
 flew
(V P/PP)/NP
VP
Applying the same analysis to SwissAir to London satisfies the requirements
for the <Φ> operator, yielding the following derivation for our original example (12.11).
IcelandAir to Geneva and SwissAir to London
        NP PP/NP NP CONJ NP PP/NP NP <T > <T >
    (V P/PP)\((V P/PP)/N P) PP
V P\(V P/PP)
V P\((V P/PP)/N P) VP
<T V P\((V P/PP)/N P) <
(V P/PP)\((V P/PP)/N P)
PP
V P\(V P/PP)
<T V P\((V P/PP)/N P) <
    <Φ> <
  Finally, let’s examine how these advanced operators can be used to handle long- distance dependencies (also referred to as syntactic movement or extraction). As mentioned in Section 12.3.1, long-distance dependencies arise from many English constructions including wh-questions, relative clauses, and topicalization. What these constructions have in common is a constituent that appears somewhere dis- tant from its usual, or expected, location. Consider the following relative clause as an example.
the flight that United diverted
Here, divert is a transitive verb that expects two NP arguments, a subject NP to its left and a direct object NP to its right; its category is therefore (S\NP)/NP. However, in this example the direct object the flight has been “moved” to the beginning of the clause, while the subject United remains in its normal position. What is needed is a way to incorporate the subject argument, while dealing with the fact that the flight is not in its expected location.
The following derivation accomplishes this, again through the combined use of type raising and function composition.

12.7 • SUMMARY 255 the flight that United diverted
     NP/N NP
N
(NP\NP)/(S/NP) NP (S\NP)/NP > >T
  S/(S\NP) S/NP
NP\NP NP
>B > <
   As we saw with our earlier examples, the first step of this derivation is type raising United to the category S/(S\NP) allowing it to combine with diverted via forward composition. The result of this composition is S/NP which preserves the fact that we are still looking for an NP to fill the missing direct object. The second critical piece is the lexical category assigned to the word that: (NP\NP)/(S/NP). This function seeks a verb phrase missing an argument to its right, and transforms it into an NP seeking a missing element to its left, precisely where we find the flight.
CCGBank
As with phrase-structure approaches, treebanks play an important role in CCG- based approaches to parsing. CCGBank (Hockenmaier and Steedman, 2007) is the largest and most widely used CCG treebank. It was created by automatically trans- lating phrase-structure trees from the Penn Treebank via a rule-based approach. The method produced successful translations of over 99% of the trees in the Penn Tree- bank resulting in 48,934 sentences paired with CCG derivations. It also provides a lexicon of 44,000 words with over 1200 categories. Appendix C will discuss how these resources can be used to train CCG parsers.
12.7 Summary
This chapter has introduced a number of fundamental concepts in syntax through the use of context-free grammars.
• In many languages, groups of consecutive words act as a group or a con- stituent, which can be modeled by context-free grammars (which are also known as phrase-structure grammars).
• A context-free grammar consists of a set of rules or productions, expressed over a set of non-terminal symbols and a set of terminal symbols. Formally, a particular context-free language is the set of strings that can be derived from a particular context-free grammar.
• A generative grammar is a traditional name in linguistics for a formal lan- guage that is used to model the grammar of a natural language.
• There are many sentence-level grammatical constructions in English; declar- ative, imperative, yes-no question, and wh-question are four common types; these can be modeled with context-free rules.
• An English noun phrase can have determiners, numbers, quantifiers, and adjective phrases preceding the head noun, which can be followed by a num- ber of postmodifiers; gerundive and infinitive VPs are common possibilities.
• Subjects in English agree with the main verb in person and number.

256 CHAPTER 12 • CONSTITUENCY GRAMMARS
•
• •
• •
Verbs can be subcategorized by the types of complements they expect. Sim- ple subcategories are transitive and intransitive; most grammars include many more categories than these. TreebanksofparsedsentencesexistformanygenresofEnglishandformany languages. Treebanks can be searched with tree-search tools.
Any context-free grammar can be converted to Chomsky normal form, in which the right-hand side of each rule has either two non-terminals or a single terminal.
Lexicalized grammars place more emphasis on the structure of the lexicon, lessening the burden on pure phrase-structure rules.
Combinatorial categorial grammar (CCG) is an important computationally relevant lexicalized approach.
Bibliographical and Historical Notes
According to Percival (1976), the idea of breaking up a sentence into a hierarchy of constituents appeared in the Vo ̈lkerpsychologie of the groundbreaking psychologist Wilhelm Wundt (Wundt, 1900):
...den sprachlichen Ausdruck fu ̈r die willku ̈rliche Gliederung einer Ge- sammtvorstellung in ihre in logische Beziehung zueinander gesetzten Bestandteile
[the linguistic expression for the arbitrary division of a total idea into its constituent parts placed in logical relations to one another]
Wundt’s idea of constituency was taken up into linguistics by Leonard Bloom- field in his early book An Introduction to the Study of Language (Bloomfield, 1914). By the time of his later book, Language (Bloomfield, 1933), what was then called “immediate-constituent analysis” was a well-established method of syntactic study in the United States. By contrast, traditional European grammar, dating from the Classical period, defined relations between words rather than constituents, and Eu- ropean syntacticians retained this emphasis on such dependency grammars, the sub- ject of Chapter 14.
American Structuralism saw a number of specific definitions of the immediate constituent, couched in terms of their search for a “discovery procedure”: a method- ological algorithm for describing the syntax of a language. In general, these attempt to capture the intuition that “The primary criterion of the immediate constituent is the degree in which combinations behave as simple units” (Bazell, 1966, p. 284). The most well known of the specific definitions is Harris’ idea of distributional similarity to individual units, with the substitutability test. Essentially, the method proceeded by breaking up a construction into constituents by attempting to substitute simple structures for possible constituents—if a substitution of a simple form, say, man, was substitutable in a construction for a more complex set (like intense young man), then the form intense young man was probably a constituent. Harris’s test was the beginning of the intuition that a constituent is a kind of equivalence class.
The first formalization of this idea of hierarchical constituency was the phrase- structure grammar defined in Chomsky (1956) and further expanded upon (and argued against) in Chomsky (1957) and Chomsky (1975). From this time on, most generative linguistic theories were based at least in part on context-free grammars or

X-bar schemata
EXERCISES 257
generalizations of them (such as Head-Driven Phrase Structure Grammar (Pollard and Sag, 1994), Lexical-Functional Grammar (Bresnan, 1982), the Minimalist Pro- gram (Chomsky, 1995), and Construction Grammar (Kay and Fillmore, 1999), inter alia); many of these theories used schematic context-free templates known as X-bar schemata, which also relied on the notion of syntactic head.
Shortly after Chomsky’s initial work, the context-free grammar was reinvented by Backus (1959) and independently by Naur et al. (1960) in their descriptions of the ALGOL programming language; Backus (1996) noted that he was influenced by the productions of Emil Post and that Naur’s work was independent of his (Backus’) own. After this early work, a great number of computational models of natural language processing were based on context-free grammars because of the early de- velopment of efficient algorithms to parse these grammars (see Chapter 13).
Thre are various classes of extensions to CFGs, many designed to handle long- distance dependencies in the syntax. (Other grammars instead treat long-distance- dependent items as being related semantically rather than syntactically (Kay and Fillmore 1999, Culicover and Jackendoff 2005).
One extended formalism is Tree Adjoining Grammar (TAG) (Joshi, 1985). The primary TAG data structure is the tree, rather than the rule. Trees come in two kinds: initial trees and auxiliary trees. Initial trees might, for example, represent simple sentential structures, and auxiliary trees add recursion into a tree. Trees are combined by two operations called substitution and adjunction. The adjunction operation handles long-distance dependencies. See Joshi (1985) for more details. Tree Adjoining Grammar is a member of the family of mildly context-sensitive languages.
We mentioned on page 245 another way of handling long-distance dependencies, based on the use of empty categories and co-indexing. The Penn Treebank uses this model, which draws (in various Treebank corpora) from the Extended Standard Theory and Minimalism (Radford, 1997).
Readers interested in the grammar of English should get one of the three large reference grammars of English: Huddleston and Pullum (2002), Biber et al. (1999), and Quirk et al. (1985).
There are many good introductory textbooks on syntax from different perspec- tives. Sag et al. (2003) is an introduction to syntax from a generative perspective, focusing on the use of phrase-structure rules, unification, and the type hierarchy in Head-Driven Phrase Structure Grammar. Van Valin, Jr. and La Polla (1997) is an introduction from a functional perspective, focusing on cross-linguistic data and on the functional motivation for syntactic structures.
generative functional
Exercises
12.1 Draw tree structures for the following ATIS phrases:
1. Dallas
2. from Denver
3. after five p.m.
4. arriving in Washington 5. early flights
6. all redeye flights
7. on Thursday
8. a one-way fare

258
CHAPTER 12
• CONSTITUENCY GRAMMARS
9. any delays in Denver
Draw tree structures for the following ATIS sentences:
1. Does American Airlines have a flight between five a.m. and six a.m.? 2. I would like to fly on American Airlines.
3. Please repeat that.
4. Does American 487 have a first-class section?
5. I need to fly between Philadelphia and Atlanta.
6. What is the fare from Atlanta to Denver?
7. Is there an American Airlines flight from Philadelphia to Dallas?
Assume a grammar that has many VP rules for different subcategorizations, as expressed in Section 12.3.4, and differently subcategorized verb rules like Verb-with-NP-complement. How would the rule for postnominal relative clauses (12.4) need to be modified if we wanted to deal properly with examples like the earliest flight that you have? Recall that in such examples the pronoun that is the object of the verb get. Your rules should allow this noun phrase but should correctly rule out the ungrammatical S *I get.
Does your solution to the previous problem correctly model the NP the earliest flight that I can get? How about the earliest flight that I think my mother wants me to book for her? Hint: this phenomenon is called long-distance dependency.
Write rules expressing the verbal subcategory of English auxiliaries; for ex- ample, you might have a rule verb-with-bare-stem-VP-complement → can.
NPs like Fortune’s office or my uncle’s marks are called possessive or genitive noun phrases. We can model possessive noun phrases by treating the sub-NP like Fortune’s or my uncle’s as a determiner of the following head noun. Write grammar rules for English possessives. You may treat ’s as if it were a separate word (i.e., as if there were always a space before ’s).
Page 238 discussed the need for a Wh-NP constituent. The simplest Wh-NP is one of the Wh-pronouns (who, whom, whose, which). The Wh-words what and which can be determiners: which four will you have?, what credit do you have with the Duke? Write rules for the different types of Wh-NPs.
Write an algorithm for converting an arbitrary context-free grammar into Chom- sky normal form.
possessive genitive
12.2
12.3
12.4
12.5 12.6
12.7
12.8

 CHAPTER
13 Constituency Parsing
One morning I shot an elephant in my pajamas. How he got into my pajamas I don’t know.
Groucho Marx, Animal Crackers, 1930
Syntactic parsing is the task of assigning a syntactic structure to a sentence. This chapter focuses on constituency structures, those assigned by context-free grammars of the kind described in Chapter 12. In the next chapter we’ll introduce dependency parses, an alternative kind of parse structure,
Parse trees can be used in applications such as grammar checking: sentence that cannot be parsed may have grammatical errors (or at least be hard to read). Parse trees can be an intermediate stage of representation for semantic analysis (as we show in Chapter 16) and thus play a role in applications like question answering. For example to answer the question
Which flights to Denver depart before the Seattle flight?
we’ll need to know that the questioner wants a list of flights going to Denver, not flights going to Seattle, and parse structure (knowing that to Denver modifies flights, and which flights to Denver is the subject of the depart) can help us.
We begin by discussing ambiguity and the problems it presents, and then give the Cocke-Kasami-Younger (CKY) algorithm (Kasami 1965, Younger 1967), the standard dynamic programming approach to syntactic parsing. We’ve already seen other dynamic programming algorithms like minimum edit distance (Chapter 2) and Viterbi (Chapter 8).
The vanilla CKY algorithm returns an efficient representation of the set of parse trees for a sentence, but doesn’t tell us which parse tree is the right one. For that, we need to augment CKY with scores for each possible constituent. We’ll see how to do this with neural span-based parsers. And we’ll introduce other methods like supertagging for parsing CCG, partial parsing methods, for use in situations in which a superficial syntactic analysis of an input may be sufficient, and the standard set of metrics for evaluating parser accuracy.
13.1 Ambiguity
structural ambiguity
Ambiguity is the most serious problem faced by syntactic parsers. Chapter 8 intro- duced the notions of part-of-speech ambiguity and part-of-speech disambigua- tion. Here, we introduce a new kind of ambiguity, called structural ambiguity, illustrated with a new toy grammar L1, shown in Figure 13.1, which adds a few rules to the L0 grammar from the last chapter.
Structural ambiguity occurs when the grammar can assign more than one parse to a sentence. Groucho Marx’s well-known line as Captain Spaulding in Animal Crackers is ambiguous because the phrase in my pajamas can be part of the NP

260 CHAPTER 13 • CONSTITUENCY PARSING
 Grammar
 S → NPVP
S → AuxNPVP
S → VP
NP → Pronoun
NP → Proper-Noun
NP → Det Nominal Nominal → Noun Nominal → Nominal Noun Nominal → Nominal PP VP → Verb
VP → VerbNP
VP → VerbNPPP
VP → VerbPP
VP → VPPP
PP → Preposition NP
Lexicon
 Det → that| this| the| a
Noun → book | flight | meal | money
Verb → book | include | prefer
Pronoun → I| she| me
Proper-Noun → Houston | NWA
Aux → does
Preposition → from | to | on | near | through
      Figure 13.1
   The L1 miniature English grammar and lexicon.
   SS
NP VP NP VP
  Pronoun Verb NP Pronoun I shot Det Nominal I
VP
NP
shot Det Nominal
an Noun elephant
PP
in my pajamas
 an Nominal Noun
elephant
PP
in my pajamas
Verb
  Figure 13.2
 Two parse trees for an ambiguous sentence. The parse on the left corresponds to the humorous reading in which the elephant is in the pajamas, the parse on the right corresponds to the reading in which Captain Spaulding did the shooting in his pajamas.
attachment ambiguity
coordination ambiguity
headed by elephant or a part of the verb phrase headed by shot. Figure 13.2 illus- trates these two analyses of Marx’s line using rules from L1.
Structural ambiguity, appropriately enough, comes in many forms. Two common kinds of ambiguity are attachment ambiguity and coordination ambiguity. A sentence has an attachment ambiguity if a particular constituent can be attached to the parse tree at more than one place. The Groucho Marx sentence is an example of PP-attachment ambiguity. Various kinds of adverbial phrases are also subject to this kind of ambiguity. For instance, in the following example the gerundive-VP flying to Paris can be part of a gerundive sentence whose subject is the Eiffel Tower or it can be an adjunct modifying the VP headed by saw:
(13.1) We saw the Eiffel Tower flying to Paris.
In coordination ambiguity phrases can be conjoined by a conjunction like and.

syntactic disambiguation
13.2 • CKY PARSING: A DYNAMIC PROGRAMMING APPROACH 261
For example, the phrase old men and women can be bracketed as [old [men and women]], referring to old men and old women, or as [old men] and [women], in which case it is only the men who are old. These ambiguities combine in complex ways in real sentences, like the following news sentence from the Brown corpus:
(13.2) President Kennedy today pushed aside other White House business to devote all his time and attention to working on the Berlin crisis address he will deliver tomorrow night to the American people over nationwide television and radio.
This sentence has a number of ambiguities, although since they are semantically unreasonable, it requires a careful reading to see them. The last noun phrase could be parsed [nationwide [television and radio]] or [[nationwide television] and radio]. The direct object of pushed aside should be other White House business but could also be the bizarre phrase [other White House business to devote all his time and attention to working] (i.e., a structure like Kennedy affirmed [his intention to propose a new budget to address the deficit]). Then the phrase on the Berlin crisis address he will deliver tomorrow night to the American people could be an adjunct modifying the verb pushed. A PP like over nationwide television and radio could be attached to any of the higher VPs or NPs (e.g., it could modify people or night).
The fact that there are many grammatically correct but semantically unreason- able parses for naturally occurring sentences is an irksome problem that affects all parsers. Fortunately, the CKY algorithm below is designed to efficiently handle structural ambiguities. And as we’ll see in the following section, we can augment CKY with neural methods to choose a single correct parse by syntactic disambigua- tion.
13.2 CKY Parsing: A Dynamic Programming Approach
chart parsing
Dynamic programming provides a powerful framework for addressing the prob- lems caused by ambiguity in grammars. Recall that a dynamic programming ap- proach systematically fills in a table of solutions to sub-problems. The complete ta- ble has the solution to all the sub-problems needed to solve the problem as a whole. In the case of syntactic parsing, these sub-problems represent parse trees for all the constituents detected in the input.
The dynamic programming advantage arises from the context-free nature of our grammar rules — once a constituent has been discovered in a segment of the input we can record its presence and make it available for use in any subsequent derivation that might require it. This provides both time and storage efficiencies since subtrees can be looked up in a table, not reanalyzed. This section presents the Cocke-Kasami- Younger (CKY) algorithm, the most widely used dynamic-programming based ap- proach to parsing. Chart parsing (Kaplan 1973, Kay 1982) is a related approach, and dynamic programming methods are often referred to as chart parsing methods.
13.2.1 Conversion to Chomsky Normal Form
The CKY algorithm requires grammars to first be in Chomsky Normal Form (CNF). Recall from Chapter 12 that grammars in CNF are restricted to rules of the form A → B C or A → w. That is, the right-hand side of each rule must expand either to two non-terminals or to a single terminal. Restricting a grammar to CNF does not

262 CHAPTER 13 • CONSTITUENCY PARSING
Unit productions
lead to any loss in expressiveness, since any context-free grammar can be converted into a corresponding CNF grammar that accepts exactly the same set of strings as the original grammar.
Let’s start with the process of converting a generic CFG into one represented in CNF. Assuming we’re dealing with an ε-free grammar, there are three situations we need to address in any generic grammar: rules that mix terminals with non-terminals on the right-hand side, rules that have a single non-terminal on the right-hand side, and rules in which the length of the right-hand side is greater than 2.
The remedy for rules that mix terminals and non-terminals is to simply introduce a new dummy non-terminal that covers only the original terminal. For example, a rule for an infinitive verb phrase such as INF-VP → to VP would be replaced by the two rules INF-VP → TO VP and TO → to.
Rules with a single non-terminal on the right are called unit productions. We can eliminate unit productions by rewriting the right-hand side of the original rules with the right-hand side of all the non-unit production rules that they ultimately lead to. More formally, if A ⇒∗ B by a chain of one or more unit productions and B → γ is a non-unit production in our grammar, then we add A → γ for each such rule in the grammar and discard all the intervening unit productions. As we demonstrate with our toy grammar, this can lead to a substantial flattening of the grammar and a consequent promotion of terminals to fairly high levels in the resulting trees.
Rules with right-hand sides longer than 2 are normalized through the introduc- tion of new non-terminals that spread the longer sequences over several new rules. Formally, if we have a rule like
A→BCγ
we replace the leftmost pair of non-terminals with a new non-terminal and introduce
a new production, resulting in the following new rules:
A → X1γ X1 → BC
In the case of longer right-hand sides, we simply iterate this process until the of- fending rule has been replaced by rules of length 2. The choice of replacing the leftmost pair of non-terminals is purely arbitrary; any systematic scheme that results in binary rules would suffice.
In our current grammar, the rule S → Aux NP VP would be replaced by the two rulesS → X1VPandX1 → AuxNP.
The entire conversion process can be summarized as follows:
1. Copy all conforming rules to the new grammar unchanged. 2. Convert terminals within rules to dummy non-terminals.
3. Convert unit productions.
4. Make all rules binary and add them to new grammar.
Figure 13.3 shows the results of applying this entire conversion procedure to the L1 grammar introduced earlier on page 260. Note that this figure doesn’t show the original lexical rules; since these original lexical rules are already in CNF, they all carry over unchanged to the new grammar. Figure 13.3 does, however, show the various places where the process of eliminating unit productions has, in effect, created new lexical rules. For example, all the original verbs have been promoted to both VPs and to Ss in the converted grammar.

13.2 •
CKY PARSING: A DYNAMIC PROGRAMMING APPROACH 263
S → NPVP
S → X1VP
X1 → AuxNP
S → book | include | prefer S → VerbNP
S → X2PP
S → VerbPP
S → VPPP
NP → I | she | me
NP → TWA | Houston
NP → Det Nominal
Nominal → book | flight | meal | money Nominal → Nominal Noun
Nominal → Nominal PP
VP → book | include | prefer
VP → VerbNP
VP → X2PP
X2 → VerbNP
VP → VerbPP
VP → VPPP
PP → Preposition NP
 L1 Grammar
L1 in CNF
  S → NPVP
S → AuxNPVP
S → VP
NP → Pronoun
NP → Proper-Noun
NP → Det Nominal Nominal → Noun Nominal → Nominal Noun Nominal → Nominal PP VP → Verb
VP → VerbNP
VP → VerbNPPP
VP → VerbPP
VP → VPPP
PP → Preposition NP
    Figure 13.3
                        fenceposts
L1 Grammar and its conversion to CNF. Note that although they aren’t shown here, all the original lexical entries from L1 carry over unchanged as well.
13.2.2 CKY Recognition
With our grammar now in CNF, each non-terminal node above the part-of-speech level in a parse tree will have exactly two daughters. A two-dimensional matrix can be used to encode the structure of an entire tree. For a sentence of length n, we will work with the upper-triangular portion of an (n + 1) × (n + 1) matrix. Each cell [i, j] in this matrix contains the set of non-terminals that represent all the constituents that span positions i through j of the input. Since our indexing scheme begins with 0, it’s natural to think of the indexes as pointing at the gaps between the input words (as in 0 Book 1 that 2 flight 3). These gaps are often called fenceposts, on the metaphor of the posts between segments of fencing. It follows then that the cell that represents the entire input resides in position [0, n] in the matrix.
Since each non-terminal entry in our table has two daughters in the parse, it fol- lows that for each constituent represented by an entry [i, j], there must be a position in the input, k, where it can be split into two parts such that i < k < j. Given such a position k, the first constituent [i,k] must lie to the left of entry [i, j] somewhere along row i, and the second entry [k, j] must lie beneath it, along column j.
To make this more concrete, consider the following example with its completed parse matrix, shown in Fig. 13.4.
(13.3) Book the flight through Houston.
The superdiagonal row in the matrix contains the parts of speech for each word in the input. The subsequent diagonals above that superdiagonal contain constituents that cover all the spans of increasing length in the input.
Given this setup, CKY recognition consists of filling the parse table in the right way. To do this, we’ll proceed in a bottom-up fashion so that at the point where we are filling any cell [i, j], the cells containing the parts that could contribute to

264 CHAPTER 13 • CONSTITUENCY PARSING
Completed parse table for Book the flight through Houston.
this entry (i.e., the cells to the left and the cells below) have already been filled. The algorithm given in Fig. 13.5 fills the upper-triangular matrix a column at a time working from left to right, with each column filled from bottom to top, as the right side of Fig. 13.4 illustrates. This scheme guarantees that at each point in time we have all the information we need (to the left, since all the columns to the left have already been filled, and below since we’re filling bottom to top). It also mirrors on- line processing, since filling the columns from left to right corresponds to processing each word one at a time.
  Book
S, VP, Verb, Nominal, Noun
[0,1]
the
flight
S,VP,X2
[0,3] NP
[1,3]
Nominal, Noun
[2,3]
through
[0,4]
[1,4]
[2,4] Prep
[3,4]
Houston
S,VP,X2
[0,5] NP
[1,5] Nominal
[2,5] PP
[3,5]
NP, Proper- Noun
[4,5]
                   [0,2] Det
[1,2]
                  Figure 13.4
      function CKY-PARSE(words, grammar) returns table
for j←from 1 to LENGTH(words) do
for all {A | A → words[ j] ∈ grammar} table[j−1, j]←table[j−1, j] ∪ A
for i←from j−2 down to 0 do for k←i+1 to j−1 do
forall{A|A → BC ∈ grammarandB ∈ table[i,k]andC ∈ table[k,j]} table[i,j]←table[i,j] ∪ A
 Figure 13.5
 The CKY algorithm.
The outermost loop of the algorithm given in Fig. 13.5 iterates over the columns, and the second loop iterates over the rows, from the bottom up. The purpose of the innermost loop is to range over all the places where a substring spanning i to j in the input might be split in two. As k ranges over the places where the string can be split, the pairs of cells we consider move, in lockstep, to the right along row i and down along column j. Figure 13.6 illustrates the general case of filling cell [i, j]. At each such split, the algorithm considers whether the contents of the two cells can be combined in a way that is sanctioned by a rule in the grammar. If such a rule exists, the non-terminal on its left-hand side is entered into the table.
Figure 13.7 shows how the five cells of column 5 of the table are filled after the word Houston is read. The arrows point out the two spans that are being used to add an entry to the table. Note that the action in cell [0, 5] indicates the presence of three alternative parses for this input, one where the PP modifies the flight, one where

13.2 • CKY PARSING: A DYNAMIC PROGRAMMING APPROACH 265
All the ways to fill the [i, j]th cell in the CKY table.
it modifies the booking, and one that captures the second argument in the original
VP → Verb NP PP rule, now captured indirectly with the VP → X2 PP rule. 13.2.3 CKY Parsing
The algorithm given in Fig. 13.5 is a recognizer, not a parser; for it to succeed, it simply has to find an S in cell [0,n]. To turn it into a parser capable of returning all possible parses for a given input, we can make two simple changes to the algorithm: the first change is to augment the entries in the table so that each non-terminal is paired with pointers to the table entries from which it was derived (more or less as shown in Fig. 13.7), the second change is to permit multiple versions of the same non-terminal to be entered into the table (again as shown in Fig. 13.7). With these changes, the completed table contains all the possible parses for a given input. Re- turning an arbitrary single parse consists of choosing an S from cell [0,n] and then recursively retrieving its component constituents from the table.
Returning every parse for a sentence may not be useful, since there may be an exponential number of parses. We’ll see in the next section how to retrieve only the best parse.
    [0,1]
[0,n]
 ...
     [i,i+1] [i,i+2] ...
[i,j-2] [i,j-1]
[i,j]
[i+1,j] [i+2,j]
[j-2,j] [j-1,j]
          ...
  [n-1, n]
 Figure 13.6
   
266 CHAPTER 13 • CONSTITUENCY PARSING
Filling the cells of column 5 after reading the word Houston.
    Book the flight through Houston
Book the flight through Houston
Book
Book the
flight
through Houston
                       S, VP, Verb, Nominal, Noun
[0,1] [0,2]
S,VP,X2 [0,3]
[0,4]
[0,5]
S, VP, Verb, Nominal, Noun
[0,1] [0,2]
S,VP,X2 [0,3]
[0,4]
[0,5]
                   Det [1,2]
NP [1,3]
[1,4]
[1,5]
Det [1,2]
NP [1,3]
[1,4]
NP [1,5]
              Nominal, Noun
[2,3]
[2,4]
Nominal [2,5]
Nominal, Noun
[2,3]
[2,4]
[2,5]
          Prep [3,4]
[3,5]
Prep [3,4]
PP [3,5]
    NP, Proper- Noun
[4,5]
Book the
flight
through Houston
NP, Proper- Noun
[4,5]
                      S, VP, Verb, Nominal, Noun
[0,1] [0,2]
S,VP,X2 [0,3]
[0,4]
[0,5]
S, VP, Verb, Nominal, Noun
[0,1] [0,2]
S,VP,X2 [0,3]
[0,4]
[0,5]
                  Det [1,2]
NP [1,3]
 [1,4]
NP [1,5]
Det [1,2]
NP
[1,3]
[1,4]
NP [1,5]
              Nominal, Noun
[2,3]
 [2,4]
Nominal [2,5]
Nominal, Noun
[2,3]
[2,4]
Nominal [2,5]
          Prep [3,4]
PP [3,5]
Prep [3,4]
PP [3,5]
    NP, Proper- Noun
[4,5]
the flight
through
Houston
NP, Proper- Noun
[4,5]
           S, VP, Verb, Nominal, Noun
[0,1]
   [0,2]
S,
VP,
X2 [0,3]
[0,4]
S1,VP, X2
S2, VP S3
         Det [1,2]
NP [1,3]
[1,4]
NP [1,5]
      Nominal, Noun
[2,3]
[2,4]
Nominal [2,5]
     Prep [3,4]
PP [3,5]
  NP, Proper- Noun
[4,5]
 Figure 13.7
 
13.3
13.3 • SPAN-BASED NEURAL CONSTITUENCY PARSING 267 13.2.4 CKY in Practice
Finally, we should note that while the restriction to CNF does not pose a prob- lem theoretically, it does pose some non-trivial problems in practice. Obviously, as things stand now, our parser isn’t returning trees that are consistent with the grammar given to us by our friendly syntacticians. In addition to making our grammar devel- opers unhappy, the conversion to CNF will complicate any syntax-driven approach to semantic analysis.
One approach to getting around these problems is to keep enough information around to transform our trees back to the original grammar as a post-processing step of the parse. This is trivial in the case of the transformation used for rules with length greater than 2. Simply deleting the new dummy non-terminals and promoting their daughters restores the original tree.
In the case of unit productions, it turns out to be more convenient to alter the ba- sic CKY algorithm to handle them directly than it is to store the information needed to recover the correct trees. Exercise 13.3 asks you to make this change. Many of the probabilistic parsers presented in Appendix C use the CKY algorithm altered in just this manner.
Span-Based Neural Constituency Parsing
span
While the CKY parsing algorithm we’ve seen so far does great at enumerating all the possible parse trees for a sentence, it has a large problem: it doesn’t tell us which parse is the correct one! That is, it doesn’t disambiguate among the possible parses. To solve the disambiguation problem we’ll use a simple neural extension of the CKY algorithm. The intuition of such parsing algorithms (often called span-based constituency parsing, or neural CKY), is to train a neural classifier to assign a score to each constituent, and then use a modified version of CKY to combine these constituent scores to find the best-scoring parse tree. Here we’ll describe a version of the algorithm from Kitaev et al. (2019).
13.3.1 Computing Scores for a Span
Let’s begin by considering just the constituent (we’ll call it a span) that lies between fencepost positions i and j with non-terminal symbol label l. We’ll build a classifier to assign a score s(i, j,l) to this constituent span.
Fig. 13.8 sketches the architecture. The input word tokens are embedded by passing them through a pretrained language model like BERT. Because BERT oper- ates on the level of subword (wordpiece) tokens rather than words, we’ll first need to convert the BERT outputs to word representations. One standard way of doing this is to simply use the last subword unit as the representation for the word (using the first subword unit seems to work equivalently well). The embeddings can then be passed through some postprocessing layers; Kitaev et al. (2019), for example, use 8 Transformer layers.
The resulting word encoder outputs yt are then use to compute a span score. First, we must map the word encodings (indexed by word positions) to span encod- ings (indexed by fenceposts). We do this by representing each fencepost with two separate values; the intuition is that a span endpoint to the right of a word represents different information than a span endpoint to the left of a word. We convert each

268 CHAPTER 13 • CONSTITUENCY PARSING
             CKY for computing best parse
Compute score for span Represent span
NP
MLP hj-hi
      i=1
j=3
012345 postprocessing layers
map back to words
BERT
map to subwords
[START] Book the flight through Houston [END]
     Figure 13.8
 A simplified outline of computing the span score for the span the flight with the label NP.
word output yt into a (leftward-pointing) value for spans ending at this fencepost, →− ←−
y t , and a (rightward-pointing) value y t for spans beginning at this fencepost, by splitting yt into two halves. Each span then stretches from one double-vector fence- post to another, as in the following representation of the flight, which is span(1, 3):
Book the
flight
through
A traditional way to represent a span, developed originally for RNN-based models (Wang and Chang, 2016), but extended also to Transformers, is to take the differ- ence between the embeddings of its start and end, i.e., representing span (i, j) by subtracting the embedding of i from the embedding of j. Here we represent a span by concatenating the difference of each of its fencepost components:
→− →− ←− ←−
v(i,j)=[yj−yi ;yj+1−yi+1] (13.4)
The span vector v is then passed through an MLP span classifier, with two fully- connected layers and one ReLU activation function, whose output dimensionality is the number of possible non-terminal labels:
s(i, j,·) = W2 ReLU(LayerNorm(W1v(i, j))) (13.5) The MLP then outputs a score for each possible non-terminal.
13.3.2 Integrating Span Scores into a Parse
Now we have a score for each labeled constituent span s(i, j,l). But we need a score for an entire parse tree. Formally a tree T is represented as a set of |T | such labeled
START0
→− ←−
→− ←−
→− ←−
→− ←−
→− ←−
y0 y0 y1
y1 y1 y2 y2
y2 y3 span(1,3)
y4 y4 y5 ... ⃝0 ⃝1 ⃝2 ⃝3 ⃝4
y3 y3 y4
 
PARSEVAL
The standard tool for evaluating parsers that assign a single parse tree to a sentence is the PARSEVAL metrics (Black et al., 1991). The PARSEVAL metric measures how much the constituents in the hypothesis parse tree look like the constituents in a hand-labeled, reference parse. PARSEVAL thus requires a human-labeled reference (or “gold standard”) parse tree for each sentence in the test set; we generally draw these reference parses from a treebank like the Penn Treebank.
A constituent in a hypothesis parse Ch of a sentence s is labeled correct if there is a constituent in the reference parse Cr with the same starting point, ending point, and non-terminal symbol. We can then measure the precision and recall just as for tasks we’ve seen already like named entity tagging:
labeled recall: = # of correct constituents in hypothesis parse of s # of correct constituents in reference parse of s
13.4 • EVALUATING PARSERS 269
spans, with the t th span starting at position it and ending at position jt , with label lt :
T = {(it, jt,lt) : t = 1,...,|T|} (13.6)
Thus once we have a score for each span, the parser can compute a score for the whole tree s(T ) simply by summing over the scores of its constituent spans:
s(T)= 􏰑 s(i,j,l) (i, j,l)∈T
And we can choose the final parse tree as the tree with the maximum score: Tˆ =argmaxs(T)
T
(13.7)
(13.8)
The simplest method to produce the most likely parse is to greedily choose the highest scoring label for each span. This greedy method is not guaranteed to produce a tree, since the best label for a span might not fit into a complete tree. In practice, however, the greedy method tends to find trees; in their experiments Gaddy et al. (2018) finds that 95% of predicted bracketings form valid trees.
Nonetheless it is more common to use a variant the CKY algorithm to find the full parse. The variant defined in Gaddy et al. (2018) works as follows. Let’s define sbest(i, j) as the score of the best subtree spanning (i, j). For spans of length one, we choose the best label:
sbest(i,i+1) = maxs(i,i+1,l) l
For other spans (i, j), the recursion is:
sbest(i,j) = maxs(i,j,l)
l
+ max[sbest(i,k)+sbest(k,j)] k
(13.9)
(13.10)
For more details on span-based parsing, including the margin-based training al- gorithm, see Stern et al. (2017), Gaddy et al. (2018), Kitaev and Klein (2018), and Kitaev et al. (2019).
13.4 Evaluating Parsers
 
270 CHAPTER 13 • CONSTITUENCY PARSING
labeled precision: = # of correct constituents in hypothesis parse of s
# of total constituents in hypothesis parse of s As usual, we often report a combination of the two, F1:
F1 = 2PR P+R
We additionally use a new metric, crossing brackets, for each sentence s:
(13.11)
  13.5
Partial Parsing
partial parse shallow parse
chunking
Many language processing tasks do not require complex, complete parse trees for all inputs. For these tasks, a partial parse, or shallow parse, of input sentences may be sufficient. For example, information extraction systems generally do not extract all the possible information from a text: they simply identify and classify the segments in a text that are likely to contain valuable information.
One kind of partial parsing is known as chunking. Chunking is the process of identifying and classifying the flat, non-overlapping segments of a sentence that constitute the basic non-recursive phrases corresponding to the major content-word parts-of-speech: noun phrases, verb phrases, adjective phrases, and prepositional phrases. The task of finding all the base noun phrases in a text is particularly com- mon. Since chunked texts lack a hierarchical structure, a simple bracketing notation is sufficient to denote the location and the type of the chunks in a given example:
(13.12) [NP The morning flight] [PP from] [NP Denver] [VP has arrived.]
This bracketing notation makes clear the two fundamental tasks that are involved in chunking: segmenting (finding the non-overlapping extents of the chunks) and labeling (assigning the correct tag to the discovered chunks). Some input words may not be part of any chunk, particularly in tasks like base NP:
(13.13) [NP The morning flight] from [NP Denver] has arrived.
What constitutes a syntactic base phrase depends on the application (and whether the phrases come from a treebank). Nevertheless, some standard guidelines are fol- lowed in most systems. First and foremost, base phrases of a given type do not recursively contain any constituents of the same type. Eliminating this kind of recur- sion leaves us with the problem of determining the boundaries of the non-recursive phrases. In most approaches, base phrases include the headword of the phrase, along with any pre-head material within the constituent, while crucially excluding any post-head material. Eliminating post-head modifiers obviates the need to resolve attachment ambiguities. This exclusion does lead to certain oddities, such as PPs and VPs often consisting solely of their heads. Thus a flight from Indianapolis to Houston would be reduced to the following:
evalb
cross-brackets: the number of constituents for which the reference parse has a bracketing such as ((A B) C) but the hypothesis parse has a bracketing such as (A (B C)).
For comparing parsers that use different grammars, the PARSEVAL metric in- cludes a canonicalization algorithm for removing information likely to be grammar- specific (auxiliaries, pre-infinitival “to”, etc.) and for computing a simplified score (Black et al., 1991). The canonical implementation of the PARSEVAL metrics is called evalb (Sekine and Collins, 1997).

13.6 • CCG PARSING 271 (13.14) [NP a flight] [PP from] [NP Indianapolis][PP to][NP Houston]
Chunking Algorithms Chunking is generally done via supervised learning, train- ing a BIO sequence labeler of the sort we saw in Chapter 8 from annotated training data. Recall that in BIO tagging, we have a tag for the beginning (B) and inside (I) of each chunk type, and one for tokens outside (O) any chunk. The following example shows the bracketing notation of (13.12) on page 270 reframed as a tagging task:
(13.15) The morning flight from Denver has arrived BNPINP INPBPPBNP BVPIVP
The same sentence with only the base-NPs tagged illustrates the role of the O tags.
(13.16) The morning flight from Denver has arrived. BNPINP INPO BNP O O
Since annotation efforts are expensive and time consuming, chunkers usually rely on existing treebanks like the Penn Treebank, extracting syntactic phrases from the full parse constituents of a sentence, finding the appropriate heads and then in- cluding the material to the left of the head, ignoring the text to the right. This is somewhat error-prone since it relies on the accuracy of the head-finding rules de- scribed in Chapter 12.
Given a training set, any sequence model can be used to chunk: CRF, RNN, Transformer, etc. As with the evaluation of named-entity taggers, the evaluation of chunkers proceeds by comparing chunker output with gold-standard answers pro- vided by human annotators, using precision, recall, and F1.
13.6 CCG Parsing
Lexicalized grammar frameworks such as CCG pose problems for which the phrase- based methods we’ve been discussing are not particularly well-suited. To quickly review, CCG consists of three major parts: a set of categories, a lexicon that asso- ciates words with categories, and a set of rules that govern how categories combine in context. Categories can be either atomic elements, such as S and NP, or functions such as (S\NP)/NP which specifies the transitive verb category. Rules specify how functions, their arguments, and other functions combine. For example, the following rule templates, forward and backward function application, specify the way that functions apply to their arguments.
X/Y Y ⇒ X Y X\Y ⇒ X
The first rule applies a function to its argument on the right, while the second looks to the left for its argument. The result of applying either of these rules is the category specified as the value of the function being applied. For the purposes of this discussion, we’ll rely on these two rules along with the forward and backward composition rules and type-raising, as described in Chapter 12.
13.6.1 Ambiguity in CCG
As is always the case in parsing, managing ambiguity is the key to successful CCG parsing. The difficulties with CCG parsing arise from the ambiguity caused by the large number of complex lexical categories combined with the very general nature of

272 CHAPTER 13 • CONSTITUENCY PARSING
the grammatical rules. To see some of the ways that ambiguity arises in a categorial
framework, consider the following example. (13.17) United diverted the flight to Reno.
Our grasp of the role of the flight in this example depends on whether the prepo- sitional phrase to Reno is taken as a modifier of the flight, as a modifier of the entire verb phrase, or as a potential second argument to the verb divert. In a context-free grammar approach, this ambiguity would manifest itself as a choice among the fol- lowing rules in the grammar.
Nominal → Nominal PP VP → VPPP
VP → Verb NP PP
In a phrase-structure approach we would simply assign the word to to the cate- gory P allowing it to combine with Reno to form a prepositional phrase. The sub- sequent choice of grammar rules would then dictate the ultimate derivation. In the categorial approach, we can associate to with distinct categories to reflect the ways in which it might interact with other elements in a sentence. The fairly abstract combinatoric rules would then sort out which derivations are possible. Therefore, the source of ambiguity arises not from the grammar but rather from the lexicon.
Let’s see how this works by considering several possible derivations for this example. To capture the case where the prepositional phrase to Reno modifies the flight, we assign the preposition to the category (NP\NP)/NP, which gives rise to the following derivation.
United diverted the flight to Reno
NP (S\NP)/NP NP/N N (NP\NP)/NP NP
      NP >
S\NP S
NP\NP > NP <
   > <
  Here, the category assigned to to expects to find two arguments: one to the right as with a traditional preposition, and one to the left that corresponds to the NP to be modified.
Alternatively, we could assign to to the category (S\S)/NP, which permits the following derivation where to Reno modifies the preceding verb phrase.
United diverted the flight to Reno
NP (S\NP)/NP NP/N N (S\S)/NP NP NP> S\S>
S\NP >
S\NP <B
S<
A third possibility is to view divert as a ditransitive verb by assigning it to the category ((S\NP)/PP)/NP, while treating to Reno as a simple prepositional phrase.
           
13.6 • CCG PARSING 273
United diverted the flight to Reno
NP ((S\NP)/PP)/NP NP/N N PP/NP NP NP> PP>
        (S\NP)/PP
> <
>
S\NP S
   supertagging
While CCG parsers are still subject to ambiguity arising from the choice of grammar rules, including the kind of spurious ambiguity discussed in Chapter 12, it should be clear that the choice of lexical categories is the primary problem to be addressed in CCG parsing.
13.6.2 CCG Parsing Frameworks
Since the rules in combinatory grammars are either binary or unary, a bottom-up, tabular approach based on the CKY algorithm should be directly applicable to CCG parsing. Unfortunately, the large number of lexical categories available for each word, combined with the promiscuity of CCG’s combinatoric rules, leads to an ex- plosion in the number of (mostly useless) constituents added to the parsing table. The key to managing this explosion of zombie constituents is to accurately assess and exploit the most likely lexical categories possible for each word — a process called supertagging.
The following sections describe two approaches to CCG parsing that make use of supertags. Section 13.6.4, presents an approach that structures the parsing process as a heuristic search through the use of the A* algorithm. The following section then briefly describes a more traditional classifier-based approach that manages the search space complexity through the use of adaptive supertagging — a process that iteratively considers more and more tags until a parse is found.
13.6.3 Supertagging
Chapter 8 introduced the task of part-of-speech tagging, the process of assigning the correct lexical category to each word in a sentence. Supertagging is the correspond- ing task for highly lexicalized grammar frameworks, where the assigned tags often dictate much of the derivation for a sentence.
CCG supertaggers rely on treebanks such as CCGbank to provide both the over- all set of lexical categories as well as the allowable category assignments for each word in the lexicon. CCGbank includes over 1000 lexical categories, however, in practice, most supertaggers limit their tagsets to those tags that occur at least 10 times in the training corpus. This results in a total of around 425 lexical categories available for use in the lexicon. Note that even this smaller number is large in con- trast to the 45 POS types used by the Penn Treebank tagset.
As with traditional part-of-speech tagging, the standard approach to building a CCG supertagger is to use supervised machine learning to build a sequence labeler from hand-annotated training data. To find the most likely sequence of tags given a sentence, it is most common to use a neural sequence model, either RNN or Trans- former.
It’s also possible, however, to use the CRF tagging model described in Chapter 8, using similar features; the current word wi, its surrounding words within l words, local POS tags and character suffixes, and the supertag from the prior timestep,

274 CHAPTER 13 • CONSTITUENCY PARSING
training by maximizing log-likelihood of the training corpus and decoding via the Viterbi algorithm as described in Chapter 8.
Unfortunately the large number of possible supertags combined with high per- word ambiguity leads the naive CRF algorithm to error rates that are too high for practical use in a parser. The single best tag sequence Tˆ will typically contain too many incorrect tags for effective parsing to take place. To overcome this, we instead return a probability distribution over the possible supertags for each word in the input. The following table illustrates an example distribution for a simple sentence, in which each column represents the probability of each supertag for a given word in the context of the input sentence. The “...” represent all the remaining supertags possible for each word.
To get the probability of each possible word/tag pair, we’ll need to sum the probabilities of all the supertag sequences that contain that tag at that location. This can be done with the forward-backward algorithm that is also used to train the CRF, described in Appendix A.
13.6.4 CCG Parsing using the A* Algorithm
The A* algorithm is a heuristic search method that employs an agenda to find an optimal solution. Search states representing partial solutions are added to an agenda based on a cost function, with the least-cost option being selected for further ex- ploration at each iteration. When a state representing a complete solution is first selected from the agenda, it is guaranteed to be optimal and the search terminates.
The A* cost function, f (n), is used to efficiently guide the search to a solution. The f -cost has two components: g(n), the exact cost of the partial solution repre- sented by the state n, and h(n) a heuristic approximation of the cost of a solution that makes use of n. When h(n) satisfies the criteria of not overestimating the actual cost, A* will find an optimal solution. Not surprisingly, the closer the heuristic can get to the actual cost, the more effective A* is at finding a solution without having to explore a significant portion of the solution space.
When applied to parsing, search states correspond to edges representing com- pleted constituents. Each edge specifies a constituent’s start and end positions, its grammatical category, and its f -cost. Here, the g component represents the current cost of an edge and the h component represents an estimate of the cost to complete a derivation that makes use of that edge. The use of A* for phrase structure parsing originated with Klein and Manning (2003), while the CCG approach presented here is based on the work of Lewis and Steedman (2014).
Using information from a supertagger, an agenda and a parse table are initial- ized with states representing all the possible lexical categories for each word in the input, along with their f -costs. The main loop removes the lowest cost edge from the agenda and tests to see if it is a complete derivation. If it reflects a complete derivation it is selected as the best solution and the loop terminates. Otherwise, new states based on the applicable CCG rules are generated, assigned costs, and entered
United serves Denver
   N/N: 0.4 (S\NP)/NP: 0.8 NP: 0.9 NP: 0.3 N: 0.1 N/N: 0.05
  S/S: 0.1 ... ...
 S\S: .05 ...
   
13.6 • CCG PARSING 275
into the agenda to await further processing. The loop continues until a complete derivation is discovered, or the agenda is exhausted, indicating a failed parse. The algorithm is given in Fig. 13.9.
   function CCG-ASTAR-PARSE(words) returns table or failure
supertags←SUPERTAGGER(words) for i←from 1 to LENGTH(words) do
for all {A | (words[i], A, score) ∈ supertags} edge←MAKEEDGE(i−1,i,A,score) table←INSERTEDGE(table,edge)
loop do agenda←INSERTEDGE(agenda,edge)
if EMPTY?(agenda) return failure current←POP(agenda)
if COMPLETEDPARSE?(current) return table table←INSERTEDGE(chart,edge)
for each rule in APPLICABLERULES(edge) do
successor←APPLY(rule,edge)
if successor not ∈ in agenda or chart
agenda←INSERTEDGE(agenda,successor) else if successor ∈ agenda with higher cost
agenda←REPLACEEDGE(agenda,successor)
 Figure 13.9
 A*-based CCG parsing.
Heuristic Functions
Before we can define a heuristic function for our A* search, we need to decide how to assess the quality of CCG derivations. We’ll make the simplifying assumption that the probability of a CCG derivation is just the product of the probability of the supertags assigned to the words in the derivation, ignoring the rules used in the derivation. More formally, given a sentence S and derivation D that contains supertag sequence T , we have:
P(D,S) = P(T,S) (13.18)
􏰒n i=1
To better fit with the traditional A* approach, we’d prefer to have states scored by a cost function where lower is better (i.e., we’re trying to minimize the cost of a derivation). To achieve this, we’ll use negative log probabilities to score deriva- tions; this results in the following equation, which we’ll use to score completed CCG derivations.
P(D,S) = P(T,S) (13.20)
􏰑n i=1
Given this model, we can define our f -cost as follows. The f -cost of an edge is the sum of two components: g(n), the cost of the span represented by the edge, and
=
− log P(ti |si ) (13.21)
=
P(ti |si ) (13.19)

276 CHAPTER 13 • CONSTITUENCY PARSING
h(n), the estimate of the cost to complete a derivation containing that edge (these are often referred to as the inside and outside costs). We’ll define g(n) for an edge using Equation 13.21. That is, it is just the sum of the costs of the supertags that comprise the span.
For h(n), we need a score that approximates but never overestimates the actual cost of the final derivation. A simple heuristic that meets this requirement assumes that each of the words in the outside span will be assigned its most probable su- pertag. If these are the tags used in the final derivation, then its score will equal the heuristic. If any other tags are used in the final derivation the f-cost will be higher since the new tags must have higher costs, thus guaranteeing that we will not overestimate.
Putting this all together, we arrive at the following definition of a suitable f -cost for an edge.
f(wi,j,ti,j) = g(wi,j)+h(wi,j)
􏰑j
= −logP(tk|wk)+
k=i i−1
(13.22)
N
􏰑 min (−logP(t|wk))+ 􏰑 min (−logP(t|wk))
k=1t∈tags k=j+1t∈tags
As an example, consider an edge representing the word serves with the supertag N
in the following example.
(13.23) United serves Denver.
The g-cost for this edge is just the negative log probability of this tag, −log10(0.1), or 1. The outside h-cost consists of the most optimistic supertag assignments for United and Denver, which are N/N and NP respectively. The resulting f-cost for this edge is therefore 1.443.
An Example
Fig. 13.10 shows the initial agenda and the progress of a complete parse for this example. After initializing the agenda and the parse table with information from the supertagger, it selects the best edge from the agenda — the entry for United with the tag N/N and f -cost 0.591. This edge does not constitute a complete parse and is therefore used to generate new states by applying all the relevant grammar rules. In this case, applying forward application to United: N/N and serves: N results in the creation of the edge United serves: N[0,2], 1.795 to the agenda.
Skipping ahead, at the third iteration an edge representing the complete deriva- tion United serves Denver, S[0,3], .716 is added to the agenda. However, the algo- rithm does not terminate at this point since the cost of this edge (.716) does not place it at the top of the agenda. Instead, the edge representing Denver with the category NP is popped. This leads to the addition of another edge to the agenda (type-raising Denver). Only after this edge is popped and dealt with does the earlier state repre- senting a complete derivation rise to the top of the agenda where it is popped, goal tested, and returned as a solution.
The effectiveness of the A* approach is reflected in the coloring of the states in Fig. 13.10 as well as the final parsing table. The edges shown in blue (includ- ing all the initial lexical category assignments not explicitly shown) reflect states in the search space that never made it to the top of the agenda and, therefore, never

13.7 • SUMMARY 277
Figure 13.10 Example of an A* search for the example “United serves Denver”. The circled numbers on the blue boxes indicate the order in which the states are popped from the agenda. The costs in each state are based on f-costs using negative log10 probabilities.
contributed any edges to the final table. This is in contrast to the PCKY approach where the parser systematically fills the parse table with all possible constituents for all possible spans in the input, filling the table with myriad constituents that do not contribute to the final analysis.
13.7 Summary
This chapter introduced constituency parsing. Here’s a summary of the main points:
      Initial Agenda
United: N/N .591
serves: (S\NP)/NP .591
Denver: NP .591
United: NP .716
United: S/S 1.1938
United: S\S 1.494
serves: N 1.494
Denver: N 1.795
Denver: N/N 2.494
...
1
United serves: N[0,2] 1.795
     236
Goal State
     serves Denver: S\NP[1,3] .591
45 Denver: S/(S\NP)[0,1]
.591
United serves Denver: S[0,3] .716
          United
serves
Denver
   N/N: 0.591 NP: 0.716 S/S: 1.1938 S\S: 1.494 ...
[0,1]
N: 1.795
[0,2]
S: 0.716
[0,3]
  (S\NP)/NP: 0.591 N: 1.494
...
[1,2]
S/NP: 0.591
[1,3]
 NP: 0.591 N: 1.795 N/N: 2.494 ...
[2,3]
         
278 CHAPTER 13
• CONSTITUENCY PARSING
• Structural ambiguity is a significant problem for parsers. Common sources of structural ambiguity include PP-attachment, coordination ambiguity, and noun-phrase bracketing ambiguity.
• Dynamic programming parsing algorithms, such as CKY, use a table of partial parses to efficiently parse ambiguous sentences.
• CKY restricts the form of the grammar to Chomsky normal form (CNF).
•
• Parsers are evaluated with three metrics: labeled recall, labeled precision, and cross-brackets.
• Partial parsing and chunking are methods for identifying shallow syntac- tic constituents in a text. They are solved by sequence models trained on syntactically-annotated data.
Bibliographical and Historical Notes
Writing about the history of compilers, Knuth notes:
In this field there has been an unusual amount of parallel discovery of the same technique by people working independently.
Well, perhaps not unusual, since multiple discovery is the norm in science (see page ??). But there has certainly been enough parallel publication that this his- tory errs on the side of succinctness in giving only a characteristic early mention of each algorithm; the interested reader should see Aho and Ullman (1972).
Bottom-up parsing seems to have been first described by Yngve (1955), who gave a breadth-first, bottom-up parsing algorithm as part of an illustration of a ma- chine translation procedure. Top-down approaches to parsing and translation were described (presumably independently) by at least Glennie (1960), Irons (1961), and Kuno and Oettinger (1963). Dynamic programming parsing, once again, has a his- tory of independent discovery. According to Martin Kay (personal communica- tion), a dynamic programming parser containing the roots of the CKY algorithm was first implemented by John Cocke in 1960. Later work extended and formalized the algorithm, as well as proving its time complexity (Kay 1967, Younger 1967,
WFST Kasami 1965). The related well-formed substring table (WFST) seems to have been independently proposed by Kuno (1965) as a data structure that stores the re- sults of all previous computations in the course of the parse. Based on a general- ization of Cocke’s work, a similar data structure had been independently described in Kay (1967) (and Kay 1973). The top-down application of dynamic programming to parsing was described in Earley’s Ph.D. dissertation (Earley 1968, Earley 1970). Sheil (1976) showed the equivalence of the WFST and the Earley algorithm. Norvig (1991) shows that the efficiency offered by dynamic programming can be captured in any language with a memoization function (such as in LISP) simply by wrapping the memoization operation around a simple top-down parser.
While parsing via cascades of finite-state automata had been common in the early history of parsing (Harris, 1962), the focus shifted to full CFG parsing quite soon afterward. Church (1980) argued for a return to finite-state grammars as a processing model for natural language understanding; other early finite-state parsing models include Ejerhed (1988).

EXERCISES 279
The classic reference for parsing algorithms is Aho and Ullman (1972); although the focus of that book is on computer languages, most of the algorithms have been applied to natural language. A good programming languages textbook such as Aho et al. (1986) is also useful.
Exercises
13.1 Implement the algorithm to convert arbitrary context-free grammars to CNF. Apply your program to the L1 grammar.
13.2 Implement the CKY algorithm and test it with your converted L1 grammar.
13.3 Rewrite the CKY algorithm given in Fig. 13.5 on page 264 so that it can accept
grammars that contain unit productions.
13.4 Discuss the relative advantages and disadvantages of partial versus full pars- ing.
13.5 Discuss how to augment a parser to deal with input that may be incorrect, for example, containing spelling errors or mistakes arising from automatic speech recognition.
13.6 Implement the PARSEVAL metrics described in Section 13.4. Next, use a parser and a treebank, compare your metrics against a standard implementa- tion. Analyze the errors in your approach.

280 CHAPTER 14 • DEPENDENCY PARSING CHAPTER
14 Dependency Parsing
 dependency grammars
The focus of the two previous chapters has been on context-free grammars and their use in automatically generating constituent-based representations. Here we present another family of grammar formalisms called dependency grammars that are quite important in contemporary speech and language processing systems. In these for- malisms, phrasal constituents and phrase-structure rules do not play a direct role. Instead, the syntactic structure of a sentence is described solely in terms of the words (or lemmas) in a sentence and an associated set of directed binary grammatical rela- tions that hold among the words.
The following diagram illustrates a dependency-style analysis using the standard graphical method favored in the dependency-parsing community.
root
dobj
det
nmod nmod case
    typed dependency
(14.1)
Relations among the words are illustrated above the sentence with directed, la- beled arcs from heads to dependents. We call this a typed dependency structure because the labels are drawn from a fixed inventory of grammatical relations. It also includes a root node that explicitly marks the root of the tree, the head of the entire structure.
Figure 14.1 shows the same dependency analysis as a tree alongside its corre- sponding phrase-structure analysis of the kind given in Chapter 12. Note the ab- sence of nodes corresponding to phrasal constituents or lexical categories in the dependency parse; the internal structure of the dependency parse consists solely of directed relations between lexical items in the sentence. These relationships di- rectly encode important information that is often buried in the more complex phrase- structure parses. For example, the arguments to the verb prefer are directly linked to it in the dependency structure, while their connection to the main verb is more dis- tant in the phrase-structure tree. Similarly, morning and Denver, modifiers of flight, are linked to it directly in the dependency structure.
A major advantage of dependency grammars is their ability to deal with lan- guages that are morphologically rich and have a relatively free word order. For example, word order in Czech can be much more flexible than in English; a gram- matical object might occur before or after a location adverbial. A phrase-structure grammar would need a separate rule for each possible place in the parse tree where such an adverbial phrase could occur. A dependency-based approach would just have one link type representing this particular adverbial relation. Thus, a depen- dency grammar approach abstracts away from word order information, representing only the information that is necessary for the parse.
An additional practical motivation for a dependency-based approach is that the head-dependent relations provide an approximation to the semantic relationship be-
free word order
nsubj
I prefer the morning flight through Denver

grammatical relation
The traditional linguistic notion of grammatical relation provides the basis for the
binary relations that comprise these dependency structures. The arguments to these head relations consist of a head and a dependent. We’ve already discussed the notion dependent of heads in Chapter 12 and Appendix C in the context of constituent structures. There, the head word of a constituent was the central organizing word of a larger constituent (e.g, the primary noun in a noun phrase, or verb in a verb phrase). The remaining words in the constituent are either direct, or indirect, dependents of their head. In dependency-based approaches, the head-dependent relationship is made explicit by directly linking heads to the words that are immediately dependent on
grammatical function
them, bypassing the need for constituent structures.
In addition to specifying the head-dependent pairs, dependency grammars allow
us to further classify the kinds of grammatical relations, or grammatical function,
14.1 • DEPENDENCY RELATIONS 281
   I
flight
prefer
the morning Denver
through
S
NP VP
Pro Verb NP
I prefer Det Nom
the Nom
Nom Noun P
      Noun flight through Pro morning Denver
PP
NP
 Figure 14.1
 A dependency-style parse alongside the corresponding constituent-based analysis for I prefer the morning flight through Denver.
tween predicates and their arguments that makes them directly useful for many ap- plications such as coreference resolution, question answering and information ex- traction. Constituent-based approaches to parsing provide similar information, but it often has to be distilled from the trees via techniques such as the head-finding rules discussed in Chapter 12.
In the following sections, we’ll discuss in more detail the inventory of relations used in dependency parsing, as well as the formal basis for these dependency struc- tures. We’ll then move on to discuss the dominant families of algorithms that are used to automatically produce these structures. Finally, we’ll discuss how to eval- uate dependency parsers and point to some of the ways they are used in language processing applications.
14.1 Dependency Relations

282
CHAPTER 14 • DEPENDENCY PARSING
ClausalArgumentRelations Description
  NSUBJ DOBJ IOBJ CCOMP XCOMP
Nominal subject
Direct object
Indirect object
Clausal complement Open clausal complement
Nominal Modifier Relations Description
  NMOD AMOD NUMMOD APPOS
D E T CASE
Nominal modifier
Adjectival modifier
Numeric modifier
Appositional modifier
Determiner
Prepositions, postpositions and other case markers
Other Notable Relations Description
 C O N J Conjunct
CC Coordinating conjunction
 Figure 14.2
   Universal Dependencies
Selected dependency relations from the Universal Dependency set. (de Marn- effe et al., 2014)
in terms of the role that the dependent plays with respect to its head. Familiar notions such as subject, direct object and indirect object are among the kind of relations we have in mind. In English these notions strongly correlate with, but by no means de- termine, both position in a sentence and constituent type and are therefore somewhat redundant with the kind of information found in phrase-structure trees. However, in more flexible languages the information encoded directly in these grammatical rela- tions is critical since phrase-based constituent syntax provides little help.
Not surprisingly, linguists have developed taxonomies of relations that go well beyond the familiar notions of subject and object. While there is considerable vari- ation from theory to theory, there is enough commonality that efforts to develop a computationally useful standard are now possible. The Universal Dependencies project (Nivre et al., 2016b) provides an inventory of dependency relations that are linguistically motivated, computationally useful, and cross-linguistically applicable. Fig. 14.2 shows a subset of the relations from this effort. Fig. 14.3 provides some example sentences illustrating selected relations.
The motivation for all of the relations in the Universal Dependency scheme is beyond the scope of this chapter, but the core set of frequently used relations can be broken into two sets: clausal relations that describe syntactic roles with respect to a predicate (often a verb), and modifier relations that categorize the ways that words that can modify their heads.
Consider the following example sentence:
root
dobj
det
nsubj
United canceled the morning flights to Houston
  nmod nmod case
   (14.2)
The clausal relations NSUBJ and DOBJ identify the subject and direct object of the predicate cancel, while the NMOD, DET, and CASE relations denote modifiers of the nouns flights and Houston.

14.2 • DEPENDENCY FORMALISMS 283
Relation Examples with head and dependent
 NSUBJ United canceled the flight.
DOBJ United diverted the flight to Reno.
We booked her the first flight to Miami. IOBJ We booked her the flight to Miami.
NMOD We took the morning flight.
AMOD Book the cheapest flight.
NUMMOD Before the storm JetBlue canceled 1000 flights. APPOS United, a unit of UAL, matched the fares.
DET The flight was canceled.
Which flight was delayed?
CONJ We flew to Denver and drove to Steamboat.
CC We flew to Denver and drove to Steamboat. CASE Book the flight through Houston.
 Figure 14.3
   Examples of core Universal Dependency relations.
14.2 Dependency Formalisms
dependency tree
In their most general form, the dependency structures we’re discussing are simply directed graphs. That is, structures G = (V, A) consisting of a set of vertices V , and a set of ordered pairs of vertices A, which we’ll refer to as arcs.
For the most part we will assume that the set of vertices, V , corresponds exactly to the set of words in a given sentence. However, they might also correspond to punctuation, or when dealing with morphologically complex languages the set of vertices might consist of stems and affixes. The set of arcs, A, captures the head- dependent and grammatical function relationships between the elements in V .
Further constraints on these dependency structures are specific to the underlying grammatical theory or formalism. Among the more frequent restrictions are that the structures must be connected, have a designated root node, and be acyclic or planar. Of most relevance to the parsing approaches discussed in this chapter is the common, computationally-motivated, restriction to rooted trees. That is, a dependency tree is a directed graph that satisfies the following constraints:
1. There is a single designated root node that has no incoming arcs.
2. Withtheexceptionoftherootnode,eachvertexhasexactlyoneincomingarc. 3. There is a unique path from the root node to each vertex in V .
Taken together, these constraints ensure that each word has a single head, that the dependency structure is connected, and that there is a single root node from which one can follow a unique directed path to each of the words in the sentence.
14.2.1 Projectivity
The notion of projectivity imposes an additional constraint that is derived from the order of the words in the input. An arc from a head to a dependent is said to be projective if there is a path from the head to every word that lies between the head and the dependent in the sentence. A dependency tree is then said to be projective if all the arcs that make it up are projective. All the dependency trees we’ve seen thus far have been projective. There are, however, many perfectly valid constructions which lead to non-projective trees, particularly in languages with a relatively flexible word order.

284 CHAPTER 14 • DEPENDENCY PARSING Consider the following example.
root
mod
  dobj det
nmod
mod case adv
   nsubj
JetBlue canceled our flight this morning which was already late
In this example, the arc from flight to its modifier was is non-projective since there is no path from flight to the intervening words this and morning. As we can see from this diagram, projectivity (and non-projectivity) can be detected in the way we’ve been drawing our trees. A dependency tree is projective if it can be drawn with no crossing edges. Here there is no way to link flight to its dependent was without crossing the arc that links morning to its head.
Our concern with projectivity arises from two related issues. First, the most widely used English dependency treebanks were automatically derived from phrase- structure treebanks through the use of head-finding rules (Chapter 12). The trees generated in such a fashion are guaranteed to be projective since they’re generated from context-free grammars.
Second, there are computational limitations to the most widely used families of parsing algorithms. The transition-based approaches discussed in Section 14.4 can only produce projective trees, hence any sentences with non-projective structures will necessarily contain some errors. This limitation is one of the motivations for the more flexible graph-based parsing approach described in Section 14.5.
14.3 Dependency Treebanks
As with constituent-based methods, treebanks play a critical role in the development and evaluation of dependency parsers. Dependency treebanks have been created using similar approaches to those discussed in Chapter 12 — having human annota- tors directly generate dependency structures for a given corpus, or using automatic parsers to provide an initial parse and then having annotators hand correct those parsers. We can also use a deterministic process to translate existing constituent- based treebanks into dependency trees through the use of head rules.
For the most part, directly annotated dependency treebanks have been created for morphologically rich languages such as Czech, Hindi and Finnish that lend them- selves to dependency grammar approaches, with the Prague Dependency Treebank (Bejcˇek et al., 2013) for Czech being the most well-known effort. The major English dependency treebanks have largely been extracted from existing resources such as the Wall Street Journal sections of the Penn Treebank (Marcus et al., 1993). The more recent OntoNotes project (Hovy et al. 2006, Weischedel et al. 2011) extends this approach going beyond traditional news text to include conversational telephone speech, weblogs, usenet newsgroups, broadcasts, and talk shows in English, Chinese and Arabic.
The translation process from constituent to dependency structures has two sub- tasks: identifying all the head-dependent relations in the structure and identifying the correct dependency relations for these relations. The first task relies heavily on the use of head rules discussed in Chapter 12 first developed for use in lexicalized probabilistic parsers (Magerman 1994, Collins 1999, Collins 2003). Here’s a simple
det
 (14.3)

14.4 • TRANSITION-BASED DEPENDENCY PARSING 285 and effective algorithm from Xia and Palmer (2001).
1. Mark the head child of each node in a phrase structure, using the appropriate head rules.
2. In the dependency structure, make the head of each non-head child depend on the head of the head-child.
When a phrase-structure parse contains additional information in the form of grammatical relations and function tags, as in the case of the Penn Treebank, these tags can be used to label the edges in the resulting tree. When applied to the parse tree in Fig. 14.4, this algorithm would produce the dependency structure in exam- ple 14.4.
root
tmp
clr
case
nmod
amod num
   sbj
aux
dobj nmod
   Vinken will join the board as a nonexecutive director Nov 29
The primary shortcoming of these extraction methods is that they are limited by the information present in the original constituent trees. Among the most impor- tant issues are the failure to integrate morphological information with the phrase- structure trees, the inability to easily represent non-projective structures, and the lack of internal structure to most noun-phrases, as reflected in the generally flat rules used in most treebank grammars. For these reasons, outside of English, most dependency treebanks are developed directly using human annotators.
14.4 Transition-Based Dependency Parsing
shift-reduce parsing
Our first approach to dependency parsing is motivated by a stack-based approach called shift-reduce parsing originally developed for analyzing programming lan- guages (Aho and Ullman, 1972). This classic approach is simple and elegant, em- ploying a context-free grammar, a stack, and a list of tokens to be parsed. Input tokens are successively shifted onto the stack and the top two elements of the stack are matched against the right-hand side of the rules in the grammar; when a match is found the matched elements are replaced on the stack (reduced) by the non-terminal from the left-hand side of the rule being matched. In adapting this approach for dependency parsing, we forgo the explicit use of a grammar and alter the reduce operation so that instead of adding a non-terminal to a parse tree, it introduces a dependency relation between a word and its head. More specifically, the reduce ac- tion is replaced with two possible actions: assert a head-dependent relation between the word at the top of the stack and the word below it, or vice versa. Figure 14.5 illustrates the basic operation of such a parser.
A key element in transition-based parsing is the notion of a configuration which consists of a stack, an input buffer of words, or tokens, and a set of relations rep- resenting a dependency tree. Given this framework, the parsing process consists of a sequence of transitions through the space of possible configurations. The goal of
configuration
(14.4)

286 CHAPTER 14 • DEPENDENCY PARSING
   S
 NP-SBJ
NNP MD
Vinken will
VP
 VP
 NP PP-CLR
join DT NN IN NP
VB
NP-TMP NNP CD
NN Nov 29 a nonexecutive director
 the board as DT JJ
    S(join)
NP-SBJ(Vinken) VP(join)
NNP MD
VP(join)
   Vinken
will VB NP(board) PP-CLR(director)
join DT NN IN NP(director)
the board as DT JJ NN
a nonexecutive director
NP-TMP(29) NNP CD Nov 29
     join
Vinken will board director 29 the as a nonexecutive Nov
  Figure 14.4
 A phrase-structure tree from the Wall Street Journal component of the Penn Treebank 3.
this process is to find a final configuration where all the words have been accounted for and an appropriate dependency tree has been synthesized.
To implement such a search, we’ll define a set of transition operators, which when applied to a configuration produce new configurations. Given this setup, we can view the operation of a parser as a search through a space of configurations for a sequence of transitions that leads from a start state to a desired goal state. At the start of this process we create an initial configuration in which the stack contains the ROOT node, the word list is initialized with the set of the words or lemmatized tokens

              Stack
s1 s2 ...
sn
Input buffer
w1 w2 wn
Parser Oracle
Dependency Relations
          Figure 14.5
 arc standard
14.4 • TRANSITION-BASED DEPENDENCY PARSING 287
Basic transition-based parser. The parser examines the top two elements of the stack and selects an action based on consulting an oracle that examines the current configura- tion.
in the sentence, and an empty set of relations is created to represent the parse. In the final goal state, the stack and the word list should be empty, and the set of relations will represent the final parse.
In the standard approach to transition-based parsing, the operators used to pro- duce new configurations are surprisingly simple and correspond to the intuitive ac- tions one might take in creating a dependency tree by examining the words in a single pass over the input from left to right (Covington, 2001):
• Assign the current word as the head of some previously seen word,
• Assign some previously seen word as the head of the current word,
• Orpostponedoinganythingwiththecurrentword,addingittoastoreforlater processing.
To make these actions more precise, we’ll create three transition operators that will operate on the top two elements of the stack:
• LEFTARC: Assert a head-dependent relation between the word at the top of the stack and the word directly beneath it; remove the lower word from the stack.
• RIGHTARC: Assert a head-dependent relation between the second word on the stack and the word at the top; remove the word at the top of the stack;
• SHIFT: Remove the word from the front of the input buffer and push it onto the stack.
This particular set of operators implements what is known as the arc standard approach to transition-based parsing (Covington 2001, Nivre 2003). There are two notable characteristics to this approach: the transition operators only assert relations between elements at the top of the stack, and once an element has been assigned its head it is removed from the stack and is not available for further processing. As we’ll see, there are alternative transition systems which demonstrate different parsing behaviors, but the arc standard approach is quite effective and is simple to implement.

288 CHAPTER 14 • DEPENDENCY PARSING
To assure that these operators are used properly we’ll need to add some pre- conditions to their use. First, since, by definition, the ROOT node cannot have any incoming arcs, we’ll add the restriction that the LEFTARC operator cannot be ap- plied when ROOT is the second element of the stack. Second, both reduce operators require two elements to be on the stack to be applied. Given these transition opera- tors and preconditions, the specification of a transition-based parser is quite simple. Fig. 14.6 gives the basic algorithm.
A generic transition-based dependency parser
At each step, the parser consults an oracle (we’ll come back to this shortly) that provides the correct transition operator to use given the current configuration. It then applies that operator to the current configuration, producing a new configuration. The process ends when all the words in the sentence have been consumed and the ROOT node is the only element remaining on the stack.
The efficiency of transition-based parsers should be apparent from the algorithm. The complexity is linear in the length of the sentence since it is based on a single left to right pass through the words in the sentence. More specifically, each word must first be shifted onto the stack and then later reduced.
Note that unlike the dynamic programming and search-based approaches dis- cussed in Chapters 12 and 13, this approach is a straightforward greedy algorithm — the oracle provides a single choice at each step and the parser proceeds with that choice, no other options are explored, no backtracking is employed, and a single parse is returned in the end.
Figure 14.7 illustrates the operation of the parser with the sequence of transitions leading to a parse for the following example.
   function DEPENDENCYPARSE(words) returns dependency tree
state←{[root], [words], [] } ; initial configuration while state not final
t←ORACLE(state) ; choose a transition operator to apply
state←APPLY(t, state) ; apply it, creating a new state return state
 Figure 14.6
 root
dobj
det
   iobj
Book me the morning flight
Let’s consider the state of the configuration at Step 2, after the word me has been pushed onto the stack.
[root,book,me] [the,morning,flight]
The correct operator to apply here is RIGHTARC which assigns book as the head of
me and pops me from the stack resulting in the following configuration. [root,book] [the,morning,flight] (book→me)
(14.5)
nmod
Stack
 Word List
 Relations
  Stack
 Word List
 Relations
  
14.4 • TRANSITION-BASED DEPENDENCY PARSING 289
Step Stack Word List Action Relation Added
 [root] [root, book] [root, book, me] [root, book] [root, book, the] [root, book, the, morning] [root, book, the, morning, flight] [root, book, the, flight] [root, book, flight] [root, book] 10 [root]
[book, me, the, morning, flight] [me, the, morning, flight]
[the, morning, flight]
[the, morning, flight] [morning, flight]
0 1 2 3 4 5 6 7 8 9
S H I F T
S H I F T RIGHTARC S H I F T
S H I F T
(book → me) (morning ← flight)
(the ← flight) (book → flight) (root → book)
 [flight] SHIFT
[] [] [] [] []
LEFTARC
LEFTARC RIGHTARC RIGHTARC Done
 Figure 14.7
  Trace of a transition-based parse.
After several subsequent applications of the SHIFT and LEFTARC operators, the con- figuration in Step 6 looks like the following:
[root, book, the, morning, flight] [] (book → me)
Here, all the remaining words have been passed onto the stack and all that is left to do is to apply the appropriate reduce operators. In the current configuration, we employ the LEFTARC operator resulting in the following state.
[root, book, the, flight] [] (book → me) (morning ← flight)
At this point, the parse for this sentence consists of the following structure.
iobj nmod Book me the morning flight
There are several important things to note when examining sequences such as the one in Figure 14.7. First, the sequence given is not the only one that might lead to a reasonable parse. In general, there may be more than one path that leads to the same result, and due to ambiguity, there may be other transition sequences that lead to different equally valid parses.
Second, we are assuming that the oracle always provides the correct operator at each point in the parse — an assumption that is unlikely to be true in practice. As a result, given the greedy nature of this algorithm, incorrect choices will lead to incorrect parses since the parser has no opportunity to go back and pursue alternative choices. Section 14.4.2 will introduce several techniques that allow transition-based approaches to explore the search space more fully.
Finally, for simplicity, we have illustrated this example without the labels on the dependency relations. To produce labeled trees, we can parameterize the LEFT- ARC and RIGHTARC operators with dependency labels, as in LEFTARC(NSUBJ) or RIGHTARC(DOBJ). This is equivalent to expanding the set of transition operators from our original set of three to a set that includes LEFTARC and RIGHTARC opera- tors for each relation in the set of dependency relations being used, plus an additional one for the SHIFT operator. This, of course, makes the job of the oracle more difficult since it now has a much larger set of operators from which to choose.
Stack
 Word List
 Relations
  Stack
 Word List
 Relations
  (14.6)

290 CHAPTER 14 • DEPENDENCY PARSING 14.4.1 Creating an Oracle
training oracle
State-of-the-art transition-based systems use supervised machine learning methods to train classifiers that play the role of the oracle. Given appropriate training data, these methods learn a function that maps from configurations to transition operators.
As with all supervised machine learning methods, we will need access to appro- priate training data and we will need to extract features useful for characterizing the decisions to be made. The source for this training data will be representative tree- banks containing dependency trees. The features will consist of many of the same features we encountered in Chapter 8 for part-of-speech tagging, as well as those used in Appendix C for statistical parsing models.
Generating Training Data
Let’s revisit the oracle from the algorithm in Fig. 14.6 to fully understand the learn- ing problem. The oracle takes as input a configuration and returns as output a tran- sition operator. Therefore, to train a classifier, we will need configurations paired with transition operators (i.e., LEFTARC, RIGHTARC, or SHIFT). Unfortunately, treebanks pair entire sentences with their corresponding trees, and therefore they don’t directly provide what we need.
To generate the required training data, we will employ the oracle-based parsing algorithm in a clever way. We will supply our oracle with the training sentences to be parsed along with their corresponding reference parses from the treebank. To produce training instances, we will then simulate the operation of the parser by run- ning the algorithm and relying on a new training oracle to give us correct transition operators for each successive configuration.
To see how this works, let’s first review the operation of our parser. It begins with a default initial configuration where the stack contains the ROOT, the input list is just the list of words, and the set of relations is empty. The LEFTARC and RIGHTARC operators each add relations between the words at the top of the stack to the set of relations being accumulated for a given sentence. Since we have a gold-standard reference parse for each training sentence, we know which dependency relations are valid for a given sentence. Therefore, we can use the reference parse to guide the selection of operators as the parser steps through a sequence of configurations.
To be more precise, given a reference parse and a configuration, the training oracle proceeds as follows:
• Choose LEFTARC if it produces a correct head-dependent relation given the reference parse and the current configuration,
• Otherwise, choose RIGHTARC if (1) it produces a correct head-dependent re- lation given the reference parse and (2) all of the dependents of the word at the top of the stack have already been assigned,
• Otherwise, choose SHIFT.
The restriction on selecting the RIGHTARC operator is needed to ensure that a word is not popped from the stack, and thus lost to further processing, before all its dependents have been assigned to it.
More formally, during training the oracle has access to the following informa- tion:
• A current configuration with a stack S and a set of dependency relations Rc
• A reference parse consisting of a set of vertices V and a set of dependency relations Rp

14.4 • TRANSITION-BASED DEPENDENCY PARSING 291
Step Stack Word List Predicted Action
 [root] [root, book] [root, book, the] [root, book, the, flight] [root, book, flight] [root, book, flight, through] [root, book, flight, through, houston] [root, book, flight, houston ] [root, book, flight] [root, book] 10 [root]
[book, the, flight, through, houston] [the, flight, through, houston] [flight, through, houston]
[through, houston]
0 1 2 3 4 5 6 7 8 9
[through, [houston] []
[]
[] [] []
houston]
S H I F T
S H I F T
S H I F T LEFTARC S H I F T
S H I F T LEFTARC RIGHTARC RIGHTARC RIGHTARC Done
  Figure 14.8
  Generating training items consisting of configuration/predicted action pairs by simulating a parse with a given reference parse.
Given this information, the oracle chooses transitions as follows:
LEFTARC(r): if (S1 r S2) ∈ Rp
RIGHTARC(r): if (S2 r S1) ∈ Rp and ∀r′,w s.t.(S1 r′ w) ∈ Rp then (S1 r′ w) ∈ Rc
SHIFT: otherwise
Let’s walk through the steps of this process with the following example as shown in Fig. 14.8.
root
Book the flight through Houston
At Step 1, LEFTARC is not applicable in the initial configuration since it asserts a relation, (root ← book), not in the reference answer; RIGHTARC does assert a relation contained in the final answer (root → book), however book has not been attached to any of its dependents yet, so we have to defer, leaving SHIFT as the only possible action. The same conditions hold in the next two steps. In step 3, LEFTARC is selected to link the to its head.
Now consider the situation in Step 4.
Stack Word buffer Relations
[root,book,flight] [through,Houston] (the←flight)
Here, we might be tempted to add a dependency relation between book and flight, which is present in the reference parse. But doing so now would prevent the later attachment of Houston since flight would have been removed from the stack. For- tunately, the precondition on choosing RIGHTARC prevents this choice and we’re again left with SHIFT as the only viable option. The remaining choices complete the set of operators needed for this example.
To recap, we derive appropriate training instances consisting of configuration- transition pairs from a treebank by simulating the operation of a parser in the con- text of a reference dependency tree. We can deterministically record correct parser actions at each step as we progress through each training example, thereby creating the training set we require.
 dobj nmod det case
   (14.7)
 
292
CHAPTER 14 • DEPENDENCY PARSING Features
Having generated appropriate training instances (configuration-transition pairs), we need to extract useful features from the configurations so we can train classifiers. The features that are used to train transition-based systems vary by language, genre, and the kind of classifier being employed. For example, morphosyntactic features such as case marking on subjects or direct objects may be more or less important depending on the language being processed. That said, the basic features that we have already seen with part-of-speech tagging and partial parsing have proven to be useful in training dependency parsers across a wide range of languages. Word forms, lemmas and parts of speech are all powerful features, as are the head, and dependency relation to the head.
In the transition-based parsing framework, such features need to be extracted from the configurations that make up the training data. Recall that configurations consist of three elements: the stack, the buffer and the current set of relations. In principle, any property of any or all of these elements can be represented as features in the usual way for training. However, to avoid sparsity and encourage generaliza- tion, it is best to focus the learning algorithm on the most useful aspects of decision making at each point in the parsing process. The focus of feature extraction for transition-based parsing is, therefore, on the top levels of the stack, the words near the front of the buffer, and the dependency relations already associated with any of those elements.
By combining simple features, such as word forms or parts of speech, with spe- cific locations in a configuration, we can employ the notion of a feature template that we’ve already encountered with sentiment analysis and part-of-speech tagging. Feature templates allow us to automatically generate large numbers of specific fea- tures from a training set. As an example, consider the following feature templates that are based on single positions in a configuration.
⟨s1 .w, op⟩, ⟨s2 .w, op⟩⟨s1 .t , op⟩, ⟨s2 .t , op⟩
⟨b1 .w, op⟩, ⟨b1 .t , op⟩⟨s1 .wt , op⟩ (14.8)
In these examples, individual features are denoted as location.property, where s denotes the stack, b the word buffer, and r the set of relations. Individual properties of locations include w for word forms, l for lemmas, and t for part-of-speech. For example, the feature corresponding to the word form at the top of the stack would be denoted as s1.w, and the part of speech tag at the front of the buffer b1.t. We can also combine individual features via concatenation into more specific features that may prove useful. For example, the feature designated by s1.wt represents the word form concatenated with the part of speech of the word at the top of the stack. Finally, op stands for the transition operator for the training example in question (i.e., the label for the training instance).
Let’s consider the simple set of single-element feature templates given above in the context of the following intermediate configuration derived from a training oracle for Example 14.2.
Stack Word buffer Relations [root,canceled,flights] [toHouston] (canceled→United) (flights → morning)
(flights → the)
The correct transition here is SHIFT (you should convince yourself of this before
feature template
 
14.4 • TRANSITION-BASED DEPENDENCY PARSING 293 proceeding). The application of our set of feature templates to this configuration
would result in the following set of instantiated features.
⟨s1.w = flights,op = shift⟩ ⟨s2.w = canceled,op = shift⟩ ⟨s1.t = NNS,op = shift⟩ ⟨s2.t = VBD,op = shift⟩ ⟨b1.w = to,op = shift⟩ ⟨b1.t = TO,op = shift⟩ ⟨s1.wt = flightsNNS,op = shift⟩
(14.9)
Given that the left and right arc transitions operate on the top two elements of the stack, features that combine properties from these positions are even more useful. For example, a feature like s1.t ◦s2.t concatenates the part of speech tag of the word at the top of the stack with the tag of the word beneath it.
⟨s1 .t ◦ s2 .t = NNSVBD, o p = shift⟩ (14.10)
Not surprisingly, if two properties are useful then three or more should be even better. Figure 14.9 gives a baseline set of feature templates that have been employed (Zhang and Clark 2008, Huang and Sagae 2010, Zhang and Nivre 2011).
Note that some of these features make use of dynamic features — features such as head words and dependency relations that have been predicted at earlier steps in the parsing process, as opposed to features that are derived from static properties of the input.
Source Feature templates
 Oneword s1.w s1.t s1.wt
  s2.w s2.t s2.wt b1.w b1.w b0.wt
  Twoword s1.w◦s2.w s1.t◦s2.wt
s1.t◦s2.t s1.t◦b1.w s1.w◦s2.w◦s2.t s1.w◦s1.t◦s2.t s1.w ◦ s1.t
Over the years, the dominant approaches to training transition-based dependency parsers have been multinomial logistic regression and support vector machines, both of which can make effective use of large numbers of sparse features of the kind described in the last section. More recently, neural network, or deep learning, approaches of the kind described in Chapter 8 have been applied successfully to transition-based parsing (Chen and Manning, 2014). These approaches eliminate the need for complex, hand-crafted features and have been particularly effective at over- coming the data sparsity issues normally associated with training transition-based parsers.
s1.w ◦ s1.t ◦ s2.t
Figure 14.9 Standard feature templates for training transition-based dependency parsers. In the template specifications sn refers to a location on the stack, bn refers to a location in the word buffer, w refers to the wordform of the input, and t refers to the part of speech of the input.
  Learning

294
CHAPTER 14 • DEPENDENCY PARSING
14.4.2 Advanced Methods in Transition-Based Parsing
arc eager
The basic transition-based approach can be elaborated in a number of ways to im- prove performance by addressing some of the most obvious flaws in the approach.
Alternative Transition Systems
The arc-standard transition system described above is only one of many possible sys- tems. A frequently used alternative is the arc eager transition system. The arc eager approach gets its name from its ability to assert rightward relations much sooner than in the arc standard approach. To see this, let’s revisit the arc standard trace of Example 14.7, repeated here.
root
Book the flight through Houston
Consider the dependency relation between book and flight in this analysis. As is shown in Fig. 14.8, an arc-standard approach would assert this relation at Step 8, despite the fact that book and flight first come together on the stack much earlier at Step 4. The reason this relation can’t be captured at this point is due to the presence of the postnominal modifier through Houston. In an arc-standard approach, depen- dents are removed from the stack as soon as they are assigned their heads. If flight had been assigned book as its head in Step 4, it would no longer be available to serve as the head of Houston.
While this delay doesn’t cause any issues in this example, in general the longer a word has to wait to get assigned its head the more opportunities there are for something to go awry. The arc-eager system addresses this issue by allowing words to be attached to their heads as early as possible, before all the subsequent words dependent on them have been seen. This is accomplished through minor changes to the LEFTARC and RIGHTARC operators and the addition of a new REDUCE operator.
• LEFTARC: Assert a head-dependent relation between the word at the front of the input buffer and the word at the top of the stack; pop the stack.
• RIGHTARC: Assert a head-dependent relation between the word on the top of the stack and the word at front of the input buffer; shift the word at the front of the input buffer to the stack.
• SHIFT: Remove the word from the front of the input buffer and push it onto the stack.
• REDUCE: Pop the stack.
The LEFTARC and RIGHTARC operators are applied to the top of the stack and the front of the input buffer, instead of the top two elements of the stack as in the arc-standard approach. The RIGHTARC operator now moves the dependent to the stack from the buffer rather than removing it, thus making it available to serve as the head of following words. The new REDUCE operator removes the top element from the stack. Together these changes permit a word to be eagerly assigned its head and still allow it to serve as the head for later dependents. The trace shown in Fig. 14.10 illustrates the new decision sequence for this example.
In addition to demonstrating the arc-eager transition system, this example demon- strates the power and flexibility of the overall transition-based approach. We were able to swap in a new transition system without having to make any changes to the
 dobj nmod det case
   
14.4 • TRANSITION-BASED DEPENDENCY PARSING 295
Step Stack Word List Action Relation Added
  0
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
[root] [root, book] [root, book, the] [root, book] [root, book, flight] [root, book, flight, through] [root, book, flight] [root, book, flight, houston] [root, book, flight] [root, book] [root]
[book, the, flight, through, houston] [the, flight, through, houston] [flight, through, houston]
[flight, through, houston]
[through, houston]
[houston]
[houston]
[] REDUCE [] REDUCE [] REDUCE [] Done
(root → book) (the ← flight)
(book → flight)
(through ← houston) (flight → houston)
 Figure 14.10
RIGHTARC S H I F T LEFTARC RIGHTARC S H I F T LEFTARC RIGHTARC
   beam search beam width
A processing trace of Book the flight through Houston using the arc-eager transition operators.
underlying parsing algorithm. This flexibility has led to the development of a di- verse set of transition systems that address different aspects of syntax and semantics including: assigning part of speech tags (Choi and Palmer, 2011a), allowing the generation of non-projective dependency structures (Nivre, 2009), assigning seman- tic roles (Choi and Palmer, 2011b), and parsing texts containing multiple languages (Bhat et al., 2017).
Beam Search
The computational efficiency of the transition-based approach discussed earlier de- rives from the fact that it makes a single pass through the sentence, greedily making decisions without considering alternatives. Of course, this is also the source of its greatest weakness – once a decision has been made it can not be undone, even in the face of overwhelming evidence arriving later in a sentence. Another approach is to systematically explore alternative decision sequences, selecting the best among those alternatives. The key problem for such a search is to manage the large number of potential sequences. Beam search accomplishes this by combining a breadth-first search strategy with a heuristic filter that prunes the search frontier to stay within a fixed-size beam width.
In applying beam search to transition-based parsing, we’ll elaborate on the al- gorithm given in Fig. 14.6. Instead of choosing the single best transition operator at each iteration, we’ll apply all applicable operators to each state on an agenda and then score the resulting configurations. We then add each of these new configura- tions to the frontier, subject to the constraint that there has to be room within the beam. As long as the size of the agenda is within the specified beam width, we can add new configurations to the agenda. Once the agenda reaches the limit, we only add new configurations that are better than the worst configuration on the agenda (removing the worst element so that we stay within the limit). Finally, to insure that we retrieve the best possible state on the agenda, the while loop continues as long as there are non-final states on the agenda.
The beam search approach requires a more elaborate notion of scoring than we used with the greedy algorithm. There, we assumed that a classifier trained using supervised machine learning would serve as an oracle, selecting the best transition operator based on features extracted from the current configuration. Regardless of the specific learning approach, this choice can be viewed as assigning a score to all the possible transitions and picking the best one.
Tˆ (c) = argmaxScore(t , c)

296 CHAPTER 14 • DEPENDENCY PARSING
With a beam search we are now searching through the space of decision se- quences, so it makes sense to base the score for a configuration on its entire history. More specifically, we can define the score for a new configuration as the score of its predecessor plus the score of the operator used to produce it.
ConfigScore(c0) = 0.0
ConfigScore(ci) = ConfigScore(ci−1)+Score(ti,ci−1)
This score is used both in filtering the agenda and in selecting the final answer. The new beam search version of transition-based parsing is given in Fig. 14.11.
   function DEPENDENCYBEAMPARSE(words, width) returns dependency tree state←{[root], [words], [], 0.0} ;initial configuration
agenda←⟨state⟩ ;initial agenda
while agenda contains non-final states newagenda ← ⟨⟩
for each state ∈ agenda do
for all {t | t ∈ VALIDOPERATORS(state)} do child←APPLY(t, state) newagenda←ADDTOBEAM(child, newagenda, width)
agenda ← newagenda return BESTOF(agenda)
function ADDTOBEAM(state, agenda, width) returns updated agenda
if LENGTH(agenda) < width then agenda←INSERT(state, agenda)
else if SCORE(state) > SCORE(WORSTOF(agenda)) agenda←REMOVE(WORSTOF(agenda)) agenda←INSERT(state, agenda)
return agenda
 Figure 14.11
 Beam search applied to transition-based dependency parsing.
14.5 Graph-Based Dependency Parsing
edge-factored
Graph-based approaches to dependency parsing search through the space of possible trees for a given sentence for a tree (or trees) that maximize some score. These methods encode the search space as directed graphs and employ methods drawn from graph theory to search the space for optimal solutions. More formally, given a sentence S we’re looking for the best dependency tree in Gs, the space of all possible trees for that sentence, that maximizes some score.
Tˆ (S) = argmax score(t , S) t ∈GS
As with the probabilistic approaches to context-free parsing discussed in Ap- pendix C, the overall score for a tree can be viewed as a function of the scores of the parts of the tree. The focus of this section is on edge-factored approaches where the

maximum spanning tree
14.5 • GRAPH-BASED DEPENDENCY PARSING 297 score for a tree is based on the scores of the edges that comprise the tree.
score(t,S) = 􏰑score(e) e∈t
There are several motivations for the use of graph-based methods. First, unlike transition-based approaches, these methods are capable of producing non-projective trees. Although projectivity is not a significant issue for English, it is definitely a problem for many of the world’s languages. A second motivation concerns parsing accuracy, particularly with respect to longer dependencies. Empirically, transition- based methods have high accuracy on shorter dependency relations but accuracy de- clines significantly as the distance between the head and dependent increases (Mc- Donald and Nivre, 2011). Graph-based methods avoid this difficulty by scoring entire trees, rather than relying on greedy local decisions.
The following section examines a widely-studied approach based on the use of a maximum spanning tree (MST) algorithm for weighted, directed graphs. We then discuss features that are typically used to score trees, as well as the methods used to train the scoring models.
14.5.1 Parsing
The approach described here uses an efficient greedy algorithm to search for optimal spanning trees in directed graphs. Given an input sentence, it begins by constructing a fully-connected, weighted, directed graph where the vertices are the input words and the directed edges represent all possible head-dependent assignments. An addi- tional ROOT node is included with outgoing edges directed at all of the other vertices. The weights in the graph reflect the score for each possible head-dependent relation as provided by a model generated from training data. Given these weights, a maxi- mum spanning tree of this graph emanating from the ROOT represents the preferred dependency parse for the sentence. A directed graph for the example Book that flight is shown in Fig. 14.12, with the maximum spanning tree corresponding to the desired parse shown in blue. For ease of exposition, we’ll focus here on unlabeled dependency parsing. Graph-based approaches to labeled parsing are discussed in Section 14.5.3.
Before describing the algorithm it’s useful to consider two intuitions about di- rected graphs and their spanning trees. The first intuition begins with the fact that every vertex in a spanning tree has exactly one incoming edge. It follows from this that every connected component of a spanning tree will also have one incoming edge. The second intuition is that the absolute values of the edge scores are not critical to determining its maximum spanning tree. Instead, it is the relative weights of the edges entering each vertex that matters. If we were to subtract a constant amount from each edge entering a given vertex it would have no impact on the choice of the maximum spanning tree since every possible spanning tree would decrease by exactly the same amount.
The first step of the algorithm itself is quite straightforward. For each vertex in the graph, an incoming edge (representing a possible head assignment) with the highest score is chosen. If the resulting set of edges produces a spanning tree then we’re done. More formally, given the original fully-connected graph G = (V,E), a subgraph T = (V, F ) is a spanning tree if it has no cycles and each vertex (other than the root) has exactly one edge entering it. If the greedy selection process produces such a tree then it is the best possible one.

298 CHAPTER 14 • DEPENDENCY PARSING
   12
4 4
        root
Book
58
that
flight
6
7
  7
5
 Figure 14.12
   Initial rooted, directed graph for Book that flight.
Unfortunately, this approach doesn’t always lead to a tree since the set of edges selected may contain cycles. Fortunately, in yet another case of multiple discovery, there is a straightforward way to eliminate cycles generated during the greedy se- lection phase. Chu and Liu (1965) and Edmonds (1967) independently developed an approach that begins with greedy selection and follows with an elegant recursive cleanup phase that eliminates cycles.
The cleanup phase begins by adjusting all the weights in the graph by subtracting the score of the maximum edge entering each vertex from the score of all the edges entering that vertex. This is where the intuitions mentioned earlier come into play. We have scaled the values of the edges so that the weight of the edges in the cycle have no bearing on the weight of any of the possible spanning trees. Subtracting the value of the edge with maximum weight from each edge entering a vertex results in a weight of zero for all of the edges selected during the greedy selection phase, including all of the edges involved in the cycle.
Having adjusted the weights, the algorithm creates a new graph by selecting a cycle and collapsing it into a single new node. Edges that enter or leave the cycle are altered so that they now enter or leave the newly collapsed node. Edges that do not touch the cycle are included and edges within the cycle are dropped.
Now, if we knew the maximum spanning tree of this new graph, we would have what we need to eliminate the cycle. The edge of the maximum spanning tree di- rected towards the vertex representing the collapsed cycle tells us which edge to delete to eliminate the cycle. How do we find the maximum spanning tree of this new graph? We recursively apply the algorithm to the new graph. This will either result in a spanning tree or a graph with a cycle. The recursions can continue as long as cycles are encountered. When each recursion completes we expand the collapsed vertex, restoring all the vertices and edges from the cycle with the exception of the single edge to be deleted.
Putting all this together, the maximum spanning tree algorithm consists of greedy edge selection, re-scoring of edge costs and a recursive cleanup phase when needed. The full algorithm is shown in Fig. 14.13.
Fig. 14.14 steps through the algorithm with our Book that flight example. The first row of the figure illustrates greedy edge selection with the edges chosen shown in blue (corresponding to the set F in the algorithm). This results in a cycle between

14.5 • GRAPH-BASED DEPENDENCY PARSING 299
   function MAXSPANNINGTREE(G=(V,E),root,score) returns spanning tree
F←[]
T’←[]
score’ ← []
for each v ∈ V do
bestInEdge←argmaxe=(u,v)∈ E score[e] F←F ∪ bestInEdge
for each e=(u,v) ∈ E do
score’[e]←score[e] − score[bestInEdge]
if T=(V,F) is a spanning tree then return it else
C←a cycle in F
G’←CONTRACT(G,C) T’←MAXSPANNINGTREE(G’,root,score’) T←EXPAND(T’,C)
return T
function CONTRACT(G, C) returns contracted graph function EXPAND(T, C) returns expanded graph
 Figure 14.13
 The Chu-Liu Edmonds algorithm for finding a maximum spanning tree in a weighted directed graph.
that and flight. The scaled weights using the maximum value entering each node are shown in the graph to the right.
Collapsing the cycle between that and flight to a single node (labelled tf) and recursing with the newly scaled costs is shown in the second row. The greedy selec- tion step in this recursion yields a spanning tree that links root to book, as well as an edge that links book to the contracted node. Expanding the contracted node, we can see that this edge corresponds to the edge from book to flight in the original graph. This in turn tells us which edge to drop to eliminate the cycle
On arbitrary directed graphs, this version of the CLE algorithm runs in O(mn) time, where m is the number of edges and n is the number of nodes. Since this par- ticular application of the algorithm begins by constructing a fully connected graph m = n2 yielding a running time of O(n3). Gabow et al. (1986) present a more effi- cient implementation with a running time of O(m + nlogn).
14.5.2 Features and Training
Given a sentence, S, and a candidate tree, T, edge-factored parsing models reduce the score for the tree to a sum of the scores of the edges that comprise the tree.
score(S,T) = 􏰑score(S,e) e∈T
Each edge score can, in turn, be reduced to a weighted sum of features extracted from it.
􏰑N i=1
score(S,e) =
wifi(S,e)

300 CHAPTER 14 • DEPENDENCY PARSING
        root
root
-4
4
4 -3
12 0
Book 5 that 8 flight root Book -2 that 0 flight
12 6 7 7 8 12 -6 7 0 8 7 -1
  5 -7
-4
-3
00 -2
-4 -3
     Book -6 -1
-7
root
tf
root
Book -2 tf 0 -6 -1
-1 -7
  Deleted from cycle
  Book
that flight
  Figure 14.14
 Chu-Liu-Edmonds graph-based example for Book that flight Or more succinctly.
score(S,e) = w· f
Given this formulation, we are faced with two problems in training our parser: identifying relevant features and finding the weights used to score those features.
The features used to train edge-factored models mirror those used in training transition-based parsers (as shown in Fig. 14.9). This is hardly surprising since in both cases we’re trying to capture information about the relationship between heads and their dependents in the context of a single relation. To summarize this earlier discussion, commonly used features include:
• Wordforms, lemmas, and parts of speech of the headword and its dependent.
• Corresponding features derived from the contexts before, after and between
the words.
• Word embeddings.
• The dependency relation itself.
• The direction of the relation (to the right or left).
• The distance from the head to the dependent.
As with transition-based approaches, pre-selected combinations of these features are often used as well.
Given a set of features, our next problem is to learn a set of weights correspond- ing to each. Unlike many of the learning problems discussed in earlier chapters,

inference-based learning
14.6 • EVALUATION 301
here we are not training a model to associate training items with class labels, or parser actions. Instead, we seek to train a model that assigns higher scores to cor- rect trees than to incorrect ones. An effective framework for problems like this is to use inference-based learning combined with the perceptron learning rule. In this framework, we parse a sentence (i.e, perform inference) from the training set using some initially random set of initial weights. If the resulting parse matches the cor- responding tree in the training data, we do nothing to the weights. Otherwise, we find those features in the incorrect parse that are not present in the reference parse and we lower their weights by a small amount based on the learning rate. We do this incrementally for each sentence in our training data until the weights converge.
State-of-the-art algorithms in multilingual parsing are based on recurrent neural networks (RNNs) (Zeman et al. 2017, Dozat et al. 2017).
14.5.3 Advanced Issues in Graph-Based Parsing
14.6 Evaluation
As with phrase structure-based parsing, the evaluation of dependency parsers pro- ceeds by measuring how well they work on a test set. An obvious metric would be exact match (EM) — how many sentences are parsed correctly. This metric is quite pessimistic, with most sentences being marked wrong. Such measures are not fine- grained enough to guide the development process. Our metrics need to be sensitive enough to tell if actual improvements are being made.
For these reasons, the most common method for evaluating dependency parsers are labeled and unlabeled attachment accuracy. Labeled attachment refers to the proper assignment of a word to its head along with the correct dependency relation. Unlabeled attachment simply looks at the correctness of the assigned head, ignor- ing the dependency relation. Given a system output and a corresponding reference parse, accuracy is simply the percentage of words in an input that are assigned the correct head with the correct relation. These metrics are usually referred to as the labeled attachment score (LAS) and unlabeled attachment score (UAS). Finally, we can make use of a label accuracy score (LS), the percentage of tokens with correct labels, ignoring where the relations are coming from.
As an example, consider the reference parse and system parse for the following example shown in Fig. 14.15.
(14.11) Book me the flight through Houston.
The system correctly finds 4 of the 6 dependency relations present in the refer- ence parse and receives an LAS of 2/3. However, one of the 2 incorrect relations found by the system holds between book and flight, which are in a head-dependent relation in the reference parse; the system therefore achieves a UAS of 5/6.
Beyond attachment scores, we may also be interested in how well a system is performing on a particular kind of dependency relation, for example NSUBJ, across a development corpus. Here we can make use of the notions of precision and recall introduced in Chapter 8, measuring the percentage of relations labeled NSUBJ by the system that were correct (precision), and the percentage of the NSUBJ relations present in the development set that were in fact discovered by the system (recall). We can employ a confusion matrix to keep track of how often each dependency type was confused for another.

302 CHAPTER 14 • DEPENDENCY PARSING
Reference and system parses for Book me the flight through Houston, resulting in an LAS of 2/3 and an UAS of 5/6.
14.7 Summary
This chapter has introduced the concept of dependency grammars and dependency parsing. Here’s a summary of the main points that we covered:
• In dependency-based approaches to syntax, the structure of a sentence is de- scribed in terms of a set of binary relations that hold between the words in a sentence. Larger notions of constituency are not directly encoded in depen- dency analyses.
• The relations in a dependency structure capture the head-dependent relation- ship among the words in a sentence.
• Dependency-based analysis provides information directly useful in further language processing tasks including information extraction, semantic parsing and question answering.
• Transition-based parsing systems employ a greedy stack-based algorithm to create dependency structures.
• Graph-based methods for creating dependency structures are based on the use of maximum spanning tree methods from graph theory.
• Both transition-based and graph-based approaches are developed using super- vised machine learning techniques.
• Treebanks provide the data needed to train these systems. Dependency tree- banks can be created directly by human annotators or via automatic transfor- mation from phrase-structure treebanks.
• Evaluation of dependency parsers is based on labeled and unlabeled accuracy scores as measured against withheld development and test corpora.
Bibliographical and Historical Notes
The dependency-based approach to grammar is much older than the relatively re- cent phrase-structure or constituency grammars that have been the primary focus of both theoretical and computational linguistics for years. It has its roots in the an- cient Greek and Indian linguistic traditions. Contemporary theories of dependency grammaralldrawheavilyontheworkofTesnie`re(1959). Themostinfluential dependency grammar frameworks include Meaning-Text Theory (MTT) (Mel’c ̆uk, 1988), Word Grammar (Hudson, 1984), Functional Generative Description (FDG) (Sgall et al., 1986). These frameworks differ along a number of dimensions in- cluding the degree and manner in which they deal with morphological, syntactic,
   root
iobj
obj
Book me the
det
flight
Reference
nmod
case through Houston
root
x-comp
nsubj nmod
det case
Book me the flight through Houston
System
          Figure 14.15
 
BIBLIOGRAPHICAL AND HISTORICAL NOTES 303
semantic and pragmatic factors, their use of multiple layers of representation, and the set of relations used to categorize dependency relations.
Automatic parsing using dependency grammars was first introduced into compu- tational linguistics by early work on machine translation at the RAND Corporation led by David Hays. This work on dependency parsing closely paralleled work on constituent parsing and made explicit use of grammars to guide the parsing process. After this early period, computational work on dependency parsing remained inter- mittent over the following decades. Notable implementations of dependency parsers for English during this period include Link Grammar (Sleator and Temperley, 1993), Constraint Grammar (Karlsson et al., 1995), and MINIPAR (Lin, 2003).
Dependency parsing saw a major resurgence in the late 1990’s with the appear- ance of large dependency-based treebanks and the associated advent of data driven approaches described in this chapter. Eisner (1996) developed an efficient dynamic programming approach to dependency parsing based on bilexical grammars derived from the Penn Treebank. Covington (2001) introduced the deterministic word by word approach underlying current transition-based approaches. Yamada and Mat- sumoto (2003) and Kudo and Matsumoto (2002) introduced both the shift-reduce paradigm and the use of supervised machine learning in the form of support vector machines to dependency parsing.
Nivre (2003) defined the modern, deterministic, transition-based approach to de- pendency parsing. Subsequent work by Nivre and his colleagues formalized and an- alyzed the performance of numerous transition systems, training methods, and meth- ods for dealing with non-projective language Nivre and Scholz 2004, Nivre 2006, Nivre and Nilsson 2005, Nivre et al. 2007, Nivre 2007.
The graph-based maximum spanning tree approach to dependency parsing was introduced by McDonald et al. 2005, McDonald et al. 2005.
The earliest source of data for training and evaluating dependency English parsers came from the WSJ Penn Treebank (Marcus et al., 1993) described in Chapter 12. The use of head-finding rules developed for use with probabilistic parsing facili- tated the automatic extraction of dependency parses from phrase-based ones (Xia and Palmer, 2001).
The long-running Prague Dependency Treebank project (Hajicˇ, 1998) is the most significant effort to directly annotate a corpus with multiple layers of morphological, syntactic and semantic information. The current PDT 3.0 now contains over 1.5 M tokens (Bejcˇek et al., 2013).
Universal Dependencies (UD) (Nivre et al., 2016b) is a project directed at cre- ating a consistent framework for dependency treebank annotation across languages with the goal of advancing parser development across the world’s languages. The UD annotation scheme evolved out of several distinct efforts including Stanford de- pendencies (de Marneffe et al. 2006, de Marneffe and Manning 2008, de Marneffe et al. 2014), Google’s universal part-of-speech tags (Petrov et al., 2012), and the In- terset interlingua for morphosyntactic tagsets (Zeman, 2008). Under the auspices of this effort, treebanks for over 90 languages have been annotated and made available in a single consistent format (Nivre et al., 2016b).
The Conference on Natural Language Learning (CoNLL) has conducted an in- fluential series of shared tasks related to dependency parsing over the years (Buch- holz and Marsi 2006, Nilsson et al. 2007, Surdeanu et al. 2008, Hajicˇ et al. 2009). More recent evaluations have focused on parser robustness with respect to morpho- logically rich languages (Seddah et al., 2013), and non-canonical language forms such as social media, texts, and spoken language (Petrov and McDonald, 2012).

304 CHAPTER 14 • DEPENDENCY PARSING
Choi et al. (2015) presents a performance analysis of 10 dependency parsers across
a range of metrics, as well as DEPENDABLE, a robust parser evaluation tool.
Exercises

 CHAPTER
15 Logical Representations of Sentence Meaning
meaning representations
ISHMAEL: Surely all this is not without meaning. Herman Melville, Moby Dick
In this chapter we introduce the idea that the meaning of linguistic expressions can be captured in formal structures called meaning representations. Consider tasks that require some form of semantic processing, like learning to use a new piece of software by reading the manual, deciding what to order at a restaurant by reading a menu, or following a recipe. Accomplishing these tasks requires representations that link the linguistic elements to the necessary non-linguistic knowledge of the world. Reading a menu and deciding what to order, giving advice about where to go to dinner, following a recipe, and generating new recipes all require knowledge about food and its preparation, what people like to eat, and what restaurants are like. Learning to use a piece of software by reading a manual, or giving advice on using software, requires knowledge about the software and similar apps, computers, and users in general.
In this chapter, we assume that linguistic expressions have meaning representa- tions that are made up of the same kind of stuff that is used to represent this kind of everyday common-sense knowledge of the world. The process whereby such repre- sentations are created and assigned to linguistic inputs is called semantic parsing or semantic analysis, and the entire enterprise of designing meaning representations and associated semantic parsers is referred to as computational semantics.
A list of symbols, two directed graphs, and a record structure: a sampler of meaning representations for I have a car.
Consider Fig. 15.1, which shows example meaning representations for the sen- tence I have a car using four commonly used meaning representation languages. The top row illustrates a sentence in First-Order Logic, covered in detail in Sec- tion 15.3; the directed graph and its corresponding textual form is an example of an Abstract Meaning Representation (AMR) form (Banarescu et al., 2013), and on the right is a frame-based or slot-filler representation, discussed in Section 15.5 and again in Chapter 17.
semantic parsing
computational semantics
   ∃e,y Having(e)∧Haver(e,Speaker)∧HadThing(e,y)∧Car(y)
   arg0
i / i
arg1
c / car
h / have-01
(h / have-0 arg arg
1
0: (i / i)
1: (c / car))
Having:
Haver: Speaker
HadThing: Car
   Figure 15.1
 
306 CHAPTER 15 • LOGICAL REPRESENTATIONS OF SENTENCE MEANING
While there are non-trivial differences among these approaches, they all share the notion that a meaning representation consists of structures composed from a set of symbols, or representational vocabulary. When appropriately arranged, these symbol structures are taken to correspond to objects, properties of objects, and rela- tions among objects in some state of affairs being represented or reasoned about. In this case, all four representations make use of symbols corresponding to the speaker, a car, and a relation denoting the possession of one by the other.
Importantly, these representations can be viewed from at least two distinct per- spectives in all of these approaches: as representations of the meaning of the par- ticular linguistic input I have a car, and as representations of the state of affairs in some world. It is this dual perspective that allows these representations to be used to link linguistic inputs to the world and to our knowledge of it.
In the next sections we give some background: our desiderata for a meaning representation language and some guarantees that these representations will actually do what we need them to do—provide a correspondence to the state of affairs being represented. In Section 15.3 we introduce First-Order Logic, historically the primary technique for investigating natural language semantics, and see in Section 15.4 how it can be used to capture the semantics of events and states in English. Chapter 16 then introduces techniques for semantic parsing: generating these formal meaning representations given linguistic inputs.
15.1 Computational Desiderata for Representations
verifiability
Let’s consider why meaning representations are needed and what they should do for us. To focus this discussion, let’s consider a system that gives restaurant advice to tourists based on a knowledge base.
Verifiability
Consider the following simple question:
(15.1) Does Maharani serve vegetarian food?
To answer this question, we have to know what it’s asking, and know whether what it’s asking is true of Maharini or not. verifiability is a system’s ability to compare the state of affairs described by a representation to the state of affairs in some world as modeled in a knowledge base. For example we’ll need some sort of representation like Serves(Maharani,VegetarianFood), which a system can can match against its knowledge base of facts about particular restaurants, and if it find a representation matching this proposition, it can answer yes. Otherwise, it must either say No if its knowledge of local restaurants is complete, or say that it doesn’t know if it knows its knowledge is incomplete.
Unambiguous Representations
Semantics, like all the other domains we have studied, is subject to ambiguity. Words and sentences have different meaning representations in different contexts. Consider the following example:
(15.2) I wanna eat someplace that’s close to ICSI.
This sentence can either mean that the speaker wants to eat at some nearby location, or under a Godzilla-as-speaker interpretation, the speaker may want to devour some

vagueness
15.1 • COMPUTATIONAL DESIDERATA FOR REPRESENTATIONS 307
nearby location. The sentence is ambiguous; a single linguistic expression can have one of two meanings. But our meaning representations itself cannot be ambiguous. The representation of an input’s meaning should be free from any ambiguity, so that the the system can reason over a representation that means either one thing or the other in order to decide how to answer.
A concept closely related to ambiguity is vagueness: in which a meaning repre- sentation leaves some parts of the meaning underspecified. Vagueness does not give rise to multiple representations. Consider the following request:
(15.3) I want to eat Italian food.
While Italian food may provide enough information to provide recommendations, it is nevertheless vague as to what the user really wants to eat. A vague representation of the meaning of this phrase may be appropriate for some purposes, while a more specific representation may be needed for other purposes.
Canonical Form
The doctrine of canonical form says that distinct inputs that mean the same thing should have the same meaning representation. This approach greatly simplifies rea- soning, since systems need only deal with a single meaning representation for a potentially wide range of expressions.
Consider the following alternative ways of expressing (15.1):
(15.4) Does Maharani have vegetarian dishes? (15.5) Do they have vegetarian food at Maharani? (15.6) Are vegetarian dishes served at Maharani? (15.7) Does Maharani serve vegetarian fare?
Despite the fact these alternatives use different words and syntax, we want them to map to a single canonical meaning representations. If they were all different, assuming the system’s knowledge base contains only a single representation of this fact, most of the representations wouldn’t match. We could, of course, store all possible alternative representations of the same fact in the knowledge base, but doing so would lead to enormous difficult in keeping the knowledge base consistent.
Canonical form does complicate the task of semantic parsing. Our system must conclude that vegetarian fare, vegetarian dishes, and vegetarian food refer to the same thing, that having and serving are equivalent here, and that all these parse structures still lead to the same meaning representation. Or consider this pair of examples:
(15.8) Maharani serves vegetarian dishes.
(15.9) Vegetarian dishes are served by Maharani.
Despite the different placement of the arguments to serve, a system must still assign Maharani and vegetarian dishes to the same roles in the two examples by draw- ing on grammatical knowledge, such as the relationship between active and passive sentence constructions.
Inference and Variables
What about more complex requests such as:
(15.10) Can vegetarians eat at Maharani?
This request results in the same answer as the others not because they mean the same thing, but because there is a common-sense connection between what vegetarians eat
canonical form

308
CHAPTER 15 • LOGICAL REPRESENTATIONS OF SENTENCE MEANING
15.2
inference
variables
model
What is it about about meaning representation languages that allows them to fulfill these desiderata, bridging the gap from formal representations to representations that tell us something about some state of affairs in the world?
The answer is a model. A model is a formal construct that stands for the partic- ular state of affairs in the world. Expressions in a meaning representation language can be mapped to elements of the model, like objects, properties of objects, and relations among objects. If the model accurately captures the facts we’re interested in, then a consistent mapping between the meaning representation and the model provides the bridge between meaning representation and world. Models provide a surprisingly simple and powerful way to ground the expressions in meaning repre- sentation languages.
First, some terminology. The vocabulary of a meaning representation consists of two parts: the non-logical vocabulary and the logical vocabulary. The non-logical vocabulary consists of the open-ended set of names for the objects, properties, and relations that make up the world we’re trying to represent. These appear in various schemes as predicates, nodes, labels on links, or labels in slots in frames, The log- ical vocabulary consists of the closed set of symbols, operators, quantifiers, links,
non-logical vocabulary
logical vocabulary
and what vegetarian restaurants serve. This is a fact about the world. We’ll need to connect the meaning representation of this request with this fact about the world in a knowledge base. A system must be able to use inference—to draw valid conclusions based on the meaning representation of inputs and its background knowledge. It must be possible for the system to draw conclusions about the truth of propositions that are not explicitly represented in the knowledge base but that are nevertheless logically derivable from the propositions that are present.
Now consider the following somewhat more complex request:
(15.11) I’d like to find a restaurant where I can get vegetarian food.
This request does not make reference to any particular restaurant; the user wants in- formation about an unknown restaurant that serves vegetarian food. Since no restau- rants are named, simple matching is not going to work. Answering this request requires the use of variables, using some representation like the following:
Serves(x,VegetarianFood) (15.12)
Matching succeeds only if the variable x can be replaced by some object in the knowledge base in such a way that the entire proposition will then match. The con- cept that is substituted for the variable can then be used to fulfill the user’s request. It is critical for any meaning representation language to be able to handle these kinds of indefinite references.
Expressiveness
Finally, a meaning representation scheme must be expressive enough to handle a wide range of subject matter, ideally any sensible natural language utterance. Al- though this is probably too much to expect from any single representational system, First-Order Logic, as described in Section 15.3, is expressive enough to handle quite a lot of what needs to be represented.
Model-Theoretic Semantics

denotation domain
extensional
interpretation
15.2 • MODEL-THEORETIC SEMANTICS 309
etc., that provide the formal means for composing expressions in a given meaning representation language.
Each element of the non-logical vocabulary must have a denotation in the model, meaning that every element corresponds to a fixed, well-defined part of the model. Let’s start with objects. The domain of a model is the set of objects that are being represented. Each distinct concept, category, or individual denotes a unique element in the domain.
We represent properties of objects in a model by denoting the domain elements that have the property; that is, properties denote sets. The denotation of the property red is the set of things we think are red. Similarly, a relations among object denote a set of ordered lists, or tuples, of domain elements that take part in the relations: the denotation of the relation Married is set of pairs of domain objects that are married. This approach to properties and relations is called extensional, because we define concepts by their extension, their denotations. To summarize:
• Objects denote elements of the domain
• Properties denote sets of elements of the domain
• Relations denote sets of tuples of elements of the domain
We now need a mapping that gets us from our meaning representation to the corresponding denotations: a function that maps from the non-logical vocabulary of our meaning representation to the proper denotations in the model. We’ll call such a mapping an interpretation.
Let’s return to our restaurant advice application, and let its domain consist of sets of restaurants, patrons, facts about the likes and dislikes of the patrons, and facts about the restaurants such as their cuisine, typical cost, and noise level. To begin populating our domain, D, let’s assume that we’re dealing with four patrons designated by the non-logical symbols Matthew, Franco, Katie, and Caroline. de- noting four unique domain elements. We’ll use the constants a,b,c and, d to stand for these domain elements. We’re deliberately using meaningless, non-mnemonic names for our domain elements to emphasize the fact that whatever it is that we know about these entities has to come from the formal properties of the model and not from the names of the symbols. Continuing, let’s assume that our application includes three restaurants, designated as Frasca, Med, and Rio in our meaning rep- resentation, that denote the domain elements e, f , and g. Finally, let’s assume that we’re dealing with the three cuisines Italian, Mexican, and Eclectic, denoted by h, i, and j in our model.
Properties like Noisy denote the subset of restaurants from our domain that are known to be noisy. Two-place relational notions, such as which restaurants individ- ual patrons Like, denote ordered pairs, or tuples, of the objects from the domain. And, since we decided to represent cuisines as objects in our model, we can cap- ture which restaurants Serve which cuisines as a set of tuples. One possible state of affairs using this scheme is given in Fig. 15.2.
Given this simple scheme, we can ground our meaning representations by con- sulting the appropriate denotations in the corresponding model. For example, we can evaluate a representation claiming that Matthew likes the Rio, or that The Med serves Italian by mapping the objects in the meaning representations to their corresponding domain elements and mapping any links, predicates, or slots in the meaning repre- sentation to the appropriate relations in the model. More concretely, we can verify a representation asserting that Matthew likes Frasca by first using our interpretation function to map the symbol Matthew to its denotation a, Frasca to e, and the Likes relation to the appropriate set of tuples. We then check that set of tuples for the

310
CHAPTER 15 • LOGICAL REPRESENTATIONS OF SENTENCE MEANING
Domain
Matthew, Franco, Katie and Caroline Frasca, Med, Rio
Italian, Mexican, Eclectic
Properties
Noisy
Frasca, Med, and Rio are noisy
Relations
Likes
Matthew likes the Med
Katie likes the Med and Rio Franco likes Frasca
Caroline likes the Med and Rio
Serves
Med serves eclectic Rio serves Mexican Frasca serves Italian
D = {a,b,c,d,e, f,g,h,i, j} a,b,c,d
e, f , g
h,i, j
Noisy = {e, f,g}
Likes = {⟨a, f⟩,⟨c, f⟩,⟨c,g⟩,⟨b,e⟩,⟨d, f⟩,⟨d,g⟩}
Serves = {⟨ f , j⟩, ⟨g, i⟩, ⟨e, h⟩}
   Figure 15.2
 truth- conditional semantics
A model of the restaurant world.
presence of the tuple ⟨a, e⟩. If, as it is in this case, the tuple is present in the model, then we can conclude that Matthew likes Frasca is true; if it isn’t then we can’t.
This is all pretty straightforward—we’re using sets and operations on sets to ground the expressions in our meaning representations. Of course, the more inter- esting part comes when we consider more complex examples such as the following:
(15.13) Katie likes the Rio and Matthew likes the Med. (15.14) Katie and Caroline like the same restaurants. (15.15) Franco likes noisy, expensive restaurants. (15.16) Not everybody likes Frasca.
Our simple scheme for grounding the meaning of representations is not adequate for examples such as these. Plausible meaning representations for these examples will not map directly to individual entities, properties, or relations. Instead, they involve complications such as conjunctions, equality, quantified variables, and nega- tions. To assess whether these statements are consistent with our model, we’ll have to tear them apart, assess the parts, and then determine the meaning of the whole from the meaning of the parts.
Consider the first example above. A meaning representation for this example will include two distinct propositions expressing the individual patron’s preferences, conjoined with some kind of implicit or explicit conjunction operator. Our model doesn’t have a relation that encodes pairwise preferences for all of the patrons and restaurants in our model, nor does it need to. We know from our model that Matthew likes the Med and separately that Katie likes the Rio (that is, the tuples ⟨a, f ⟩ and ⟨c,g⟩ are members of the set denoted by the Likes relation). All we really need to know is how to deal with the semantics of the conjunction operator. If we assume the simplest possible semantics for the English word and, the whole statement is true if it is the case that each of the components is true in our model. In this case, both components are true since the appropriate tuples are present and therefore the sentence as a whole is true.
What we’ve done with this example is provide a truth-conditional semantics

  Figure 15.3
Formula → |
| | |
AtomicFormula → Term →
|
| Connective → Quantifier → Constant → Variable → Predicate → Function →
15.3 • FIRST-ORDER LOGIC 311
AtomicFormula
Formula Connective Formula QuantifierVariable,...Formula
¬ Formula
(Formula)
Predicate(Term,...) Function(Term,...)
Constant
Variable
∧| ∨| =⇒
∀ | ∃
A | VegetarianFood | Maharani··· x| y| ···
Serves | Near | ···
LocationOf | CuisineOf | ···
 A context-free grammar specification of the syntax of First-Order Logic rep- resentations. Adapted from Russell and Norvig (2002).
for the assumed conjunction operator in some meaning representation. That is, we’ve provided a method for determining the truth of a complex expression from the meanings of the parts (by consulting a model) and the meaning of an operator by consulting a truth table. Meaning representation languages are truth-conditional to the extent that they give a formal specification as to how we can determine the mean- ing of complex sentences from the meaning of their parts. In particular, we need to know the semantics of the entire logical vocabulary of the meaning representation scheme being used.
Note that although the details of how this happens depend on details of the par- ticular meaning representation being used, it should be clear that assessing the truth conditions of examples like these involves nothing beyond the simple set operations we’ve been discussing. We return to these issues in the next section in the context of the semantics of First-Order Logic.
15.3 First-Order Logic
First-Order Logic (FOL) is a flexible, well-understood, and computationally tractable meaning representation language that satisfies many of the desiderata given in Sec- tion 15.1. It provides a sound computational basis for the verifiability, inference, and expressiveness requirements, as well as a sound model-theoretic semantics.
An additional attractive feature of FOL is that it makes few specific commitments as to how things ought to be represented, and those it does are shared by many of the schemes mentioned earlier: the represented world consists of objects, properties of objects, and relations among objects.
The remainder of this section introduces the basic syntax and semantics of FOL and then describes the application of FOL to the representation of events.
15.3.1 Basic Elements of First-Order Logic
Let’s explore FOL by first examining its various atomic elements and then showing how they can be composed to create larger meaning representations. Figure 15.3,
 
312
CHAPTER 15 • LOGICAL REPRESENTATIONS OF SENTENCE MEANING
term
constant
function
variable
which provides a complete context-free grammar for the particular syntax of FOL that we will use, is our roadmap for this section.
Let’s begin by examining the notion of a term, the FOL device for representing objects. As can be seen from Fig. 15.3, FOL provides three ways to represent these basic building blocks: constants, functions, and variables. Each of these devices can be thought of as designating an object in the world under consideration.
Constants in FOL refer to specific objects in the world being described. Such constants are conventionally depicted as either single capitalized letters such as A and B or single capitalized words that are often reminiscent of proper nouns such as Maharani and Harry. Like programming language constants, FOL constants refer to exactly one object. Objects can, however, have multiple constants that refer to them.
Functions in FOL correspond to concepts that are often expressed in English as genitives such as Frasca’s location. A FOL translation of such an expression might look like the following.
LocationOf (Frasca) (15.17)
FOL functions are syntactically the same as single argument predicates. It is im- portant to remember, however, that while they have the appearance of predicates, they are in fact terms in that they refer to unique objects. Functions provide a con- venient way to refer to specific objects without having to associate a named constant with them. This is particularly convenient in cases in which many named objects, like restaurants, have a unique concept such as a location associated with them.
Variables are our final FOL mechanism for referring to objects. Variables, de- picted as single lower-case letters, let us make assertions and draw inferences about objects without having to make reference to any particular named object. This ability to make statements about anonymous objects comes in two flavors: making state- ments about a particular unknown object and making statements about all the objects in some arbitrary world of objects. We return to the topic of variables after we have presented quantifiers, the elements of FOL that make variables useful.
Now that we have the means to refer to objects, we can move on to the FOL mechanisms that are used to state relations that hold among objects. Predicates are symbols that refer to, or name, the relations that hold among some fixed number of objects in a given domain. Returning to the example introduced informally in Section 15.1, a reasonable FOL representation for Maharani serves vegetarian food might look like the following formula:
Serves(Maharani,VegetarianFood) (15.18)
This FOL sentence asserts that Serves, a two-place predicate, holds between the objects denoted by the constants Maharani and VegetarianFood.
A somewhat different use of predicates is illustrated by the following fairly typ- ical representation for a sentence like Maharani is a restaurant:
Restaurant(Maharani) (15.19)
This is an example of a one-place predicate that is used, not to relate multiple objects, but rather to assert a property of a single object. In this case, it encodes the category membership of Maharani.
With the ability to refer to objects, to assert facts about objects, and to relate objects to one another, we can create rudimentary composite representations. These representations correspond to the atomic formula level in Fig. 15.3. This ability

logical connectives
15.3 • FIRST-ORDER LOGIC 313
to compose complex representations is, however, not limited to the use of single predicates. Larger composite representations can also be put together through the use of logical connectives. As can be seen from Fig. 15.3, logical connectives let us create larger representations by conjoining logical formulas using one of three operators. Consider, for example, the following BERP sentence and one possible representation for it:
(15.20) I only have five dollars and I don’t have a lot of time. Have(Speaker,FiveDollars)∧¬Have(Speaker,LotOfTime) (15.21)
The semantic representation for this example is built up in a straightforward way from the semantics of the individual clauses through the use of the ∧ and ¬ operators. Note that the recursive nature of the grammar in Fig. 15.3 allows an infinite number of logical formulas to be created through the use of these connectives. Thus, as with syntax, we can use a finite device to create an infinite number of representations.
15.3.2 Variables and Quantifiers
We now have all the machinery necessary to return to our earlier discussion of vari- ables. As noted above, variables are used in two ways in FOL: to refer to particular anonymous objects and to refer generically to all objects in a collection. These two uses are made possible through the use of operators known as quantifiers. The two operators that are basic to FOL are the existential quantifier, which is denoted ∃ and is pronounced as “there exists”, and the universal quantifier, which is denoted ∀ and is pronounced as “for all”.
The need for an existentially quantified variable is often signaled by the presence of an indefinite noun phrase in English. Consider the following example:
(15.22) a restaurant that serves Mexican food near ICSI.
Here, reference is being made to an anonymous object of a specified category with particular properties. The following would be a reasonable representation of the meaning of such a phrase:
∃xRestaurant(x) ∧ Serves(x,MexicanFood) (15.23) ∧ Near((LocationOf(x),LocationOf(ICSI))
The existential quantifier at the head of this sentence instructs us on how to interpret the variable x in the context of this sentence. Informally, it says that for this sentence to be true there must be at least one object such that if we were to substitute it for the variable x, the resulting sentence would be true. For example, if AyCaramba is a Mexican restaurant near ICSI, then substituting AyCaramba for x results in the following logical formula:
Restaurant(AyCaramba)∧Serves(AyCaramba,MexicanFood) (15.24) ∧Near((LocationOf(AyCaramba),LocationOf(ICSI))
Based on the semantics of the ∧ operator, this sentence will be true if all of its three component atomic formulas are true. These in turn will be true if they are either present in the system’s knowledge base or can be inferred from other facts in the knowledge base.
The use of the universal quantifier also has an interpretation based on substi- tution of known objects for variables. The substitution semantics for the universal
quantifiers

314 CHAPTER 15 • LOGICAL REPRESENTATIONS OF SENTENCE MEANING
quantifier takes the expression for all quite literally; the ∀ operator states that for the logical formula in question to be true, the substitution of any object in the knowledge base for the universally quantified variable should result in a true formula. This is in marked contrast to the ∃ operator, which only insists on a single valid substitution for the sentence to be true.
Consider the following example:
(15.25) All vegetarian restaurants serve vegetarian food.
A reasonable representation for this sentence would be something like the following:
∀xVegetarianRestaurant(x) =⇒ Serves(x,VegetarianFood) (15.26)
For this sentence to be true, every substitution of a known object for x must result in a sentence that is true. We can divide the set of all possible substitutions into the set of objects consisting of vegetarian restaurants and the set consisting of everything else. Let us first consider the case in which the substituted object actually is a vegetarian restaurant; one such substitution would result in the following sentence:
VegetarianRestaurant(Maharani) =⇒ Serves(Maharani,VegetarianFood)
(15.27)
If we assume that we know that the consequent clause Serves(Maharani,VegetarianFood) (15.28)
is true, then this sentence as a whole must be true. Both the antecedent and the consequent have the value True and, therefore, according to the first two rows of Fig. 15.4 on page 316 the sentence itself can have the value True. This result will be the same for all possible substitutions of Terms representing vegetarian restaurants for x.
Remember, however, that for this sentence to be true, it must be true for all possible substitutions. What happens when we consider a substitution from the set of objects that are not vegetarian restaurants? Consider the substitution of a non- vegetarian restaurant such as AyCaramba for the variable x:
Veget arianRest aurant (AyCaramba) =⇒ Serves(AyCaramba, Veget arianFood )
Since the antecedent of the implication is False, we can determine from Fig. 15.4 that the sentence is always True, again satisfying the ∀ constraint.
Note that it may still be the case that AyCaramba serves vegetarian food with- out actually being a vegetarian restaurant. Note also that, despite our choice of examples, there are no implied categorical restrictions on the objects that can be substituted for x by this kind of reasoning. In other words, there is no restriction of x to restaurants or concepts related to them. Consider the following substitution:
VegetarianRestaurant(Carburetor) =⇒ Serves(Carburetor,VegetarianFood)
Here the antecedent is still false so the rule remains true under this kind of irrelevant substitution.
To review, variables in logical formulas must be either existentially (∃) or uni- versally (∀) quantified. To satisfy an existentially quantified variable, at least one substitution must result in a true sentence. To satisfy a universally quantified vari- able, all substitutions must result in true sentences.

lambda notation
λ -reduction
The final element we need to complete our discussion of FOL is called the lambda notation (Church, 1940). This notation provides a way to abstract from fully speci- fied FOL formulas in a way that will be particularly useful for semantic analysis. The lambda notation extends the syntax of FOL to include expressions of the following form:
λ x.P(x) (15.29)
Such expressions consist of the Greek symbol λ , followed by one or more variables, followed by a FOL formula that makes use of those variables.
The usefulness of these λ-expressions is based on the ability to apply them to logical terms to yield new FOL expressions where the formal parameter variables are bound to the specified terms. This process is known as λ-reduction, and consists of a simple textual replacement of the λ variables and the removal of the λ. The following expressions illustrate the application of a λ -expression to the constant A, followed by the result of performing a λ -reduction on this expression:
λ x.P(x)(A) (15.30) P(A)
An important and useful variation of this technique is the use of one λ-expression as the body of another as in the following expression:
λx.λy.Near(x,y) (15.31)
This fairly abstract expression can be glossed as the state of something being near something else. The following expressions illustrate a single λ -application and sub- sequent reduction with this kind of embedded λ -expression:
λx.λy.Near(x,y)(Bacaro) (15.32) λy.Near(Bacaro,y)
The important point here is that the resulting expression is still a λ -expression; the first reduction bound the variable x and removed the outer λ, thus revealing the inner expression. As might be expected, this resulting λ-expression can, in turn, be applied to another term to arrive at a fully specified logical formula, as in the following:
λy.Near(Bacaro,y)(Centro) (15.33) Near(Bacaro,Centro)
currying
This general technique, called currying1 (Scho ̈nfinkel, 1924) is a way of converting a predicate with multiple arguments into a sequence of single-argument predicates.
As we show in Chapter 16, the λ -notation provides a way to incrementally gather arguments to a predicate when they do not all appear together as daughters of the predicate in a parse tree.
15.3.4 The Semantics of First-Order Logic
The various objects, properties, and relations represented in a FOL knowledge base acquire their meanings by virtue of their correspondence to objects, properties, and
1 Currying is the standard term, although Heim and Kratzer (1998) present an interesting argument for the term Scho ̈nkfinkelization over currying, since Curry later built on Scho ̈nfinkel’s work.
15.3.3 Lambda Notation
15.3 • FIRST-ORDER LOGIC 315
 
316 CHAPTER 15 • LOGICAL REPRESENTATIONS OF SENTENCE MEANING
relations out in the external world being modeled. We can accomplish this by em- ploying the model-theoretic approach introduced in Section 15.2. Recall that this approach employs simple set-theoretic notions to provide a truth-conditional map- ping from the expressions in a meaning representation to the state of affairs being modeled. We can apply this approach to FOL by going through all the elements in Fig. 15.3 on page 311 and specifying how each should be accounted for.
We can start by asserting that the objects in our world, FOL terms, denote ele- ments in a domain, and asserting that atomic formulas are captured either as sets of domain elements for properties, or as sets of tuples of elements for relations. As an example, consider the following:
(15.34) Centro is near Bacaro.
Capturing the meaning of this example in FOL involves identifying the Terms and Predicates that correspond to the various grammatical elements in the sentence and creating logical formulas that capture the relations implied by the words and syntax of the sentence. For this example, such an effort might yield something like the following:
Near(Centro,Bacaro) (15.35)
The meaning of this logical formula is based on whether the domain elements de- noted by the terms Centro and Bacaro are contained among the tuples denoted by the relation denoted by the predicate Near in the current model.
The interpretation of formulas involving logical connectives is based on the meanings of the components in the formulas combined with the meanings of the connectives they contain. Figure 15.4 gives interpretations for each of the logical operators shown in Fig. 15.3.
Truth table giving the semantics of the various logical connectives.
The semantics of the ∧ (and) and ¬ (not) operators are fairly straightforward, and are correlated with at least some of the senses of the corresponding English terms. However, it is worth pointing out that the ∨ (or) operator is not disjunctive in the same way that the corresponding English word is, and that the =⇒ (im- plies) operator is only loosely based on any common-sense notions of implication or causation.
The final bit we need to address involves variables and quantifiers. Recall that there are no variables in our set-based models, only elements of the domain and relations that hold among them. We can provide a model-based account for formulas with variables by employing the notion of a substitution introduced earlier on page 313. Formulas involving ∃ are true if a substitution of terms for variables results in a formula that is true in the model. Formulas involving ∀ must be true under all possible substitutions.
15.3.5 Inference
A meaning representation language must support inference to add valid new propo- sitions to a knowledge base or to determine the truth of propositions not explicitly
  P Q ¬P P∧Q P∨Q P=⇒Q
False False True False True True True False False True True False
False False False True
False True True True True False True True
  Figure 15.4
 
Modus ponens
15.3 • FIRST-ORDER LOGIC 317
contained within a knowledge base (Section 15.1). This section briefly discusses modus ponens, the most widely implemented inference method provided by FOL.
Modus ponens is a form of inference that corresponds to what is informally known as if-then reasoning. We can abstractly define modus ponens as follows, where α and β should be taken as FOL formulas:
forward chaining
Here, the formula VegetarianRestaurant(Leaf ) matches the antecedent of the rule, thus allowing us to use modus ponens to conclude Serves(Leaf ,VegetarianFood).
Modus ponens can be put to practical use in one of two ways: forward chaining and backward chaining. In forward chaining systems, modus ponens is used in precisely the manner just described. As individual facts are added to the knowledge base, modus ponens is used to fire all applicable implication rules. In this kind of arrangement, as soon as a new fact is added to the knowledge base, all applicable implication rules are found and applied, each resulting in the addition of new facts to the knowledge base. These new propositions in turn can be used to fire implication rules applicable to them. The process continues until no further facts can be deduced.
The forward chaining approach has the advantage that facts will be present in the knowledge base when needed, because, in a sense all inference is performed in advance. This can substantially reduce the time needed to answer subsequent queries since they should all amount to simple lookups. The disadvantage of this approach is that facts that will never be needed may be inferred and stored.
In backward chaining, modus ponens is run in reverse to prove specific propo- sitions called queries. The first step is to see if the query formula is true by determin- ing if it is present in the knowledge base. If it is not, then the next step is to search for applicable implication rules present in the knowledge base. An applicable rule is one whereby the consequent of the rule matches the query formula. If there are any such rules, then the query can be proved if the antecedent of any one them can be shown to be true. This can be performed recursively by backward chaining on the antecedent as a new query. The Prolog programming language is a backward chaining system that implements this strategy.
To see how this works, let’s assume that we have been asked to verify the truth of the proposition Serves(Leaf,VegetarianFood), assuming the facts given above the line in (15.37). Since this proposition is not present in the knowledge base, a search for an applicable rule is initiated resulting in the rule given above. After substituting
backward chaining
α
α =⇒ β
β
(15.36)
 A schema like this indicates that the formula below the line can be inferred from the formulas above the line by some form of inference. Modus ponens states that if the left-hand side of an implication rule is true, then the right-hand side of the rule can be inferred. In the following discussions, we will refer to the left-hand side of an implication as the antecedent and the right-hand side as the consequent.
For a typical use of modus ponens, consider the following example, which uses a rule from the last section:
VegetarianRestaurant(Leaf )
∀xVegetarianRestaurant(x) =⇒ Serves(x,VegetarianFood)
Serves(Leaf ,VegetarianFood)
(15.37)
 
318
CHAPTER 15 • LOGICAL REPRESENTATIONS OF SENTENCE MEANING
abduction complete resolution
the constant Leaf for the variable x, our next task is to prove the antecedent of the rule, VegetarianRestaurant(Leaf ), which, of course, is one of the facts we are given. Note that it is critical to distinguish between reasoning by backward chaining from queries to known facts and reasoning backwards from known consequents to unknown antecedents. To be specific, by reasoning backwards we mean that if the consequent of a rule is known to be true, we assume that the antecedent will be as well. For example, let’s assume that we know that Serves(Leaf ,VegetarianFood) is true. Since this fact matches the consequent of our rule, we might reason backwards
to the conclusion that VegetarianRestaurant(Leaf ).
While backward chaining is a sound method of reasoning, reasoning backwards
is an invalid, though frequently useful, form of plausible reasoning. Plausible rea- soning from consequents to antecedents is known as abduction, and as we show in Chapter 22, is often useful in accounting for many of the inferences people make while analyzing extended discourses.
While forward and backward reasoning are sound, neither is complete. This means that there are valid inferences that cannot be found by systems using these methods alone. Fortunately, there is an alternative inference technique called reso- lution that is sound and complete. Unfortunately, inference systems based on res- olution are far more computationally expensive than forward or backward chaining systems. In practice, therefore, most systems use some form of chaining and place a burden on knowledge base developers to encode the knowledge in a fashion that permits the necessary inferences to be drawn.
15.4 Event and State Representations
Much of the semantics that we wish to capture consists of representations of states and events. States are conditions, or properties, that remain unchanged over an extended period of time, and events denote changes in some state of affairs. The representation of both states and events may involve a host of participants, props, times and locations.
The representations for events and states that we have used thus far have con- sisted of single predicates with as many arguments as are needed to incorporate all the roles associated with a given example. For example, the representation for Leaf serves vegetarian fare consists of a single predicate with arguments for the entity doing the serving and the thing served.
Serves(Leaf ,VegetarianFare) (15.38)
This approach assumes that the predicate used to represent an event verb has the same number of arguments as are present in the verb’s syntactic subcategorization frame. Unfortunately, this is clearly not always the case. Consider the following examples of the verb eat:
(15.39) I ate.
(15.40) I ate a turkey sandwich.
(15.41) I ate a turkey sandwich at my desk. (15.42) I ate at my desk.
(15.43) I ate lunch.
(15.44) I ate a turkey sandwich for lunch.

arity event variable
15.4 • EVENT AND STATE REPRESENTATIONS 319 (15.45) I ate a turkey sandwich for lunch at my desk.
Clearly, choosing the correct number of arguments for the predicate represent- ing the meaning of eat is a tricky problem. These examples introduce five distinct arguments, or roles, in an array of different syntactic forms, locations, and combina- tions. Unfortunately, predicates in FOL have fixed arity – they take a fixed number of arguments.
To address this problem, we introduce the notion of an event variable to allow us to make assertions about particular events. To do this, we can refactor our event predicates to have an existentially quantified variable as their first, and only, argu- ment. Using this event variable, we can introduce additional predicates to represent the other information we have about the event. These predicates take an event vari- able as their first argument and related FOL terms as their second argument. The following formula illustrates this scheme with the meaning representation of 15.40 from our earlier discussion.
∃eEating(e) ∧ Eater(e,Speaker)∧Eaten(e,TurkeySandwich)
Here, the quantified variable e stands for the eating event and is used to bind the event predicate with the core information provided via the named roles Eater and Eaten. To handle the more complex examples, we simply add additional relations to capture the provided information, as in the following for 15.45.
∃e Eating(e) ∧ Eater(e,Speaker)∧Eaten(e,TurkeySandwich) (15.46) ∧ Meal(e,Lunch)∧Location(e,Desk)
Event representations of this sort are referred to as neo-Davidsonian event rep- resentations (Davidson 1967, Parsons 1990) after the philosopher Donald Davidson who introduced the notion of an event variable (Davidson, 1967). To summarize, in the neo-Davidsonian approach to event representations:
• Events are captured with predicates that take a single event variable as an argument.
• There is no need to specify a fixed number of arguments for a given FOL predicate; rather, as many roles and fillers can be glued on as are provided in the input.
• No more roles are postulated than are mentioned in the input.
• Thelogicalconnectionsamongcloselyrelatedinputsthatsharethesamepred-
icate are satisfied without the need for additional inference.
This approach still leaves us with the problem of determining the set of predi- cates needed to represent roles associated with specific events like Eater and Eaten, as well as more general concepts like Location and Time. We’ll return to this prob- lem in more detail in Chapter 10.
15.4.1 Representing Time
In our discussion of events, we did not seriously address the issue of capturing the time when the represented events are supposed to have occurred. The representation of such information in a useful form is the domain of temporal logic. This dis- cussion introduces the most basic concerns of temporal logic and briefly discusses the means by which human languages convey temporal information, which, among other things, includes tense logic, the ways that verb tenses convey temporal infor-
neo- Davidsonian
temporal logic tense logic

320 CHAPTER 15 • LOGICAL REPRESENTATIONS OF SENTENCE MEANING
mation. A more detailed discussion of robust approaches to the representation and analysis of temporal expressions is presented in Chapter 17.
The most straightforward theory of time holds that it flows inexorably forward and that events are associated with either points or intervals in time, as on a timeline. We can order distinct events by situating them on the timeline; one event precedes another if the flow of time leads from the first event to the second. Accompanying these notions in most theories is the idea of the current moment in time. Combin- ing this notion with the idea of a temporal ordering relationship yields the familiar notions of past, present, and future.
Many schemes can represent this kind of temporal information. The one pre- sented here is a fairly simple one that stays within the FOL framework of reified events that we have been pursuing. Consider the following examples:
(15.47) I arrived in New York.
(15.48) I am arriving in New York.
(15.49) I will arrive in New York.
These sentences all refer to the same kind of event and differ solely in the tense of the verb. In our current scheme for representing events, all three would share the following kind of representation, which lacks any temporal information:
∃eArriving(e)∧Arriver(e,Speaker)∧Destination(e,NewYork) (15.50)
The temporal information provided by the tense of the verbs can be exploited by predicating additional information about the event variable e. Specifically, we can add temporal variables representing the interval corresponding to the event, the end point of the event, and temporal predicates relating this end point to the current time as indicated by the tense of the verb. Such an approach yields the following representations for our arriving examples:
∃e,i,nArriving(e) ∧ Arriver(e,Speaker)∧Destination(e,NewYork)
∧ IntervalOf(e,i)∧EndPoint(i,n)∧Precedes(n,Now)
∃e,i,nArriving(e) ∧ Arriver(e,Speaker)∧Destination(e,NewYork) ∧ IntervalOf(e,i)∧MemberOf(i,Now)
∃e,i,nArriving(e) ∧ Arriver(e,Speaker)∧Destination(e,NewYork)
∧ IntervalOf(e,i)∧EndPoint(i,n)∧Precedes(Now,n)
This representation introduces a variable to stand for the interval of time as- sociated with the event and a variable that stands for the end of that interval. The two-place predicate Precedes represents the notion that the first time-point argument precedes the second in time; the constant Now refers to the current time. For past events, the end point of the interval must precede the current time. Similarly, for fu- ture events the current time must precede the end of the event. For events happening in the present, the current time is contained within the event interval.
Unfortunately, the relation between simple verb tenses and points in time is by no means straightforward. Consider the following examples:
(15.51) Ok, we fly from San Francisco to Boston at 10. (15.52) Flight 1390 will be at the gate an hour now.
In the first example, the present tense of the verb fly is used to refer to a future event, while in the second the future tense is used to refer to a past event.
More complications occur when we consider some of the other verb tenses. Con- sider the following examples:

reference point
15.4 • EVENT AND STATE REPRESENTATIONS 321 (15.53) Flight 1902 arrived late.
(15.54) Flight 1902 had arrived late.
Although both refer to events in the past, representing them in the same way seems wrong. The second example seems to have another unnamed event lurking in the background (e.g., Flight 1902 had already arrived late when something else hap- pened). To account for this phenomena, Reichenbach (1947) introduced the notion of a reference point. In our simple temporal scheme, the current moment in time is equated with the time of the utterance and is used as a reference point for when the event occurred (before, at, or after). In Reichenbach’s approach, the notion of the reference point is separated from the utterance time and the event time. The following examples illustrate the basics of this approach:
(15.55) When Mary’s flight departed, I ate lunch. (15.56) When Mary’s flight departed, I had eaten lunch.
In both of these examples, the eating event has happened in the past, that is, prior to the utterance. However, the verb tense in the first example indicates that the eating event began when the flight departed, while the second example indicates that the eating was accomplished prior to the flight’s departure. Therefore, in Reichenbach’s terms the departure event specifies the reference point. These facts can be accom- modated by additional constraints relating the eating and departure events. In the first example, the reference point precedes the eating event, and in the second exam- ple, the eating precedes the reference point. Figure 15.5 illustrates Reichenbach’s approach with the primary English tenses. Exercise 15.6 asks you to represent these examples in FOL.
    Past Perfect
E R U Present
U,R,E
Simple Past
R,E U Simple Future
U,R E
Present Perfect
E R,U Future Perfect
U E R
                   Figure 15.5
 Reichenbach’s approach applied to various English tenses. In these diagrams, time flows from left to right, E denotes the time of the event, R denotes the reference time, and U denotes the time of the utterance.
This discussion has focused narrowly on the broad notions of past, present, and future and how they are signaled by various English verb tenses. Of course, lan- guages have many other ways to convey temporal information, including temporal expressions:
(15.57) I’d like to go at 6:45 in the morning. (15.58) Somewhere around noon, please.

322 CHAPTER 15 • LOGICAL REPRESENTATIONS OF SENTENCE MEANING
aspect
As we show in Chapter 17, grammars for such temporal expressions are of consid- erable practical importance to information extraction and question-answering appli- cations.
Finally, we should note that a systematic conceptual organization is reflected in examples like these. In particular, temporal expressions in English are frequently expressed in spatial terms, as is illustrated by the various uses of at, in, somewhere, and near in these examples (Lakoff and Johnson 1980, Jackendoff 1983). Metaphor- ical organizations such as these, in which one domain is systematically expressed in terms of another, are very common in languages of the world.
15.4.2 Aspect
In the last section, we discussed ways to represent the time of an event with respect to the time of an utterance describing it. In this section, we address the notion of aspect, which concerns a cluster of related topics, including whether an event has ended or is ongoing, whether it is conceptualized as happening at a point in time or over some interval, and whether any particular state in the world comes about be- cause of it. Based on these and related notions, event expressions have traditionally been divided into four general classes illustrated in the following examples:
Stative: I know my departure gate. Activity: John is flying. Accomplishment: Sally booked her flight. Achievement: She found her gate.
Although the earliest versions of this classification were discussed by Aristotle, the one presented here is due to Vendler (1967).
Stative expressions represent the notion of an event participant having a partic- ular property, or being in a state, at a given point in time. As such, these expressions can be thought of as capturing an aspect of a world at a single point in time. Consider the following ATIS examples.
(15.59) I like Flight 840 arriving at 10:06. (15.60) I need the cheapest fare.
(15.61) I want to go first class.
In examples like these, the event participant denoted by the subject can be seen as experiencing something at a specific point in time. Whether or not the experiencer was in the same state earlier or will be in the future is left unspecified.
Activity expressions describe events undertaken by a participant and have no particular end point. Unlike statives, activities are seen as occurring over some span of time and are therefore not associated with single points in time. Consider the following examples:
(15.62) She drove a Mazda. (15.63) I live in Brooklyn.
These examples both specify that the subject is engaged in, or has engaged in, the activity specified by the verb for some period of time.
The final aspectual class, achievement expressions, is similar to accomplish- ments in that these expressions result in a state. Consider the following:
(15.64) She found her gate. (15.65) I reached New York.
stative
activity
achievement expressions

telic eventualities
15.5 • DESCRIPTION LOGICS 323
Unlike accomplishments, achievement events are thought of as happening in an in- stant and are not equated with any particular activity leading up to the state. To be more specific, the events in these examples may have been preceded by extended searching or traveling events, but the events corresponding directly to found and reach are conceived of as points, not intervals.
Note that since both accomplishments and achievements are events that result in a state, they are sometimes characterized as subtypes of a single aspectual class. Members of this combined class are known as telic eventualities.
15.5 Description Logics
As noted at the beginning of this chapter, a fair number of representational schemes have been invented to capture the meaning of linguistic utterances. It is now widely accepted that meanings represented in these various approaches can, in principle, be translated into equivalent statements in FOL with relative ease. The difficulty is that in many of these approaches the semantics of a statement are defined procedurally. That is, the meaning arises from whatever the system that interprets it does with it.
Description logics are an effort to better specify the semantics of these earlier structured network representations and to provide a conceptual framework that is especially well suited to certain kinds of domain modeling. Formally, the term De- scription Logics refers to a family of logical approaches that correspond to varying subsets of FOL. The restrictions placed on the expressiveness of Description Logics serve to guarantee the tractability of various critical kinds of inference. Our focus here, however, will be on the modeling aspects of DLs rather than on computational complexity issues.
When using Description Logics to model an application domain, the emphasis is on the representation of knowledge about categories, individuals that belong to those categories, and the relationships that can hold among these individuals. The set of categories, or concepts, that make up a particular application domain is called
terminology its terminology. The portion of a knowledge base that contains the terminology is TBox traditionally called the TBox; this is in contrast to the ABox that contains facts about ABox individuals. The terminology is typically arranged into a hierarchical organization
ontology called an ontology that captures the subset/superset relations among the categories. Returning to our earlier culinary domain, we represented domain concepts us- ing unary predicates such as Restaurant(x); the DL equivalent omits the variable, so the restaurant category is simply written as Restaurant.2 To capture the fact that a particular domain element, such as Frasca, is a restaurant, we assert Restau- rant(Frasca) in much the same way we would in FOL. The semantics of these categories are specified in precisely the same way that was introduced earlier in Section 15.2: a category like Restaurant simply denotes the set of domain elements
that are restaurants.
Once we’ve specified the categories of interest in a particular domain, the next
step is to arrange them into a hierarchical structure. There are two ways to cap- ture the hierarchical relationships present in a terminology: we can directly assert relations between categories that are related hierarchically, or we can provide com- plete definitions for our concepts and then rely on inference to provide hierarchical
2 DL statements are conventionally typeset with a sans serif font. We’ll follow that convention here, reverting to our standard mathematical notation when giving FOL equivalents of DL statements.
 
324 CHAPTER 15 • LOGICAL REPRESENTATIONS OF SENTENCE MEANING
subsumption
relationships. The choice between these methods hinges on the use to which the re- sulting categories will be put and the feasibility of formulating precise definitions for many naturally occurring categories. We’ll discuss the first option here and return to the notion of definitions later in this section.
To directly specify a hierarchical structure, we can assert subsumption relations between the appropriate concepts in a terminology. The subsumption relation is conventionally written as C ⊑ D and is read as C is subsumed by D; that is, all members of the category C are also members of the category D. Not surprisingly, the formal semantics of this relation are provided by a simple set relation; any domain element that is in the set denoted by C is also in the set denoted by D.
Adding the following statements to the TBox asserts that all restaurants are com- mercial establishments and, moreover, that there are various subtypes of restaurants.
Restaurant ⊑ CommercialEstablishment ItalianRestaurant ⊑ Restaurant
ChineseRestaurant ⊑ Restaurant MexicanRestaurant ⊑ Restaurant
(15.66) (15.67) (15.68) (15.69)
Ontologies such as this are conventionally illustrated with diagrams such as the one shown in Fig. 15.6, where subsumption relations are denoted by links between the nodes representing the categories.
A graphical network representation of a set of subsumption relations in the restaurant domain.
Note, that it was precisely the vague nature of semantic network diagrams like this that motivated the development of Description Logics. For example, from this diagram we can’t tell whether the given set of categories is exhaustive or disjoint. That is, we can’t tell if these are all the kinds of restaurants that we’ll be dealing with in our domain or whether there might be others. We also can’t tell if an individual restaurant must fall into only one of these categories, or if it is possible, for example, for a restaurant to be both Italian and Chinese. The DL statements given above are more transparent in their meaning; they simply assert a set of subsumption relations between categories and make no claims about coverage or mutual exclusion.
If an application requires coverage and disjointness information, then such in- formation must be made explicitly. The simplest ways to capture this kind of in- formation is through the use of negation and disjunction operators. For example, the following assertion would tell us that Chinese restaurants can’t also be Italian restaurants.
ChineseRestaurant ⊑ not ItalianRestaurant (15.70)
      Commercial Establishment
Restaurant
Italian Chinese Mexican Restaurant Restaurant Restaurant
         Figure 15.6
 
15.5 • DESCRIPTION LOGICS 325 Specifying that a set of subconcepts covers a category can be achieved with disjunc-
tion, as in the following:
Restaurant ⊑ (15.71) (or ItalianRestaurant ChineseRestaurant MexicanRestaurant)
Having a hierarchy such as the one given in Fig. 15.6 tells us next to nothing about the concepts in it. We certainly don’t know anything about what makes a restaurant a restaurant, much less Italian, Chinese, or expensive. What is needed are additional assertions about what it means to be a member of any of these categories. In Description Logics such statements come in the form of relations between the concepts being described and other concepts in the domain. In keeping with its origins in structured network representations, relations in Description Logics are typically binary and are often referred to as roles, or role-relations.
To see how such relations work, let’s consider some of the facts about restaurants discussed earlier in the chapter. We’ll use the hasCuisine relation to capture infor- mation as to what kinds of food restaurants serve and the hasPriceRange relation to capture how pricey particular restaurants tend to be. We can use these relations to say something more concrete about our various classes of restaurants. Let’s start with our ItalianRestaurant concept. As a first approximation, we might say some- thing uncontroversial like Italian restaurants serve Italian cuisine. To capture these notions, let’s first add some new concepts to our terminology to represent various kinds of cuisine.
MexicanCuisine ⊑ Cuisine ItalianCuisine ⊑ Cuisine ChineseCuisine ⊑ Cuisine VegetarianCuisine ⊑ Cuisine
ExpensiveRestaurant ⊑ Restaurant ModerateRestaurant ⊑ Restaurant CheapRestaurant ⊑ Restaurant
Next, let’s revise our earlier version of ItalianRestaurant to capture cuisine infor- mation.
ItalianRestaurant ⊑ Restaurant⊓∃hasCuisine.ItalianCuisine (15.72)
The correct way to read this expression is that individuals in the category Italian- Restaurant are subsumed both by the category Restaurant and by an unnamed class defined by the existential clause—the set of entities that serve Italian cuisine. An equivalent statement in FOL would be
∀xItalianRestaurant(x) → Restaurant(x) (15.73) ∧(∃yServes(x,y)∧ItalianCuisine(y))
This FOL translation should make it clear what the DL assertions given above do and do not entail. In particular, they don’t say that domain entities classified as Ital- ian restaurants can’t engage in other relations like being expensive or even serving Chinese cuisine. And critically, they don’t say much about domain entities that we know do serve Italian cuisine. In fact, inspection of the FOL translation makes it clear that we cannot infer that any new entities belong to this category based on their characteristics. The best we can do is infer new facts about restaurants that we’re explicitly told are members of this category.

326 CHAPTER 15 • LOGICAL REPRESENTATIONS OF SENTENCE MEANING
Of course, inferring the category membership of individuals given certain char- acteristics is a common and critical reasoning task that we need to support. This brings us back to the alternative approach to creating hierarchical structures in a terminology: actually providing a definition of the categories we’re creating in the form of necessary and sufficient conditions for category membership. In this case, we might explicitly provide a definition for ItalianRestaurant as being those restau- rants that serve Italian cuisine, and ModerateRestaurant as being those whose price range is moderate.
ItalianRestaurant ≡ Restaurant⊓∃hasCuisine.ItalianCuisine (15.74) ModerateRestaurant ≡ Restaurant ⊓ hasPriceRange.ModeratePrices (15.75)
While our earlier statements provided necessary conditions for membership in these categories, these statements provide both necessary and sufficient conditions.
Finally, let’s now consider the superficially similar case of vegetarian restaurants. Clearly, vegetarian restaurants are those that serve vegetarian cuisine. But they don’t merely serve vegetarian fare, that’s all they serve. We can accommodate this kind of constraint by adding an additional restriction in the form of a universal quantifier to our earlier description of VegetarianRestaurants, as follows:
VegetarianRestaurant ≡ Restaurant (15.76) ⊓∃hasCuisine.VegetarianCuisine
⊓∀hasCuisine.VegetarianCuisine
Inference
Paralleling the focus of Description Logics on categories, relations, and individuals is a processing focus on a restricted subset of logical inference. Rather than employ- ing the full range of reasoning permitted by FOL, DL reasoning systems emphasize the closely coupled problems of subsumption and instance checking.
Subsumption, as a form of inference, is the task of determining, based on the facts asserted in a terminology, whether a superset/subset relationship exists between two concepts. Correspondingly, instance checking asks if an individual can be a member of a particular category given the facts we know about both the individual and the terminology. The inference mechanisms underlying subsumption and in- stance checking go beyond simply checking for explicitly stated subsumption rela- tions in a terminology. They must explicitly reason using the relational information asserted about the terminology to infer appropriate subsumption and membership relations.
Returning to our restaurant domain, let’s add a new kind of restaurant using the following statement:
IlFornaio ⊑ ModerateRestaurant ⊓ ∃hasCuisine.ItalianCuisine (15.77)
Given this assertion, we might ask whether the IlFornaio chain of restaurants might be classified as an Italian restaurant or a vegetarian restaurant. More precisely, we can pose the following questions to our reasoning system:
IlFornaio ⊑ ItalianRestaurant (15.78) IlFornaio ⊑ VegetarianRestaurant (15.79)
The answer to the first question is positive since IlFornaio meets the criteria we specified for the category ItalianRestaurant: it’s a Restaurant since we explicitly
subsumption
instance checking

      Restaurant
Italian Chinese Mexican Vegetarian Cheap Moderate Expensive Restaurant Restaurant Restaurant Restaurant Restaurant Restaurant Restaurant
Il Fornaio
                     Figure 15.7
 implied hierarchy
15.5 • DESCRIPTION LOGICS 327
A graphical network representation of the complete set of subsumption rela- tions in the restaurant domain given the current set of assertions in the TBox.
classified it as a ModerateRestaurant, which is a subtype of Restaurant, and it meets the has.Cuisine class restriction since we’ve asserted that directly.
The answer to the second question is negative. Recall, that our criteria for veg- etarian restaurants contains two requirements: it has to serve vegetarian fare, and that’s all it can serve. Our current definition for IlFornaio fails on both counts since we have not asserted any relations that state that IlFornaio serves vegetarian fare, and the relation we have asserted, hasCuisine.ItalianCuisine, contradicts the sec- ond criteria.
A related reasoning task, based on the basic subsumption inference, is to derive the implied hierarchy for a terminology given facts about the categories in the ter- minology. This task roughly corresponds to a repeated application of the subsump- tion operator to pairs of concepts in the terminology. Given our current collection of statements, the expanded hierarchy shown in Fig. 15.7 can be inferred. You should convince yourself that this diagram contains all and only the subsumption links that should be present given our current knowledge.
Instance checking is the task of determining whether a particular individual can be classified as a member of a particular category. This process takes what is known about a given individual, in the form of relations and explicit categorical statements, and then compares that information with what is known about the current terminol- ogy. It then returns a list of the most specific categories to which the individual can belong.
As an example of a categorization problem, consider an establishment that we’re told is a restaurant and serves Italian cuisine.
Restaurant(Gondolier) hasCuisine(Gondolier, ItalianCuisine)
Here, we’re being told that the entity denoted by the term Gondolier is a restau- rant and serves Italian food. Given this new information and the contents of our current TBox, we might reasonably like to ask if this is an Italian restaurant, if it is a vegetarian restaurant, or if it has moderate prices.
Assuming the definitional statements given earlier, we can indeed categorize the Gondolier as an Italian restaurant. That is, the information we’ve been given about it meets the necessary and sufficient conditions required for membership in this category. And as with the IlFornaio category, this individual fails to match the stated criteria for the VegetarianRestaurant. Finally, the Gondolier might also

328 CHAPTER 15 • LOGICAL REPRESENTATIONS OF SENTENCE MEANING
Web Ontology Language
turn out to be a moderately priced restaurant, but we can’t tell at this point since we don’t know anything about its prices. What this means is that given our current knowledge the answer to the query ModerateRestaurant(Gondolier) would be false since it lacks the required hasPriceRange relation.
The implementation of subsumption, instance checking, as well as other kinds of inferences needed for practical applications, varies according to the expressivity of the Description Logic being used. However, for a Description Logic of even modest power, the primary implementation techniques are based on satisfiability methods that in turn rely on the underlying model-based semantics introduced earlier in this chapter.
OWL and the Semantic Web
The highest-profile role for Description Logics, to date, has been as a part of the development of the Semantic Web. The Semantic Web is an ongoing effort to pro- vide a way to formally specify the semantics of the contents of the Web (Fensel et al., 2003). A key component of this effort involves the creation and deployment of ontologies for various application areas of interest. The meaning representation language used to represent this knowledge is the Web Ontology Language (OWL) (McGuiness and van Harmelen, 2004). OWL embodies a Description Logic that corresponds roughly to the one we’ve been describing here.
15.6 Summary
This chapter has introduced the representational approach to meaning. The follow- ing are some of the highlights of this chapter:
• A major approach to meaning in computational linguistics involves the cre- ation of formal meaning representations that capture the meaning-related content of linguistic inputs. These representations are intended to bridge the gap from language to common-sense knowledge of the world.
• The frameworks that specify the syntax and semantics of these representa- tions are called meaning representation languages. A wide variety of such languages are used in natural language processing and artificial intelligence.
• Such representations need to be able to support the practical computational requirements of semantic processing. Among these are the need to determine the truth of propositions, to support unambiguous representations, to rep- resent variables, to support inference, and to be sufficiently expressive.
• Human languages have a wide variety of features that are used to convey meaning. Among the most important of these is the ability to convey a predicate- argument structure.
• First-Order Logic is a well-understood, computationally tractable meaning representation language that offers much of what is needed in a meaning rep- resentation language.
• Important elements of semantic representation including states and events can be captured in FOL.
• Semantic networks and frames can be captured within the FOL framework.
• Modern Description Logics consist of useful and computationally tractable subsets of full First-Order Logic. The most prominent use of a description

BIBLIOGRAPHICAL AND HISTORICAL NOTES 329 logic is the Web Ontology Language (OWL), used in the specification of the
Semantic Web.
Bibliographical and Historical Notes
The earliest computational use of declarative meaning representations in natural lan- guage processing was in the context of question-answering systems (Green et al. 1961, Raphael 1968, Lindsey 1963). These systems employed ad hoc representations for the facts needed to answer questions. Questions were then translated into a form that could be matched against facts in the knowledge base. Simmons (1965) provides an overview of these early efforts.
Woods (1967) investigated the use of FOL-like representations in question an- swering as a replacement for the ad hoc representations in use at the time. Woods (1973) further developed and extended these ideas in the landmark Lunar system. Interestingly, the representations used in Lunar had both truth-conditional and pro- cedural semantics. Winograd (1972) employed a similar representation based on the Micro-Planner language in his SHRDLU system.
During this same period, researchers interested in the cognitive modeling of lan- guage and memory had been working with various forms of associative network representations. Masterman (1957) was the first to make computational use of a semantic network-like knowledge representation, although semantic networks are generally credited to Quillian (1968). A considerable amount of work in the seman- tic network framework was carried out during this era (Norman and Rumelhart 1975, Schank 1972, Wilks 1975c, Wilks 1975b, Kintsch 1974). It was during this period that a number of researchers began to incorporate Fillmore’s notion of case roles (Fillmore, 1968) into their representations. Simmons (1973) was the earliest adopter of case roles as part of representations for natural language processing.
Detailed analyses by Woods (1975) and Brachman (1979) aimed at figuring out what semantic networks actually mean led to the development of a number of more sophisticated network-like languages including KRL (Bobrow and Winograd, 1977) and KL-ONE (Brachman and Schmolze, 1985). As these frameworks became more sophisticated and well defined, it became clear that they were restricted variants of FOL coupled with specialized indexing inference procedures. A useful collection of papers covering much of this work can be found in Brachman and Levesque (1985). Russell and Norvig (2002) describe a modern perspective on these representational efforts.
Linguistic efforts to assign semantic structures to natural language sentences in the generative era began with the work of Katz and Fodor (1963). The limitations of their simple feature-based representations and the natural fit of logic to many of the linguistic problems of the day quickly led to the adoption of a variety of predicate-argument structures as preferred semantic representations (Lakoff 1972a, McCawley 1968). The subsequent introduction by Montague (1973) of the truth- conditional model-theoretic framework into linguistic theory led to a much tighter integration between theories of formal syntax and a wide range of formal semantic frameworks. Good introductions to Montague semantics and its role in linguistic theory can be found in Dowty et al. (1981) and Partee (1976).
The representation of events as reified objects is due to Davidson (1967). The approach presented here, which explicitly reifies event participants, is due to Parsons

330 CHAPTER 15 • LOGICAL REPRESENTATIONS OF SENTENCE MEANING
(1990).
Most current computational approaches to temporal reasoning are based on Allen’s
notion of temporal intervals (Allen, 1984); see Chapter 17. ter Meulen (1995) pro- vides a modern treatment of tense and aspect. Davis (1990) describes the use of FOL to represent knowledge across a wide range of common-sense domains including quantities, space, time, and beliefs.
A recent comprehensive treatment of logic and language can be found in van Benthem and ter Meulen (1997). A classic semantics text is Lyons (1977). McCaw- ley (1993) is an indispensable textbook covering a wide range of topics concerning logic and language. Chierchia and McConnell-Ginet (1991) also broadly covers semantic issues from a linguistic perspective. Heim and Kratzer (1998) is a more recent text written from the perspective of current generative theory.
Exercises
15.1 Peruse your daily newspaper for three examples of ambiguous sentences or headlines. Describe the various sources of the ambiguities.
15.2 Consider a domain in which the word coffee can refer to the following con- cepts in a knowledge-based system: a caffeinated or decaffeinated beverage, ground coffee used to make either kind of beverage, and the beans themselves. Give arguments as to which of the following uses of coffee are ambiguous and which are vague.
1. I’ve had my coffee for today.
2. Buy some coffee on your way home. 3. Please grind some more coffee.
15.3 The following rule, which we gave as a translation for Example 15.25, is not a reasonable definition of what it means to be a vegetarian restaurant.
∀xVegetarianRestaurant(x) =⇒ Serves(x,VegetarianFood)
Give a FOL rule that better defines vegetarian restaurants in terms of what they
serve.
15.4 Give F O L translations for the following sentences:
1. Vegetarians do not eat meat. 2. Not all vegetarians eat eggs.
15.5 Give a set of facts and inferences necessary to prove the following assertions: 1. McDonald’s is not a vegetarian restaurant.
2. Some vegetarians can eat at McDonald’s.
Don’t just place these facts in your knowledge base. Show that they can be inferred from some more general facts about vegetarians and McDonald’s.
15.6 For the following sentences, give F O L translations that capture the temporal relationships between the events.
1. When Mary’s flight departed, I ate lunch.
2. When Mary’s flight departed, I had eaten lunch.
15.7 On page 316, we gave the representation Near(Centro,Bacaro) as a transla- tion for the sentence Centro is near Bacaro. In a truth-conditional semantics, this formula is either true or false given some model. Critique this truth- conditional approach with respect to the meaning of words like near.

 CHAPTER
16Computational Semantics and Semantic Parsing
Placeholder
331

332 CHAPTER 17 • INFORMATION EXTRACTION CHAPTER
17 Information Extraction
 information extraction
relation extraction
knowledge graphs
event extraction
temporal expression
I am the very model of a modern Major-General, I’ve information vegetable, animal, and mineral, I know the kings of England, and I quote the fights historical From Marathon to Waterloo, in order categorical... Gilbert and Sullivan, Pirates of Penzance
Imagine that you are an analyst with an investment firm that tracks airline stocks. You’re given the task of determining the relationship (if any) between airline an- nouncements of fare increases and the behavior of their stocks the next day. His- torical data about stock prices is easy to come by, but what about the airline an- nouncements? You will need to know at least the name of the airline, the nature of the proposed fare hike, the dates of the announcement, and possibly the response of other airlines. Fortunately, these can be all found in news articles like this one:
Citing high fuel prices, United Airlines said Friday it has increased fares by $6 per round trip on flights to some cities also served by lower- cost carriers. American Airlines, a unit of AMR Corp., immediately matched the move, spokesman Tim Wagner said. United, a unit of UAL Corp., said the increase took effect Thursday and applies to most routes where it competes against discount carriers, such as Chicago to Dallas and Denver to San Francisco.
This chapter presents techniques for extracting limited kinds of semantic con- tent from text. This process of information extraction (IE) turns the unstructured information embedded in texts into structured data, for example for populating a relational database to enable further processing.
We begin with the task of relation extraction: finding and classifying semantic relations among the text entities. These are often binary relations like child-of, em- ployment, part-whole, and geospatial relations. Relation extraction has close links to populating a relational database. Indeed, knowledge graphs, datasets of structured relational knowledge, are a common way that search engines present information to users.
Next, we discuss three tasks related to events. Event extraction is finding events in which these entities participate, like, in our sample text, the fare increases by United and American and the reporting events said and cite. Event coreference (Chapter 22) is needed to figure out which event mentions in a text refer to the same event; in our running example the two instances of increase and the phrase the move all refer to the same event.
To figure out when the events in a text happened we extract temporal expres- sions like days of the week (Friday and Thursday), relative expressions like two days from now or next year and times such as 3:30 P.M.. These expressions must be normalized onto specific calendar dates or times of day to situate events in time. In

template filling
17.1 • RELATION EXTRACTION 333
our sample task, this will allow us to link Friday to the time of United’s announce- ment, and Thursday to the previous day’s fare increase, and produce a timeline in which United’s announcement follows the fare increase and American’s announce- ment follows both of those events.
Finally, many texts describe recurring stereotypical events or situations. The task of template filling is to find such situations in documents and fill in the template slots. These slot-fillers may consist of text segments extracted directly from the text, or concepts like times, amounts, or ontology entities that have been inferred from text elements through additional processing.
Our airline text is an example of this kind of stereotypical situation since airlines often raise fares and then wait to see if competitors follow along. In this situa- tion, we can identify United as a lead airline that initially raised its fares, $6 as the amount, Thursday as the increase date, and American as an airline that followed along, leading to a filled template like the following.
FARE-RAISE ATTEMPT: LEAD AIRLINE: AMOUNT:
EFFECTIVE DATE: FOLLOWER:
UNITED AIRLINES  $6 
2006-10-26  AMERICAN AIRLINES
 17.1 Relation Extraction
Let’s assume that we have detected the named entities in our sample text (perhaps using the techniques of Chapter 8), and would like to discern the relationships that exist among the detected entities:
Citing high fuel prices, [ORG United Airlines] said [TIME Friday] it has increased fares by [MONEY $6] per round trip on flights to some cities also served by lower-cost carriers. [ORG American Airlines], a unit of [ORG AMR Corp.], immediately matched the move, spokesman [PER Tim Wagner] said. [ORG United], a unit of [ORG UAL Corp.], said the increase took effect [TIME Thursday] and applies to most routes where it competes against discount carriers, such as [LOC Chicago] to [LOC Dallas] and [LOC Denver] to [LOC San Francisco].
The text tells us, for example, that Tim Wagner is a spokesman for American Airlines, that United is a unit of UAL Corp., and that American is a unit of AMR. These binary relations are instances of more generic relations such as part-of or employs that are fairly frequent in news-style texts. Figure 17.1 lists the 17 relations used in the ACE relation extraction evaluations and Fig. 17.2 shows some sample relations. We might also extract more domain-specific relation such as the notion of an airline route. For example from this text we can conclude that United has routes to Chicago, Dallas, Denver, and San Francisco.
These relations correspond nicely to the model-theoretic notions we introduced in Chapter 15 to ground the meanings of the logical forms. That is, a relation consists of a set of ordered tuples over elements of a domain. In most standard information- extraction applications, the domain elements correspond to the named entities that occur in the text, to the underlying entities that result from coreference resolution, or to entities selected from a domain ontology. Figure 17.3 shows a model-based view of the set of entities and relations that can be extracted from our running example.

334 CHAPTER 17 • INFORMATION EXTRACTION
        PERSON- SOCIAL
Lasting Personal
Business
Founder Ownership
Membership
PHYSICAL Near
GENERAL AFFILIATION
PART- WHOLE
     Family
Citizen- Resident- Ethnicity- Religion
Investor Student-Alum
Employment Sports-Affiliation
Subsidiary
Org-Location- Origin
Geographical
  Located
   ORG AFFILIATION
ARTIFACT
User-Owner-Inventor- Manufacturer
            Figure 17.1
 The 17 relations used in the ACE relation extraction task.
Semantic relations with examples and the named entity types they involve.
Relations Types Examples
 Physical-Located Part-Whole-Subsidiary Person-Social-Family Org-AFF-Founder
PER-GPE He was in Tennessee
ORG-ORG XYZ, the parent company of ABC PER-PER Yoko’s husband John
PER-ORG Steve Jobs, co-founder of Apple...
 Figure 17.2
  Domain
United, UAL, American Airlines, AMR Tim Wagner
Chicago, Dallas, Denver, and San Francisco
Classes
United, UAL, American, and AMR are organizations Tim Wagner is a person
Chicago, Dallas, Denver, and San Francisco are places
Relations
D = {a,b,c,d,e, f,g,h,i} a,b,c,d
e
f , g, h, i
Org = {a,b,c,d} Pers = {e}
Loc = { f , g, h, i}
PartOf = {⟨a,b⟩,⟨c,d⟩}
OrgAff = {⟨c, e⟩}
  United is a unit of UAL
American is a unit of AMR
Tim Wagner works for American Airlines
United serves Chicago, Dallas, Denver, and San Francisco
Figure 17.3
Serves = {⟨a, f ⟩, ⟨a, g⟩, ⟨a, h⟩, ⟨a, i⟩} A model-based view of the relations and entities in our sample text.
Notice how this model-theoretic view subsumes the NER task as well; named entity recognition corresponds to the identification of a class of unary relations.
Sets of relations have been defined for many other domains as well. For example UMLS, the Unified Medical Language System from the US National Library of Medicine has a network that defines 134 broad subject categories, entity types, and 54 relations between the entities, such as the following:
Given a medical sentence like this one:
  Entity Relation Entity
 Injury disrupts Physiological Function
  BodilyLocation location-of BiologicFunction
 Anatomical Structure part-of Organism
 PharmacologicSubstance causes PathologicalFunction
 PharmacologicSubstance treats PathologicFunction
 
infoboxes
RDF RDF triple
Freebase
is-a hypernym
17.1 • RELATION EXTRACTION 335 (17.1) Doppler echocardiography can be used to diagnose left anterior descending
artery stenosis in patients with type 2 diabetes We could thus extract the UMLS relation:
Echocardiography, Doppler Diagnoses Acquired stenosis
Wikipedia also offers a large supply of relations, drawn from infoboxes, struc- tured tables associated with certain Wikipedia articles. For example, the Wikipedia infobox for Stanford includes structured facts like state = "California" or president = "Marc Tessier-Lavigne". These facts can be turned into rela- tions like president-of or located-in. or into relations in a metalanguage called RDF (Resource Description Framework). An RDF triple is a tuple of entity-relation- entity, called a subject-predicate-object expression. Here’s a sample RDF triple:
subject predicate object
GoldenGatePark location SanFrancisco
For example the crowdsourced DBpedia (Bizer et al., 2009) is an ontology derived from Wikipedia containing over 2 billion RDF triples. Another dataset from Wikipedia infoboxes, Freebase (Bollacker et al., 2008), now part of Wikidata (Vrandecˇic ́ and Kro ̈tzsch, 2014), has relations between people and their nationality, or locations, and other locations they are contained in.
WordNet or other ontologies offer useful ontological relations that express hier- archical relations between words or concepts. For example WordNet has the is-a or hypernym relation between classes,
Giraffe is-a ruminant is-a ungulate is-a mammal is-a vertebrate ...
WordNet also has Instance-of relation between individuals and classes, so that for example San Francisco is in the Instance-of relation with city. Extracting these relations is an important step in extending or building ontologies.
Finally, there are large datasets that contain sentences hand-labeled with their relations, designed for training and testing relation extractors. The TACRED dataset (Zhang et al., 2017) contains 106,264 examples of relation triples about particular people or organizations, labeled in sentences from news and web text drawn from the annual TAC Knowledge Base Population (TAC KBP) challenges. TACRED contains 41 relation types (like per:city of birth, org:subsidiaries, org:member of, per:spouse), plus a no relation tag; examples are shown in Fig. 17.4. About 80% of all examples are annotated as no relation; having sufficient negative data is important for training supervised classifiers.
Example
Carey will succeed Cathleen P. Black, who held the position for 15 years and will take on a new role as chairwoman of Hearst Maga- zines, the company said.
Irene Morgan Kirkaldy, who was born and reared in Baltimore, lived on Long Island and ran a child-care center in Queens with her second husband, Stanley Kirkaldy.
Baldwin declined further comment, and said JetBlue chief executive
Dave Barger was unavailable.
Figure 17.4 Example sentences and labels from the TACRED dataset (Zhang et al., 2017).
A standard dataset was also produced for the SemEval 2010 Task 8, detecting relations between nominals (Hendrickx et al., 2009). The dataset has 10,717 exam- ples, each with a pair of nominals (untyped) hand-labeled with one of 9 directed
Entity Types & Label
PERSON/TITLE Relation: per:title
PERSON/CITY
Relation: per:city of birth
Types: PERSON/TITLE
  Relation: no relation
  
336 CHAPTER 17 • INFORMATION EXTRACTION
relations like product-producer ( a factory manufactures suits) or component-whole
(my apartment has a large kitchen).
17.2 Relation Extraction Algorithms
Hearst patterns
There are five main classes of algorithms for relation extraction: handwritten pat- terns, supervised machine learning, semi-supervised (via bootstrapping and via distant supervision), and unsupervised. We’ll introduce each of these in the next sections.
17.2.1 Using Patterns to Extract Relations
The earliest and still common algorithm for relation extraction is lexico-syntactic patterns, first developed by Hearst (1992a), and therefore often called Hearst pat- terns. Consider the following sentence:
Agar is a substance prepared from a mixture of red algae, such as Ge- lidium, for laboratory or industrial use.
Hearst points out that most human readers will not know what Gelidium is, but that they can readily infer that it is a kind of (a hyponym of) red algae, whatever that is. She suggests that the following lexico-syntactic pattern
NP0 such as NP1{,NP2 ...,(and|or)NPi},i ≥ 1 implies the following semantics
(17.2)
(17.3) (17.4)
allowing us to infer
∀NPi,i ≥ 1,hyponym(NPi,NP0) hyponym(Gelidium,red algae)
NP {, NP}* {,} (and|or) other NPH
NPH such as {NP,}* {(or|and)} NP
such NPH as {NP,}* {(or|and)} NP
NPH {,} including {NP,}* {(or|and)} NP NPH {,} especially {NP}* {(or|and)} NP
temples, treasuries, and other important civic buildings
red algae such as Gelidium
such authors as Herrick, Goldsmith, and Shakespeare common-law countries, including Canada and England European countries, especially France, England, and Spain
  Figure 17.5 Hand-built lexico-syntactic patterns for finding hypernyms, using {} to mark optionality (Hearst 1992a, Hearst 1998).
Figure 17.5 shows five patterns Hearst (1992a, 1998) suggested for inferring the hyponym relation; we’ve shown NPH as the parent/hyponym. Modern versions of the pattern-based approach extend it by adding named entity constraints. For example if our goal is to answer questions about “Who holds what office in which organization?”, we can use patterns like the following:
PER, POSITION of ORG:
George Marshall, Secretary of State of the United States
PER (named|appointed|chose|etc.) PER Prep? POSITION Truman appointed Marshall Secretary of State
PER [be]? (named|appointed|etc.) Prep? ORG POSITION George Marshall was named US Secretary of State
  
17.2 • RELATION EXTRACTION ALGORITHMS 337
Hand-built patterns have the advantage of high-precision and they can be tailored to specific domains. On the other hand, they are often low-recall, and it’s a lot of work to create them for all possible patterns.
17.2.2 Relation Extraction via Supervised Learning
Supervised machine learning approaches to relation extraction follow a scheme that should be familiar by now. A fixed set of relations and entities is chosen, a training corpus is hand-annotated with the relations and entities, and the annotated texts are then used to train classifiers to annotate an unseen test set.
The most straightforward approach, illustrated in Fig. 17.6 is: (1) Find pairs of named entities (usually in the same sentence). (2): Apply a relation-classification on each pair. The classifier can use any supervised technique (logistic regression, RNN, Transformer, random forest, etc.).
An optional intermediate filtering classifier can be used to speed up the process- ing by making a binary decision on whether a given pair of named entities are related (by any relation). It’s trained on positive examples extracted directly from all rela- tions in the annotated corpus, and negative examples generated from within-sentence entity pairs that are not annotated with a relation.
Finding and classifying the relations among entities in a text.
Feature-based supervised relation classifiers. Let’s consider sample features for a feature-based classifier (like logistic regression or random forests), classifying the relationship between American Airlines (Mention 1, or M1) and Tim Wagner (Men- tion 2, M2) from this sentence:
(17.5) American Airlines, a unit of AMR, immediately matched the move, spokesman Tim Wagner said
These include word features (as embeddings, or 1-hot, stemmed or not):
• The headwords of M1 and M2 and their concatenation
Airlines Wagner Airlines-Wagner
• Bag-of-words and bigrams in M1 and M2
American, Airlines, Tim, Wagner, American Airlines, Tim Wagner
• Words or bigrams in particular positions M2: -1 spokesman
M2: +1 said
• Bag of words or bigrams between M1 and M2:
a, AMR, of, immediately, matched, move, spokesman, the, unit
Named entity features:
• Named-entity types and their concatenation (M1: ORG, M2: PER, M1M2: ORG-PER)
   function FINDRELATIONS(words) returns relations
relations ← nil entities←FINDENTITIES(words)
forall entity pairs ⟨e1, e2⟩ in entities do
if RELATED?(e1, e2) relations←relations+CLASSIFYRELATION(e1,e2)
 Figure 17.6
 
338 CHAPTER 17 • INFORMATION EXTRACTION
    Linear Classifier
p(relation|SUBJ,OBJ)
ENCODER (BERT)
[CLS] [SUBJ_PERSON] was born in [OBJ_LOC] , Michigan
 Figure 17.7
 seed patterns seed tuples
Relation extraction as a linear layer on top of an encoder (in this case BERT), with the subject and object entities replaced in the input by their NER tags (Zhang et al. 2017, Joshi et al. 2020).
• Entity Level of M1 and M2 (from the set NAME, NOMINAL, PRONOUN) M1: NAME [it or he would be PRONOUN]
M2: NAME [the company would be NOMINAL]
• Number of entities between the arguments (in this case 1, for AMR) Syntactic structure is a useful signal, often represented as the dependency or
constituency syntactic path traversed through the tree between the entities.
• Constituent paths between M1 and M2
NP↑NP↑S↑S↓NP
• Dependency-tree paths
Airlines ←sub j matched ←com p said →sub j Wagner
Neural supervised relation classifiers Neural models for relation extraction sim- ilarly treat the task as supervised classification. Let’s consider a typical system ap- plied to the TACRED relation extraction dataset and task (Zhang et al., 2017). In TACRED we are given a sentence and two spans within it: a subject, which is a person or organization, and an object, which is any other entity. The task is to assign a relation from the 42 TAC relations, or no relation.
A typical Transformer-encoder algorithm, showin in Fig. 17.7, simply takes a pretrained encoder like BERT and adds a linear layer on top of the sentence repre- sentation (for example the BERT [CLS] token), a linear layer that is finetuned as a 1-of-N classifier to assign one of the 43 labels. The input to the BERT encoder is partially de-lexified; the subject and object entities are replaced in the input by their NER tags. This helps keep the system from overfitting to the individual lexical items (Zhang et al., 2017). When using BERT-type Transformers for relation extraction, it helps to use versions of BERT like RoBERTa (Liu et al., 2019) or SPANbert (Joshi et al., 2020) that don’t have two sequences separated by a [SEP] token, but instead form the input from a single long sequence of sentences.
In general, if the test set is similar enough to the training set, and if there is enough hand-labeled data, supervised relation extraction systems can get high ac- curacies. But labeling a large training set is extremely expensive and supervised models are brittle: they don’t generalize well to different text genres. For this rea- son, much research in relation extraction has focused on the semi-supervised and unsupervised approaches we turn to next.
17.2.3 Semisupervised Relation Extraction via Bootstrapping
Supervised machine learning assumes that we have lots of labeled data. Unfortu- nately, this is expensive. But suppose we just have a few high-precision seed pat- terns, like those in Section 17.2.1, or perhaps a few seed tuples. That’s enough

bootstrapping
17.2 • RELATION EXTRACTION ALGORITHMS 339
to bootstrap a classifier! Bootstrapping proceeds by taking the entities in the seed pair, and then finding sentences (on the web, or whatever dataset we are using) that contain both entities. From all such sentences, we extract and generalize the context around the entities to learn new patterns. Fig. 17.8 sketches a basic algorithm.
   function BOOTSTRAP(Relation R) returns new relation tuples
tuples←Gather a set of seed tuples that have relation R iterate
sentences←find sentences that contain entities in tuples patterns←generalize the context between and around entities in sentences newpairs←use patterns to grep for more tuples
newpairs←newpairs with high confidence
tuples←tuples + newpairs
return tuples
 Figure 17.8
 confidence values
semantic drift
Bootstrapping from seed entity pairs to learn relations.
Suppose, for example, that we need to create a list of airline/hub pairs, and we know only that Ryanair has a hub at Charleroi. We can use this seed fact to discover new patterns by finding other mentions of this relation in our corpus. We search for the terms Ryanair, Charleroi and hub in some proximity. Perhaps we find the following set of sentences:
(17.6) Budget airline Ryanair, which uses Charleroi as a hub, scrapped all weekend flights out of the airport.
(17.7) All flights in and out of Ryanair’s hub at Charleroi airport were grounded on Friday...
(17.8) A spokesman at Charleroi, a main hub for Ryanair, estimated that 8000 passengers had already been affected.
From these results, we can use the context of words between the entity mentions, the words before mention one, the word after mention two, and the named entity types of the two mentions, and perhaps other features, to extract general patterns such as the following:
   / [ORG], which uses [LOC] as a hub /
   / [ORG]’s hub at [LOC] /
   / [LOC], a main hub for [ORG] /
These new patterns can then be used to search for additional tuples.
Bootstrapping systems also assign confidence values to new tuples to avoid se- mantic drift. In semantic drift, an erroneous pattern leads to the introduction of erroneous tuples, which, in turn, lead to the creation of problematic patterns and the
meaning of the extracted relations ‘drifts’. Consider the following example:
(17.9) Sydney has a ferry hub at Circular Quay.
If accepted as a positive example, this expression could lead to the incorrect in- troduction of the tuple ⟨Sydney,CircularQuay⟩. Patterns based on this tuple could propagate further errors into the database.
Confidence values for patterns are based on balancing two factors: the pattern’s performance with respect to the current set of tuples and the pattern’s productivity in terms of the number of matches it produces in the document collection. More formally, given a document collection D, a current set of tuples T , and a proposed pattern p, we need to track two factors:

340
CHAPTER 17 • INFORMATION EXTRACTION
• hits(p): the set of tuples in T that p matches while looking in D
• finds(p): The total set of tuples that p finds in D
The following equation balances these considerations (Riloff and Jones, 1999).
ConfRlogF(p)= |hits(p)|log(|finds(p)|) (17.10) |finds( p)|
This metric is generally normalized to produce a probability.
We can assess the confidence in a proposed new tuple by combining the evidence
supporting it from all the patterns P′ that match that tuple in D (Agichtein and Gra- vano, 2000). One way to combine such evidence is the noisy-or technique. Assume that a given tuple is supported by a subset of the patterns in P, each with its own confidence assessed as above. In the noisy-or model, we make two basic assump- tions. First, that for a proposed tuple to be false, all of its supporting patterns must have been in error, and second, that the sources of their individual failures are all independent. If we loosely treat our confidence measures as probabilities, then the probability of any individual pattern p failing is 1 − Conf ( p); the probability of all of the supporting patterns for a tuple being wrong is the product of their individual failure probabilities, leaving us with the following equation for our confidence in a new tuple.
Conf(t) = 1− 􏰒 (1−Conf(p)) (17.11) p∈P′
Setting conservative confidence thresholds for the acceptance of new patterns and tuples during the bootstrapping process helps prevent the system from drifting away from the targeted relation.
17.2.4 Distant Supervision for Relation Extraction
Although hand-labeling text with relation labels is expensive to produce, there are ways to find indirect sources of training data. The distant supervision method (Mintz et al., 2009) combines the advantages of bootstrapping with supervised learn- ing. Instead of just a handful of seeds, distant supervision uses a large database to acquire a huge number of seed examples, creates lots of noisy pattern features from all these examples and then combines them in a supervised classifier.
For example suppose we are trying to learn the place-of-birth relationship be- tween people and their birth cities. In the seed-based approach, we might have only 5 examples to start with. But Wikipedia-based databases like DBPedia or Freebase have tens of thousands of examples of many relations; including over 100,000 ex- amplesofplace-of-birth,(<Edwin Hubble, Marshfield>,<Albert Einstein, Ulm>, etc.,). The next step is to run named entity taggers on large amounts of text— Mintz et al. (2009) used 800,000 articles from Wikipedia—and extract all sentences that have two named entities that match the tuple, like the following:
...Hubble was born in Marshfield... ...Einstein, born (1879), Ulm... ...Hubble’s birthplace in Marshfield...
Training instances can now be extracted from this data, one training instance foreachidenticaltuple<relation, entity1, entity2>.Thustherewillbeone training instance for each of:
 noisy-or
distant supervision

17.2 • RELATION EXTRACTION ALGORITHMS 341
<born-in, Edwin Hubble, Marshfield>
<born-in, Albert Einstein, Ulm>
<born-year, Albert Einstein, 1879>
and so on.
We can then apply feature-based or neural classification. For feature-based clas-
sification, standard supervised relation extraction features like the named entity la- bels of the two mentions, the words and dependency paths in between the mentions, and neighboring words. Each tuple will have features collected from many training instances; the feature vector for a single training instance like (<born-in,Albert Einstein, Ulm> will have lexical and syntactic features from many different sen- tences that mention Einstein and Ulm.
Because distant supervision has very large training sets, it is also able to use very rich features that are conjunctions of these individual features. So we will extract thousands of patterns that conjoin the entity types with the intervening words or dependency paths like these:
PER was born in LOC PER, born (XXXX), LOC PER’s birthplace in LOC
To return to our running example, for this sentence:
(17.12) American Airlines, a unit of AMR, immediately matched the move,
spokesman Tim Wagner said
we would learn rich conjunction features like this one:
M1 = ORG & M2 = PER & nextword=“said”& path= NP ↑ NP ↑ S ↑ S ↓ NP
The result is a supervised classifier that has a huge rich set of features to use in detecting relations. Since not every test sentence will have one of the training relations, the classifier will also need to be able to label an example as no-relation. This label is trained by randomly selecting entity pairs that do not appear in any Freebase relation, extracting features for them, and building a feature vector for each such tuple. The final algorithm is sketched in Fig. 17.9.
   function DISTANT SUPERVISION(Database D, Text T) returns relation classifier C
foreach relation R
foreach tuple (e1,e2) of entities with relation R in D
sentences←Sentences in T that contain e1 and e2 f←Frequent features in sentences observations←observations + new training tuple (e1, e2, f, R)
C←Train supervised classifier on observations return C
 Figure 17.9
 The distant supervision algorithm for relation extraction. A neural classifier would skip the feature set f .
Distant supervision shares advantages with each of the methods we’ve exam- ined. Like supervised classification, distant supervision uses a classifier with lots of features, and supervised by detailed hand-created knowledge. Like pattern-based classifiers, it can make use of high-precision evidence for the relation between en- tities. Indeed, distance supervision systems learn patterns just like the hand-built

342 CHAPTER 17 • INFORMATION EXTRACTION
open information extraction
patterns of early relation extractors. For example the is-a or hypernym extraction system of Snow et al. (2005) used hypernym/hyponym NP pairs from WordNet as distant supervision, and then learned new patterns from large amounts of text. Their system induced exactly the original 5 template patterns of Hearst (1992a), but also 70,000 additional patterns including these four:
NPH like NP Many hormones like leptin...
NPH called NP ...using a markup language called XHTML NP is a NPH Ruby is a programming language...
NP, a NPH IBM, a company with a long...
This ability to use a large number of features simultaneously means that, un- like the iterative expansion of patterns in seed-based systems, there’s no semantic drift. Like unsupervised classification, it doesn’t use a labeled training corpus of texts, so it isn’t sensitive to genre issues in the training corpus, and relies on very large amounts of unlabeled data. Distant supervision also has the advantage that it can create training tuples to be used with neural classifiers, where features are not required.
The main problem with distant supervision is that it tends to produce low-precision results, and so current research focuses on ways to improve precision. Furthermore, distant supervision can only help in extracting relations for which a large enough database already exists. To extract new relations without datasets, or relations for new domains, purely unsupervised methods must be used.
17.2.5 Unsupervised Relation Extraction
The goal of unsupervised relation extraction is to extract relations from the web when we have no labeled training data, and not even any list of relations. This task is often called open information extraction or Open IE. In Open IE, the relations are simply strings of words (usually beginning with a verb).
For example, the ReVerb system (Fader et al., 2011) extracts a relation from a sentence s in 4 steps:
1. Run a part-of-speech tagger and entity chunker over s
2. For each verb in s, find the longest sequence of words w that start with a verb
and satisfy syntactic and lexical constraints, merging adjacent matches.
3. For each phrase w, find the nearest noun phrase x to the left which is not a relative pronoun, wh-word or existential “there”. Find the nearest noun phrase
y to the right.
4. Assign confidence c to the relation r = (x, w, y) using a confidence classifier
and return it.
A relation is only accepted if it meets syntactic and lexical constraints. The syntactic constraints ensure that it is a verb-initial sequence that might also include nouns (relations that begin with light verbs like make, have, or do often express the core of the relation with a noun, like have a hub in):
V | VP | VW*P
V = verb particle? adv?
W = (noun | adj | adv | pron | det ) P = (prep | particle | inf. marker)
The lexical constraints are based on a dictionary D that is used to prune very rare, long relation strings. The intuition is to eliminate candidate relations that don’t oc-

17.2 • RELATION EXTRACTION ALGORITHMS 343
cur with sufficient number of distinct argument types and so are likely to be bad examples. The system first runs the above relation extraction algorithm offline on 500 million web sentences and extracts a list of all the relations that occur after nor- malizing them (removing inflection, auxiliary verbs, adjectives, and adverbs). Each relation r is added to the dictionary if it occurs with at least 20 different arguments. Fader et al. (2011) used a dictionary of 1.7 million normalized relations.
Finally, a confidence value is computed for each relation using a logistic re- gression classifier. The classifier is trained by taking 1000 random web sentences, running the extractor, and hand labeling each extracted relation as correct or incor- rect. A confidence classifier is then trained on this hand-labeled data, using features of the relation and the surrounding words. Fig. 17.10 shows some sample features used in the classification.
Features for the classifier that assigns confidence to relations extracted by the Open Information Extraction system REVERB (Fader et al., 2011).
For example the following sentence:
(17.13) United has a hub in Chicago, which is the headquarters of United Continental Holdings.
has the relation phrases has a hub in and is the headquarters of (it also has has and is, but longer phrases are preferred). Step 3 finds United to the left and Chicago to the right of has a hub in, and skips over which to find Chicago to the left of is the headquarters of. The final output is:
  r1:  <United, has a hub in, Chicago>
  r2:  <Chicago, is the headquarters of, United Continental Holdings>
The great advantage of unsupervised relation extraction is its ability to handle a huge number of relations without having to specify them in advance. The disad- vantage is the need to map these large sets of strings into some canonical form for adding to databases or other knowledge sources. Current methods focus heavily on relations expressed with verbs, and so will miss many relations that are expressed nominally.
17.2.6 Evaluation of Relation Extraction
Supervised relation extraction systems are evaluated by using test sets with human- annotated, gold-standard relations and computing precision, recall, and F-measure. Labeled precision and recall require the system to classify the relation correctly, whereas unlabeled methods simply measure a system’s ability to detect entities that are related.
Semi-supervised and unsupervised methods are much more difficult to evalu- ate, since they extract totally new relations from the web or a large text. Because these methods use very large amounts of text, it is generally not possible to run them
(x,r,y) covers all words in s the last preposition in r is for the last preposition in r is on len(s) ≤ 10
there is a coordinating conjunction to the left of r in s r matches a lone V in the syntactic constraints
there is preposition to the left of x in s
there is an NP to the right of y in s
   Figure 17.10
 
344 CHAPTER 17 • INFORMATION EXTRACTION
solely on a small labeled test set, and as a result it’s not possible to pre-annotate a gold set of correct instances of relations.
For these methods it’s possible to approximate (only) precision by drawing a random sample of relations from the output, and having a human check the accuracy of each of these relations. Usually this approach focuses on the tuples to be extracted from a body of text rather than on the relation mentions; systems need not detect every mention of a relation to be scored correctly. Instead, the evaluation is based on the set of tuples occupying the database when the system is finished. That is, we want to know if the system can discover that Ryanair has a hub at Charleroi; we don’t really care how many times it discovers it. The estimated precision Pˆ is then
Pˆ = # of correctly extracted relation tuples in the sample (17.14) total # of extracted relation tuples in the sample.
Another approach that gives us a little bit of information about recall is to com- pute precision at different levels of recall. Assuming that our system is able to rank the relations it produces (by probability, or confidence) we can separately com- pute precision for the top 1000 new relations, the top 10,000 new relations, the top 100,000, and so on. In each case we take a random sample of that set. This will show us how the precision curve behaves as we extract more and more tuples. But there is no way to directly evaluate recall.
17.3 Extracting Times
 absolute relative
duration
Times and dates are a particularly important kind of named entity that play a role in question answering, in calendar and personal assistant applications. In order to reason about times and dates, after we extract these temporal expressions they must be normalized—converted to a standard format so we can reason about them. In this section we consider both the extraction and normalization of temporal expressions.
17.3.1 Temporal Expression Extraction
Temporal expressions are those that refer to absolute points in time, relative times, durations, and sets of these. Absolute temporal expressions are those that can be mapped directly to calendar dates, times of day, or both. Relative temporal expres- sions map to particular times through some other reference point (as in a week from last Tuesday). Finally, durations denote spans of time at varying levels of granular- ity (seconds, minutes, days, weeks, centuries, etc.). Figure 17.11 lists some sample temporal expressions in each of these categories.
Examples of absolute, relational and durational temporal expressions.
Temporal expressions are grammatical constructions that have temporal lexical triggers as their heads. Lexical triggers might be nouns, proper nouns, adjectives,
Absolute Relative Durations
 April 24, 1916
The summer of ’77 10:15 AM
The 3rd quarter of 2006
yesterday
next semester
two weeks from yesterday last quarter
four hours
three weeks
six days
the last three quarters
 Figure 17.11
   lexical triggers

17.3 • EXTRACTING TIMES 345
Examples of temporal lexical triggers.
and adverbs; full temporal expressions consist of their phrasal projections: noun phrases, adjective phrases, and adverbial phrases. Figure 17.12 provides examples.
Let’s look at the TimeML annotation scheme, in which temporal expressions are annotated with an XML tag, TIMEX3, and various attributes to that tag (Pustejovsky et al. 2005, Ferro et al. 2005). The following example illustrates the basic use of this scheme (we defer discussion of the attributes until Section 17.3.2).
A fare increase initiated <TIMEX3>last week</TIMEX3> by UAL Corp’s United Airlines was matched by competitors over <TIMEX3>the weekend</TIMEX3>, marking the second successful fare increase in <TIMEX3>two weeks</TIMEX3>.
The temporal expression recognition task consists of finding the start and end of all of the text spans that correspond to such temporal expressions. Rule-based ap- proaches to temporal expression recognition use cascades of automata to recognize patterns at increasing levels of complexity. Tokens are first part-of-speech tagged, and then larger and larger chunks are recognized from the results from previous stages, based on patterns containing trigger words (e.g., February) or classes (e.g., MONTH). Figure 17.13 gives a fragment from a rule-based system.
Category Examples
 Noun morning, noon, night, winter, dusk, dawn
ProperNoun January,Monday,Ides,Easter,RoshHashana,Ramadan,Tet Adjective recent, past, annual, former
Adverb hourly, daily, monthly, yearly
 Figure 17.12
      # yesterday/today/tomorrow
$string = ̃ s/((($OT+the$CT+\s+)?$OT+day$CT+\s+$OT+(before|after)$CT+\s+)?$OT+$TERelDayExpr$CT+
(\s+$OT+(morning|afternoon|evening|night)$CT+)?)/<TIMEX$tever TYPE=\"DATE\">$1
<\/TIMEX$tever>/gio;
$string = ̃ s/($OT+\w+$CT+\s+)<TIMEX$tever TYPE=\"DATE\"[ˆ>]*>($OT+(Today|Tonight)$CT+)
<\/TIMEX$tever>/$1$4/gso;
# this (morning/afternoon/evening)
$string = ̃ s/(($OT+(early|late)$CT+\s+)?$OT+this$CT+\s*$OT+(morning|afternoon|evening)$CT+)/
  <TIMEX$tever TYPE=\"DATE\">$1<\/TIMEX$tever>/gosi;
$string = ̃ s/(($OT+(early|late)$CT+\s+)?$OT+last$CT+\s*$OT+night$CT+)/<TIMEX$tever
   TYPE=\"DATE\">$1<\/TIMEX$tever>/gsio;
 Figure 17.13
 Perl fragment from the GUTime temporal tagging system in Tarsqi (Verhagen et al., 2005).
Sequence-labeling approaches follow the same IOB scheme used for named- entity tags, marking words that are either inside, outside or at the beginning of a TIMEX3-delimited temporal expression with the I, O, and B tags as follows:
A fare increase initiated last week by UAL Corp’s...
OOOOBIOOO
Features are extracted from the token and its context, and a statistical sequence labeler is trained (any sequence model can be used). Figure 17.14 lists standard features used in temporal tagging.
Temporal expression recognizers are evaluated with the usual recall, precision, and F-measures. A major difficulty for all of these very lexicalized approaches is avoiding expressions that trigger false positives:
(17.15) 1984 tells the story of Winston Smith... (17.16) ...U2’s classic Sunday Bloody Sunday

346 CHAPTER 17 • INFORMATION EXTRACTION
Feature Explanation
 Token Tokensinwindow Shape
POS
Chunk tags Lexical triggers
The target token to be labeled Bagoftokensinthewindowaroundatarget
Character shape features
Parts of speech of target and window words
Base phrase chunk tag for target and words in a window Presence in a list of temporal terms
 Figure 17.14
   temporal normalization
Typical features used to train IOB-style temporal expression taggers.
17.3.2 Temporal Normalization
Temporal normalization is the process of mapping a temporal expression to either a specific point in time or to a duration. Points in time correspond to calendar dates, to times of day, or both. Durations primarily consist of lengths of time but may also include information about start and end points. Normalized times are represented with the VALUE attribute from the ISO 8601 standard for encoding temporal values (ISO8601, 2004). Fig. 17.15 reproduces our earlier example with the value attributes added in.
<TIMEX3 id=’’t1’’ type=”DATE” value=”2007−07−02” functionInDocument=”CREATIONTIME” > July 2, 2007 </TIMEX3> A fare increase initiated <TIMEX3 id=”t2” type=”DATE”
value=”2007−W26” anchorTimeID=”t1”>last week</TIMEX3> by United Airlines was matched by competitors over <TIMEX3 id=” t3 ” type=”DURATION” value=”P1WE” anchorTimeID=”t1”> the weekend </TIMEX3>, marking the second successful fare increase in <TIMEX3 id=”t4” type=”DURATION” value=”P2W” anchorTimeID=”t1”> two weeks </TIMEX3>.
   Figure 17.15
TimeML markup including normalized values for temporal expressions.
The dateline, or document date, for this text was July 2, 2007. The ISO repre- sentation for this kind of expression is YYYY-MM-DD, or in this case, 2007-07-02. The encodings for the temporal expressions in our sample text all follow from this date, and are shown here as values for the VALUE attribute.
The first temporal expression in the text proper refers to a particular week of the year. In the ISO standard, weeks are numbered from 01 to 53, with the first week of the year being the one that has the first Thursday of the year. These weeks are represented with the template YYYY-Wnn. The ISO week for our document date is week 27; thus the value for last week is represented as “2007-W26”.
The next temporal expression is the weekend. ISO weeks begin on Monday; thus, weekends occur at the end of a week and are fully contained within a single week. Weekends are treated as durations, so the value of the VALUE attribute has to be a length. Durations are represented according to the pattern Pnx, where n is an integer denoting the length and x represents the unit, as in P3Y for three years or P2D for two days. In this example, one weekend is captured as P1WE. In this case, there is also sufficient information to anchor this particular weekend as part of a particular week. Such information is encoded in the ANCHORTIMEID attribute. Finally, the phrase two weeks also denotes a duration captured as P2W. There is a lot more to the various temporal annotation standards—far too much to cover here. Figure 17.16 describes some of the basic ways that other times and durations are represented. Consult ISO8601 (2004), Ferro et al. (2005), and Pustejovsky et al. (2005) for more details.
Most current approaches to temporal normalization are rule-based (Chang and Manning 2012, Stro ̈tgen and Gertz 2013). Patterns that match temporal expres- sions are associated with semantic analysis procedures. As in the compositional
  
Unit Pattern Sample Value
 Fully specified dates Weeks
Weekends
24-hour clock times Dates and times Financial quarters
YYYY-MM-DD
YYYY-Wnn
PnWE
HH:MM:SS YYYY-MM-DDTHH:MM:SS Qn
1991-09-28 2007-W27
P1WE
11:13:45 1991-09-28T11:00:00 1999-Q3
 Figure 17.16
   fully qualified
17.3 • EXTRACTING TIMES 347
Sample ISO patterns for representing various times and durations.
rule-to-rule approach introduced in Chapter 16, the meaning of a constituent is com- puted from the meaning of its parts using a method specific to the constituent, al- though here the semantic composition rules involve temporal arithmetic rather than λ -calculus attachments.
Fully qualified date expressions contain a year, month, and day in some con- ventional form. The units in the expression must be detected and then placed in the correct place in the corresponding ISO pattern. The following pattern normalizes expressions like April 24, 1916.
FQTE → Month Date , Year {Year.val − Month.val − Date.val}
The non-terminals Month, Date, and Year represent constituents that have already been recognized and assigned semantic values, accessed through the *.val notation. The value of this FQE constituent can, in turn, be accessed as FQTE.val during further processing.
Fully qualified temporal expressions are fairly rare in real texts. Most temporal expressions in news articles are incomplete and are only implicitly anchored, of- ten with respect to the dateline of the article, which we refer to as the document’s temporal anchor. The values of temporal expressions such as today, yesterday, or tomorrow can all be computed with respect to this temporal anchor. The semantic procedure for today simply assigns the anchor, and the attachments for tomorrow and yesterday add a day and subtract a day from the anchor, respectively. Of course, given the cyclic nature of our representations for months, weeks, days, and times of day, our temporal arithmetic procedures must use modulo arithmetic appropriate to the time unit being used.
Unfortunately, even simple expressions such as the weekend or Wednesday in- troduce a fair amount of complexity. In our current example, the weekend clearly refers to the weekend of the week that immediately precedes the document date. But this won’t always be the case, as is illustrated in the following example.
(17.17) Random security checks that began yesterday at Sky Harbor will continue at least through the weekend.
In this case, the expression the weekend refers to the weekend of the week that the anchoring date is part of (i.e., the coming weekend). The information that signals this meaning comes from the tense of continue, the verb governing the weekend.
Relative temporal expressions are handled with temporal arithmetic similar to that used for today and yesterday. The document date indicates that our example article is ISO week 27, so the expression last week normalizes to the current week minus 1. To resolve ambiguous next and last expressions we consider the distance from the anchoring date to the nearest unit. Next Friday can refer either to the immediately next Friday or to the Friday following that, but the closer the document date is to a Friday, the more likely it is that the phrase will skip the nearest one. Such
temporal anchor

348 CHAPTER 17 • INFORMATION EXTRACTION
ambiguities are handled by encoding language and domain-specific heuristics into
the temporal attachments.
17.4 Extracting Events and their Times
event extraction
The task of event extraction is to identify mentions of events in texts. For the purposes of this task, an event mention is any expression denoting an event or state that can be assigned to a particular point, or interval, in time. The following markup of the sample text on page 345 shows all the events in this text.
[EVENT Citing] high fuel prices, United Airlines [EVENT said] Fri- day it has [EVENT increased] fares by $6 per round trip on flights to some cities also served by lower-cost carriers. American Airlines, a unit of AMR Corp., immediately [EVENT matched] [EVENT the move], spokesman Tim Wagner [EVENT said]. United, a unit of UAL Corp., [EVENT said] [EVENT the increase] took effect Thursday and [EVENT applies] to most routes where it [EVENT competes] against discount carriers, such as Chicago to Dallas and Denver to San Francisco.
In English, most event mentions correspond to verbs, and most verbs introduce events. However, as we can see from our example, this is not always the case. Events can be introduced by noun phrases, as in the move and the increase, and some verbs fail to introduce events, as in the phrasal verb took effect, which refers to when the event began rather than to the event itself. Similarly, light verbs such as make, take, and have often fail to denote events; for light verbs the event is often expressed by the nominal direct object (took a flight), and these light verbs just provide a syntactic structure for the noun’s arguments.
Various versions of the event extraction task exist, depending on the goal. For example in the TempEval shared tasks (Verhagen et al. 2009) the goal is to extract events and aspects like their aspectual and temporal properties. Events are to be classified as actions, states, reporting events (say, report, tell, explain), perception events, and so on. The aspect, tense, and modality of each event also needs to be extracted. Thus for example the various said events in the sample text would be annotated as (class=REPORTING, tense=PAST, aspect=PERFECTIVE).
Event extraction is generally modeled via supervised learning, detecting events via sequence models with IOB tagging, and assigning event classes and attributes with multi-class classifiers. Feature-based models use surface information like parts of speech, lexical items, and verb tense information; see Fig. 17.17.
reporting events
Feature Explanation
 Character affixes Nominalization suffix Part of speech
Light verb Subjectsyntacticcategory Morphological stem
Verb root
WordNet hypernyms
Character-level prefixes and suffixes of target word Character-level suffixes for nominalizations (e.g., -tion)
Part of speech of the target word
Binary feature indicating that the target is governed by a light verb Syntacticcategoryofthesubjectofthesentence
Stemmed version of the target word
Root form of the verb basis for a nominalization Hypernym set for the target
 Figure 17.17
   tion.
Features commonly used in both rule-based and machine learning approaches to event detec-

Allen relations
17.4 • EXTRACTING EVENTS AND THEIR TIMES 349 17.4.1 Temporal Ordering of Events
With both the events and the temporal expressions in a text having been detected, the next logical task is to use this information to fit the events into a complete timeline. Such a timeline would be useful for applications such as question answering and summarization. This ambitious task is the subject of considerable current research but is beyond the capabilities of current systems.
A somewhat simpler, but still useful, task is to impose a partial ordering on the events and temporal expressions mentioned in a text. Such an ordering can provide many of the same benefits as a true timeline. An example of such a partial ordering is the determination that the fare increase by American Airlines came after the fare increase by United in our sample text. Determining such an ordering can be viewed as a binary relation detection and classification task similar to those described earlier in Section 17.1. The temporal relation between events is classified into one of the standard set of Allen relations shown in Fig. 17.18 (Allen, 1984), using feature- based classifiers as in Section 17.1, trained on the TimeBank corpus with features like words/embeddings, parse paths, tense and aspect.
        A
A before B B after A
B
A
A overlaps B B B overlaps' A
     A
A meets B B meets' A
B
 A B
A equals B (B equals A)
      A
B
A starts B B starts' A
A finishes B B finishes' A
A
B
    A during B B during' A
A B
  Time
 Figure 17.18
 TimeBank
The 13 temporal relations from Allen (1984).
The TimeBank corpus consists of text annotated with much of the information we’ve been discussing throughout this section (Pustejovsky et al., 2003b). Time- Bank 1.2 consists of 183 news articles selected from a variety of sources, including the Penn TreeBank and PropBank collections.

350 CHAPTER 17 • INFORMATION EXTRACTION
Example from the TimeBank corpus.
Each article in the TimeBank corpus has had the temporal expressions and event mentions in them explicitly annotated in the TimeML annotation (Pustejovsky et al., 2003a). In addition to temporal expressions and events, the TimeML annotation provides temporal links between events and temporal expressions that specify the nature of the relation between them. Consider the following sample sentence and its corresponding markup shown in Fig. 17.19, selected from one of the TimeBank documents.
(17.18) Delta Air Lines earnings soared 33% to a record in the fiscal first quarter, bucking the industry trend toward declining profits.
As annotated, this text includes three events and two temporal expressions. The events are all in the occurrence class and are given unique identifiers for use in fur- ther annotations. The temporal expressions include the creation time of the article, which serves as the document time, and a single temporal expression within the text.
In addition to these annotations, TimeBank provides four links that capture the temporal relations between the events and times in the text, using the Allen relations from Fig. 17.18. The following are the within-sentence temporal relations annotated for this example.
• Soaringe1 is included in the fiscal first quartert58 • Soaringe1 is before 1989-10-26t57
• Soaringe1 is simultaneous with the buckinge3
• Declininge4 includes soaringe1
17.5 Template Filling
   <TIMEX3 tid="t57" type="DATE" value="1989-10-26"  functionInDocument="CREATION_TIME">
10/26/89  </TIMEX3>
Delta Air Lines earnings <EVENT eid="e1" class="OCCURRENCE"> soared </EVENT> 33% to a
record in  <TIMEX3 tid="t58" type="DATE" value="1989-Q1" anchorTimeID="t57"> the
fiscal first quarter </TIMEX3>, <EVENT eid="e3"  class="OCCURRENCE">bucking</EVENT>
the industry trend toward <EVENT eid="e4" class="OCCURRENCE">declining</EVENT>
profits.
 Figure 17.19
 scripts
templates template filling
Many texts contain reports of events, and possibly sequences of events, that often correspond to fairly common, stereotypical situations in the world. These abstract situations or stories, related to what have been called scripts (Schank and Abel- son, 1977), consist of prototypical sequences of sub-events, participants, and their roles. The strong expectations provided by these scripts can facilitate the proper classification of entities, the assignment of entities into roles and relations, and most critically, the drawing of inferences that fill in things that have been left unsaid. In their simplest form, such scripts can be represented as templates consisting of fixed sets of slots that take as values slot-fillers belonging to particular classes. The task of template filling is to find documents that invoke particular scripts and then fill the slots in the associated templates with fillers extracted from the text. These slot-fillers may consist of text segments extracted directly from the text, or they may consist of concepts that have been inferred from text elements through some additional pro- cessing.
A filled template from our original airline story might look like the following.

template recognition
role-filler extraction
17.5 • TEMPLATE FILLING 351
This template has four slots (LEAD AIRLINE, AMOUNT, EFFECTIVE DATE, FOL- LOWER). The next section describes a standard sequence-labeling approach to filling slots. Section 17.5.2 then describes an older system based on the use of cascades of finite-state transducers and designed to address a more complex template-filling task that current learning-based systems don’t yet address.
17.5.1 Machine Learning Approaches to Template Filling
In the standard paradigm for template filling, we are given training documents with text spans annotated with predefined templates and their slot fillers. Our goal is to create one template for each event in the input, filling in the slots with text spans.
The task is generally modeled by training two separate supervised systems. The first system decides whether the template is present in a particular sentence. This task is called template recognition or sometimes, in a perhaps confusing bit of terminology, event recognition. Template recognition can be treated as a text classi- fication task, with features extracted from every sequence of words that was labeled in training documents as filling any slot from the template being detected. The usual set of features can be used: tokens, embeddings, word shapes, part-of-speech tags, syntactic chunk tags, and named entity tags.
The second system has the job of role-filler extraction. A separate classifier is trained to detect each role (LEAD-AIRLINE, AMOUNT, and so on). This can be a binary classifier that is run on every noun-phrase in the parsed input sentence, or a sequence model run over sequences of words. Each role classifier is trained on the labeled data in the training set. Again, the usual set of features can be used, but now trained only on an individual noun phrase or the fillers of a single slot.
Multiple non-identical text segments might be labeled with the same slot la- bel. For example in our sample text, the strings United or United Airlines might be labeled as the LEAD AIRLINE. These are not incompatible choices and the corefer- ence resolution techniques introduced in Chapter 22 can provide a path to a solution.
A variety of annotated collections have been used to evaluate this style of ap- proach to template filling, including sets of job announcements, conference calls for papers, restaurant guides, and biological texts. Recent work focuses on extracting templates in cases where there is no training data or even predefined templates, by inducing templates as sets of linked events (Chambers and Jurafsky, 2011).
17.5.2 Earlier Finite-State Template-Filling Systems
The templates above are relatively simple. But consider the task of producing a template that contained all the information in a text like this one (Grishman and Sundheim, 1995):
Bridgestone Sports Co. said Friday it has set up a joint venture in Taiwan with a local concern and a Japanese trading house to produce golf clubs to be shipped to Japan. The joint venture, Bridgestone Sports Taiwan Co., capital- ized at 20 million new Taiwan dollars, will start production in January 1990 with production of 20,000 iron and “metal wood” clubs a month.
FARE-RAISE ATTEMPT: LEAD AIRLINE: AMOUNT:
EFFECTIVE DATE: FOLLOWER:
UNITED AIRLINES  $6 
2006-10-26  AMERICAN AIRLINES
 
352 CHAPTER 17 • INFORMATION EXTRACTION
The MUC-5 ‘joint venture’ task (the Message Understanding Conferences were a series of U.S. government-organized information-extraction evaluations) was to produce hierarchically linked templates describing joint ventures. Figure 17.20 shows a structure produced by the FASTUS system (Hobbs et al., 1997). Note how the filler of the ACTIVITY slot of the TIE-UP template is itself a template with slots.
The templates produced by FASTUS given the input text on page 351.
Early systems for dealing with these complex templates were based on cascades
of transducers based on handwritten rules, as sketched in Fig. 17.21.
Levels of processing in FASTUS (Hobbs et al., 1997). Each level extracts a specific type of information which is then passed on to the next higher level.
The first four stages use handwritten regular expression and grammar rules to do basic tokenization, chunking, and parsing. Stage 5 then recognizes entities and events with a FST-based recognizer and inserts the recognized objects into the ap- propriate slots in templates. This FST recognizer is based on hand-built regular expressions like the following (NG indicates Noun-Group and VG Verb-Group), which matches the first sentence of the news story above.
                 NG(Company/ies) VG(Set-up) NG(Joint-Venture) with NG(Company/ies)
                 VG(Produce) NG(Product)
The result of processing these two sentences is the five draft templates (Fig. 17.22) that must then be merged into the single hierarchical structure shown in Fig. 17.20. The merging algorithm, after performing coreference resolution, merges two activi- ties that are likely to be describing the same events.
17.6 Summary
This chapter has explored techniques for extracting limited forms of semantic con- tent from texts.
• Relations among entities can be extracted by pattern-based approaches, su- pervised learning methods when annotated training data is available, lightly
Tie-up-1 Activity-1:
 RELATIONSHIP ENTITIES
JOINT VENTURE ACTIVITY AMOUNT
tie-up
Bridgestone Sports Co.
a local concern
a Japanese trading house Bridgestone Sports Taiwan Co. Activity-1
NT$20000000
COMPANY PRODUCT START DATE
Bridgestone Sports Taiwan Co. iron and “metal wood” clubs DURING: January 1990
 Figure 17.20
   No. Step Description
 1 Tokens
2 Complex Words
3 Basic phrases
4 Complex phrases
5 Semantic Patterns
6 Merging
Tokenize input stream of characters
Multiword phrases, numbers, and proper names. Segment sentences into noun and verb groups Identify complex noun groups and verb groups Identify entities and events, insert into templates. Merge references to the same entity or event
 Figure 17.21
   
BIBLIOGRAPHICAL AND HISTORICAL NOTES 353
# Template/Slot Value
 1 RELATIONSHIP: TIE-UP
 ENTITIES:
2 ACTIVITY: PRODUCT:
Bridgestone Co., a local concern, a Japanese trading house
PRODUCTION “golf clubs”
3 RELATIONSHIP: TIE-UP
JOINTVENTURE: AMOUNT:
4 ACTIVITY: COMPANY: STARTDATE:
5 ACTIVITY: PRODUCT:
“BridgestoneSportsTaiwanCo.” NT$20000000
PRODUCTION
“Bridgestone Sports Taiwan Co.” DURING: January 1990
PRODUCTION
“iron and “metal wood” clubs”
Figure 17.22
   The five partial templates produced by stage 5 of FASTUS. These templates are merged in stage 6 to produce the final template shown in Fig. 17.20 on page 352.
supervised bootstrapping methods when small numbers of seed tuples or seed patterns are available, distant supervision when a database of relations is available, and unsupervised or Open IE methods.
• Reasoning about time can be facilitated by detection and normalization of temporal expressions through a combination of statistical learning and rule- based methods.
• Eventscanbedetectedandorderedintimeusingsequencemodelsandclassi- fiers trained on temporally- and event-labeled data like the TimeBank corpus.
• Template-filling applications can recognize stereotypical situations in texts
and assign elements from the text to roles represented as fixed sets of slots.
Bibliographical and Historical Notes
The earliest work on information extraction addressed the template-filling task in the context of the Frump system (DeJong, 1982). Later work was stimulated by the U.S. government-sponsored MUC conferences (Sundheim 1991, Sundheim 1992, Sund- heim 1993, Sundheim 1995). Early MUC systems like CIRCUS system (Lehnert et al., 1991) and SCISOR (Jacobs and Rau, 1990) were quite influential and inspired later systems like FASTUS (Hobbs et al., 1997). Chinchor et al. (1993) describe the MUC evaluation techniques.
Due to the difficulty of porting systems from one domain to another, attention shifted to machine learning approaches. Early supervised learning approaches to IE (Cardie 1993, Cardie 1994, Riloff 1993, Soderland et al. 1995, Huffman 1996) focused on automating the knowledge acquisition process, mainly for finite-state rule-based systems. Their success, and the earlier success of HMM-based speech recognition, led to the use of sequence labeling (HMMs: Bikel et al. 1997; MEMMs McCallum et al. 2000; CRFs: Lafferty et al. 2001), and a wide exploration of fea- tures (Zhou et al., 2005). Neural approaches followed from the pioneering results of Collobert et al. (2011), who applied a CRF on top of a convolutional net.
Progress in this area continues to be stimulated by formal evaluations with shared benchmark datasets, including the Automatic Content Extraction (ACE) evaluations

354
CHAPTER 17 • INFORMATION EXTRACTION
KBP slot filling
of 2000-2007 on named entity recognition, relation extraction, and temporal ex- pressions1, the KBP (Knowledge Base Population) evaluations (Ji et al. 2010, Sur- deanu 2013) of relation extraction tasks like slot filling (extracting attributes (‘slots’) like age, birthplace, and spouse for a given entity) and a series of SemEval work- shops (Hendrickx et al., 2009).
Semisupervised relation extraction was first proposed by Hearst (1992b), and extended by systems like AutoSlog-TS (Riloff, 1996), DIPRE (Brin, 1998), SNOW- BALL (Agichtein and Gravano, 2000), and Jones et al. (1999). The distant supervi- sion algorithm we describe was drawn from Mintz et al. (2009), who coined the term ‘distant supervision’, but similar ideas had occurred in earlier systems like Craven and Kumlien (1999) and Morgan et al. (2004) under the name weakly labeled data, as well as in Snow et al. (2005) and Wu and Weld (2007). Among the many exten- sions are Wu and Weld (2010), Riedel et al. (2010), and Ritter et al. (2013). Open IE systems include KNOWITALL Etzioni et al. (2005), TextRunner (Banko et al., 2007), and REVERB (Fader et al., 2011). See Riedel et al. (2013) for a universal schema that combines the advantages of distant supervision and Open IE.
HeidelTime(Stro ̈tgenandGertz,2013)andSUTime(ChangandManning,2012) are downloadable temporal extraction and normalization systems. The 2013 TempE- val challenge is described in UzZaman et al. (2013); Chambers (2013) and Bethard (2013) give typical approaches.
Exercises
17.1 Acronym expansion, the process of associating a phrase with an acronym, can be accomplished by a simple form of relational analysis. Develop a system based on the relation analysis approaches described in this chapter to populate a database of acronym expansions. If you focus on English Three Letter Acronyms (TLAs) you can evaluate your system’s performance by comparing it to Wikipedia’s TLA page.
17.2 A useful functionality in newer email and calendar applications is the ability to associate temporal expressions connected with events in email (doctor’s appointments, meeting planning, party invitations, etc.) with specific calendar entries. Collect a corpus of email containing temporal expressions related to event planning. How do these expressions compare to the kinds of expressions commonly found in news text that we’ve been discussing in this chapter?
17.3 Acquire the CMU seminar corpus and develop a template-filling system by using any of the techniques mentioned in Section 17.5. Analyze how well your system performs as compared with state-of-the-art results on this corpus.
1 www.nist.gov/speech/tests/ace/
 
 CHAPTER
18 Word Senses and WordNet
ambiguous
word sense WordNet
Lady Bracknell. Are your parents living?
Jack. I have lost both my parents.
Lady Bracknell. To lose one parent, Mr. Worthing, may be regarded as a misfortune; to lose both looks like carelessness.
Oscar Wilde, The Importance of Being Earnest
Words are ambiguous: the same word can be used to mean different things. In Chapter 6 we saw that the word “mouse” has (at least) two meanings: (1) a small rodent, or (2) a hand-operated device to control a cursor. The word “bank” can mean: (1) a financial institution or (2) a sloping mound. In the quote above from his play The Importance of Being Earnest, Oscar Wilde plays with two meanings of “lose” (to misplace an object, and to suffer the loss of a person).
We say that the words ‘mouse’ or ‘bank’ are polysemous (from Greek ‘having many senses’, poly- ‘many’ + sema, ‘sign, mark’).1 A sense (or word sense) is a discrete representation of one aspect of the meaning of a word. In this chapter we discuss word senses in more detail and introduce WordNet, a large online the- saurus —a database that represents word senses—with versions in many languages. WordNet also represents relations between senses. For example, there is an IS-A relation between dog and mammal (a dog is a kind of mammal) and a part-whole relation between engine and car (an engine is a part of a car).
Knowing the relation between two senses can play an important role in language understanding. Consider the antonymy relation. Two words are antonyms if they have opposite meanings, like long and short, or up and down. Distinguishing these is quite important for language understanding (if a user asks a dialogue agent to turn up the music, it would be unfortunate to instead turn it down). But in fact in embedding models like word2vec, antonyms are easily confused with each other, because often one of the closest words in embedding space to a word (e.g., up) is its antonym (e.g., down). Thesauruses that represent this relationship can help!
We also introduce word sense disambiguation (WSD), the task of determining which sense of a word is being used in a particular context. We’ll give supervised and unsupervised algorithms for deciding which sense was intended in a particular context. This task has a very long history in computational linguistics and many ap- plications. In question answering, we can be more helpful to a user who asks about “bat care” if we know which sense of bat is relevant. (Is the user is a vampire? or just wants to play baseball.) And the different senses of a word often have different translations; in Spanish the animal bat is a murcie ́lago while the baseball bat is a bate, and indeed word sense algorithms may help improve MT (Pu et al., 2018). Finally, WSD has long been used as a tool for evaluating natural language under- standing models, and understanding how models represent different word senses is an important analytic direction.
1 You may also see the word polysemy used in a different way, to refer only to cases where a word’s senses have some sort of semantic relation, with the word homonymy used when there is no relation between the senses.
word sense disambiguation
 
356 CHAPTER 18 • WORD SENSES AND WORDNET 18.1 Word Senses
word sense
A sense (or word sense) is a discrete representation of one aspect of the meaning of a word. Loosely following lexicographic tradition, we represent each sense with a superscript: bank1 and bank2, mouse1 and mouse2. In context, it’s easy to see the different meanings:
mouse1 : .... a mouse controlling a computer system in 1968. mouse2 : .... a quiet animal like a mouse
bank1 : ...a bank can hold the investments in a custodial account ... bank2 : ...as agriculture burgeons on the east bank, the river ...
18.1.1 Defining Word Senses
How can we define the meaning of a word sense? We introduced in Chapter 6 the standard computational approach of representing a word as an embedding, a point in semantic space. The intuition of embedding models like word2vec or GloVe is that the meaning of a word can be defined by its co-occurrences, the counts of words that often occur nearby. But that doesn’t tell us how to define the meaning of a word sense. As we saw in Chapter 10, contextual embeddings like BERT go further by offering an embedding that represents the meaning of a word in its textual context, and we’ll see that contextual embeddings lie at the heart of modern algorithms for word sense disambiguation.
But first, we need to consider the alternative ways that dictionaries and the- sauruses offer for defining senses. One is based on the fact that dictionaries or the- sauruses give textual definitions for each sense called glosses. Here are the glosses for two senses of bank:
      1.  financial institution that accepts deposits and channels
          the money into lending activities
      2.  sloping land (especially the slope beside a body of water)
Glosses are not a formal meaning representation; they are just written for people. Consider the following fragments from the definitions of right, left, red, and blood from the American Heritage Dictionary (Morris, 1985).
right
left
red blood
Note the circularity in these definitions. The definition of right makes two direct references to itself, and the entry for left contains an implicit self-reference in the phrase this side of the body, which presumably means the left side. The entries for red and blood reference each other in their definitions. For humans, such entries are useful since the user of the dictionary has sufficient grasp of these other terms.
Yet despite their circularity and lack of formal representation, glosses can still be useful for computational modeling of senses. This is because a gloss is just a sen- tence, and from sentences we can compute sentence embeddings that tell us some- thing about the meaning of the sense. Dictionaries often give example sentences along with glosses, and these can again be used to help build a sense representation.
gloss
adj. located nearer the right hand esp. being on the right when facing the same direction as the observer.
 adj. located nearer to this side of the body than the right.
n. the color of blood or a ruby.
n. the red liquid that circulates in the heart, arteries and veins of animals.
 
zeugma
18.1 • WORD SENSES 357
The second way that thesauruses offer for defining a sense is—like the dictionary definitions—defining a sense through its relationship with other senses. For exam- ple, the above definitions make it clear that right and left are similar kinds of lemmas that stand in some kind of alternation, or opposition, to one another. Similarly, we can glean that red is a color and that blood is a liquid. Sense relations of this sort (IS-A, or antonymy) are explicitly listed in on-line databases like WordNet. Given a sufficiently large database of such relations, many applications are quite capable of performing sophisticated semantic tasks about word senses (even if they do not really know their right from their left).
18.1.2 How many senses do words have?
Dictionaries and thesauruses give discrete lists of senses. By contrast, embeddings (whether static or contextual) offer a continuous high-dimensional model of meaning that doesn’t divide up into discrete senses.
Therefore creating a thesaurus depends on criteria for deciding when the differ- ing uses of a word should be represented with discrete senses. We might consider two senses discrete if they have independent truth conditions, different syntactic be- havior, and independent sense relations, or if they exhibit antagonistic meanings.
Consider the following uses of the verb serve from the WSJ corpus:
(18.1) They rarely serve red meat, preferring to prepare seafood.
(18.2) He served as U.S. ambassador to Norway in 1976 and 1977.
(18.3) He might have served his time, come out and led an upstanding life.
The serve of serving red meat and that of serving time clearly have different truth conditions and presuppositions; the serve of serve as ambassador has the distinct subcategorization structure serve as NP. These heuristics suggest that these are prob- ably three distinct senses of serve. One practical technique for determining if two senses are distinct is to conjoin two uses of a word in a single sentence; this kind of conjunction of antagonistic readings is called zeugma. Consider the following examples:
(18.4) Which of those flights serve breakfast?
(18.5) Does Air France serve Philadelphia?
(18.6) ?Does Air France serve breakfast and Philadelphia?
We use (?) to mark those examples that are semantically ill-formed. The oddness of the invented third example (a case of zeugma) indicates there is no sensible way to make a single sense of serve work for both breakfast and Philadelphia. We can use this as evidence that serve has two different senses in this case.
Dictionaries tend to use many fine-grained senses so as to capture subtle meaning differences, a reasonable approach given that the traditional role of dictionaries is aiding word learners. For computational purposes, we often don’t need these fine distinctions, so we often group or cluster the senses; we have already done this for some of the examples in this chapter. Indeed, clustering examples into senses, or senses into broader-grained categories, is an important computational task that we’ll discuss in Section 18.7.

358 CHAPTER 18 • WORD SENSES AND WORDNET 18.2 Relations Between Senses
This section explores the relations between word senses, especially those that have received significant computational investigation like synonymy, antonymy, and hy- pernymy.
Synonymy
We introduced in Chapter 6 the idea that when two senses of two different words (lemmas) are identical, or nearly identical, we say the two senses are synonyms. Synonyms include such pairs as
couch/sofa vomit/throwup filbert/hazelnut car/automobile
And we mentioned that in practice, the word synonym is commonly used to describe a relationship of approximate or rough synonymy. But furthermore, syn- onymy is actually a relationship between senses rather than words. Considering the words big and large. These may seem to be synonyms in the following sentences, since we could swap big and large in either sentence and retain the same meaning:
(18.7) How big is that plane?
(18.8) Would I be flying on a large or small plane?
But note the following sentence in which we cannot substitute large for big: (18.9) Miss Nelson, for instance, became a kind of big sister to Benjamin.
(18.10) ?Miss Nelson, for instance, became a kind of large sister to Benjamin.
This is because the word big has a sense that means being older or grown up, while large lacks this sense. Thus, we say that some senses of big and large are (nearly) synonymous while other ones are not.
Antonymy
Whereas synonyms are words with identical or similar meanings, antonyms are words with an opposite meaning, like:
long/short big/little fast/slow cold/hot dark/light rise/fall up/down in/out
Two senses can be antonyms if they define a binary opposition or are at opposite ends of some scale. This is the case for long/short, fast/slow, or big/little, which are at opposite ends of the length or size scale. Another group of antonyms, reversives, describe change or movement in opposite directions, such as rise/fall or up/down.
Antonyms thus differ completely with respect to one aspect of their meaning— their position on a scale or their direction—but are otherwise very similar, sharing almost all other aspects of meaning. Thus, automatically distinguishing synonyms from antonyms can be difficult.
Taxonomic Relations
Another way word senses can be related is taxonomically. A word (or sense) is a hyponym of another word or sense if the first is more specific, denoting a subclass of the other. For example, car is a hyponym of vehicle, dog is a hyponym of animal, and mango is a hyponym of fruit. Conversely, we say that vehicle is a hypernym of car, and animal is a hypernym of dog. It is unfortunate that the two words (hypernym
synonym
antonym
reversives
hyponym hypernym

superordinate
18.2 • RELATIONS BETWEEN SENSES 359 and hyponym) are very similar and hence easily confused; for this reason, the word
superordinate is often used instead of hypernym.
We can define hypernymy more formally by saying that the class denoted by the superordinate extensionally includes the class denoted by the hyponym. Thus, the class of animals includes as members all dogs, and the class of moving actions in- cludes all walking actions. Hypernymy can also be defined in terms of entailment. Under this definition, a sense A is a hyponym of a sense B if everything that is A is also B, and hence being an A entails being a B, or ∀x A(x) ⇒ B(x). Hyponymy/hy- pernymy is usually a transitive relation; if A is a hyponym of B and B is a hyponym of C, then A is a hyponym of C. Another name for the hypernym/hyponym structure is the IS-A hierarchy, in which we say A IS-A B, or B subsumes A.
Hypernymy is useful for tasks like textual entailment or question answering; knowing that leukemia is a type of cancer, for example, would certainly be useful in answering questions about leukemia.
Meronymy
Another common relation is meronymy, the part-whole relation. A leg is part of a chair; a wheel is part of a car. We say that wheel is a meronym of car, and car is a holonym of wheel.
Structured Polysemy
The senses of a word can also be related semantically, in which case we call the relationship between them structured polysemy.Consider this sense bank:
(18.11) The bank is on the corner of Nassau and Witherspoon.
This sense, perhaps bank4, means something like “the building belonging to a financial institution”. These two kinds of senses (an organization and the build- ing associated with an organization ) occur together for many other words as well (school, university, hospital, etc.). Thus, there is a systematic relationship between senses that we might represent as
BUILDING ↔ ORGANIZATION
This particular subtype of polysemy relation is called metonymy. Metonymy is the use of one aspect of a concept or entity to refer to other aspects of the entity or to the entity itself. We are performing metonymy when we use the phrase the White House to refer to the administration whose office is in the White House. Other common examples of metonymy include the relation between the following pairings of senses:
Superordinate vehicle fruit furniture mammal
  Subordinate car mango chair dog
  IS-A
part-whole
structured polysemy
metonymy
 AUTHOR
 ↔
WORKS OF AUTHOR
 (Jane Austen wrote Emma)
 (I really love Jane Austen)
 FRUITTREE
(Plums have beautiful blossoms)
 ↔
FRUIT
(I ate a preserved plum yesterday)
    
360 CHAPTER 18 • WORD SENSES AND WORDNET
18.3 WordNet: A Database of Lexical Relations
WordNet
The most commonly used resource for sense relations in English and many other languages is the WordNet lexical database (Fellbaum, 1998). English WordNet consists of three separate databases, one each for nouns and verbs and a third for adjectives and adverbs; closed class words are not included. Each database contains a set of lemmas, each one annotated with a set of senses. The WordNet 3.0 release has 117,798 nouns, 11,529 verbs, 22,479 adjectives, and 4,481 adverbs. The aver- age noun has 1.23 senses, and the average verb has 2.16 senses. WordNet can be accessed on the Web or downloaded locally. Figure 18.1 shows the lemma entry for the noun and adjective bass.
   The noun “bass” has 8 senses in WordNet.
1. bass1 - (the lowest part of the musical range)
2. bass2, bass part1 - (the lowest part in polyphonic music)
3. bass3, basso1 - (an adult male singer with the lowest voice)
4. sea bass1, bass4 - (the lean flesh of a saltwater fish of the family Serranidae) 5. freshwater bass1, bass5 - (any of various North American freshwater fish with
lean flesh (especially of the genus Micropterus)) 6. bass6, bass voice1, basso2 - (the lowest adult male singing voice)
7. bass7 - (the member with the lowest range of a family of musical instruments) 8. bass8 - (nontechnical name for any of numerous edible marine and
freshwater spiny-finned fishes)
 Figure 18.1
 gloss
synset
A portion of the WordNet 3.0 entry for the noun bass.
Note that there are eight senses for the noun and one for the adjective, each of which has a gloss (a dictionary-style definition), a list of synonyms for the sense, and sometimes also usage examples (shown for the adjective sense). WordNet doesn’t represent pronunciation, so doesn’t distinguish the pronunciation [b ae s] in bass4, bass5, and bass8 from the other senses pronounced [b ey s].
The set of near-synonyms for a WordNet sense is called a synset (for synonym set); synsets are an important primitive in WordNet. The entry for bass includes synsets like {bass1, deep6}, or {bass6, bass voice1, basso2}. We can think of a synset as representing a concept of the type we discussed in Chapter 15. Thus, instead of representing concepts in logical terms, WordNet represents them as lists of the word senses that can be used to express the concept. Here’s another synset example:
{chump1, fool2, gull1, mark9, patsy1, fall guy1, sucker1, soft touch1, mug2}
The gloss of this synset describes it as:
Gloss: a person who is gullible and easy to take advantage of.
Glosses are properties of a synset, so that each sense included in the synset has the same gloss and can express this concept. Because they share glosses, synsets like this one are the fundamental unit associated with WordNet entries, and hence it is synsets, not wordforms, lemmas, or individual senses, that participate in most of the lexical sense relations in WordNet.
WordNet also labels each synset with a lexicographic category drawn from a semantic field for example the 26 categories for nouns shown in Fig. 18.2, as well

supersense
18.3 • WORDNET: A DATABASE OF LEXICAL RELATIONS 361
as 15 for verbs (plus 2 for adjectives and 1 for adverbs). These categories are often called supersenses, because they act as coarse semantic categories or groupings of senses which can be useful when word senses are too fine-grained (Ciaramita and Johnson 2003, Ciaramita and Altun 2006). Supersenses have also been defined for adjectives (Tsvetkov et al., 2014) and prepositions (Schneider et al., 2018).
Category Example Category Example Category Example
 ACT service ANIMAL dog ARTIFACT car ATTRIBUTE quality BODY hair COGNITION way COMMUNICATION review FEELING discomfort FOOD food
GROUP
LOCATION MOTIVE NATURAL EVENT NATURAL OBJECT OTHER
PERSON PHENOMENON
place
area reason experience flower stuff people result
PLANT POSSESSION PROCESS QUANTITY RELATION SHAPE STATE SUBSTANCE TIME
tree price process amount portion square pain oil
day
 Figure 18.2
   Relation Also Called Definition Example
  Hypernym Hyponym
Instance Hypernym Instance Hyponym Part Meronym
Part Holonym Antonym Derivation Figure 18.3
Hypernym Troponym Entails Antonym Figure 18.4
Superordinate Subordinate Instance Has-Instance Has-Part Part-Of
From concepts to superordinates From concepts to subtypes From instances to their concepts From concepts to their instances From wholes to parts
From parts to wholes
Semantic opposition between lemmas Lemmas w/same morphological root
breakfast1 → meal1
meal1 → lunch1
Austen1 → author1 composer1 → Bach1 table2 → leg3
course7 → meal1
leader1 ⇐⇒ follower1 destruction1 ⇐⇒ destroy1
Supersenses: 26 lexicographic categories for nouns in WordNet.
18.3.1 Sense Relations in WordNet
WordNet represents all the kinds of sense relations discussed in the previous section, as illustrated in Fig. 18.3 and Fig. 18.4.
  Some of the noun relations in WordNet.
From events to superordinate events
From events to subordinate event
From verbs (events) to the verbs (events) they entail Semantic opposition between lemmas
fly9 → travel5
walk1 → stroll1
snore1 → sleep1 increase1 ⇐⇒ decrease1
 Relation Definition Example
    Some verb relations in WordNet.
 For example WordNet represents hyponymy (page 358) by relating each synset to its immediately more general and more specific synsets through direct hypernym and hyponym relations. These relations can be followed to produce longer chains of more general or more specific synsets. Figure 18.5 shows hypernym chains for bass3 and bass7; more general synsets are shown on successively indented lines.
WordNet has two kinds of taxonomic entities: classes and instances. An instance is an individual, a proper noun that is a unique entity. San Francisco is an instance of city, for example. But city is a class, a hyponym of municipality and eventually

362 CHAPTER 18 • WORD SENSES AND WORDNET
   bass3, basso (an adult male singer with the lowest voice) => singer, vocalist, vocalizer, vocaliser
   => musician, instrumentalist, player
      => performer, performing artist
         => entertainer
            => person, individual, someone...
               => organism, being
                  => living thing, animate thing,
                     => whole, unit
                        => object, physical object
                           => physical entity
                              => entity
bass7 (member with the lowest range of a family of instruments) => musical instrument, instrument
   => device
      => instrumentality, instrumentation
         => artifact, artefact
            => whole, unit
               => object, physical object
                  => physical entity
=> entity
 Figure 18.5
 Hyponymy chains for two separate senses of the lemma bass. Note that the chains are completely distinct, only converging at the very abstract level whole, unit.
of location. Fig. 18.6 shows a subgraph of WordNet demonstrating many of the relations.
WordNet viewed as a graph. Figure from Navigli (2016).
    Figure 18.6
  
18.4 • WORD SENSE DISAMBIGUATION 363 18.4 Word Sense Disambiguation
word sense disambiguation
WSD
The task of selecting the correct sense for a word is called word sense disambigua- tion, or WSD. WSD algorithms take as input a word in context and a fixed inventory of potential word senses and outputs the correct word sense in context.
18.4.1 WSD: The Task and Datasets
In this section we introduce the task setup for WSD, and then turn to algorithms. The inventory of sense tags depends on the task. For sense tagging in the context of translation from English to Spanish, the sense tag inventory for an English word might be the set of different Spanish translations. For automatic indexing of med- ical articles, the sense-tag inventory might be the set of MeSH (Medical Subject Headings) thesaurus entries. Or we can use the set of senses from a resource like WordNet, or supersenses if we want a coarser-grain set. Figure 18.4.1 shows some such examples for the word bass.
Some possibile sense tag inventories for bass.
In some situations, we just need to disambiguate a small number of words. In such lexical sample tasks, we have a small pre-selected set of target words and an inventory of senses for each word from some lexicon. Since the set of words and the set of senses are small, simple supervised classification approaches work very well.
More commonly, however, we have a harder problem in which we have to dis- ambiguate all the words in some text. In this all-words task, the system is given an entire texts and a lexicon with an inventory of senses for each entry and we have to disambiguate every word in the text (or sometimes just every content word). The all-words task is similar to part-of-speech tagging, except with a much larger set of tags since each lemma has its own set. A consequence of this larger set of tags is data sparseness.
Supervised all-word disambiguation tasks are generally trained from a semantic concordance, a corpus in which each open-class word in each sentence is labeled with its word sense from a specific dictionary or thesaurus, most often WordNet. The SemCor corpus is a subset of the Brown Corpus consisting of over 226,036 words that were manually tagged with WordNet senses (Miller et al. 1993, Landes et al. 1998). Other sense-tagged corpora have been built for the SENSEVAL and Se- mEval WSD tasks, such as the SENSEVAL-3 Task 1 English all-words test data with 2282 annotations (Snyder and Palmer, 2004) or the SemEval-13 Task 12 datasets. Large semantic concordances are also available in other languages including Dutch (Vossen et al., 2011) and German (Henrich et al., 2012).
Here’s an example from the SemCor corpus showing the WordNet sense num- bers of the tagged words; we’ve used the standard WSD notation in which a subscript marks the part of speech (Navigli, 2009):
(18.12) You will find9v that avocado1n is1v unlike1j other1j fruit1n you have ever1r tasted2v
Given each noun, verb, adjective, or adverb word in the hand-labeled test set (say fruit), the SemCor-based WSD task is to choose the correct sense from the possible
  lexical sample
all-words
semantic concordance
WordNet Spanish WordNet
Sense Translation Supersense Target Word in Context
bass4 lubina FOOD . . . fish as Pacific salmon and striped bass and. . . bass7 bajo ARTIFACT . . . play bass because he doesn’t have to solo. . .
 Figure 18.7
  
364 CHAPTER 18 • WORD SENSES AND WORDNET
senses in WordNet. For fruit this would mean choosing between the correct answer fruit1n (the ripened reproductive body of a seed plant), and the other two senses fruit2n (yield; an amount of a product) and fruit3n (the consequence of some effort or action). Fig. 18.8 sketches the task.
    y3
y5 y6
  y1
y4
 y2
bass1: low range ... bass4: sea fish ... bass7: instrument ...
  electric1: using electricity electric2: tense electric3: thrilling
player1: in game player2: musician player3: actor
...
 guitar1
x1x2x3x4x5 x6
an electric guitar and bass player stand off to one side
stand1: upright ... stand5: bear ... stand10: put upright ...
side1: relative region ... side3: of body ... side11: slope ...
 Figure 18.8
 most frequent sense
one sense per discourse
The all-words WSD task, mapping from input words (x) to WordNet senses (y). Only nouns, verbs, adjectives, and adverbs are mapped, and note that some words (like guitar in the example) only have one sense in WordNet. Figure inspired by Chaplot and Salakhutdinov (2018).
WSD systems are typically evaluated intrinsically, by computing F1 against hand-labeled sense tags in a held-out set, such as the SemCor corpus or SemEval corpora discussed above.
A surprisingly strong baseline is simply to choose the most frequent sense for each word from the senses in a labeled corpus (Gale et al., 1992a). For WordNet, this corresponds to the first sense, since senses in WordNet are generally ordered from most frequent to least frequent based on their counts in the SemCor sense-tagged corpus. The most frequent sense baseline can be quite accurate, and is therefore often used as a default, to supply a word sense when a supervised algorithm has insufficient training data.
A second heuristic, called one sense per discourse is based on the work of Gale et al. (1992b), who noticed that a word appearing multiple times in a text or discourse often appears with the same sense. This heuristic seems to hold better for coarse-grained senses and particularly for cases of homonymy rather than polysemy, so isn’t generally used as a baseline. Nonetheless various kinds of disambiguation tasks often include some such bias toward resolving an ambiguity the same way inside a discourse segment.
18.4.2 The WSD Algorithm: Contextual Embeddings
The best performing WSD algorithm is a simple 1-nearest-neighbor algorithm using contextual word embeddings, due to Melamud et al. (2016) and Peters et al. (2018). At training time we pass each sentence in the SemCore labeled dataset through any contextual embedding (e.g., BERT) resulting in a contextual embedding for each labeled token in SemCore. For each token ci of each sense c of each word, we average the contextual representations to produce a contextual sense embedding vs

for c:
18.4 • WORD SENSE DISAMBIGUATION 365 vs = 1n 􏰑ci (18.13)
i
At test time we similarly compute a contextual embedding t for the target word, and choose its nearest neighbor sense (the sense with the highest cosine with t) from the training set. Fig. 18.9 illustrates the model.
     find4 find5v v
find9v
find1v
cI cfound cthe cjar cempty
ENCODER
I  found  the  jar  empty
  Figure 18.9
 The nearest-neighbor algorithm for WSD. In green are the contextual embed- dings precomputed for each sense of each word; here we just show a few of the senses for find. A contextual embedding is computed for the target word found, and then the nearest neighbor sense (in this case find9v ) would be chosen. Figure inspired by Loureiro and Jorge (2019).
What do we do for words we haven’t seen in the sense-labeled training data? After all, the number of senses that appear in SemCor is only a small fraction of the words in WordNet. The simplest algorithm is to fall back to the Most Frequent Sense baseline, i.e. taking the first sense in WordNet. But that’s not very satisfactory.
A more powerful approach, due to Loureiro and Jorge (2019), is to impute the missing sense embeddings, bottom-up, by using the WordNet taxonomy and super- senses. We get a sense embedding for any higher-level node in the WordNet taxon- omy by averaging the embeddings of its children, thus computing the embedding for each synset as the average of its sense embeddings, the embedding for a hypernym as the average of its synset embeddings, and the lexicographic category (supersense) embedding as the average of the large set of synset embeddings with that category. More formally, for each missing sense in WordNet sˆ ∈ W , let the sense embeddings for the other members of its synset be Ssˆ, the hypernym-specific synset embeddings be Hsˆ, and the lexicographic (supersense-specific) synset embeddings be Lsˆ. We can then compute the sense embedding for sˆ as follows:
if else if else if
|Ssˆ| > 0,
|Hsˆ| > 0,
|Lsˆ| > 0,
1􏰑
vsˆ = |Ssˆ| 􏰑vs,∀vs ∈ Ssˆ
1
vsˆ = |Hsˆ|􏰑 vsyn,∀vsyn ∈ Hsˆ
vsˆ = 1 vsyn,∀vsyn ∈ Lsˆ |Lsˆ|
(18.14)
(18.15)
(18.16)
Since all of the supersenses have some labeled data in SemCor, the algorithm is guaranteed to have some representation for all possible senses by the time the al- gorithm backs off to the most general (supersense) information, although of course with a very coarse model.

366 CHAPTER 18 • WORD SENSES AND WORDNET
18.5 Alternate WSD algorithms and Tasks
collocation
18.5.1 Feature-Based WSD
Feature-based algorithms for WSD are extremely simple and function almost as well as contextual language model algorithms. The best performing IMS algorithm (Zhong and Ng, 2010), augmented by embeddings (Iacobacci et al. 2016, Raganato et al. 2017b), uses an SVM classifier to choose the sense for each input word with the following simple features of the surrounding words:
• part-of-speech tags (for a window of 3 words on each side, stopping at sen- tence boundaries)
• collocation features of words or n-grams of lengths 1, 2, 3) at a particular location in a window of 3 word on each side (i.e., exactly one word to the right, or the two words starting 3 words to the left, and so on).
• weighted average of embeddings (of all words in a window of 10 words on each side, weighted exponentially by distance)
Consider the ambiguous word bass in the following WSJ sentence:
(18.17) An electric guitar and bass player stand off to one side,
If we used a small 2-word window, a standard feature vector might include parts-of- speech, unigram and bigram collocation features, and a weighted sum g of embed- dings, that is:
knowledge- based
Lesk algorithm
Simplified Lesk
    [guitar, NN, and, CC, player, NN, stand, VB, and guitar,
       player stand, g(E(guitar),E(and),E(player),E(stand))]
18.5.2 The Lesk Algorithm as WSD Baseline
Generating sense labeled corpora like SemCor is quite difficult and expensive. An alternative class of WSD algorithms, knowledge-based algorithms, rely solely on WordNet or other such resources and don’t require labeled data. While supervised algorithms generally work better, knowledge-based methods can be used in lan- guages or domains where thesauruses or dictionaries but not sense labeled corpora are available.
The Lesk algorithm is the oldest and most powerful knowledge-based WSD method, and is a useful baseline. Lesk is really a family of algorithms that choose the sense whose dictionary gloss or definition shares the most words with the target word’s neighborhood. Figure 18.10 shows the simplest version of the algorithm, often called the Simplified Lesk algorithm (Kilgarriff and Rosenzweig, 2000).
As an example of the Lesk algorithm at work, consider disambiguating the word bank in the following context:
(18.19) The bank can guarantee deposits will eventually cover future tuition costs because it invests in adjustable-rate mortgage securities.
given the following two WordNet senses:
[wi−2 , POSi−2 , wi−1 , POSi−1 , wi+1 , POSi+1 , wi+2 , POSi+2 , wi−1 , i−2
wi+2 , g(E (wi−2 ), E (wi−1 ), E (wi+1 ), E (wi+2 )] i+1
would yield the following vector:
(18.18)

18.5 • ALTERNATE WSD ALGORITHMS AND TASKS 367
   function SIMPLIFIED LESK(word, sentence) returns best sense of word
best-sense←most frequent sense for word max-overlap ← 0
context←set of words in sentence
for each sense in senses of word do
signature←set of words in the gloss and examples of sense overlap←COMPUTEOVERLAP(signature,context)
if overlap > max-overlap then
max-overlap ← overlap end best-sense←sense
return(best-sense)
 Figure 18.10
 bank1 Gloss: a financial institution that accepts deposits and channels the money into lending activities
Examples: “he cashed a check at the bank”, “that bank holds the mortgage on my home”
 bank2 Gloss: sloping land (especially the slope beside a body of water) Examples: “they pulled the canoe up on the bank”, “he sat on the bank of
the river and watched the currents”
   word-in-context WiC
The Simplified Lesk algorithm. The COMPUTEOVERLAP function returns the number of words in common between two sets, ignoring function words or other words on a stop list. The original Lesk algorithm defines the context in a more complex way.
Sense bank1 has two non-stopwords overlapping with the context in (18.19): deposits and mortgage, while sense bank2 has zero words, so sense bank1 is chosen. There are many obvious extensions to Simplified Lesk, such as weighing the overlapping words by IDF (inverse document frequency) Chapter 6 to downweight frequent words like function words; best performing is to use word embedding co- sine instead of word overlap to compute the similarity between the definition and the context (Basile et al., 2014). Modern neural extensions of Lesk use the definitions to compute sense embeddings that can be directly used instead of SemCor-training
embeddings (Kumar et al. 2019, Luo et al. 2018a, Luo et al. 2018b). 18.5.3 Word-in-Context Evaluation
Word Sense Disambiguation is a much more fine-grained evaluation of word mean- ing than the context-free word similarity tasks we described in Chapter 6. Recall that tasks like LexSim-999 require systems to match human judgments on the context- free similarity between two words (how similar is cup to mug?). We can think of WSD as a kind of contextualized similarity task, since our goal is to be able to dis- tinguish the meaning of a word lke bass in one context (playing music) from another context (fishing).
Somewhere in between lies the word-in-context task. Here the system is given two sentences, each with the same target word but in a different sentential context. The system must decide whether the target words are used in the same sense in the two sentences or in a different sense. Fig. 18.11 shows sample pairs from the WiC dataset of Pilehvar and Camacho-Collados (2019).
The WiC sentences are mainly taken from the example usages for senses in WordNet. But WordNet senses are very fine-grained. For this reason tasks like

368 CHAPTER 18 • WORD SENSES AND WORDNET
F There’salotoftrashonthebedoftheriver—
I keep a glass of water next to my bed when I sleep
F Justifythemargins—Theendjustifiesthemeans
T Airpollution—Openawindowandletinsomeair
T Theexpandedwindowwillgiveustimetocatchthethieves—
You have a two-hour window of clear weather to finish working on the lawn Figure 18.11 Positive (T) and negative (F) pairs from the WiC dataset (Pilehvar and Camacho-Collados, 2019).
word-in-context first cluster the word senses into coarser clusters, so that the two sentential contexts for the target word are marked as T if the two senses are in the same cluster. WiC clusters all pairs of senses if they are first degree connections in the WordNet semantic graph, including sister senses, or if they belong to the same supersense; we point to other sense clustering algorithms at the end of the chapter.
The baseline algorithm to solve the WIC task uses contextual embeddings like BERT with a simple thesholded cosine. We first compute the contextual embed- dings for the target word in each of the two sentences, and then compute the cosine between them. If it’s above a threshold tuned on a devset we respond true (the two senses are the same) else we respond false.
18.5.4 Wikipedia as a source of training data
Datasets other than SemCor have been used for all-words WSD. One important di- rection is to use Wikipedia as a source of sense-labeled data. When a concept is mentioned in a Wikipedia article, the article text may contain an explicit link to the concept’s Wikipedia page, which is named by a unique identifier. This link can be used as a sense annotation. For example, the ambiguous word bar is linked to a different Wikipedia article depending on its meaning in context, including the page BAR (LAW), the page BAR (MUSIC), and so on, as in the following Wikipedia examples (Mihalcea, 2007).
In 1834, Sumner was admitted to the [[bar (law)|bar]] at the age of twenty-three, and entered private practice in Boston.
It is danced in 3/4 time (like most waltzes), with the couple turning approx. 180 degrees every [[bar (music)|bar]].
Jenga is a popular beer in the [[bar (establishment)|bar]]s of Thailand.
These sentences can then be added to the training data for a supervised system. In order to use Wikipedia in this way, however, it is necessary to map from Wiki- pedia concepts to whatever inventory of senses is relevant for the WSD application. Automatic algorithms that map from Wikipedia to WordNet, for example, involve finding the WordNet sense that has the greatest lexical overlap with the Wikipedia sense, by comparing the vector of words in the WordNet synset, gloss, and related senses with the vector of words in the Wikipedia page title, outgoing links, and page category (Ponzetto and Navigli, 2010). The resulting mapping has been used to create BabelNet, a large sense-annotated resource (Navigli and Ponzetto, 2012).
   
18.6 • USING THESAURUSES TO IMPROVE EMBEDDINGS 369 18.6 Using Thesauruses to Improve Embeddings
   retrofitting
Thesauruses have also been used to improve both static and contextual word em- beddings. For example, static word embeddings have a problem with antonyms. A word like expensive is often very similar in embedding cosine to its antonym like cheap. Antonymy information from thesauruses can help solve this problem; Fig. 18.12 shows nearest neighbors to some target words in GloVe, and the improve- ment after one such method.
The nearest neighbors in GloVe to east, expensive, and British include antonyms like west. The right side showing the improvement in GloVe nearest neighbors after the counterfitting method (Mrksˇic ́ et al., 2016).
There are two families of solutions. The first requires retraining: we modify the embedding training to incorporate thesaurus relations like synonymy, antonym, or supersenses. This can be done by modifying the static embedding loss function for word2vec (Yu and Dredze 2014, Nguyen et al. 2016) or by modifying contextual embedding training (Levine et al. 2020, Lauscher et al. 2019).
The second, for static embeddings, is more light-weight; after the embeddings have been trained we learn a second mapping based on a thesaurus that shifts the embeddings of words in such a way that synonyms (according to the thesaurus) are pushed closer and antonyms further apart. Such methods are called retrofitting (Faruqui et al. 2015, Lengerich et al. 2018) or counterfitting (Mrksˇic ́ et al., 2016).
Figure 18.12
 18.7 Word Sense Induction
word sense induction
It is expensive and difficult to build large corpora in which each word is labeled for its word sense. For this reason, an unsupervised approach to sense disambiguation, often called word sense induction or WSI, is an important direction. In unsu- pervised approaches, we don’t use human-defined word senses. Instead, the set of “senses” of each word is created automatically from the instances of each word in the training set.
Most algorithms for word sense induction follow the early work of Schu ̈tze (Schu ̈tze 1992b, Schu ̈tze 1998) in using some sort of clustering over word embed- dings. In training, we use three steps:
1. For each token wi of word w in a corpus, compute a context vector c.
2. Useaclusteringalgorithmtoclustertheseword-tokencontextvectorscinto
a predefined number of groups or clusters. Each cluster defines a sense of w.
3. Compute the vector centroid of each cluster. Each vector centroid sj is a
sense vector representing that sense of w.
Since this is an unsupervised algorithm, we don’t have names for each of these “senses” of w; we just refer to the jth sense of w.
To disambiguate a particular token t of w we again have three steps:
Before counterfitting east west north south
expensive pricey cheaper costly British American Australian Britain
After counterfitting
eastward eastern easterly costly pricy overpriced Brits London BBC

370 CHAPTER 18 • WORD SENSES AND WORDNET
agglomerative clustering
1. Compute a context vector c for t.
2. Retrieve all sense vectors s j for w.
3. Assign t to the sense represented by the sense vector sj that is closest to t.
All we need is a clustering algorithm and a distance metric between vectors. Clustering is a well-studied problem with a wide number of standard algorithms that can be applied to inputs structured as vectors of numerical values (Duda and Hart, 1973). A frequently used technique in language applications is known as agglom- erative clustering. In this technique, each of the N training instances is initially assigned to its own cluster. New clusters are then formed in a bottom-up fashion by the successive merging of the two clusters that are most similar. This process con- tinues until either a specified number of clusters is reached, or some global goodness measure among the clusters is achieved. In cases in which the number of training instances makes this method too expensive, random sampling can be used on the original training set to achieve similar results.
How can we evaluate unsupervised sense disambiguation approaches? As usual, the best way is to do extrinsic evaluation embedded in some end-to-end system; one example used in a SemEval bakeoff is to improve search result clustering and di- versification (Navigli and Vannella, 2013). Intrinsic evaluation requires a way to map the automatically derived sense classes into a hand-labeled gold-standard set so that we can compare a hand-labeled test set with a set labeled by our unsupervised classifier. Various such metrics have been tested, for example in the SemEval tasks (Manandhar et al. 2010, Navigli and Vannella 2013, Jurgens and Klapaftis 2013), including cluster overlap metrics, or methods that map each sense cluster to a pre- defined sense by choosing the sense that (in some training set) has the most overlap with the cluster. However it is fair to say that no evaluation metric for this task has yet become standard.
18.8 Summary
This chapter has covered a wide range of issues concerning the meanings associated with lexical items. The following are among the highlights:
• Awordsenseisthelocusofwordmeaning;definitionsandmeaningrelations are defined at the level of the word sense rather than wordforms.
• Many words are polysemous, having many senses.
• Relations between senses include synonymy, antonymy, meronymy, and
taxonomic relations hyponymy and hypernymy.
• WordNet is a large database of lexical relations for English, and WordNets
exist for a variety of languages.
• Word-sense disambiguation (WSD) is the task of determining the correct
sense of a word in context. Supervised approaches make use of a corpus of sentences in which individual words (lexical sample task) or all words (all-words task) are hand-labeled with senses from a resource like WordNet. SemCor is the largest corpus with WordNet-labeled senses.
• ThestandardsupervisedalgorithmforWSDisnearestneighborswithcontex- tual embeddings.
• Feature-based algorithms using parts of speech and embeddings of words in the context of the target word also work well.

BIBLIOGRAPHICAL AND HISTORICAL NOTES 371 • An important baseline for WSD is the most frequent sense, equivalent, in
WordNet, to take the first sense.
• Another baseline is a knowledge-based WSD algorithm called the Lesk al- gorithm which chooses the sense whose dictionary definition shares the most words with the target word’s neighborhood.
• Word sense induction is the task of learning word senses unsupervised.
Bibliographical and Historical Notes
Word sense disambiguation traces its roots to some of the earliest applications of digital computers. The insight that underlies modern algorithms for word sense disambiguation was first articulated by Weaver (1955) in the context of machine translation:
If one examines the words in a book, one at a time as through an opaque mask with a hole in it one word wide, then it is obviously impossible to determine, one at a time, the meaning of the words. [...] But if one lengthens the slit in the opaque mask, until one can see not only the central word in question but also say N words on either side, then if N is large enough one can unambiguously decide the meaning of the central word. [. . . ] The practical question is : “What minimum value of N will, at least in a tolerable fraction of cases, lead to the correct choice of meaning for the central word?”
Other notions first proposed in this early period include the use of a thesaurus for dis- ambiguation (Masterman, 1957), supervised training of Bayesian models for disam- biguation (Madhu and Lytel, 1965), and the use of clustering in word sense analysis (Sparck Jones, 1986).
Much disambiguation work was conducted within the context of early AI-oriented natural language processing systems. Quillian (1968) and Quillian (1969) proposed a graph-based approach to language understanding, in which the definition of a word was represented by a network of word nodes connected by syntactic and semantic relations, and sense disambiguation by finding the shortest path between senses in the graph. Simmons (1973) is another influential early semantic network approach. Wilks proposed one of the earliest non-discrete models with his Preference Seman- tics (Wilks 1975c, Wilks 1975b, Wilks 1975a), and Small and Rieger (1982) and Riesbeck (1975) proposed understanding systems based on modeling rich procedu- ral information for each word. Hirst’s ABSITY system (Hirst and Charniak 1982, Hirst 1987, Hirst 1988), which used a technique called marker passing based on se- mantic networks, represents the most advanced system of this type. As with these largely symbolic approaches, early neural network (at the time called ‘connection- ist’) approaches to word sense disambiguation relied on small lexicons with hand- coded representations (Cottrell 1985, Kawamoto 1988).
The earliest implementation of a robust empirical approach to sense disambigua- tion is due to Kelly and Stone (1975), who directed a team that hand-crafted a set of disambiguation rules for 1790 ambiguous English words. Lesk (1986) was the first to use a machine-readable dictionary for word sense disambiguation. Fellbaum (1998) collects early work on WordNet. Early work using dictionaries as lexical re-

372 CHAPTER 18 • WORD SENSES AND WORDNET
coarse senses
OntoNotes
generative lexicon qualia structure
sources include Amsler’s (1981) use of the Merriam Webster dictionary and Long- man’s Dictionary of Contemporary English (Boguraev and Briscoe, 1989).
Supervised approaches to disambiguation began with the use of decision trees by Black (1988). In addition to the IMS and contextual-embedding based methods for supervised WSD, recent supervised algorithms includes encoder-decoder models (Raganato et al., 2017a).
The need for large amounts of annotated text in supervised methods led early on to investigations into the use of bootstrapping methods (Hearst 1991, Yarow- sky 1995). For example the semi-supervised algorithm of Diab and Resnik (2002) is based on aligned parallel corpora in two languages. For example, the fact that the French word catastrophe might be translated as English disaster in one instance and tragedy in another instance can be used to disambiguate the senses of the two English words (i.e., to choose senses of disaster and tragedy that are similar).
The earliest use of clustering in the study of word senses was by Sparck Jones (1986); Pedersen and Bruce (1997), Schu ̈tze (1997b), and Schu ̈tze (1998) applied distributional methods. Clustering word senses into coarse senses has also been used to address the problem of dictionary senses being too fine-grained (Section 18.5.3) (Dolan 1994, Chen and Chang 1998, Mihalcea and Moldovan 2001, Agirre and de Lacalle 2003, Palmer et al. 2004, Navigli 2006, Snow et al. 2007, Pilehvar et al. 2013). Corpora with clustered word senses for training supervised clustering algorithms include Palmer et al. (2006) and OntoNotes (Hovy et al., 2006).
See Pustejovsky (1995), Pustejovsky and Boguraev (1996), Martin (1986), and Copestake and Briscoe (1995), inter alia, for computational approaches to the rep- resentation of polysemy. Pustejovsky’s theory of the generative lexicon, and in particular his theory of the qualia structure of words, is a way of accounting for the dynamic systematic polysemy of words in context.
Historical overviews of WSD include Agirre and Edmonds (2006) and Navigli (2009).
Exercises
18.1 Collect a small corpus of example sentences of varying lengths from any newspaper or magazine. Using WordNet or any standard dictionary, deter- mine how many senses there are for each of the open-class words in each sen- tence. How many distinct combinations of senses are there for each sentence? How does this number seem to vary with sentence length?
18.2 Using WordNet or a standard reference dictionary, tag each open-class word in your corpus with its correct tag. Was choosing the correct sense always a straightforward task? Report on any difficulties you encountered.
18.3 Using your favorite dictionary, simulate the original Lesk word overlap dis- ambiguation algorithm described on page 367 on the phrase Time flies like an arrow. Assume that the words are to be disambiguated one at a time, from left to right, and that the results from earlier decisions are used later in the process.
18.4 Build an implementation of your solution to the previous exercise. Using WordNet, implement the original Lesk word overlap disambiguation algo- rithm described on page 367 on the phrase Time flies like an arrow.

 CHAPTER
19 Semantic Role Labeling
Sometime between the 7th and 4th centuries BCE, the Indian grammarian Pa ̄n.ini1 wrote a famous treatise on Sanskrit grammar, the As.t.a ̄dhya ̄y ̄ı (‘8 books’), a treatise that has been called “one of the greatest monuments of
human intelligence” (Bloomfield, 1933, 11). The work
describes the linguistics of the Sanskrit language in the
form of 3959 sutras, each very efficiently (since it had to
be memorized!) expressing part of a formal rule system
that brilliantly prefigured modern mechanisms of formal
language theory (Penn and Kiparsky, 2012). One set of
rules, relevant to our discussion in this chapter, describes
the ka ̄rakas, semantic relationships between a verb and
noun arguments, roles like agent, instrument, or destina-
tion. Pa ̄n.ini’s work was the earliest we know of that tried
to understand the linguistic realization of events and their participants. This task of understanding how participants relate to events—being able to answer the ques- tion “Who did what to whom” (and perhaps also “when and where”)—is a central question of natural language understanding.
Let’s move forward 2.5 millennia to the present and consider the very mundane goal of understanding text about a purchase of stock by XYZ Corporation. This purchasing event and its participants can be described by a wide variety of surface forms. The event can be described by a verb (sold, bought) or a noun (purchase), and XYZ Corp can be the syntactic subject (of bought), the indirect object (of sold), or in a genitive or noun compound relation (with the noun purchase) despite having notionally the same role in all of them:
• XYZ corporation bought the stock.
• They sold the stock to XYZ corporation.
• The stock was bought by XYZ corporation.
• The purchase of the stock by XYZ corporation... • The stock purchase by XYZ corporation...
In this chapter we introduce a level of representation that captures the common- ality between these sentences: there was a purchase event, the participants were XYZ Corp and some stock, and XYZ Corp was the buyer. These shallow semantic representations , semantic roles, express the role that arguments of a predicate take in the event, codified in databases like PropBank and FrameNet. We’ll introduce semantic role labeling, the task of assigning roles to spans in sentences, and selec- tional restrictions, the preferences that predicates express about their arguments, such as the fact that the theme of eat is generally something edible.
1 Figure shows a birch bark manuscript from Kashmir of the Rupavatra, a grammatical textbook based on the Sanskrit grammar of Panini. Image from the Wellcome Collection.
  
374 CHAPTER 19 • SEMANTIC ROLE LABELING 19.1 Semantic Roles
deep roles
thematic roles agents
theme
Consider how in Chapter 15 we represented the meaning of arguments for sentences like these:
(19.1) Sasha broke the window. (19.2) Pat opened the door.
A neo-Davidsonian event representation of these two sentences would be
∃e, x, y Breaking(e) ∧ Breaker(e, Sasha) ∧BrokenThing(e,y)∧Window(y)
∃e,x,y Opening(e)∧Opener(e,Pat) ∧OpenedThing(e,y)∧Door(y)
In this representation, the roles of the subjects of the verbs break and open are Breaker and Opener respectively. These deep roles are specific to each event; Break- ing events have Breakers, Opening events have Openers, and so on.
If we are going to be able to answer questions, perform inferences, or do any further kinds of natural language understanding of these events, we’ll need to know a little more about the semantics of these arguments. Breakers and Openers have something in common. They are both volitional actors, often animate, and they have direct causal responsibility for their events.
Thematic roles are a way to capture this semantic commonality between Break-
ers and Openers. We say that the subjects of both these verbs are agents. Thus, AGENT is the thematic role that represents an abstract idea such as volitional causa- tion. Similarly, the direct objects of both these verbs, the BrokenThing and OpenedThing, are both prototypically inanimate objects that are affected in some way by the action. The semantic role for these participants is theme.
Thematic Role Definition
  AGENT EXPERIENCER FORCE THEME RESULT CONTENT INSTRUMENT BENEFICIARY SOURCE GOAL
The volitional causer of an event
The experiencer of an event
The non-volitional causer of the event
The participant most directly affected by an event The end product of an event
The proposition or content of a propositional event An instrument used in an event
The beneficiary of an event
The origin of the object of a transfer event
The destination of an object of a transfer event
Figure 19.1
   semantic roles
Some commonly used thematic roles with their definitions.
Although thematic roles are one of the oldest linguistic models, as we saw above, their modern formulation is due to Fillmore (1968) and Gruber (1965). Although there is no universally agreed-upon set of roles, Figs. 19.1 and 19.2 list some the- matic roles that have been used in various computational papers, together with rough definitions and examples. Most thematic role sets have about a dozen roles, but we’ll see sets with smaller numbers of roles with even more abstract meanings, and sets with very large numbers of roles that are specific to situations. We’ll use the general term semantic roles for all sets of roles, whether small or large.

thematic grid case frame
(19.7) The window was broken by John. THEME AGENT
These examples suggest that break has (at least) the possible arguments AGENT, THEME, and INSTRUMENT. The set of thematic role arguments taken by a verb is often called the thematic grid, θ-grid, or case frame. We can see that there are (among others) the following possibilities for the realization of these arguments of break:
AGENT/Subject, THEME/Object
AGENT/Subject, THEME/Object, INSTRUMENT/PPwith INSTRUMENT/Subject, THEME/Object
THEME/Subject
It turns out that many verbs allow their thematic roles to be realized in various syntactic positions. For example, verbs like give can realize the THEME and GOAL arguments in two different ways:
19.2 • DIATHESIS ALTERNATIONS 375
Thematic Role Example
  AGENT EXPERIENCER FORCE THEME RESULT CONTENT INSTRUMENT BENEFICIARY SOURCE GOAL
The waiter spilled the soup.
John has a headache.
The wind blows debris from the mall into our yards.
Only after Benjamin Franklin broke the ice...
The city built a regulation-size baseball diamond...
Mona asked “You met Mary Ann at a supermarket?”
He poached catfish, stunning them with a shocking device... Whenever Ann Callahan makes hotel reservations for her boss... I flew in from Boston.
I drove to Portland.
Figure 19.2
   Some prototypical examples of various thematic roles.
19.2 Diathesis Alternations
The main reason computational systems use semantic roles is to act as a shallow meaning representation that can let us make simple inferences that aren’t possible from the pure surface string of words, or even from the parse tree. To extend the earlier examples, if a document says that Company A acquired Company B, we’d like to know that this answers the query Was Company B acquired? despite the fact that the two sentences have very different surface syntax. Similarly, this shallow semantics might act as a useful intermediate language in machine translation.
Semantic roles thus help generalize over different surface realizations of pred- icate arguments. For example, while the AGENT is often realized as the subject of the sentence, in other cases the THEME can be the subject. Consider these possible realizations of the thematic arguments of the verb break:
(19.3) John AGENT
(19.4) John AGENT
broke the window.
THEME
broke the window with a rock.
(19.5) The rock INSTRUMENT
THEME INSTRUMENT
broke the window.
THEME
(19.6) The window broke. THEME

376
SEMANTIC ROLE LABELING
a. Doris gave the book to Cary. AGENT THEME GOAL
b. Doris gave Cary the book. AGENT GOAL THEME
These multiple argument structure realizations (the fact that break can take AGENT, INSTRUMENT, or THEME as subject, and give can realize its THEME and GOAL in either order) are called verb alternations or diathesis alternations. The alternation we showed above for give, the dative alternation, seems to occur with particular se- mantic classes of verbs, including “verbs of future having” (advance, allocate, offer, owe), “send verbs” (forward, hand, mail), “verbs of throwing” (kick, pass, throw), and so on. Levin (1993) lists for 3100 English verbs the semantic classes to which they belong (47 high-level classes, divided into 193 more specific classes) and the various alternations in which they participate. These lists of verb classes have been incorporated into the online resource VerbNet (Kipper et al., 2000), which links each verb to both WordNet and FrameNet entries.
CHAPTER 19 • (19.8)
verb alternation dative alternation
19.3 Semantic Roles: Problems with Thematic Roles
semantic role
proto-agent proto-patient
Representing meaning at the thematic role level seems like it should be useful in dealing with complications like diathesis alternations. Yet it has proved quite diffi- cult to come up with a standard set of roles, and equally difficult to produce a formal definition of roles like AGENT, THEME, or INSTRUMENT.
For example, researchers attempting to define role sets often find they need to fragment a role like AGENT or THEME into many specific roles. Levin and Rappa- port Hovav (2005) summarize a number of such cases, such as the fact there seem to be at least two kinds of INSTRUMENTS, intermediary instruments that can appear as subjects and enabling instruments that cannot:
(19.9) a. The cook opened the jar with the new gadget. b. The new gadget opened the jar.
(19.10) a. Shelly ate the sliced banana with a fork. b. *The fork ate the sliced banana.
In addition to the fragmentation problem, there are cases in which we’d like to reason about and generalize across semantic roles, but the finite discrete lists of roles don’t let us do this.
Finally, it has proved difficult to formally define the thematic roles. Consider the AGENT role; most cases of AGENTS are animate, volitional, sentient, causal, but any individual noun phrase might not exhibit all of these properties.
These problems have led to alternative semantic role models that use either many fewer or many more roles.
The first of these options is to define generalized semantic roles that abstract over the specific thematic roles. For example, PROTO-AGENT and PROTO-PATIENT are generalized roles that express roughly agent-like and roughly patient-like mean- ings. These roles are defined, not by necessary and sufficient conditions, but rather by a set of heuristic features that accompany more agent-like or more patient-like meanings. Thus, the more an argument displays agent-like properties (being voli- tionally involved in the event, causing an event or a change of state in another par- ticipant, being sentient or intentionally involved, moving) the greater the likelihood

19.4 • THE PROPOSITION BANK 377
that the argument can be labeled a PROTO-AGENT. The more patient-like the proper- ties (undergoing change of state, causally affected by another participant, stationary relative to other participants, etc.), the greater the likelihood that the argument can be labeled a PROTO-PATIENT.
The second direction is instead to define semantic roles that are specific to a particular verb or a particular group of semantically related verbs or nouns.
In the next two sections we describe two commonly used lexical resources that make use of these alternative versions of semantic roles. PropBank uses both proto- roles and verb-specific semantic roles. FrameNet uses semantic roles that are spe- cific to a general semantic idea called a frame.
19.4 The Proposition Bank
PropBank
The Proposition Bank, generally referred to as PropBank, is a resource of sen- tences annotated with semantic roles. The English PropBank labels all the sentences in the Penn TreeBank; the Chinese PropBank labels sentences in the Penn Chinese TreeBank. Because of the difficulty of defining a universal set of thematic roles, the semantic roles in PropBank are defined with respect to an individual verb sense. Each sense of each verb thus has a specific set of roles, which are given only numbers rather than names: Arg0, Arg1, Arg2, and so on. In general, Arg0 represents the PROTO-AGENT, and Arg1, the PROTO-PATIENT. The semantics of the other roles are less consistent, often being defined specifically for each verb. Nonetheless there are some generalization; the Arg2 is often the benefactive, instrument, attribute, or end state, the Arg3 the start point, benefactive, instrument, or attribute, and the Arg4 the end point.
Here are some slightly simplified PropBank entries for one sense each of the verbs agree and fall. Such PropBank entries are called frame files; note that the definitions in the frame file for each role (“Other entity agreeing”, “Extent, amount fallen”) are informal glosses intended to be read by humans, rather than being formal definitions.
(19.11) agree.01 Arg0: Agreer
Arg1: Proposition
Arg2: Otherentityagreeing
Ex1: [Arg0 The group] agreed [Arg1 it wouldn’t make an offer]. Ex2: [ArgM-TMP Usually] [Arg0 John] agrees [Arg2 with Mary]
[Arg1 on everything].
(19.12) fall.01
Arg1: Logicalsubject,patient,thingfalling
Arg2: Arg3: Arg4: Ex1: Ex2:
Extent,amountfallen
startpoint
endpoint,endstateofarg1
[Arg1 Sales] fell [Arg4 to $25 million] [Arg3 from $27 million]. [Arg1 The average junk bond] fell [Arg2 by 4.2%].
Note that there is no Arg0 role for fall, because the normal subject of fall is a PROTO-PATIENT.

378
CHAPTER 19 • SEMANTIC ROLE LABELING
The PropBank semantic roles can be useful in recovering shallow semantic in-
NomBank
While PropBank focuses on verbs, a related project, NomBank (Meyers et al., 2004) adds annotations to noun predicates. For example the noun agreement in Apple’s agreement with IBM would be labeled with Apple as the Arg0 and IBM as the Arg2. This allows semantic role labelers to assign labels to arguments of both verbal and nominal predicates.
formation about verbal arguments. Consider the verb increase:
(19.13) increase.01 “go up incrementally” Arg0: causerofincrease
Arg1: thingincreasing
Arg2: amountincreasedby,EXT,orMNR Arg3: startpoint
Arg4: endpoint
A PropBank semantic role labeling would allow us to infer the commonality in the event structures of the following three examples, that is, that in each case Big Fruit Co. is the AGENT and the price of bananas is the THEME, despite the differing surface forms.
(19.14) [Arg0 Big Fruit Co. ] increased [Arg1 the price of bananas].
(19.15) [Arg1 The price of bananas] was increased again [Arg0 by Big Fruit Co. ]
(19.16) [Arg1 The price of bananas] increased [Arg2 5%].
PropBank also has a number of non-numbered arguments called ArgMs, (ArgM- TMP, ArgM-LOC, etc.) which represent modification or adjunct meanings. These are relatively stable across predicates, so aren’t listed with each frame file. Data labeled with these modifiers can be helpful in training systems to detect temporal, location, or directional modification across predicates. Some of the ArgM’s include:
TMP when?
LOC where?
DIR where to/from?
MNR how?
PRP/CAU why?
REC
ADV miscellaneous
PRD secondary predication
yesterday evening, now
at the museum, in San Francisco down, to Bangkok
clearly, with much enthusiasm because ... , in response to the ruling themselves, each other
...ate the meat raw
19.5 FrameNet
While making inferences about the semantic commonalities across different sen- tences with increase is useful, it would be even more useful if we could make such inferences in many more situations, across different verbs, and also between verbs and nouns. For example, we’d like to extract the similarity among these three sen- tences:
(19.17) [Arg1 The price of bananas] increased [Arg2 5%].
(19.18) [Arg1 The price of bananas] rose [Arg2 5%].
(19.19) There has been a [Arg2 5%] rise [Arg1 in the price of bananas].
Note that the second example uses the different verb rise, and the third example uses the noun rather than the verb rise. We’d like a system to recognize that the

FrameNet
19.5 • FRAMENET 379
price of bananas is what went up, and that 5% is the amount it went up, no matter whether the 5% appears as the object of the verb increased or as a nominal modifier of the noun rise.
The FrameNet project is another semantic-role-labeling project that attempts to address just these kinds of problems (Baker et al. 1998, Fillmore et al. 2003, Fillmore and Baker 2009, Ruppenhofer et al. 2016). Whereas roles in the PropBank project are specific to an individual verb, roles in the FrameNet project are specific to a frame.
What is a frame? Consider the following set of words:
reservation, flight, travel, buy, price, cost, fare, rates, meal, plane
There are many individual lexical relations of hyponymy, synonymy, and so on between many of the words in this list. The resulting set of relations does not, however, add up to a complete account of how these words are related. They are clearly all defined with respect to a coherent chunk of common-sense background information concerning air travel.
We call the holistic background knowledge that unites these words a frame (Fill- more, 1985). The idea that groups of words are defined with respect to some back- ground information is widespread in artificial intelligence and cognitive science, where besides frame we see related works like a model (Johnson-Laird, 1983), or even script (Schank and Abelson, 1977).
A frame in FrameNet is a background knowledge structure that defines a set of frame-specific semantic roles, called frame elements, and includes a set of predi- cates that use these roles. Each word evokes a frame and profiles some aspect of the frame and its elements. The FrameNet dataset includes a set of frames and frame elements, the lexical units associated with each frame, and a set of labeled exam- ple sentences. For example, the change position on a scale frame is defined as follows:
This frame consists of words that indicate the change of an Item’s posi- tion on a scale (the Attribute) from a starting point (Initial value) to an end point (Final value).
Some of the semantic roles (frame elements) in the frame are defined as in Fig. 19.3. Note that these are separated into core roles, which are frame specific, and non-core roles, which are more like the Arg-M arguments in PropBank, expressing more general properties of time, location, and so on.
Here are some example sentences:
(19.20) [ITEM Oil] rose [ATTRIBUTE in price] [DIFFERENCE by 2%].
(19.21) [ITEM It] has increased [FINAL STATE to having them 1 day a month].
(19.22) [ITEM Microsoft shares] fell [FINAL VALUE to 7 5/8].
(19.23) [ITEM Colon cancer incidence] fell [DIFFERENCE by 50%] [GROUP among men].
(19.24) a steady increase [INITIAL VALUE from 9.5] [FINAL VALUE to 14.3] [ITEM in dividends]
(19.25) a [DIFFERENCE 5%] [ITEM dividend] increase...
Note from these example sentences that the frame includes target words like rise, fall, and increase. In fact, the complete frame consists of the following words:
frame
model script
frame elements
core roles non-core roles

380 CHAPTER 19 • SEMANTIC ROLE LABELING
Core Roles
  ATTRIBUTE The ATTRIBUTE is a scalar property that the ITEM possesses.
  DIFFERENCE The distance by which an ITEM changes its position on the scale.
 FINAL STATE A description that presents the ITEM’s state after the change in the ATTRIBUTE’s value as an independent predication.
 FINAL VALUE The position on the scale where the ITEM ends up.
 INITIAL STATE A description that presents the ITEM’s state before the change in the AT- TRIBUTE’s value as an independent predication.
 INITIAL VALUE The initial position on the scale from which the ITEM moves away.
 ITEM The entity that has a position on the scale.
 VALUE RANGE A portion of the scale, typically identified by its end points, along which the values of the ATTRIBUTE fluctuate.
 Some Non-Core Roles
  DURATION The length of time over which the change takes place.
  SPEED The rate of change of the VALUE.
 GROUP The GROUP in which an ITEM changes the value of an
 ATTRIBUTE in a specified way.
  Figure 19.3
 The frame elements in the change position on a scale frame from the FrameNet Labelers Guide (Ruppenhofer et al., 2016).
FrameNet also codes relationships between frames, allowing frames to inherit from each other, or representing relations between frames like causation (and gen- eralizations among frame elements in different frames can be representing by inher- itance as well). Thus, there is a Cause change of position on a scale frame that is linked to the Change of position on a scale frame by the cause relation, but that adds an AGENT role and is used for causative examples such as the following:
(19.26) [AGENT They] raised [ITEM the price of their soda] [DIFFERENCE by 2%].
Together, these two frames would allow an understanding system to extract the common event semantics of all the verbal and nominal causative and non-causative usages.
FrameNets have also been developed for many other languages including Span- ish, German, Japanese, Portuguese, Italian, and Chinese.
19.6 Semantic Role Labeling
VERBS: dwindle
 move soar escalation
 shift tumble
ADVERBS:
increasingly
 advance edge
 mushroom swell explosion
 climb explode
 plummet swing fall
 decline fall
 reach triple fluctuation
 decrease fluctuate
 rise tumble gain
 diminish gain
 rocket growth
 dip grow
 shift NOUNS: hike
 double increase
 skyrocket decline increase
 drop jump
 slide decrease rise
 semantic role labeling
Semantic role labeling (sometimes shortened as SRL) is the task of automatically finding the semantic roles of each argument of each predicate in a sentence. Cur- rent approaches to semantic role labeling are based on supervised machine learning, often using the FrameNet and PropBank resources to specify what counts as a pred- icate, define the set of roles used in the task, and provide training and test sets.

19.6 • SEMANTIC ROLE LABELING 381
Recall that the difference between these two models of semantic roles is that FrameNet (19.27) employs many frame-specific frame elements as roles, while Prop- Bank (19.28) uses a smaller number of numbered argument labels that can be inter- preted as verb-specific labels, along with the more general ARGM labels. Some examples:
(19.27) (19.28)
19.6.1
[You] can’t [blame] [the program] [for being unable to identify it] COGNIZER TARGET EVALUEE REASON
[The San Francisco Examiner] issued [a special edition] [yesterday] ARG0 TARGET ARG1 ARGM-TMP
A Feature-based Algorithm for Semantic Role Labeling
A simplified feature-based semantic role labeling algorithm is sketched in Fig. 19.4. Feature-based algorithms—from the very earliest systems like (Simmons, 1973)— begin by parsing, using broad-coverage parsers to assign a parse to the input string. Figure 19.5 shows a parse of (19.28) above. The parse is then traversed to find all words that are predicates.
For each of these predicates, the algorithm examines each node in the parse tree and uses supervised classification to decide the semantic role (if any) it plays for this predicate. Given a labeled training set such as PropBank or FrameNet, a feature vector is extracted for each node, using feature templates described in the next subsection. A 1-of-N classifier is then trained to predict a semantic role for each constituent given these features, where N is the number of potential semantic roles plus an extra NONE role for non-role constituents. Any standard classification algorithms can be used. Finally, for each test sentence to be labeled, the classifier is run on each relevant constituent.
A generic semantic-role-labeling algorithm. CLASSIFYNODE is a 1-of-N clas- sifier that assigns a semantic role (or NONE for non-role constituents), trained on labeled data such as FrameNet or PropBank.
Instead of training a single-stage classifier as in Fig. 19.5, the node-level classi- fication task can be broken down into multiple steps:
1. Pruning: Since only a small number of the constituents in a sentence are arguments of any given predicate, many systems use simple heuristics to prune unlikely constituents.
2. Identification: a binary classification of each node as an argument to be la- beled or a NONE.
3. Classification: a 1-of-N classification of all the constituents that were labeled as arguments by the previous stage
The separation of identification and classification may lead to better use of fea- tures (different features may be useful for the two tasks) or to computational effi- ciency.
   function SEMANTICROLELABEL(words) returns labeled tree
parse←PARSE(words)
for each predicate in parse do
for each node in parse do featurevector←EXTRACTFEATURES(node, predicate, parse) CLASSIFYNODE(node, featurevector, parse)
 Figure 19.4
 
382 CHAPTER 19 • SEMANTIC ROLE LABELING
      DT NNP The San
NNP Francisco
NP-SBJ = ARGà
S
NNP Examiner
VBD = TARGET issued DT
a
VP
NP = ARG JJ NN
special edition
  PP-TMP = ARGM-TMP IN NP
around NN NP-TMP noon yesterday
           Figure 19.5
 Parse tree for a PropBank sentence, showing the PropBank argument labels. The dotted line shows the path feature NP↑S↓VP↓VBD for ARG0, the NP-SBJ constituent The San Francisco Examiner.
Global Optimization
The classification algorithm of Fig. 19.5 classifies each argument separately (‘lo- cally’), making the simplifying assumption that each argument of a predicate can be labeled independently. This assumption is false; there are interactions between argu- ments that require a more ‘global’ assignment of labels to constituents. For example, constituents in FrameNet and PropBank are required to be non-overlapping. More significantly, the semantic roles of constituents are not independent. For example PropBank does not allow multiple identical arguments; two constituents of the same verb cannot both be labeled ARG0 .
Role labeling systems thus often add a fourth step to deal with global consistency across the labels in a sentence. For example, the local classifiers can return a list of possible labels associated with probabilities for each constituent, and a second-pass Viterbi decoding or re-ranking approach can be used to choose the best consensus label. Integer linear programming (ILP) is another common way to choose a solution that conforms best to multiple constraints.
Features for Semantic Role Labeling
Most systems use some generalization of the core set of features introduced by Gildea and Jurafsky (2000). Common basic features templates (demonstrated on the NP-SBJ constituent The San Francisco Examiner in Fig. 19.5) include:
• The governing predicate, in this case the verb issued. The predicate is a cru- cial feature since labels are defined only with respect to a particular predicate.
• The phrase type of the constituent, in this case, NP (or NP-SBJ). Some se-
mantic roles tend to appear as NPs, others as S or PP, and so on.
• The headword of the constituent, Examiner. The headword of a constituent can be computed with standard head rules, such as those given in Chapter 12 in Fig. 12.12. Certain headwords (e.g., pronouns) place strong constraints on
the possible semantic roles they are likely to fill.
• The headword part of speech of the constituent, NNP.
• The path in the parse tree from the constituent to the predicate. This path is
marked by the dotted line in Fig. 19.5. Following Gildea and Jurafsky (2000), we can use a simple linear representation of the path, NP↑S↓VP↓VBD. ↑ and ↓ represent upward and downward movement in the tree, respectively. The

19.6 • SEMANTIC ROLE LABELING 383
path is very useful as a compact representation of many kinds of grammatical
function relationships between the constituent and the predicate.
• The voice of the clause in which the constituent appears, in this case, active (as contrasted with passive). Passive sentences tend to have strongly different
linkings of semantic roles to surface form than do active ones.
• The binary linear position of the constituent with respect to the predicate,
either before or after.
• The subcategorization of the predicate, the set of expected arguments that
appear in the verb phrase. We can extract this information by using the phrase- structure rule that expands the immediate parent of the predicate; VP → VBD NP PP for the predicate in Fig. 19.5.
• The named entity type of the constituent.
• The first words and the last word of the constituent.
The following feature vector thus represents the first NP in our example (recall that most observations will have the value NONE rather than, for example, ARG0, since most constituents in the parse tree will not bear a semantic role):
ARG0: [issued, NP, Examiner, NNP, NP↑S↓VP↓VBD, active, before, VP → NP PP, ORG, The, Examiner]
Other features are often used in addition, such as sets of n-grams inside the constituent, or more complex versions of the path features (the upward or downward halves, or whether particular nodes occur in the path).
It’s also possible to use dependency parses instead of constituency parses as the basis of features, for example using dependency parse paths instead of constituency paths.
19.6.2 A Neural Algorithm for Semantic Role Labeling
A simple neural approach to SRL is to treat it as a sequence labeling task like named- entity recognition, using the BIO approach. Let’s assume that we are given the predicate and the task is just detecting and labeling spans. Recall that with BIO tagging, we have a begin and end tag for each possible role (B-ARG0, I-ARG0; B- ARG1, I-ARG1, and so on), plus an outside tag O.
As with all the taggers, the goal is to compute the highest probability tag se- quence yˆ, given the input sequence of words w:
yˆ = argmaxP(y|w) y∈T
Fig. 19.6 shows a sketch of a standard algorithm from Shi and Lin (2019) and He et al. (2017). Here each input word is mapped to pretrained embeddings, and also associated with an embedding for a flag (0/1) variable indicating whether that input word is the predicate. These concatenated embeddings are passed through a biL- STM. The output embedding for each token are concatenated with the output em- bedding for the predicate, and then passed to an MLP with a softmax which outputs a distribution over each SRL label.
For decoding, a CRF layer can be used instead of the MLP layer on top of the biLSTM output (or we can even leave off the biLSTM and pass the concatenated BERT output directly to the CRF). The Viterbi decoding algorithm (Chapter 8) can be used to decode from the CRF, which may help exploit global constraints between tags, such as the fact that a tag I-ARG0 must follow another I-ARG0 or B-ARG0.

384 CHAPTER 19 • SEMANTIC ROLE LABELING
    MLP/Softmax
concatenate with predicate
biLSTM
B-ARG0 I-ARG0 B-PRED B-ARG1
LSTM2 LSTM1
LSTM2 LSTM1 LSTM1
MLP
LSTM2 LSTM1
MLP
LSTM2 LSTM1
MLP
LSTM2 LSTM1
MLP
  concatenate
is-predicate 0 0 0 1 0 0
BERT
LSTM2
0
 [CLS] the cats love hats [SEP] love [SEP]
 Figure 19.6
 A BERT + biLSTM approach to semantic role labeling. The input sentence is followed by [SEP] and an extra input for the predicate, in this case love. The BERT outputs are concatenated to an indicator variable which is 1 for the predicate and 0 for all other words , passed through a biLSTM, and then the output embedding at each token position is concatenated with the embedding for the predicate, and passed through a single-layer MLP. After Shi and Lin (2019) and He et al. (2017).
19.6.3 Evaluation of Semantic Role Labeling
The standard evaluation for semantic role labeling is to require that each argument label must be assigned to the exactly correct word sequence or parse constituent, and then compute precision, recall, and F-measure. Identification and classification can also be evaluated separately. Two common datasets used for evaluation are CoNLL- 2005 (Carreras and Ma`rquez, 2005) and CoNLL-2012 (Pradhan et al., 2013).
19.7 Selectional Restrictions
selectional restriction
We turn in this section to another way to represent facts about the relationship be- tween predicates and arguments. A selectional restriction is a semantic type con- straint that a verb imposes on the kind of concepts that are allowed to fill its argument roles. Consider the two meanings associated with the following example:
(19.29) I want to eat someplace nearby.
There are two possible parses and semantic interpretations for this sentence. In the sensible interpretation, eat is intransitive and the phrase someplace nearby is an adjunct that gives the location of the eating event. In the nonsensical speaker-as- Godzilla interpretation, eat is transitive and the phrase someplace nearby is the direct object and the THEME of the eating, like the NP Malaysian food in the following sentences:
(19.30) I want to eat Malaysian food.
How do we know that someplace nearby isn’t the direct object in this sentence? One useful cue is the semantic fact that the THEME of EATING events tends to be something that is edible. This restriction placed by the verb eat on the filler of its THEME argument is a selectional restriction.
Selectional restrictions are associated with senses, not entire lexemes. We can see this in the following examples of the lexeme serve:

19.7 • SELECTIONAL RESTRICTIONS 385
(19.31) The restaurant serves green-lipped mussels.
(19.32) Which airlines serve Denver?
Example (19.31) illustrates the offering-food sense of serve, which ordinarily re- stricts its THEME to be some kind of food Example (19.32) illustrates the provides a commercial service to sense of serve, which constrains its THEME to be some type of appropriate location.
Selectional restrictions vary widely in their specificity. The verb imagine, for example, imposes strict requirements on its AGENT role (restricting it to humans and other animate entities) but places very few semantic requirements on its THEME role. A verb like diagonalize, on the other hand, places a very specific constraint on the filler of its THEME role: it has to be a matrix, while the arguments of the adjectives odorless are restricted to concepts that could possess an odor:
(19.33) In rehearsal, I often ask the musicians to imagine a tennis game. (19.34) Radon is an odorless gas that can’t be detected by human senses.
(19.35) To diagonalize a matrix is to find its eigenvalues.
These examples illustrate that the set of concepts we need to represent selectional restrictions (being a matrix, being able to possess an odor, etc) is quite open ended. This distinguishes selectional restrictions from other features for representing lexical knowledge, like parts-of-speech, which are quite limited in number.
19.7.1 Representing Selectional Restrictions
One way to capture the semantics of selectional restrictions is to use and extend the event representation of Chapter 15. Recall that the neo-Davidsonian representation of an event consists of a single variable that stands for the event, a predicate denoting the kind of event, and variables and relations for the event roles. Ignoring the issue of the λ -structures and using thematic roles rather than deep event roles, the semantic contribution of a verb like eat might look like the following:
∃e,x,y Eating(e)∧Agent(e,x)∧Theme(e,y)
With this representation, all we know about y, the filler of the THEME role, is that it is associated with an Eating event through the Theme relation. To stipulate the selectional restriction that y must be something edible, we simply add a new term to that effect:
∃e,x,y Eating(e)∧Agent(e,x)∧Theme(e,y)∧EdibleThing(y)
When a phrase like ate a hamburger is encountered, a semantic analyzer can form
the following kind of representation:
∃e,x,y Eating(e)∧Eater(e,x)∧Theme(e,y)∧EdibleThing(y)∧Hamburger(y)
This representation is perfectly reasonable since the membership of y in the category Hamburger is consistent with its membership in the category EdibleThing, assuming a reasonable set of facts in the knowledge base. Correspondingly, the representation for a phrase such as ate a takeoff would be ill-formed because membership in an event-like category such as Takeoff would be inconsistent with membership in the category EdibleThing.
While this approach adequately captures the semantics of selectional restrictions, there are two problems with its direct use. First, using FOL to perform the simple

386 CHAPTER 19 • SEMANTIC ROLE LABELING
   Sense 1
hamburger, beefburger --
(a fried cake of minced beef served on a bun)
=> sandwich
   => snack food
      => dish
         => nutriment, nourishment, nutrition...
            => food, nutrient
               => substance
                  => matter
                     => physical entity
                        => entity
 Figure 19.7
 Evidence from WordNet that hamburgers are edible.
task of enforcing selectional restrictions is overkill. Other, far simpler, formalisms can do the job with far less computational cost. The second problem is that this approach presupposes a large, logical knowledge base of facts about the concepts that make up selectional restrictions. Unfortunately, although such common-sense knowledge bases are being developed, none currently have the kind of coverage necessary to the task.
A more practical approach is to state selectional restrictions in terms of WordNet synsets rather than as logical concepts. Each predicate simply specifies a WordNet synset as the selectional restriction on each of its arguments. A meaning representa- tion is well-formed if the role filler word is a hyponym (subordinate) of this synset.
For our ate a hamburger example, for instance, we could set the selectional restriction on the THEME role of the verb eat to the synset {food, nutrient}, glossed as any substance that can be metabolized by an animal to give energy and build tissue. Luckily, the chain of hypernyms for hamburger shown in Fig. 19.7 reveals that hamburgers are indeed food. Again, the filler of a role need not match the restriction synset exactly; it just needs to have the synset as one of its superordinates.
We can apply this approach to the THEME roles of the verbs imagine, lift, and di- agonalize, discussed earlier. Let us restrict imagine’s THEME to the synset {entity}, lift’s THEME to {physical entity}, and diagonalize to {matrix}. This arrangement correctly permits imagine a hamburger and lift a hamburger, while also correctly ruling out diagonalize a hamburger.
19.7.2 Selectional Preferences
In the earliest implementations, selectional restrictions were considered strict con- straints on the kind of arguments a predicate could take (Katz and Fodor 1963, Hirst 1987). For example, the verb eat might require that its THEME argument be [+FOOD]. Early word sense disambiguation systems used this idea to rule out senses that violated the selectional restrictions of their governing predicates.
Very quickly, however, it became clear that these selectional restrictions were better represented as preferences rather than strict constraints (Wilks 1975c, Wilks 1975b). For example, selectional restriction violations (like inedible arguments of eat) often occur in well-formed sentences, for example because they are negated (19.36), or because selectional restrictions are overstated (19.37):
(19.36) But it fell apart in 1931, perhaps because people realized you can’t eat gold for lunch if you’re hungry.

selectional preference strength
relative entropy KL divergence
19.7 • SELECTIONAL RESTRICTIONS 387 (19.37) In his two championship trials, Mr. Kulkarni ate glass on an empty
stomach, accompanied only by water and tea.
Modern systems for selectional preferences therefore specify the relation be- tween a predicate and its possible arguments with soft constraints of some kind.
Selectional Association
One of the most influential has been the selectional association model of Resnik (1993). Resnik defines the idea of selectional preference strength as the general amount of information that a predicate tells us about the semantic class of its argu- ments. For example, the verb eat tells us a lot about the semantic class of its direct objects, since they tend to be edible. The verb be, by contrast, tells us less about its direct objects. The selectional preference strength can be defined by the differ- ence in information between two distributions: the distribution of expected semantic classes P(c) (how likely is it that a direct object will fall into class c) and the dis- tribution of expected semantic classes for the particular verb P(c|v) (how likely is it that the direct object of the specific verb v will fall into semantic class c). The greater the difference between these distributions, the more information the verb is giving us about possible objects. The difference between these two distributions can be quantified by relative entropy, or the Kullback-Leibler divergence (Kullback and Leibler, 1951). The Kullback-Leibler or KL divergence D(P||Q) expresses the difference between two probability distributions P and Q
D(P||Q) = 􏰑P(x)log P(x) (19.38) x Q(x)
The selectional preference SR(v) uses the KL divergence to express how much in- formation, in bits, the verb v expresses about the possible semantic class of its argu- ment.
 selectional association
c P(c)
Resnik then defines the selectional association of a particular class and verb as the
SR(v) = D􏰑(P(c|v)||P(c))
= P(c|v) log P(c|v) (19.39)
 relative contribution of that class to the general selectional preference of the verb: AR(v,c) = 1 P(c|v)log P(c|v) (19.40)
  SR (v) P(c)
The selectional association is thus a probabilistic measure of the strength of asso- ciation between a predicate and a class dominating the argument to the predicate. Resnik estimates the probabilities for these associations by parsing a corpus, count- ing all the times each predicate occurs with each argument word, and assuming that each word is a partial observation of all the WordNet concepts containing the word. The following table from Resnik (1996) shows some sample high and low selectional associations for verbs and some WordNet semantic classes of their direct objects.
Assoc
-.20 0 -0.01
  Verb
Direct Object Direct Object
 SemanticClass Assoc SemanticClass
 read write see
 WRITING 6.80 ACTIVITY
WRITING 7.26 COMMERCE
ENTITY 5.79 METHOD
     
388 CHAPTER 19 • SEMANTIC ROLE LABELING
Selectional Preference via Conditional Probability
An alternative to using selectional association between a verb and the WordNet class of its arguments is to use the conditional probability of an argument word given a predicate verb, directly modeling the strength of association of one verb (predicate) with one noun (argument).
The conditional probability model can be computed by parsing a very large cor- pus (billions of words), and computing co-occurrence counts: how often a given verb occurs with a given noun in a given relation. The conditional probability of an argument noun given a verb for a particular relation P(n|v,r) can then be used as a selectional preference metric for that pair of words (Brockmann and Lapata 2003, Keller and Lapata 2003):
P(n|v,r)=􏰏 C(n,v,r) ifC(n,v,r)>0 C(v,r)
0 otherwise
The inverse probability P(v|n, r) was found to have better performance in some cases
 (Brockmann and Lapata, 2003):
P(v|n,r)=􏰏 C(n,v,r) ifC(n,v,r)>0
An even simpler approach is to use the simple log co-occurrence frequency of the predicate with the argument logcount(v,n,r) instead of conditional probability; this seems to do better for extracting preferences for syntactic subjects rather than objects (Brockmann and Lapata, 2003).
Evaluating Selectional Preferences
One way to evaluate models of selectional preferences is to use pseudowords (Gale et al. 1992c, Schu ̈tze 1992a). A pseudoword is an artificial word created by concate- nating a test word in some context (say banana) with a confounder word (say door) to create banana-door). The task of the system is to identify which of the two words is the original word. To evaluate a selectional preference model (for example on the relationship between a verb and a direct object) we take a test corpus and select all verb tokens. For each verb token (say drive) we select the direct object (e.g., car), concatenated with a confounder word that is its nearest neighbor, the noun with the frequency closest to the original (say house), to make car/house). We then use the selectional preference model to choose which of car and house are more preferred objects of drive, and compute how often the model chooses the correct original ob- ject (e.g., car) (Chambers and Jurafsky, 2010).
Another evaluation metric is to get human preferences for a test set of verb- argument pairs, and have them rate their degree of plausibility. This is usually done by using magnitude estimation, a technique from psychophysics, in which subjects rate the plausibility of an argument proportional to a modulus item. A selectional preference model can then be evaluated by its correlation with the human prefer- ences (Keller and Lapata, 2003).
C(n,r)
0 otherwise
 pseudowords

19.8 • PRIMITIVE DECOMPOSITION OF PREDICATES 389 19.8 Primitive Decomposition of Predicates
componential analysis
One way of thinking about the semantic roles we have discussed through the chapter is that they help us define the roles that arguments play in a decompositional way, based on finite lists of thematic roles (agent, patient, instrument, proto-agent, proto- patient, etc.). This idea of decomposing meaning into sets of primitive semantics elements or features, called primitive decomposition or componential analysis, has been taken even further, and focused particularly on predicates.
Consider these examples of the verb kill:
(19.41) Jim killed his philodendron.
(19.42) Jim did something to cause his philodendron to become not alive.
There is a truth-conditional (‘propositional semantics’) perspective from which these two sentences have the same meaning. Assuming this equivalence, we could repre- sent the meaning of kill as:
(19.43) KILL(x,y) ⇔ CAUSE(x, BECOME(NOT(ALIVE(y))))
thus using semantic primitives like do, cause, become not, and alive.
Indeed, one such set of potential semantic primitives has been used to account for some of the verbal alternations discussed in Section 19.2 (Lakoff 1965, Dowty 1979).
Consider the following examples.
(19.44) John opened the door. ⇒ CAUSE(John, BECOME(OPEN(door))) (19.45) The door opened. ⇒ BECOME(OPEN(door))
(19.46) The door is open. ⇒ OPEN(door)
The decompositional approach asserts that a single state-like predicate associ- ated with open underlies all of these examples. The differences among the meanings of these examples arises from the combination of this single predicate with the prim- itives CAUSE and BECOME.
While this approach to primitive decomposition can explain the similarity be- tween states and actions or causative and non-causative predicates, it still relies on having a large number of predicates like open. More radical approaches choose to break down these predicates as well. One such approach to verbal predicate de- composition that played a role in early natural language understanding systems is conceptual dependency (CD), a set of ten primitive predicates, shown in Fig. 19.8.
Below is an example sentence along with its CD representation. The verb brought is translated into the two primitives ATRANS and PTRANS to indicate that the waiter both physically conveyed the check to Mary and passed control of it to her. Note that CD also associates a fixed set of thematic roles with each primitive to represent the various participants in the action.
(19.47) The waiter brought Mary the check.
∃x,y Atrans(x)∧Actor(x,Waiter)∧Object(x,Check)∧To(x,Mary) ∧Ptrans(y)∧Actor(y,Waiter)∧Object(y,Check)∧To(y,Mary)
conceptual dependency

390 CHAPTER 19 • SEMANTIC ROLE LABELING
Primitive Definition
 ATRANS
PTRANS MTRANS
MBUILD PROPEL MOVE INGEST EXPEL SPEAK ATTEND
The abstract transfer of possession or control from one entity to another
The physical transfer of an object from one location to another The transfer of mental concepts between entities or within an entity
The creation of new information within an entity The application of physical force to move an object The integral movement of a body part by an animal The taking in of a substance by an animal
The expulsion of something from an animal
The action of producing a sound
The action of focusing a sense organ
 Figure 19.8
   A set of conceptual dependency primitives.
19.9 Summary
• Semantic roles are abstract models of the role an argument plays in the event described by the predicate.
• Thematic roles are a model of semantic roles based on a single finite list of roles. Other semantic role models include per-verb semantic role lists and proto-agent/proto-patient, both of which are implemented in PropBank, and per-frame role lists, implemented in FrameNet.
• Semantic role labeling is the task of assigning semantic role labels to the constituents of a sentence. The task is generally treated as a supervised ma- chine learning task, with models trained on PropBank or FrameNet. Algo- rithms generally start by parsing a sentence and then automatically tag each parse tree node with a semantic role. Neural models map straight from words end-to-end.
• Semanticselectionalrestrictionsallowwords(particularlypredicates)topost constraints on the semantic properties of their argument words. Selectional preference models (like selectional association or simple conditional proba- bility) allow a weight or probability to be assigned to the association between a predicate and an argument word or class.
Bibliographical and Historical Notes
Although the idea of semantic roles dates back to Pa ̄n.ini, they were re-introduced into modern linguistics by Gruber (1965), Fillmore (1966) and Fillmore (1968). Fill- more had become interested in argument structure by studying Lucien Tesnie`re’s groundbreaking E ́le ́ments de Syntaxe Structurale (Tesnie`re, 1959) in which the term ‘dependency’ was introduced and the foundations were laid for dependency gram- mar. Following Tesnie`re’s terminology, Fillmore first referred to argument roles as actants (Fillmore, 1966) but quickly switched to the term case, (see Fillmore (2003)) and proposed a universal list of semantic roles or cases (Agent, Patient, Instrument, etc.), that could be taken on by the arguments of predicates. Verbs would be listed in the lexicon with their case frame, the list of obligatory (or optional) case arguments.

BIBLIOGRAPHICAL AND HISTORICAL NOTES 391
The idea that semantic roles could provide an intermediate level of semantic representation that could help map from syntactic parse structures to deeper, more fully-specified representations of meaning was quickly adopted in natural language processing, and systems for extracting case frames were created for machine trans- lation (Wilks, 1973), question-answering (Hendrix et al., 1973), spoken-language understanding (Nash-Webber, 1975), and dialogue systems (Bobrow et al., 1977). General-purpose semantic role labelers were developed. The earliest ones (Sim- mons, 1973) first parsed a sentence by means of an ATN (Augmented Transition Network) parser. Each verb then had a set of rules specifying how the parse should be mapped to semantic roles. These rules mainly made reference to grammatical functions (subject, object, complement of specific prepositions) but also checked constituent internal features such as the animacy of head nouns. Later systems as- signed roles from pre-built parse trees, again by using dictionaries with verb-specific case frames (Levin 1977, Marcus 1980).
By 1977 case representation was widely used and taught in AI and NLP courses, and was described as a standard of natural language understanding in the first edition of Winston’s (1977) textbook Artificial Intelligence.
In the 1980s Fillmore proposed his model of frame semantics, later describing the intuition as follows:
“The idea behind frame semantics is that speakers are aware of possi- bly quite complex situation types, packages of connected expectations, that go by various names—frames, schemas, scenarios, scripts, cultural narratives, memes—and the words in our language are understood with such frames as their presupposed background.” (Fillmore, 2012, p. 712)
The word frame seemed to be in the air for a suite of related notions proposed at about the same time by Minsky (1974), Hymes (1974), and Goffman (1974), as well as related notions with other names like scripts (Schank and Abelson, 1975) and schemata (Bobrow and Norman, 1975) (see Tannen (1979) for a comparison). Fillmore was also influenced by the semantic field theorists and by a visit to the Yale AI lab where he took notice of the lists of slots and fillers used by early information extraction systems like DeJong (1982) and Schank and Abelson (1977). In the 1990s Fillmore drew on these insights to begin the FrameNet corpus annotation project.
At the same time, Beth Levin drew on her early case frame dictionaries (Levin, 1977) to develop her book which summarized sets of verb classes defined by shared argument realizations (Levin, 1993). The VerbNet project built on this work (Kipper et al., 2000), leading soon afterwards to the PropBank semantic-role-labeled corpus created by Martha Palmer and colleagues (Palmer et al., 2005).
The combination of rich linguistic annotation and corpus-based approach in- stantiated in FrameNet and PropBank led to a revival of automatic approaches to semantic role labeling, first on FrameNet (Gildea and Jurafsky, 2000) and then on PropBank data (Gildea and Palmer, 2002, inter alia). The problem first addressed in the 1970s by handwritten rules was thus now generally recast as one of supervised machine learning enabled by large and consistent databases. Many popular features used for role labeling are defined in Gildea and Jurafsky (2002), Surdeanu et al. (2003), Xue and Palmer (2004), Pradhan et al. (2005), Che et al. (2009), and Zhao et al. (2009). The use of dependency rather than constituency parses was introduced in the CoNLL-2008 shared task (Surdeanu et al., 2008). For surveys see Palmer et al. (2010) and Ma`rquez et al. (2008).
The use of neural approaches to semantic role labeling was pioneered by Col- lobert et al. (2011), who applied a CRF on top of a convolutional net. Early work

392
CHAPTER 19 • SEMANTIC ROLE LABELING
implicit argument
like Foland, Jr. and Martin (2015) focused on using dependency features. Later work eschewed syntactic features altogether; Zhou and Xu (2015b) introduced the use of a stacked (6-8 layer) biLSTM architecture, and (He et al., 2017) showed how to augment the biLSTM architecture with highway networks and also replace the CRF with A* decoding that make it possible to apply a wide variety of global constraints in SRL decoding.
Most semantic role labeling schemes only work within a single sentence, fo- cusing on the object of the verbal (or nominal, in the case of NomBank) predicate. However, in many cases, a verbal or nominal predicate may have an implicit argu- ment: one that appears only in a contextual sentence, or perhaps not at all and must be inferred. In the two sentences This house has a new owner. The sale was finalized 10 days ago. the sale in the second sentence has no ARG1, but a reasonable reader would infer that the Arg1 should be the house mentioned in the prior sentence. Find-
Exercises
iSRL ing these arguments, implicit argument detection (sometimes shortened as iSRL) was introduced by Gerber and Chai (2010) and Ruppenhofer et al. (2010). See Do et al. (2017) for more recent neural models.
To avoid the need for huge labeled training sets, unsupervised approaches for semantic role labeling attempt to induce the set of semantic roles by clustering over arguments. The task was pioneered by Riloff and Schmelzenbach (1998) and Swier and Stevenson (2004); see Grenager and Manning (2006), Titov and Klementiev (2012), Lang and Lapata (2014), Woodsend and Lapata (2015), and Titov and Khod- dam (2014).
Recent innovations in frame labeling include connotation frames, which mark richer information about the argument of predicates. Connotation frames mark the sentiment of the writer or reader toward the arguments (for example using the verb survive in he survived a bombing expresses the writer’s sympathy toward the subject he and negative sentiment toward the bombing. See Chapter 20 for more details.
Selectional preference has been widely studied beyond the selectional associa- tion models of Resnik (1993) and Resnik (1996). Methods have included cluster- ing (Rooth et al., 1999), discriminative learning (Bergsma et al., 2008a), and topic models (Se ́aghdha 2010, Ritter et al. 2010), and constraints can be expressed at the level of words or classes (Agirre and Martinez, 2001). Selectional preferences have also been successfully integrated into semantic role labeling (Erk 2007, Zapirain et al. 2013, Do et al. 2017).

 CHAPTER
20 Lexicons for Sentiment, Affect, and Connotation
affective subjectivity
Some day we’ll be able to measure the power of words
Maya Angelou
In this chapter we turn to tools for interpreting affective meaning, extending our study of sentiment analysis in Chapter 4. We use the word ‘affective’, following the tradition in affective computing (Picard, 1995) to mean emotion, sentiment, per- sonality, mood, and attitudes. Affective meaning is closely related to subjectivity, the study of a speaker or writer’s evaluations, opinions, emotions, and speculations (Wiebe et al., 1999).
How should affective meaning be defined? One influential typology of affec- tive states comes from Scherer (2000), who defines each class of affective states by factors like its cognitive realization and time course (Fig. 20.1).
   Emotion: Relatively brief episode of response to the evaluation of an external or internal event as being of major significance.
(angry, sad, joyful, fearful, ashamed, proud, elated, desperate)
Mood: Diffuseaffectstate,mostpronouncedaschangeinsubjectivefeeling,of low intensity but relatively long duration, often without apparent cause. (cheerful, gloomy, irritable, listless, depressed, buoyant)
Interpersonal stance: Affective stance taken toward another person in a spe- cific interaction, coloring the interpersonal exchange in that situation. (distant, cold, warm, supportive, contemptuous, friendly)
Attitude: Relativelyenduring,affectivelycoloredbeliefs,preferences,andpre- dispositions towards objects or persons.
(liking, loving, hating, valuing, desiring)
Personality traits: Emotionally laden, stable personality dispositions and be- havior tendencies, typical for a person.
(nervous, anxious, reckless, morose, hostile, jealous)
 Figure 20.1
 The Scherer typology of affective states (Scherer, 2000).
We can design extractors for each of these kinds of affective states. Chapter 4 already introduced sentiment analysis, the task of extracting the positive or negative orientation that a writer expresses in a text. This corresponds in Scherer’s typology to the extraction of attitudes: figuring out what people like or dislike, from affect- rich texts like consumer reviews of books or movies, newspaper editorials, or public sentiment in blogs or tweets.
Detecting emotion and moods is useful for detecting whether a student is con- fused, engaged, or certain when interacting with a tutorial system, whether a caller to a help line is frustrated, whether someone’s blog posts or tweets indicated depres- sion. Detecting emotions like fear in novels, for example, could help us trace what groups or situations are feared and how that changes over time.

394 CHAPTER 20 • LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION
connotations
Detecting different interpersonal stances can be useful when extracting infor- mation from human-human conversations. The goal here is to detect stances like friendliness or awkwardness in interviews or friendly conversations, for example for summarizing meetings or finding parts of a conversation where people are especially excited or engaged, conversational hot spots that can help in meeting summariza- tion. Detecting the personality of a user—such as whether the user is an extrovert or the extent to which they are open to experience— can help improve conversa- tional agents, which seem to work better if they match users’ personality expecta- tions (Mairesse and Walker, 2008). And affect is important for generation as well as recognition; synthesizing affect is important for conversational agents in various domains, including literacy tutors such as children’s storybooks, or computer games.
In Chapter 4 we introduced the use of naive Bayes classification to classify a document’s sentiment. Various classifiers have been successfully applied to many of these tasks, using all the words in the training set as input to a classifier which then determines the affect status of the text.
In this chapter we focus on an alternative model, in which instead of using every word as a feature, we focus only on certain words, ones that carry particularly strong cues to affect or sentiment. We call these lists of words affective lexicons or senti- ment lexicons. These lexicons presuppose a fact about semantics: that words have affective meanings or connotations. The word connotation has different meanings in different fields, but here we use it to mean the aspects of a word’s meaning that are related to a writer or reader’s emotions, sentiment, opinions, or evaluations. In addition to their ability to help determine the affective status of a text, connotation lexicons can be useful features for other kinds of affective tasks, and for computa- tional social science analysis.
In the next sections we introduce basic theories of emotion, show how sentiment lexicons are a special case of emotion lexicons, and mention some useful lexicons. We then survey three ways for building lexicons: human labeling, semi-supervised, and supervised. Finally, we turn to other kinds of affective meaning like personality, stance, and entity-centric affect, and introduce connotation frames.
20.1 Defining Emotion
emotion
One of the most important affective classes is emotion, which Scherer (2000) defines as a “relatively brief episode of response to the evaluation of an external or internal event as being of major significance”.
Detecting emotion has the potential to improve a number of language processing tasks. Automatically detecting emotions in reviews or customer responses (anger, dissatisfaction, trust) could help businesses recognize specific problem areas or ones that are going well. Emotion recognition could help dialog systems like tutoring systems detect that a student was unhappy, bored, hesitant, confident, and so on. Emotion can play a role in medical informatics tasks like detecting depression or suicidal intent. Detecting emotions expressed toward characters in novels might play a role in understanding how different social groups were viewed by society at different times.
There are two widely-held families of theories of emotion; we’ll introduce lexi- cons for both kinds of theories. In one family, emotions are viewed as fixed atomic units, limited in number, and from which others are generated, often called basic emotions (Tomkins 1962, Plutchik 1962). Perhaps most well-known of this family
basic emotions

20.2 • AVAILABLE SENTIMENT AND AFFECT LEXICONS 395
of theories are the 6 emotions proposed by Ekman (see for example Ekman 1999) as a set of emotions that is likely to be universally present in all cultures: surprise, happiness, anger, fear, disgust, sadness. Another atomic theory is the Plutchik (1980) wheel of emotion, consisting of 8 basic emotions in four opposing pairs: joy–sadness, anger–fear, trust–disgust, and anticipation–surprise, together with the emotions derived from them, shown in Fig. 20.2.
Plutchik wheel of emotion.
The second class of emotion theories views emotion as a space in 2 or 3 di- mensions (Russell, 1980). Most models include the two dimensions valence and arousal, and many add a third, dominance. These can be defined as:
valence: the pleasantness of the stimulus
arousal: the intensity of emotion provoked by the stimulus dominance: the degree of control exerted by the stimulus
Sentiment can be viewed as a special case of this second view of emotions as points in space. In particular, the valence dimension, measuring how pleasant or unpleasant a word is, is often used directly as a measure of sentiment.
20.2 Available Sentiment and Affect Lexicons
A wide variety of affect lexicons have been created and released. The most basic lexicons label words along one dimension of semantic variability, generally called “sentiment” or “valence”.
In the simplest lexicons this dimension is represented in a binary fashion, with a wordlist for positive words and a wordlist for negative words. The oldest is the General Inquirer (Stone et al., 1966), which drew on content analysis and on early
                                    Figure 20.2
  General Inquirer

396 CHAPTER 20 • LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION
work in the cognitive psychology of word meaning (Osgood et al., 1957). The Gen- eral Inquirer has a lexicon of 1915 positive words and a lexicon of 2291 negative words (as well as other lexicons discussed below). The MPQA Subjectivity lexicon (Wilson et al., 2005) has 2718 positive and 4912 negative words drawn from prior lexicons plus a bootstrapped list of subjective words and phrases (Riloff and Wiebe, 2003). Each entry in the lexicon is hand-labeled for sentiment and also labeled for reliability (strongly subjective or weakly subjective). The polarity lexicon of Hu and Liu (2004b) gives 2006 positive and 4783 negative words, drawn from product reviews, labeled using a bootstrapping method from WordNet.
Some words with consistent sentiment across the General Inquirer (Stone et al., 1966), the MPQA Subjectivity lexicon (Wilson et al., 2005), and the polarity lexicon of Hu and Liu (2004b).
  Positive admire, amazing, assure, celebration, charm, eager, enthusiastic, excellent, fancy, fan- tastic, frolic, graceful, happy, joy, luck, majesty, mercy, nice, patience, perfect, proud, rejoice, relief, respect, satisfactorily, sensational, super, terrific, thank, vivid, wise, won- derful, zest
Negative abominable, anger, anxious, bad, catastrophe, cheap, complaint, condescending, deceit, defective, disappointment, embarrass, fake, fear, filthy, fool, guilt, hate, idiot, inflict, lazy, miserable, mourn, nervous, objection, pest, plot, reject, scream, silly, terrible, unfriendly, vile, wicked
 Figure 20.3
  Valence Arousal Dominance
 vacation .840 delightful .918 whistle .653 consolation .408 torture .115
enraged .962 party .840 organized .337 effortless .120 napping .046
powerful .991 authority .935 saxophone .482 discouraged .0090 weak .045
 Figure 20.4
  EmoLex
Slightly more general than these sentiment lexicons are lexicons that assign each word a value on all three affective dimensions. The NRC Valence, Arousal, and Dominance (VAD) lexicon (Mohammad, 2018a) assigns valence, arousal, and dom- inance scores to 20,000 words. Some examples are shown in Fig. 20.4.
Values of sample words on the emotional dimensions of Mohammad (2018a).
The NRC Word-Emotion Association Lexicon, also called EmoLex (Moham- mad and Turney, 2013), uses the Plutchik (1980) 8 basic emotions defined above. The lexicon includes around 14,000 words including words from prior lexicons as well as frequent nouns, verbs, adverbs and adjectives. Values from the lexicon for some sample words:
0100101110 0101010001 0000100010 0100110110 0000001000 0100011000 0010000001
    Word
reward
  worry tenderness sweetheart suddenly thirst garbage
  anger anticipation disgust
fear
joy sadness surprise trust positive negative

  outraged violence coup
oust suspicious nurture
0.964 horror 0.742 anguish 0.578 pestilence 0.484 stressed 0.484 failing 0.059 confident
0.923 superb 0.703 cheered 0.625 rainbow 0.531 gesture 0.531 warms 0.094 hardship
0.864 sad
0.773 guilt 0.531 unkind 0.387 difficulties 0.391 beggar
.031 sing
0.844 0.750 0.547 0.421 0.422 0.017
Anger Fear Joy Sadness
  Figure 20.5
 LIWC
20.2 • AVAILABLE SENTIMENT AND AFFECT LEXICONS 397
For a smaller set of 5,814 words, the NRC Emotion/Affect Intensity Lexicon (Mohammad, 2018b) contains real-valued scores of association for anger, fear, joy, and sadness; Fig. 20.5 shows examples.
Sample emotional intensities for words for anger, fear, joy, and sadness from Mohammad (2018b).
LIWC, Linguistic Inquiry and Word Count, is a widely used set of 73 lex- icons containing over 2300 words (Pennebaker et al., 2007), designed to capture aspects of lexical meaning relevant for social psychological tasks. In addition to sentiment-related lexicons like ones for negative emotion (bad, weird, hate, prob- lem, tough) and positive emotion (love, nice, sweet), LIWC includes lexicons for categories like anger, sadness, cognitive mechanisms, perception, tentative, and in- hibition, shown in Fig. 20.6.
  Positive Negative
Emotion Emotion Insight Inhibition Family Negate
appreciat* comfort* great happy interest joy* perfect* please* safe* terrific value wow*
anger* aware* avoid* bore* believe careful* cry decid* hesitat* despair* feel limit* fail* figur* oppos* fear know prevent* griev* knew reluctan* hate* means safe* panic* notice* stop suffers recogni* stubborn* terrify sense wait violent* think wary
brother* aren’t cousin* cannot daughter* didn’t family neither father* never grandf* no grandm* nobod* husband none mom nor mother nothing niece* nowhere wife without
  Figure 20.6
 concrete abstract
Samples from 5 of the 73 lexical categories in LIWC (Pennebaker et al., 2007). The * means the previous letters are a word prefix and all words with that prefix are included in the category.
There are various other hand-built affective lexicons. The General Inquirer in- cludes additional lexicons for dimensions like strong vs. weak, active vs. passive, overstated vs. understated, as well as lexicons for categories like pleasure, pain, virtue, vice, motivation, and cognitive orientation.
Another useful feature for various tasks is the distinction between concrete words like banana or bathrobe and abstract words like belief and although. The lexicon in Brysbaert et al. (2014) used crowdsourcing to assign a rating from 1 to 5 of the concreteness of 40,000 words, thus assigning banana, bathrobe, and bagel 5, belief 1.19, although 1.07, and in between words like brisk a 2.5.

398 CHAPTER 20 • LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION 20.3 Creating Affect Lexicons by Human Labeling
crowdsourcing
The earliest method used to build affect lexicons, and still in common use, is to have humans label each word. This is now most commonly done via crowdsourcing: breaking the task into small pieces and distributing them to a large number of anno- tators. Let’s take a look at some of the methodological choices for two crowdsourced emotion lexicons.
The NRC Emotion Lexicon (EmoLex) (Mohammad and Turney, 2013), labeled emotions in two steps. To ensure that the annotators were judging the correct sense of the word, they first answered a multiple-choice synonym question that primed the correct sense of the word (without requiring the annotator to read a potentially confusing sense definition). These were created automatically using the headwords associated with the thesaurus category of the sense in question in the Macquarie dictionary and the headwords of 3 random distractor categories. An example:
     Which word is closest in meaning (most related) to startle?
• automobile • shake
• honesty
• entertain
For each word (e.g. startle), the annotator was then asked to rate how associated that word is with each of the 8 emotions (joy, fear, anger, etc.). The associations were rated on a scale of not, weakly, moderately, and strongly associated. Outlier ratings were removed, and then each term was assigned the class chosen by the ma- jority of the annotators, with ties broken by choosing the stronger intensity, and then the 4 levels were mapped into a binary label for each word (no and weak mapped to 0, moderate and strong mapped to 1).
The NRC VAD Lexicon (Mohammad, 2018a) was built by selecting words and emoticons from prior lexicons and annotating them with crowd-sourcing using best- worst scaling (Louviere et al. 2015, Kiritchenko and Mohammad 2017). In best- worst scaling, annotators are given N items (usually 4) and are asked which item is the best (highest) and which is the worst (lowest) in terms of some property. The set of words used to describe the ends of the scales are taken from prior literature. For valence, for example, the raters were asked:
Q1. Which of the four words below is associated with the MOST happi- ness / pleasure / positiveness / satisfaction / contentedness / hopefulness OR LEAST unhappiness / annoyance / negativeness / dissatisfaction / melancholy / despair? (Four words listed as options.)
Q2. Which of the four words below is associated with the LEAST hap- piness / pleasure / positiveness / satisfaction / contentedness / hopeful- ness OR MOST unhappiness / annoyance / negativeness / dissatisfaction / melancholy / despair? (Four words listed as options.)
The score for each word in the lexicon is the proportion of times the item was chosen as the best (highest V/A/D) minus the proportion of times the item was chosen as the worst (lowest V/A/D). The agreement between annotations are evaluated by split- half reliability: split the corpus in half and compute the correlations between the annotations in the two halves.
best-worst scaling
split-half reliability

20.4 • SEMI-SUPERVISED INDUCTION OF AFFECT LEXICONS 399 20.4 Semi-supervised Induction of Affect Lexicons
Another common way to learn sentiment lexicons is to start from a set of seed words that define two poles of a semantic axis (words like good or bad), and then find ways to label each word w by its similarity to the two seed sets. Here we summarize two families of seed-based semi-supervised lexicon induction algorithms, axis-based and graph-based.
20.4.1 Semantic Axis Methods
One of the most well-known lexicon induction methods, the Turney and Littman (2003) algorithm, is given seed words like good or bad, and then for each word w to be labeled, measures both how similar it is to good and how different it is from bad. Here we describe a slight extension of the algorithm due to An et al. (2018), which is based on computing a semantic axis.
In the first step, we choose seed words by hand. There are two methods for dealing with the fact that the affect of a word is different in different contexts: (1) start with a single large seed lexicon and rely on the induction algorithm to fine-tune it to the domain, or (2) choose different seed words for different genres. Hellrich et al. (2019) suggests that for modeling affect across different historical time periods, starting with a large modern affect dictionary is better than small seedsets tuned to be stable across time. As an example of the second approach, Hamilton et al. (2016a) define one set of seed words for general sentiment analysis, a different set for Twitter, and yet another set for sentiment in financial text:
 Domain Positive seeds Negative seeds
 General
Twitter Finance
good, lovely, excellent, fortunate, pleas- ant, delightful, perfect, loved, love, happy
love, loved, loves, awesome, nice, amazing, best, fantastic, correct, happy successful, excellent, profit, beneficial, improving, improved, success, gains, positive
bad, horrible, poor, unfortunate, un- pleasant, disgusting, evil, hated, hate, unhappy
hate, hated, hates, terrible, nasty, awful, worst, horrible, wrong, sad
negligent, loss, volatile, wrong, losses, damages, bad, litigation, failure, down, negative
  In the second step, we compute embeddings for each of the pole words. These embeddings can be off-the-shelf word2vec embeddings, or can be computed directly on a specific corpus (for example using a financial corpus if a finance lexicon is the goal), or we can fine-tune off-the-shelf embeddings to a corpus. Fine-tuning is espe- cially important if we have a very specific genre of text but don’t have enough data to train good embeddings. In fine-tuning, we begin with off-the-shelf embeddings like word2vec, and continue training them on the small target corpus.
Once we have embeddings for each pole word, we create an embedding that represents each pole by taking the centroid of the embeddings of each of the seed words; recall that the centroid is the multidimensional version of the mean. Given a set of embeddings for the positive seed words S+ = {E(w+1 ),E(w+2 ),...,E(w+n )}, and embeddings for the negative seed words S− = {E(w−1 ),E(w−2 ),...,E(w−m)}, the

400 CHAPTER 20 • LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION pole centroids are:
1 􏰑n V+=n E(w+i)
V− = m E(w−i ) (20.1) 1
1 1 􏰑m
The semantic axis defined by the poles is computed just by subtracting the two vec- tors:
Vaxis = V+ − V− (20.2)
Vaxis, the semantic axis, is a vector in the direction of positive sentiment. Finally, we compute (via cosine similarity) the angle between the vector in the direction of positive sentiment and the direction of w’s embedding. A higher cosine means that w is more aligned with S+ than S−.
score(w) = 􏰀cos(E(w),Vaxis􏰁
= E (w) · Vaxis (20.3)
∥E(w)∥∥Vaxis∥
If a dictionary of words with sentiment scores is sufficient, we’re done! Or if we need to group words into a positive and a negative lexicon, we can use a threshold or other method to give us discrete lexicons.
20.4.2 Label Propagation
An alternative family of methods defines lexicons by propagating sentiment labels on graphs, an idea suggested in early work by Hatzivassiloglou and McKeown (1997). We’ll describe the simple SentProp (Sentiment Propagation) algorithm of Hamilton et al. (2016a), which has four steps:
1. Define a graph: Given word embeddings, build a weighted lexical graph by connecting each word with its k nearest neighbors (according to cosine simi- larity). The weights of the edge between words wi and w j are set as:
Ei,j = arccos􏰆− wi⊤wj 􏰇. (20.4) ∥wi ∥∥wj ∥
2. Define a seed set: Choose positive and negative seed words.
3. Propagate polarities from the seed set: Now we perform a random walk on this graph, starting at the seed set. In a random walk, we start at a node and then choose a node to move to with probability proportional to the edge prob- ability. A word’s polarity score for a seed set is proportional to the probability
of a random walk from the seed set landing on that word (Fig. 20.7).
4. Create word scores: We walk from both positive and negative seed sets, resulting in positive (rawscore+(wi)) and negative (rawscore−(wi)) raw label
scores. We then combine these values into a positive-polarity score as: score+(wi) = rawscore+(wi) (20.5)
   rawscore+ (wi ) + rawscore− (wi )
It’s often helpful to standardize the scores to have zero mean and unit variance within a corpus.

20.4 • SEMI-SUPERVISED INDUCTION OF AFFECT LEXICONS 401
5. Assignconfidencetoeachscore:Becausesentimentscoresareinfluencedby the seed set, we’d like to know how much the score of a word would change if a different seed set is used. We can use bootstrap sampling to get confidence regions, by computing the propagation B times over random subsets of the positive and negative seed sets (for example using B = 50 and choosing 7 of the 10 seed words each time). The standard deviation of the bootstrap sampled polarity scores gives a confidence measure.
Intuition of the SENTPROP algorithm. (a) Run random walks from the seed words. (b) Assign polarity scores (shown here as colors green or red) based on the frequency of random walk visits.
20.4.3 Other Methods
The core of semisupervised algorithms is the metric for measuring similarity with the seed words. The Turney and Littman (2003) and Hamilton et al. (2016a) ap- proaches above used embedding cosine as the distance metric: words were labeled as positive basically if their embeddings had high cosines with positive seeds and low cosines with negative seeds. Other methods have chosen other kinds of distance metrics besides embedding cosine.
For example the Hatzivassiloglou and McKeown (1997) algorithm uses syntactic cues; two adjectives are considered similar if they were frequently conjoined by and and rarely conjoined by but. This is based on the intuition that adjectives conjoined by the words and tend to have the same polarity; positive adjectives are generally coordinated with positive, negative with negative:
fair and legitimate, corrupt and brutal
but less often positive adjectives coordinated with negative:
*fair and brutal, *corrupt and legitimate
By contrast, adjectives conjoined by but are likely to be of opposite polarity:
fair but brutal
Another cue to opposite polarity comes from morphological negation (un-, im-, -less). Adjectives with the same root but differing in a morphological negative (ad- equate/inadequate, thoughtful/thoughtless) tend to be of opposite polarity.
Yet another method for finding words that have a similar polarity to seed words is to make use of a thesaurus like WordNet (Kim and Hovy 2004, Hu and Liu 2004b). A word’s synonyms presumably share its polarity while a word’s antonyms probably have the opposite polarity. After a seed lexicon is built, each lexicon is updated as follows, possibly iterated.
Lex+: Add synonyms of positive words (well) and antonyms (like fine) of negative words
          like
love idolize find
see uncover
loathe abhor
like
idolize find
see uncover
loathe abhor
                  love adore
appreciate
dislike
disapprove
notice
(b)
hate despise
                        adore
dislike
disapprove
notice
hate despise
               appreciate
  (a)
 Figure 20.7
 
402 CHAPTER 20 • LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION
Lex−: Add synonyms of negative words (awful) and antonyms (like evil) of positive
SentiWordNet
words
An extension of this algorithm assigns polarity to WordNet senses, called Senti-
WordNet (Baccianella et al., 2010). Fig. 20.8 shows some examples.
Pos Neg Obj
100 0.75 0 0.25 001
0 0.875 .125 0.625 0.125 .250 001
0 0.5 0.5
 Synset
 good#6 ‘agreeable or pleasing’
respectable#2 honorable#4 good#4 estimable#2 ‘deserving of esteem’ estimable#3 computable#1 ‘may be computed or estimated’
sting#1 burn#4 bite#2 ‘cause a sharp or stinging pain’
acute#6 ‘of critical importance and consequence’
 acute#4 ‘of an angle; less than 90 degrees’
acute#1 ‘having or experiencing a rapid onset and short but severe course’
 Figure 20.8
   Examples from SentiWordNet 3.0 (Baccianella et al., 2010). Note the differences between senses of homonymous words: estimable#3 is purely objective, while estimable#2 is positive; acute can be positive (acute#6), negative (acute#1), or neutral (acute #4).
In this algorithm, polarity is assigned to entire synsets rather than words. A positive lexicon is built from all the synsets associated with 7 positive words, and a negative lexicon from synsets associated with 7 negative words. A classifier is then trained from this data to take a WordNet gloss and decide if the sense being defined is positive, negative or neutral. A further step (involving a random-walk algorithm) assigns a score to each WordNet synset for its degree of positivity, negativity, and neutrality.
In summary, semisupervised algorithms use a human-defined set of seed words for the two poles of a dimension, and use similarity metrics like embedding cosine, coordination, morphology, or thesaurus structure to score words by how similar they are to the positive seeds and how dissimilar to the negative seeds.
20.5 Supervised Learning of Word Sentiment
Semi-supervised methods require only minimal human supervision (in the form of seed sets). But sometimes a supervision signal exists in the world and can be made use of. One such signal is the scores associated with online reviews.
The web contains an enormous number of online reviews for restaurants, movies, books, or other products, each of which have the text of the review along with an associated review score: a value that may range from 1 star to 5 stars, or scoring 1 to 10. Fig. 20.9 shows samples extracted from restaurant, book, and movie reviews.
We can use this review score as supervision: positive words are more likely to appear in 5-star reviews; negative words in 1-star reviews. And instead of just a binary polarity, this kind of supervision allows us to assign a word a more complex representation of its polarity: its distribution over stars (or other scores).
Thus in a ten-star system we could represent the sentiment of each word as a 10-tuple, each number a score representing the word’s association with that polarity level. This association can be a raw count, or a likelihood P(w|c), or some other function of the count, for each class c from 1 to 10.
For example, we could compute the IMDb likelihood of a word like disap- point(ed/ing) occurring in a 1 star review by dividing the number of times disap- point(ed/ing) occurs in 1-star reviews in the IMDb dataset (8,557) by the total num-

20.5 • SUPERVISED LEARNING OF WORD SENTIMENT 403
Movie review excerpts (IMDb)
  10 1
A great movie. This film is just a wonderful experience. It’s surreal, zany, witty and slapstick all at the same time. And terrific performances too.
This was probably the worst movie I have ever seen. The story went nowhere even though they could have done some interesting stuff with it.
     5 2
Restaurant review excerpts (Yelp)
 The service was impeccable. The food was cooked and seasoned perfectly... The watermelon was perfectly square ... The grilled octopus was ... mouthwatering...
   ...it took a while to get our waters, we got our entree before our starter, and we never received silverware or napkins until we requested them...
   1 5
Book review excerpts (GoodReads)
 I am going to try and stop being deceived by eye-catching titles. I so wanted to like this book and was so disappointed by it.
   This book is hilarious. I would recommend it to anyone looking for a satirical read with a romantic twist and a narrator that keeps butting in
   5 1
Product review excerpts (Amazon)
 The lid on this blender though is probably what I like the best about it... enables you to pour into something without even taking the lid off! ... the perfect pitcher! ... works fantastic.
I hate this blender... It is nearly impossible to get frozen fruit and ice to turn into a smoothie... You have to add a TON of liquid. I also wish it had a spout ...
     Figure 20.9
  Excerpts from some reviews from various review websites, all on a scale of 1 to 5 stars except IMDb, which is on a scale of 1 to 10 stars.
  Potts diagram
ber of words occurring in 1-star reviews (25,395,214), so the IMDb estimate of P(disappointing|1) is .0003.
A slight modification of this weighting, the normalized likelihood, can be used as an illuminating visualization (Potts, 2011)1:
P(w|c) = 􏰐 count(w,c) w∈C count(w,c)
P(w|c)
PottsScore(w) = 􏰐c P(w|c) (20.6)
Dividing the IMDb estimate P(disappointing|1) of .0003 by the sum of the likeli- hood P(w|c) over all categories gives a Potts score of 0.10. The word disappointing thus is associated with the vector [.10, .12, .14, .14, .13, .11, .08, .06, .06, .05]. The Potts diagram (Potts, 2011) is a visualization of these word scores, representing the prior sentiment of a word as a distribution over the rating categories.
Fig. 20.10 shows the Potts diagrams for 3 positive and 3 negative scalar adjec- tives. Note that the curve for strongly positive scalars have the shape of the letter J, while strongly negative scalars look like a reverse J. By contrast, weakly posi- tive and negative scalars have a hump-shape, with the maximum either below the mean (weakly negative words like disappointing) or above the mean (weakly pos- itive words like good). These shapes offer an illuminating typology of affective meaning.
Fig. 20.11 shows the Potts diagrams for emphasizing and attenuating adverbs. Note that emphatics tend to have a J-shape (most likely to occur in the most posi- tive reviews) or a U-shape (most likely to occur in the strongly positive and nega- tive). Attenuators all have the hump-shape, emphasizing the middle of the scale and
1 Potts shows that the normalized likelihood is an estimate of the posterior P(c|w) if we make the incorrect but simplifying assumption that all categories c have equal probability.
 
Potts&diagrams”
IMDB – 33,515 tokens OpenTable – 2,829 tokens
lars Negative scalar
disappointi
7 8 9 10
g 12345678
7 8 9 10 nt
7 8 9 10 g
rating bad
1 2 3 4 5 6 7 rating
terrible
1 2 3 4 5 6 7 rating
Potts diagrams (Potts, 2011) for emphatic and attenuating adverbs.
404 CHAPTER 20
restructuring& adjectives.
Emphatics
C Cat^
Atte
so
1234
“Potts&diagrams”
• LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION
IMDB
Potts diagrams (Potts, 2011) for positive and negative scalar adjectives, show- ing the J-shape and reverse J-shape for strongly positive and negative adjectives, and the hump-shape for more weakly polarized adjectives.
fairly/r
0.35
0.18 0.12 0.05
pretty/r
0.34
0.15 0.07
downplaying bothPexotrtesm,&Cehs.riTshtoepdhiaegr.r&a2m0s1c1a.&nNbSeFu&wseodrkbsohthopas&oant&ypology of lexical
sentiment, and also play a role in modeling sentiment compositionality.
restructuring& adjectives.
Cat = -0.13 (p = 0.284)
Cat = 0.2 (p = 0.265) Cat^2 = -4.16 (p = 0.007)
egory
– 8,982 tokens
0.64 (p = 0.035) 4.47 (p = 0.007)
egory
In addition to functions like posterior P(c|w), likelihood P(w|c), or normalized likelihood (Eq. 20.6) many other functions of the count of a word occurring with a sentiment label have been used. We’ll introduce some of these on page 409, includ- ing ideas like normalizing the counts per writer in Eq. 20.14.
Cat^2 = -5.37 (p < 0.001)
0.31
Potts,&Christopher.& 2011.&NSF&wor
   Oods
Ers
0.38
0.08
1
OpenTable
Cat = 0.11 (p
Cat^2 = -6.2 (
Cat
verPvoiesiwtivescalars Data NegativescalarMseth good disappointing
   xample: attenuato
1 2 3 4 5 6 7 8 9 10
rating 1 2 3 4 5 6 7 8 9 10 rating
 great
1 2 3 4 5 6 7 8 9 10 rating
excellent
1 2 3 4 5 6 7 8 9 10 rating
bad
IMDB – 53,775 tokens
 Ca1t=20.33(p4=05.0064) 7 8 9 10 Cat^2 = -4.02 (p < 0.001)
rating terrible
  0.15
0.09 0.05
1 2 3 4 5 6 7 8 9 10 Categroaryting
 Figure 20.10
 = 0.707) p = 0.014)
Cat Cat = -0.55 (p = 0.128 Cat^2 = -5.04 (p = 0.016
Categorization
totally
2 3 4 5 6 7 8 9 10 rating
absolutely
somewhat/r
– 3,890 tokens
0.09 0.04
1 2 3 4 5 6 7 8 9 10
IMDB Goodreads – 3,424 tokens
rating utterly 0.36
0.19 0.08
C
1 2 3 4 5 6 7 8 9 10 rating
1 2 3
egory
Category
Goodreads – 1,806 tokens
Cat = -0.87 (p = 0.016 Cat^2 = -5.74 (p = 0.004
Category
Goodreads – 11,895 token
Cat = -0.71 (p = 0.072 Cat^2 = -4.59 (p = 0.018
Category
0.17
0.13 0.09 0.05
1234
   Emphatics
totally
1 2 3 4 5 6 7 8 9 10 rating
absolutely
1 2 3 4 5 6 7 8 9 10 rating
utterly
1 2 3 4 5 6 7 8 9 10 rating
0.17
0.09 0.04
Attenuators
somewhat
Category
1 2 3 4 5 6 7 8 9 10 rating
fairly
IMDB – 176,264 tokens
    1 2 3 4 5 6 7 8 9 10
Cat=-0.43(p<0.001)
Cat^2 = -3.6 (p < 0.001)
rating pretty
  0.13 0.09 0.05
  1 2 3 4 5 6 7 8 9 10 Craatetgionryg
 s
ng
9 10
8 9 10
8 9 10
0.08
0.32
0.19 0.14 0.08
Cat
OpenTable
Cat = - Cat^2 = -
Cat
 Figure 20.11
                                                                        “
a
d
g e
n
s
a
n
m
f
a
p
4
-0.50 -0.50 -0.50 -0.39 -0.39 -0.39 -0.28 -0.28 -0.28 -0.17 -0.17 -0.17 -0.06 -0.06 -0.06 0.06 0.06 0.06 0.17 0.17 0.17 0.28 0.28 0.28 0.39 0.39 0.39 0.50 0.50 0.50
-0.50 -0.50 -0.50 -0.25 -0.25 -0.25 0.00 0.00 0.00 0.25 0.25 0.25 0.50 0.50 0.50
-0.50 -0.50 -0.50 -0.25 -0.25 -0.25 0.00 0.00 0.00
0.25 0.25
0.25 -0.39
-0.50 -0.50 -0.
-0.39 -0. -0.28 -0.28 -0. -0.17 -0.17 -0.

log likelihood ratio
log odds ratio
20.5 • SUPERVISED LEARNING OF WORD SENTIMENT 405 20.5.1 Log Odds Ratio Informative Dirichlet Prior
One thing we often want to do with word polarity is to distinguish between words that are more likely to be used in one category of texts than in another. We may, for example, want to know the words most associated with 1 star reviews versus those associated with 5 star reviews. These differences may not be just related to senti- ment. We might want to find words used more often by Democratic than Republican members of Congress, or words used more often in menus of expensive restaurants than cheap restaurants.
Given two classes of documents, to find words more associated with one cate- gory than another, we could measure the difference in frequencies (is a word w more frequent in class A or class B?). Or instead of the difference in frequencies we could compute the ratio of frequencies, or compute the log odds ratio (the log of the ratio between the odds of the two words). We could then sort words by whichever associ- ation measure we pick, ranging from words overrepresented in category A to words overrepresented in category B.
The problem with simple log-likelihood or log odds methods is that they don’t work well for very rare words or very frequent words; for words that are very fre- quent, all differences seem large, and for words that are very rare, no differences seem large.
In this section we walk through the details of one solution to this problem: the “log odds ratio informative Dirichlet prior” method of Monroe et al. (2008) that is a particularly useful method for finding words that are statistically overrepresented in one particular category of texts compared to another. It’s based on the idea of using another large corpus to get a prior estimate of what we expect the frequency of each word to be.
Let’s start with the goal: assume we want to know whether the word horrible occurs more in corpus i or corpus j. We could compute the log likelihood ratio, using fi(w) to mean the frequency of word w in corpus i, and ni to mean the total number of words in corpus i:
llr(horrible) = log Pi(horrible) Pj(horrible)
= logPi(horrible)−logPj(horrible) = logfi(horrible)−logfj(horrible)
(20.7)
 ni nj
Instead, let’s compute the log odds ratio: does horrible have higher odds in i or in
  j:
lor(horrible) = log􏰆 Pi(horrible) 􏰇−log􏰆 Pj(horrible) 􏰇 1−Pi(horrible) 1−Pj(horrible)
   fi(horrible)   fj(horrible)  = log i ni −log j nj 
    1 − f (horrible)
􏰆 i ni 􏰇 􏰆 j nj 􏰇
1 − f (horrible) = log f(horrible) −log f(horrible)
(20.8)
  ni −fi(horrible) nj −fj(horrible)
  The Dirichlet intuition is to use a large background corpus to get a prior estimate of what we expect the frequency of each word w to be. We’ll do this very simply by

406 CHAPTER 20 • LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION
adding the counts from that corpus to the numerator and denominator, so that we’re essentially shrinking the counts toward that prior. It’s like asking how large are the differences between i and j given what we would expect given their frequencies in a well-estimated large background corpus.
The method estimates the difference between the frequency of word w in two corpora i and j via the prior-modified log odds ratio for w, δ (i− j), which is estimated
w
δ(i−j)=log􏰆 fwi +αw 􏰇−log􏰋 fwj+αw 􏰌 (20.9)
as:
w ni +α0 −(fwi +αw) nj +α0 −(fwj +αw)
  (where ni is the size of corpus i, nj is the size of corpus j, fwi is the count of word w in corpus i, fwj is the count of word w in corpus j, α0 is the size of the background corpus, and αw is the count of word w in the background corpus.)
In addition, Monroe et al. (2008) make use of an estimate for the variance of the log–odds–ratio:
σ2􏰄δˆ(i−j)􏰅≈ 1 + 1
w f wi + α w f wj + α w
(20.10)
(20.11)
The Monroe et al. (2008) method thus modifies the commonly used log odds ratio in two ways: it uses the z-scores of the log odds ratio, which controls for the amount of variance in a word’s frequency, and it uses counts from a background corpus to provide a prior count for words.
Fig. 20.12 shows the method applied to a dataset of restaurant reviews from Yelp, comparing the words used in 1-star reviews to the words used in 5-star reviews (Jurafsky et al., 2014). The largest difference is in obvious sentiment words, with the 1-star reviews using negative sentiment words like worse, bad, awful and the 5-star reviews using positive sentiment words like great, best, amazing. But there are other illuminating differences. 1-star reviews use logical negation (no, not), while 5-star reviews use emphatics and emphasize universality (very, highly, every, always). 1- star reviews use first person plurals (we, us, our) while 5 star reviews use the second person. 1-star reviews talk about people (manager, waiter, customer) while 5-star reviews talk about dessert and properties of expensive restaurants like courses and atmosphere. See Jurafsky et al. (2014) for more details.
20.6 Using Lexicons for Sentiment Recognition
In Chapter 4 we introduced the naive Bayes algorithm for sentiment analysis. The lexicons we have focused on throughout the chapter so far can be used in a number of ways to improve sentiment detection.
In the simplest case, lexicons can be used when we don’t have sufficient training data to build a supervised sentiment analyzer; it can often be expensive to have a human assign sentiment to each document to train the supervised classifier.
  The final statistic for a word is then the z–score of its log–odds–ratio: ˆ(i−j)
􏰖 δw 2􏰄ˆ(i−j)􏰅
  σ δw

The top 50 words associated with one–star and five-star restaurant reviews in a Yelp dataset of 900,000 reviews, using the Monroe et al. (2008) method (Jurafsky et al., 2014).
In such situations, lexicons can be used in a rule-based algorithm for classifica- tion. The simplest version is just to use the ratio of positive to negative words: if a document has more positive than negative words (using the lexicon to decide the po- larity of each word in the document), it is classified as positive. Often a threshold λ is used, in which a document is classified as positive only if the ratio is greater than λ. If the sentiment lexicon includes positive and negative weights for each word, θw+ and θw−, these can be used as well. Here’s a simple such sentiment algorithm:
􏰑 θw+count(w)
w s.t. w∈p􏰑ositivelexicon ws.t. w∈negativelexicon
+ iff+>λ f−
− if f− >λ f+
0 otherwise.
If supervised training data is available, these counts computed from sentiment lex- icons, sometimes weighted or normalized in various ways, can also be used as fea- tures in a classifier along with other lexical or non-lexical features. We return to such algorithms in Section 20.8.
20.7 Other tasks: Personality
Many other kinds of affective meaning can be extracted from text and speech. For personality example detecting a person’s personality from their language can be useful for di- alog systems (users tend to prefer agents that match their personality), and can play a useful role in computational social science questions like understanding how per-
sonality is related to other kinds of behavior.
f+ = f − =
sentiment =
θw−count(w)
20.7 • OTHER TASKS: PERSONALITY 407
Class Words in 1-star reviews Class Words in 5-star reviews
 Negative
Negation
1Pl pro
3 pro Past verb
Sequencers Nouns
Irrealis modals Comp
worst, rude, terrible, horrible, bad, awful, disgusting, bland, tasteless, gross, mediocre, overpriced, worse, poor
no, not
we, us, our
she, he, her, him
was, were, asked, told, said, did, charged, waited, left, took
after, then
manager, waitress, waiter, customer, customers, attitude, waste, poisoning, money, bill, minutes
would, should
to, that
Positive
Emphatics/ universals 2 pro Articles Advice
Conjunct Nouns
Auxiliaries Prep, other
great, best, love(d), delicious, amazing, favorite, perfect, excellent, awesome, friendly, fantastic, fresh, wonderful, in- credible, sweet, yum(my)
very, highly, perfectly, definitely, abso- lutely, everything, every, always
you
a, the
try, recommend
also, as, well, with, and
atmosphere, dessert, chocolate, wine, course, menu
is/’s, can, ’ve, are
in, of, die, city, mouth
     Figure 20.12
   (20.12)

408 CHAPTER 20 • LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION
Many theories of human personality are based around a small number of dimen-
interpersonal stance
sions, such as various versions of the “Big Five” dimensions (Digman, 1990):
Extroversion vs. Introversion: sociable, assertive, playful vs. aloof, reserved, shy
Emotional stability vs. Neuroticism: calm, unemotional vs. insecure, anxious Agreeableness vs. Disagreeableness: friendly, cooperative vs. antagonistic, fault-
finding
Conscientiousness vs. Unconscientiousness: self-disciplined, organized vs. in-
efficient, careless
Openness to experience: intellectual, insightful vs. shallow, unimaginative
A few corpora of text and speech have been labeled for the personality of their author by having the authors take a standard personality test. The essay corpus of Pennebaker and King (1999) consists of 2,479 essays (1.9 million words) from psy- chology students who were asked to “write whatever comes into your mind” for 20 minutes. The EAR (Electronically Activated Recorder) corpus of Mehl et al. (2006) was created by having volunteers wear a recorder throughout the day, which ran- domly recorded short snippets of conversation throughout the day, which were then transcribed. The Facebook corpus of (Schwartz et al., 2013) includes 309 million words of Facebook posts from 75,000 volunteers.
For example, here are samples from Pennebaker and King (1999) from an essay written by someone on the neurotic end of the neurotic/emotionally stable scale,
One of my friends just barged in, and I jumped in my seat. This is crazy. I should tell him not to do that again. I’m not that fastidious actually. But certain things annoy me. The things that would annoy me would actually annoy any normal human being, so I know I’m not a freak.
and someone on the emotionally stable end of the scale:
I should excel in this sport because I know how to push my body harder than anyone I know, no matter what the test I always push my body harder than everyone else. I want to be the best no matter what the sport or event. I should also be good at this because I love to ride my bike.
Another kind of affective meaning is what Scherer (2000) calls interpersonal stance, the ‘affective stance taken toward another person in a specific interaction coloring the interpersonal exchange’. Extracting this kind of meaning means au- tomatically labeling participants for whether they are friendly, supportive, distant. For example Ranganath et al. (2013) studied a corpus of speed-dates, in which par- ticipants went on a series of 4-minute romantic dates, wearing microphones. Each participant labeled each other for how flirtatious, friendly, awkward, or assertive they were. Ranganath et al. (2013) then used a combination of lexicons and other features to detect these interpersonal stances from text.
20.8
Affect Recognition
Detection of emotion, personality, interactional stance, and the other kinds of af- fective meaning described by Scherer (2000) can be done by generalizing the algo- rithms described above for detecting sentiment.
The most common algorithms involve supervised classification: a training set is labeled for the affective meaning to be detected, and a classifier is built using features

20.8 • AFFECT RECOGNITION 409
extracted from the training set. As with sentiment analysis, if the training set is large enough, and the test set is sufficiently similar to the training set, simply using all the words or all the bigrams as features in a powerful classifier like SVM or logistic regression, as described in Fig. 4.2 in Chapter 4, is an excellent algorithm whose performance is hard to beat. Thus we can treat affective meaning classification of a text sample as simple document classification.
Some modifications are nonetheless often necessary for very large datasets. For example, the Schwartz et al. (2013) study of personality, gender, and age using 700 million words of Facebook posts used only a subset of the n-grams of lengths 1- 3. Only words and phrases used by at least 1% of the subjects were included as features, and 2-grams and 3-grams were only kept if they had sufficiently high PMI (PMI greater than 2 ∗ length, where length is the number of words):
p(phrase)
pmi(phrase) = log 􏰒 p(w) (20.13)
w∈phrase
Various weights can be used for the features, including the raw count in the training set, or some normalized probability or log probability. Schwartz et al. (2013), for example, turn feature counts into phrase likelihoods by normalizing them by each subject’s total word use.
freq(phrase, subject)
p(phrase|subject) = 􏰑 freq(phrase′,subject) (20.14)
phrase′ ∈vocab(subject)
If the training data is sparser, or not as similar to the test set, any of the lexicons we’ve discussed can play a helpful role, either alone or in combination with all the words and n-grams.
Many possible values can be used for lexicon features. The simplest is just an indicator function, in which the value of a feature fL takes the value 1 if a particular text has any word from the relevant lexicon L. Using the notation of Chapter 4, in which a feature value is defined for a particular output class c and document x.
fL(c,x) = 􏰊 1 if ∃w:w∈L & w∈x & class=c 0 otherwise
Alternatively the value of a feature fL for a particular lexicon L can be the total number of word tokens in the document that occur in L:
fL =􏰑count(w) w∈L
For lexica in which each word is associated with a score or weight, the count can be multiplied by a weight θwL:
fL = 􏰑θwLcount(w) w∈L
Counts can alternatively be logged or normalized per writer as in Eq. 20.14. However they are defined, these lexicon features are then used in a supervised classifier to predict the desired affective category for the text or document. Once a classifier is trained, we can examine which lexicon features are associated with
  
Personality, Gender, Age in Social Media Language
410 CHAPTER 20 • LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION
which classes. For a classifier like logistic regression the feature weight gives an indication of how associated the feature is with the class.
Thus, for example, Mairesse and Walker (2008) found that for classifying per- sonality, for the dimension Agreeable, the LIWC lexicons Family and Home were positively associated while the LIWC lexicons anger and swear were negatively associated. By contrast, Extroversion was positively associated with the Friend, Religion and Self lexicons, and Emotional Stability was positively associated with Sports and negatively associated with Negative Emotion.
Personality, Gend
     (a) (b)
 Figure 20.13
 Word clouds from Schwartz et al. (2013), showing words highly associated with introversion (left) or extroversion (right). The size of the word represents the association strength (the regression coefficient), while the color (ranging from cold to hot) represents the relative frequency of the word/phrase (from low to high).
In the situation in which we use all the words and phrases in the document as potential features, we can use the resulting weights from the learned regression clas- sifier as the basis of an affective lexicon. In the Extroversion/Introversion classifier of Schwartz et al. (2013), ordinary least-squares regression is used to predict the value of a personality dimension from all the words and phrases. The resulting re- gression coefficient for each word or phrase can be used as an association value with the predicted dimension. The word clouds in Fig. 20.13 show an example of words associated with introversion (a) and extroversion (b). Note that regression weights are not guaranteed to represent the correct association when word counts are corre- lated, and so it is often necessary to first prune the list of words if exact values are needed.
20.9 Lexicon-based methods for Entity-Centric Affect
What if we want to get an affect score not for an entire document, but for a particular
entity in the text? The entity-centric method of Field and Tsvetkov (2019) combines
affect lexicons with contextual embeddings to assign an affect score to an entity in
and topics most distinguishing extraversion from introversion and neuroticism from emotional stability. A. ft, e.g., ‘party’) and introversion (right, e.g., ‘computer’); N~72,709. B. Language distinguishing neuroticism (left, e.g.
text. In the context of affect about people, they relabel the Valence/Arousal/Domi-
ty (right, e.g., ‘blessed’); N~71,968 (adjusted for age and gender, Bonferroni-corrected pv0:001). Figure S8 contains
tiousness, and agreeableness. 3791.g006
g
nance dimension as Sentiment/Agency/Power. The algorithm first trains classifiers to map embeddings to scores:
1. For each word w in the training corpus:
(a) Useoff-the-shelfpretrainedencoders(likeBERT)toextractacontextual
embedding e for each instance of the word. No additional fine-tuning is done.
12 September 2013 | Volume 8 | Issue 9 | e73791
Figure 6. Words, phrases, and topics most distinguishing extraversion from introversion and neurotic Language of extraversion (left, e.g., ‘party’) and introversion (right, e.g., ‘computer’); N~72,709. B. Language di ‘hate’) from emotional stability (right, e.g., ‘blessed’); N~71,968 (adjusted for age and gender, Bonferroni-corre results for openness, conscientiousness, and agreeableness.
doi:10.1371/journal.pone.0073791.g006
,
i
n
r
s c

20.10
connotation frame
high sentiment. align with character archetypes, i.e. the antagonist has the lowest sentiment score.
ConnotatimoentFharvaemreseuslted in his effective removal from
the industry. While articles about the #MeToo
terns as the regression model with gr between characters.
vey Dent (ally to Batman who t Rachel Dawes (primary love inter itate extracting example sentences,
20.10 • CONNOTATION FRAMES 411
(b) Average over the e embeddings of each instance of w to obtain a single embedding vector for one training point w.
(c) Use the NRC VAD Lexicon to get S, A, and P scores for w.
2. Train (three) regression models on all words w to predict V, A, D scores from
a word’s average embedding.
Now given an entity mention m in a text, we assign affect scores as follows:
1. Use the same pretrained LM to get contextual embeddings for m in context.
2. Feed this embedding through the 3 regression models to get S, A, P scores for
the entity.
This results in a (S,A,P) tuple for a given entity mention; To get scores for the rep- resentation of an entity in a complete document, we can run coreference resolution and average the (S,A,P) scores for all the mentions. Fig. 20.14 shows the scores from their algorithm for characters from the movie The Dark Knight when run on Wikpedia plot summary texts with gold coreference.
    weakly Rachel Dent Gordan Batman Joker powerfully
Power Score
weakly
negative
dull
 negative Joker Dent Gordan Rachel Batman positive
Sentiment Score
  dull Dent Gordan Rachel Batman Joker scary
Agency Score
 Figure 20.14
 Power (dominance), sentiment (valence) and agency (arousal) for Fchigaruarcete2rs: Power, sentiment, and agenc
Figure 1: Power, sentiment, and agency scores for char-
in the movie The Dark Knight computed from embeddings trained on the NRC VAD Lexicon.
acters in The Dark Night as learned th Note the protagonist (Batman) and the antagonist (the Joker) have high power and agency
acters in The Dark Night as learned through the regres- sion model with ELMo embeddings. Scores generally
ELMo embeddings. These scores refl scores but differ in sentiment, while the love interest Rachel has low power and agency but
movement portray men like Weinstein as unpow-
The lexicons we’ve described so far define a word as a point in affective space. A
erful, we can speculate that the corpora used to
connotation frame, by contrast, is a lexicon that incorporates a richer kind of gram-
and average across instances to o matical structure, by combining affective lexicons with the frame semantic lexicons 9
train ELMo and BERT portray them as powerful. ofChapter10.TThehubsa,sicnianscigohrptuosfcwohnenroetatrioandiftriaomnaellpexoiwcoenrsrioslethsatapredicate
like a verb expresses connotations about the verb’s arguments (Rashkin et al. 2016,
have been inverted, the embeddings extracted
form co-reference resolution by h ally, based on our results from Ta the use of Wikipedia data in train model (Peters et al., 2018), we use
Rashkin et al. 2017).
from ELMo and BERT perform worse than ran-
Consider sentences like:
dom, as they are biased towards the power struc-
(20.15) Country A violated the sovereignty of Country B
tures in the data they are trained on. Further ev-
(20.16) the teenager ... survived the Boston Marathon bombing” idence of this exists in the performance of the
dings for our analysis.
By using the verb violate in (20.15), the author is expressing their sympathies with
BERT-masked embeddings - whereas these em-
Country B, portraying Country B as a victim, and expressing antagonism toward
beddings generally capture power poorly as com- pared to the unmasked embeddings (Table 2), they outperform the unmasked embeddings on this task, and even outperform the frequency baseline in one setting. Nevertheless, they do not outper- form Field et al. (2019), likely because they do not
Figures 1 and 2 show result ence, we show the entity scores a one polar opposite pair identified the regression model and ASP sh terns. Batman has high power, w low power. Additionally, the Jok
Rachel Joker Dent Gordan Power Score
Joker Gordan Batman Dent Sentiment Score
Rachel Dent GordanBatman Agency Score
instance of these entities in the narr
score for the document. To max
by capturing every mention of an
            with the most negative sentiment,
J
y e
a b
a b
s
o h e

412 CHAPTER 20 • LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION
the agent Country A. By contrast, in using the verb survive, the author of (20.16) is expressing that the bombing is a negative experience, and the subject of the sentence, the teenager, is a sympathetic character. These aspects of connotation are inherent in the meaning of the verbs violate and survive, as shown in Fig. 20.15.
Connotation frames for survive and violate. (a) For survive, the writer and reader have positive sentiment toward Role1, the subject, and negative sentiment toward Role2, the direct object. (b) For violate, the writer and reader have positive sentiment instead toward Role2, the direct object.
The connotation frame lexicons of Rashkin et al. (2016) and Rashkin et al. (2017) also express other connotative aspects of the predicate toward each argu- ment, including the effect (something bad happened to x) value: (x is valuable), and mental state: (x is distressed by the event). Connotation frames can also mark the power differential between the arguments (using the verb implore means that the theme argument has greater power than the agent), and the agency of each argument (waited is low agency). Fig. 20.16 shows a visualization from Sap et al. (2017).
àTH power AGTH
     Connotation Frame for “Role1 violates Role2”
 _
Role1
_
Writer
+
Role2
+
S(role1→role2)
 Role1 is the antagonist
_
Role2 is a sympathetic victim
    Reader
  Connotation Frame for “Role1 survives Role2”
_
Role2
_
 +
Role1
+
Writer
S(role1→role2)
 Role1 is a sympathetic victim
_
There is some type of hardship
    Reader
(a) (b)
 Figure 20.15
    He implored the tribunal to show mercy.
power AG
agency AG
   AGENT VERB THEME implore
power(AG < TH)
AGENT VERB THEME wait
      The princess waited for her prince.
    agency(AG) = -
 Figure 20.16
 The connotation frames of Sap et al. (2017), showing that the verb implore impliestheagenthasFloiwguerep2ow:eTrhtheafnotrhmeathlenmoteat(ionnconfttrhaset,csoanyn,owtaitthioanverblikedemanded), and showing the lowflreavmeleosfoafgepnocwyeorfathnedsaugbejenctyo.fTwhaeitefidr.sFtiegxuarme fprloem Sap et al. (2017).
shows the relative power differential implied by the verb “implored”, i.e., the agent (“he”) is in
Connotation frames can be built by hand (Sap et al., 2017), or they can be learned
Figure3: Sampleverbsintheconnotationframes by supervised learning (Rashkin et al., 2016), for example using hand-labeled train-
a position of less power than the theme (“the tri-
with high annotator agreement. Size is indicative ing data to supervise classifiers for each of the individual relations, e.g., whether
bunal”). In contrast, “He demanded the tribunal show mercy” implies that the agent has authority
of verb frequency in our corpus (bigger = more S(writer → Role1) is + or -, and then improving accuracy via glofbraelquceonts),trcaoilnotrsdifferences are only for legibility.
over the theme. The second example shows the across all relations.
low level of agency implied by the verb “waited”.
one another. For example, if the agent “dom- inates” the theme (denoted as power(AG>TH)), then the agent is implied to have a level of control over the theme. Alternatively, if the agent “hon- ors” the theme (denoted as power(AG<TH)), the writer implies that the theme is more important or authoritative. We used AMT crowdsourcing to la- bel 1700 transitive verbs for power differentials.
interactive demo website of our findings (see Fig- ure 5 in the appendix for a screenshot).2 Further- more, as will be seen in Section 4.1, connotation frames offer new insights that complement and de- viate from the well-known Bechdel test (Bechdel, 1986). In particular, we find that high-agency women through the lens of connotation frames are
=  agency AG =+
S(writer→role2)
S(writer→role2)
S(writer→role1)
S(writer→role1)
            With three annotators per verb, the inter-annotator

20.11 Summary
• Manykindsofaffectivestatescanbedistinguished,includingemotions,moods, attitudes (which include sentiment), interpersonal stance, and personality.
• Emotion can be represented by fixed atomic units often called basic emo- tions, or as points in space defined by dimensions like valence and arousal.
• Words have connotational aspects related to these affective states, and this
connotational aspect of word meaning can be represented in lexicons.
• Affective lexicons can be built by hand, using crowd sourcing to label the
affective content of each word.
• Lexicons can be built with semi-supervised, bootstrapping from seed words
using similarity metrics like embedding cosine.
• Lexicons can be learned in a fully supervised manner, when a convenient
training signal can be found in the world, such as ratings assigned by users on
a review site.
• Wordscanbeassignedweightsinalexiconbyusingvariousfunctionsofword
counts in training texts, and ratio metrics like log odds ratio informative
Dirichlet prior.
• Personality is often represented as a point in 5-dimensional space.
• Affect can be detected, just like sentiment, by using standard supervised text
classification techniques, using all the words or bigrams in a text as features.
Additional features can be drawn from counts of words in lexicons.
• Lexiconscanalsobeusedtodetectaffectinarule-basedclassifierbypicking
the simple majority sentiment based on counts of words in each lexicon.
• Connotationframesexpressricherrelationsofaffectivemeaningthatapred-
icate encodes about its arguments.
Bibliographical and Historical Notes
subjectivity
The idea of formally representing the subjective meaning of words began with Os- good et al. (1957), the same pioneering study that first proposed the vector space model of meaning described in Chapter 6. Osgood et al. (1957) had participants rate words on various scales, and ran factor analysis on the ratings. The most significant factor they uncovered was the evaluative dimension, which distinguished between pairs like good/bad, valuable/worthless, pleasant/unpleasant. This work influenced the development of early dictionaries of sentiment and affective meaning in the field of content analysis (Stone et al., 1966).
Wiebe (1994) began an influential line of work on detecting subjectivity in text, beginning with the task of identifying subjective sentences and the subjective char- acters who are described in the text as holding private states, beliefs or attitudes. Learned sentiment lexicons such as the polarity lexicons of Hatzivassiloglou and McKeown (1997) were shown to be a useful feature in subjectivity detection (Hatzi- vassiloglou and Wiebe 2000, Wiebe 2000).
The term sentiment seems to have been introduced in 2001 by Das and Chen (2001), to describe the task of measuring market sentiment by looking at the words in stock trading message boards. In the same paper Das and Chen (2001) also proposed
20.11 • SUMMARY 413

414 CHAPTER 20 • LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION
the use of a sentiment lexicon. The list of words in the lexicon was created by hand, but each word was assigned weights according to how much it discriminated a particular class (say buy versus sell) by maximizing across-class variation and minimizing within-class variation. The term sentiment, and the use of lexicons, caught on quite quickly (e.g., inter alia, Turney 2002). Pang et al. (2002) first showed the power of using all the words without a sentiment lexicon; see also Wang and Manning (2012).
Most of the semi-supervised methods we describe for extending sentiment dic- tionaries drew on the early idea that synonyms and antonyms tend to co-occur in the same sentence (Miller and Charles 1991, Justeson and Katz 1991, Riloff and Shep- herd 1997). Other semi-supervised methods for learning cues to affective mean- ing rely on information extraction techniques, like the AutoSlog pattern extractors (Riloff and Wiebe, 2003). Graph based algorithms for sentiment were first sug- gested by Hatzivassiloglou and McKeown (1997), and graph propagation became a standard method (Zhu and Ghahramani 2002, Zhu et al. 2003, Zhou et al. 2004, Velikovich et al. 2010). Crowdsourcing can also be used to improve precision by filtering the result of semi-supervised lexicon learning (Riloff and Shepherd 1997, Fast et al. 2016).
Much recent work focuses on ways to learn embeddings that directly encode sen- timent or other properties, such as the DENSIFIER algorithm of Rothe et al. (2016) that learns to transform the embedding space to focus on sentiment (or other) infor- mation.

 CHAPTER
21 Coreference Resolution
  mention referent
corefer
and even Stigand, the patriotic archbishop of Canterbury, found it advisable–”’
‘Found WHAT?’ said the Duck.
‘Found IT,’ the Mouse replied rather crossly: ‘of course you know what “it”means.’
‘I know what “it”means well enough, when I find a thing,’ said the Duck: ‘it’s gener- ally a frog or a worm. The question is, what did the archbishop find?’
Lewis Carroll, Alice in Wonderland An important component of language understanding is knowing who is being talked
about in a text. Consider the following passage:
(21.1) Victoria Chen, CFO of Megabucks Banking, saw her pay jump to $2.3 million, as the 38-year-old became the company’s president. It is widely known that she came to Megabucks from rival Lotsabucks.
Each of the underlined phrases in this passage is used by the writer to refer to a person named Victoria Chen. We call linguistic expressions like her or Victoria Chen mentions or referring expressions, and the discourse entity that is referred to (Victoria Chen) the referent. (To distinguish between referring expressions and their referents, we italicize the former.)1 Two or more referring expressions that are used to refer to the same discourse entity are said to corefer; thus, Victoria Chen and she corefer in (21.1).
Coreference is an important component of natural language understanding. A dialogue system that has just told the user “There is a 2pm flight on United and a 4pm one on Cathay Pacific” must know which flight the user means by “I’ll take the second one”. A question answering system that uses Wikipedia to answer a question about Marie Curie must know who she was in the sentence “She was born in Warsaw”. And a machine translation system translating from a language like Spanish, in which pronouns can be dropped, must use coreference from the previous sentence to decide whether the Spanish sentence ‘“Me encanta el conocimiento”, dice.’ should be translated as ‘“I love knowledge”, he says’, or ‘“I love knowledge”, she says’. Indeed, this example comes from an actual news article in El Pa ́ıs about a female professor and was mistranslated as “he” in machine translation because of inaccurate coreference resolution (Schiebinger, 2013).
Natural language understanding systems (and humans) interpret linguistic ex- pressions with respect to a discourse model (Karttunen, 1969). A discourse model (Fig. 21.1) is a mental model that the understander builds incrementally when inter- preting a text, containing representations of the entities referred to in the text, as well as properties of the entities and relations among them. When a referent is first men- tioned in a discourse, we say that a representation for it is evoked into the model. Upon subsequent mention, this representation is accessed from the model.
1 As a convenient shorthand, we sometimes speak of a referring expression referring to a referent, e.g., saying that she refers to Victoria Chen. However, the reader should keep in mind that what we really mean is that the speaker is performing the act of referring to Victoria Chen by uttering she.
discourse model
evoked accessed
 
416
CHAPTER 21 • COREFERENCE RESOLUTION
    Discourse Model
Lotsabucks Megabucks $pay
V
 refer (evoke)
“Victoria”
refer (access)
corefer
“she”
  Figure 21.1
 anaphora anaphor
antecedent
singleton
coreference resolution
coreference chain
cluster
How mentions evoke and access discourse entities in a discourse model.
Reference in a text to an entity that has been previously introduced into the discourse is called anaphora, and the referring expression used is said to be an anaphor, or anaphoric.2 In passage (21.1), the pronouns she and her and the defi- nite NP the 38-year-old are therefore anaphoric. The anaphor corefers with a prior mention (in this case Victoria Chen) that is called the antecedent. Not every refer- ring expression is an antecedent. An entity that has only a single mention in a text (like Lotsabucks in (21.1)) is called a singleton.
In this chapter we focus on the task of coreference resolution. Coreference resolution is the task of determining whether two mentions corefer, by which we mean they refer to the same entity in the discourse model (the same discourse entity). The set of coreferring expressions is often called a coreference chain or a cluster. For example, in processing (21.1), a coreference resolution algorithm would need to find at least four coreference chains, corresponding to the four entities in the discourse model in Fig. 21.1.
1. {Victoria Chen, her, the 38-year-old, She}
2. {Megabucks Banking, the company, Megabucks} 3. {her pay}
4. {Lotsabucks}
Note that mentions can be nested; for example the mention her is syntactically part of another mention, her pay, referring to a completely different discourse entity. Coreference resolution thus comprises two tasks (although they are often per- formed jointly): (1) identifying the mentions, and (2) clustering them into corefer-
ence chains/discourse entities.
We said that two mentions corefered if they are associated with the same dis-
course entity. But often we’d like to go further, deciding which real world entity is associated with this discourse entity. For example, the mention Washington might refer to the US state, or the capital city, or the person George Washington; the inter- pretation of the sentence will of course be very different for each of these. The task of entity linking (Ji and Grishman, 2011) or entity resolution is the task of mapping adiscourseentitytosomereal-worldindividual.3 Weusuallyoperationalizeentity
2 We will follow the common NLP usage of anaphor to mean any mention that has an antecedent, rather than the more narrow usage to mean only mentions (like pronouns) whose interpretation depends on the antecedent (under the narrower interpretation, repeated names are not anaphors).
3 Computational linguistics/NLP thus differs in its use of the term reference from the field of formal semantics, which uses the words reference and coreference to describe the relation between a mention and a real-world entity. By contrast, we follow the functional linguistics tradition in which a mention refers to a discourse entity (Webber, 1978) and the relation between a discourse entity and the real world individual requires an additional step of linking.
entity linking
 
event coreference
discourse deixis
417
linking or resolution by mapping to an ontology: a list of entities in the world, like a gazeteer (Chapter 15). Perhaps the most common ontology used for this task is Wikipedia; each Wikipedia page acts as the unique id for a particular entity. Thus the entity linking task of wikification (Mihalcea and Csomai, 2007) is the task of de- ciding which Wikipedia page corresponding to an individual is being referred to by a mention. But entity linking can be done with any ontology; for example if we have an ontology of genes, we can link mentions of genes in text to the disambiguated gene name in the ontology.
In the next sections we introduce the task of coreference resolution in more de- tail, and offer a variety of architectures for resolution, from simple deterministic baseline algorithms to state-of-the-art neural models.
Before turning to algorithms, however, we mention some important tasks we will only touch on briefly at the end of this chapter. First are the famous Winograd Schema problems (so-called because they were first pointed out by Terry Winograd in his dissertation). These entity coreference resolution problems are designed to be too difficult to be solved by the resolution methods we describe in this chapter, and the kind of real-world knowledge they require has made them a kind of chal- lenge task for natural language understanding. For example, consider the task of determining the correct antecedent of the pronoun they in the following example:
(21.2) The city council denied the demonstrators a permit because
a. they feared violence.
b. they advocated violence.
Determining the correct antecedent for the pronoun they requires understanding that the second clause is intended as an explanation of the first clause, and also that city councils are perhaps more likely than demonstrators to fear violence and that demonstrators might be more likely to advocate violence. Solving Winograd Schema problems requires finding way to represent or discover the necessary real world knowledge.
A problem we won’t discuss in this chapter is the related task of event corefer- ence, deciding whether two event mentions (such as the buy and the acquisition in these two sentences from the ECB+ corpus) refer to the same event:
(21.3) AMD agreed to [buy] Markham, Ontario-based ATI for around $5.4 billion in cash and stock, the companies announced Monday.
(21.4) The [acquisition] would turn AMD into one of the world’s largest providers of graphics chips.
Event mentions are much harder to detect than entity mentions, since they can be ver- bal as well as nominal. Once detected, the same mention-pair and mention-ranking models used for entities are often applied to events.
An even more complex kind of coreference is discourse deixis (Webber, 1988), in which an anaphor refers back to a discourse segment, which can be quite hard to delimit or categorize, like the examples in (21.5) adapted from Webber (1991):
(21.5) According to Soleil, Beau just opened a restaurant
a. But that turned out to be a lie.
b. But that was false.
c. That struck me as a funny way to describe the situation.
The referent of that is a speech act (see Chapter 24) in (21.5a), a proposition in (21.5b), and a manner of description in (21.5c). We don’t give algorithms in this chapter for these difficult types of non-nominal antecedents, but see Kolhatkar et al. (2018) for a survey.

418 CHAPTER 21 • COREFERENCE RESOLUTION
21.1 Coreference Phenomena: Linguistic Background
cataphora
bound
We now offer some linguistic background on reference phenomena. We introduce the four types of referring expressions (definite and indefinite NPs, pronouns, and names), describe how these are used to evoke and access entities in the discourse model, and talk about linguistic features of the anaphor/antecedent relation (like number/gender agreement, or properties of verb semantics).
21.1.1 Types of Referring Expressions
Indefinite Noun Phrases: The most common form of indefinite reference in En- glish is marked with the determiner a (or an), but it can also be marked by a quan- tifier such as some or even the determiner this. Indefinite reference generally intro- duces into the discourse context entities that are new to the hearer.
(21.6) a. Mrs. Martin was so very kind as to send Mrs. Goddard a beautiful goose. b. He had gone round one day to bring her some walnuts.
c. I saw this beautiful cauliflower today.
Definite Noun Phrases: Definite reference, such as via NPs that use the English article the, refers to an entity that is identifiable to the hearer. An entity can be identifiable to the hearer because it has been mentioned previously in the text and thus is already represented in the discourse model:
(21.7) It concerns a white stallion which I have sold to an officer. But the pedigree of the white stallion was not fully established.
Alternatively, an entity can be identifiable because it is contained in the hearer’s set of beliefs about the world, or the uniqueness of the object is implied by the description itself, in which case it evokes a representation of the referent into the discourse model, as in (21.9):
(21.8) I read about it in the New York Times. (21.9) Have you seen the car keys?
These last uses are quite common; more than half of definite NPs in newswire texts are non-anaphoric, often because they are the first time an entity is mentioned (Poesio and Vieira 1998, Bean and Riloff 1999).
Pronouns: Another form of definite reference is pronominalization, used for enti- ties that are extremely salient in the discourse, (as we discuss below):
(21.10) Emma smiled and chatted as cheerfully as she could,
Pronouns can also participate in cataphora, in which they are mentioned before
their referents are, as in (21.11).
(21.11) Even before she saw it, Dorothy had been thinking about the Emerald City
every day.
Here, the pronouns she and it both occur before their referents are introduced. Pronouns also appear in quantified contexts in which they are considered to be
bound, as in (21.12).
(21.12) Every dancer brought her left arm forward.
Under the relevant reading, her does not refer to some woman in context, but instead behaves like a variable bound to the quantified expression every dancer. We are not concerned with the bound interpretation of pronouns in this chapter.

zero anaphor
21.1 • COREFERENCE PHENOMENA: LINGUISTIC BACKGROUND 419 In some languages, pronouns can appear as clitics attached to a word, like lo
(‘it’) in this Spanish example from AnCora (Recasens and Mart ́ı, 2010):
(21.13) La intencio ́n es reconocer el gran prestigio que tiene la marato ́n y unirlo con esta gran carrera.
‘The aim is to recognize the great prestige that the Marathon has and join|it with this great race.”
Demonstrative Pronouns: Demonstrative pronouns this and that can appear ei- ther alone or as determiners, for instance, this ingredient, that spice:
(21.14) I just bought a copy of Thoreau’s Walden. I had bought one five years ago. That one had been very tattered; this one was in much better condition.
Note that this NP is ambiguous; in colloquial spoken English, it can be indefinite, as in (21.6), or definite, as in (21.14).
Zero Anaphora: Instead of using a pronoun, in some languages (including Chi- nese, Japanese, and Italian) it is possible to have an anaphor that has no lexical realization at all, called a zero anaphor or zero pronoun, as in the following Italian and Japanese examples from Poesio et al. (2016):
(21.15) EN [John]i went to visit some friends. On the way [he]i bought some wine.
IT [Giovanni]i ando` a far visita a degli amici. Per via φi compro` del vino. JA [John]i-wa yujin-o houmon-sita. Tochu-de φi wain-o ka-tta.
or this Chinese example:
(21.16) [我] 前一会精神上太紧张。[0] 现在比较平静了
[I] was too nervous a while ago. ... [0] am now calmer.
Zero anaphors complicate the task of mention detection in these languages.
Names: Names (such as of people, locations, or organizations) can be used to refer to both new and old entities in the discourse:
(21.17) a. Miss Woodhouse certainly had not done him justice.
b. International Business Machines sought patent compensation
from Amazon; IBM had previously sued other companies. 21.1.2 Information Status
The way referring expressions are used to evoke new referents into the discourse (introducing new information), or access old entities from the model (old informa- tion), is called their information status or information structure. Entities can be discourse-new or discourse-old, and indeed it is common to distinguish at least three kinds of entities informationally (Prince, 1981a):
new NPs:
brand new NPs: these introduce entities that are discourse-new and hearer-
new like a fruit or some walnuts.
unused NPs: these introduce entities that are discourse-new but hearer-old
(like Hong Kong, Marie Curie, or the New York Times.
old NPs: also called evoked NPs, these introduce entities that already in the dis- course model, hence are both discourse-old and hearer-old, like it in “I went to a new restaurant. It was...”.
information status
discourse-new discourse-old

420
CHAPTER 21 • COREFERENCE RESOLUTION
bridging inference
given-new accessible salience
inferrables: these introduce entities that are neither hearer-old nor discourse-old, but the hearer can infer their existence by reasoning based on other entities that are in the discourse. Consider the following examples:
(21.18) I went to a superb restaurant yesterday. The chef had just opened it. (21.19) Mix flour, butter and water. Knead the dough until shiny.
Neither the chef nor the dough were in the discourse model based on the first sentence of either example, but the reader can make a bridging inference that these entities should be added to the discourse model and associated with the restaurant and the ingredients, based on world knowledge that restaurants have chefs and dough is the result of mixing flour and liquid (Haviland and Clark 1974, Webber and Baldwin 1992, Nissim et al. 2004, Hou et al. 2018).
The form of an NP gives strong clues to its information status. We often talk about an entity’s position on the given-new dimension, the extent to which the refer- ent is given (salient in the discourse, easier for the hearer to call to mind, predictable by the hearer), versus new (non-salient in the discourse, unpredictable) (Chafe 1976, Prince 1981b, Gundel et al. 1993). A referent that is very accessible (Ariel, 2001) i.e., very salient in the hearer’s mind or easy to call to mind, can be referred to with less linguistic material. For example pronouns are used only when the referent has a high degree of activation or salience in the discourse model.4 By contrast, less salient entities, like a new referent being introduced to the discourse, will need to be introduced with a longer and more explicit referring expression to help the hearer recover the referent.
Thus when an entity is first introduced into a discourse its mentions are likely to have full names, titles or roles, or appositive or restrictive relative clauses, as in the introduction of our protagonist in (21.1): Victoria Chen, CFO of Megabucks Banking. As an entity is discussed over a discourse, it becomes more salient to the hearer and its mentions on average typically becomes shorter and less informative, for example with a shortened name (for example Ms. Chen), a definite description (the 38-year-old), or a pronoun (she or her) (Hawkins 1978). However, this change in length is not monotonic, and is sensitive to discourse structure (Grosz 1977b, Reichman 1985, Fox 1993).
21.1.3 Complications: Non-Referring Expressions
Many noun phrases or other nominals are not referring expressions, although they may bear a confusing superficial resemblance. For example in some of the earliest computational work on reference resolution, Karttunen (1969) pointed out that the NP a car in the following example does not create a discourse referent:
(21.20) Janet doesn’t have a car.
and cannot be referred back to by anaphoric it or the car:
(21.21) *It is a Toyota. (21.22) *The car is red.
We summarize here four common types of structures that are not counted as men- tions in coreference tasks and hence complicate the task of mention-detection:
4 Pronouns also usually (but not always) refer to entities that were introduced no further than one or two sentences back in the ongoing discourse, whereas definite noun phrases can often refer further back.
 
expletive clefts
21.1 • COREFERENCE PHENOMENA: LINGUISTIC BACKGROUND 421
Appositives: An appositional structure is a noun phrase that appears next to a head noun phrase, describing the head. In English they often appear in commas, like “a unit of UAL” appearing in apposition to the NP United, or CFO of Megabucks Banking in apposition to Victoria Chen.
(21.23) Victoria Chen, CFO of Megabucks Banking, saw ... (21.24) United, a unit of UAL, matched the fares.
Appositional NPs are not referring expressions, instead functioning as a kind of supplementary parenthetical description of the head NP. Nonetheless, sometimes it is useful to link these phrases to an entity they describe, and so some datasets like ntoNotes mark appositional relationships.
Predicative and Prenominal NPs: Predicative or attributive NPs describe prop- erties of the head noun. In United is a unit of UAL, the NP a unit of UAL describes a property of United, rather than referring to a distinct entity. Thus they are not marked as mentions in coreference tasks; in our example the NPs $2.3 million and the company’s president, are attributive, describing properties of her pay and the 38-year-old; Example (21.27) shows a Chinese example in which the predicate NP (中国最大的城市; China’s biggest city) is not a mention.
(21.25) her pay jumped to $2.3 million
(21.26) the 38-year-old became the company’s president
(21.27) 上海是[中国最大的城市] [Shanghai is China’s biggest city]
Expletives: Many uses of pronouns like it in English and corresponding pronouns in other languages are not referential. Such expletive or pleonastic cases include it is raining, in idioms like hit it off, or in particular syntactic situations like clefts (21.28a) or extraposition (21.28b):
(21.28) a. It was Emma Goldman who founded Mother Earth
b. It surprised me that there was a herring hanging on her wall.
Generics: Another kind of expression that does not refer back to an entity explic- itly evoked in the text is generic reference. Consider (21.29).
(21.29) I love mangos. They are very tasty.
Here, they refers, not to a particular mango or set of mangos, but instead to the class
of mangos in general. The pronoun you can also be used generically: (21.30) In July in San Francisco you have to wear a jacket.
21.1.4 Linguistic Properties of the Coreference Relation
Now that we have seen the linguistic properties of individual referring expressions we turn to properties of the antecedent/anaphor pair. Understanding these properties is helpful both in designing novel features and performing error analyses.
Number Agreement: Referring expressions and their referents must generally agree in number; English she/her/he/him/his/it are singular, we/us/they/them are plu- ral, and you is unspecified for number. So a plural antecedent like the chefs cannot generally corefer with a singular anaphor like she. However, algorithms cannot enforce number agreement too strictly. First, semantically plural entities can be re- ferred to by either it or they:
(21.31) IBM announced a new machine translation product yesterday. They have been working on it for 20 years.

422 CHAPTER 21 • COREFERENCE RESOLUTION
singular they
Second, singular they has become much more common, in which they is used to describe singular individuals, often useful because they is gender neutral. Although recently increasing, singular they is quite old, part of English for many centuries.5
Person Agreement: English distinguishes between first, second, and third person, and a pronoun’s antecedent must agree with the pronoun in person. Thus a third person pronoun (he, she, they, him, her, them, his, her, their) must have a third person antecedent (one of the above or any other noun phrase). However, phenomena like quotation can cause exceptions; in this example I, my, and she are coreferent:
(21.32) “I voted for Nader because he was most aligned with my values,” she said.
Gender or Noun Class Agreement: In many languages, all nouns have grammat- ical gender or noun class6 and pronouns generally agree with the grammatical gender of their antecedent. In English this occurs only with third-person singular pronouns, which distinguish between male (he, him, his), female (she, her), and nonpersonal (it) grammatical genders. Non-binary pronouns like ze or hir may also occur in more recent texts. Knowing which gender to associate with a name in text can be complex, and may require world knowledge about the individual. Some examples:
(21.33) Maryam has a theorem. She is exciting. (she=Maryam, not the theorem) (21.34) Maryam has a theorem. It is exciting. (it=the theorem, not Maryam)
Binding Theory Constraints: The binding theory is a name for syntactic con- straints on the relations between a mention and an antecedent in the same sentence (Chomsky, 1981). Oversimplifying a bit, reflexive pronouns like himself and herself corefer with the subject of the most immediate clause that contains them (21.35), whereas nonreflexives cannot corefer with this subject (21.36).
(21.35) Janet bought herself a bottle of fish sauce. [herself=Janet] (21.36) Janet bought her a bottle of fish sauce. [her̸=Janet]
Recency: Entities introduced in recent utterances tend to be more salient than those introduced from utterances further back. Thus, in (21.37), the pronoun it is more likely to refer to Jim’s map than the doctor’s map.
(21.37) The doctor found an old map in the captain’s chest. Jim found an even older map hidden on the shelf. It described an island.
Grammatical Role: Entities mentioned in subject position are more salient than those in object position, which are in turn more salient than those mentioned in oblique positions. Thus although the first sentence in (21.38) and (21.39) expresses roughly the same propositional content, the preferred referent for the pronoun he varies with the subject—John in (21.38) and Bill in (21.39).
(21.38) Billy Bones went to the bar with Jim Hawkins. He called for a glass of rum. [ he = Billy ]
(21.39) Jim Hawkins went to the bar with Billy Bones. He called for a glass of rum. [he=Jim]
5 Here’s a bound pronoun example from Shakespeare’s Comedy of Errors: There’s not a man I meet but doth salute me As if I were their well-acquainted friend
6 The word “gender” is generally only used for languages with 2 or 3 noun classes, like most Indo-
European languages; many languages, like the Bantu languages or Chinese, have a much larger number of noun classes.
reflexive
 
21.2 • COREFERENCE TASKS AND DATASETS 423 Verb Semantics: Some verbs semantically emphasize one of their arguments, bi-
asing the interpretation of subsequent pronouns. Compare (21.40) and (21.41). (21.40) John telephoned Bill. He lost the laptop.
(21.41) John criticized Bill. He lost the laptop.
These examples differ only in the verb used in the first sentence, yet “he” in (21.40) is typically resolved to John, whereas “he” in (21.41) is resolved to Bill. This may be due to the link between implicit causality and saliency: the implicit cause of a “criticizing” event is its object, whereas the implicit cause of a “telephoning” event is its subject. In such verbs, the entity which is the implicit cause is more salient.
Selectional Restrictions: Many other kinds of semantic knowledge can play a role in referent preference. For example, the selectional restrictions that a verb places on its arguments (Chapter 10) can help eliminate referents, as in (21.42).
(21.42) I ate the soup in my new bowl after cooking it for hours
There are two possible referents for it, the soup and the bowl. The verb eat, however, requires that its direct object denote something edible, and this constraint can rule out bowl as a possible referent.
21.2 Coreference Tasks and Datasets
We can formulate the task of coreference resolution as follows: Given a text T , find all entities and the coreference links between them. We evaluate our task by com- paring the links our system creates with those in human-created gold coreference annotations on T .
Let’s return to our coreference example, now using superscript numbers for each coreference chain (cluster), and subscript letters for individual mentions in the clus- ter:
(21.43) [Victoria Chen]1a, CFO of [Megabucks Banking]2a, saw [[her]1b pay]3a jump to $2.3 million, as [the 38-year-old]1c also became [[the company]2b’s president. It is widely known that [she]1d came to [Megabucks]2c from rival [Lotsabucks]4a .
Assuming example (21.43) was the entirety of the article, the chains for her pay and Lotsabucks are singleton mentions:
1. {Victoria Chen, her, the 38-year-old, She}
2. {Megabucks Banking, the company, Megabucks} 3. { her pay}
4. { Lotsabucks}
For most coreference evaluation campaigns, the input to the system is the raw text of articles, and systems must detect mentions and then link them into clusters. Solving this task requires dealing with pronominal anaphora (figuring out that her refers to Victoria Chen), filtering out non-referential pronouns like the pleonastic It in It has been ten years), dealing with definite noun phrases to figure out that the 38-year-old is coreferent with Victoria Chen, and that the company is the same as Megabucks. And we need to deal with names, to realize that Megabucks is the same as Megabucks Banking.

424 CHAPTER 21 • COREFERENCE RESOLUTION
Exactly what counts as a mention and what links are annotated differs from task to task and dataset to dataset. For example some coreference datasets do not label singletons, making the task much simpler. Resolvers can achieve much higher scores on corpora without singletons, since singletons constitute the majority of mentions in running text, and they are often hard to distinguish from non-referential NPs. Some tasks use gold mention-detection (i.e. the system is given human-labeled mention boundaries and the task is just to cluster these gold mentions), which eliminates the need to detect and segment mentions from running text.
Coreference is usually evaluated by the CoNLL F1 score, which combines three metrics: MUC, B3, and CEAFe; Section 21.7 gives the details.
Let’s mention a few characteristics of one popular coreference dataset, OntoNotes (Pradhan et al. 2007, Pradhan et al. 2007a), and the CoNLL 2012 Shared Task based on it (Pradhan et al., 2012a). OntoNotes contains hand-annotated Chinese and English coreference datasets of roughly one million words each, consisting of newswire, magazine articles, broadcast news, broadcast conversations, web data and conversational speech data, as well as about 300,000 words of annotated Arabic newswire. The most important distinguishing characteristic of OntoNotes is that it does not label singletons, simplifying the coreference task, since singletons rep- resent 60%-70% of all entities. In other ways, it is similar to other coreference datasets. Referring expression NPs that are coreferent are marked as mentions, but generics and pleonastic pronouns are not marked. Appositive clauses are not marked as separate mentions, but they are included in the mention. Thus in the NP, “Richard Godown, president of the Industrial Biotechnology Association” the mention is the entire phrase. Prenominal modifiers are annotated as separate entities only if they are proper nouns. Thus wheat is not an entity in wheat fields, but UN is an entity in UN policy (but not adjectives like American in American policy).
A number of corpora mark richer discourse phenomena. The ISNotes corpus annotates a portion of OntoNotes for information status, include bridging examples (Hou et al., 2018). The LitBank coreference corpus (Bamman et al., 2020) contains coreference annotations for 210,532 tokens from 100 different literary novels, in- cluding singletons and quantified and negated noun phrases. The AnCora-CO coref- erence corpus (Recasens and Mart ́ı, 2010) contains 400,000 words each of Spanish (AnCora-CO-Es) and Catalan (AnCora-CO-Ca) news data, and includes labels for complex phenomena like discourse deixis in both languages. The ARRAU corpus (Uryupina et al., 2020) contains 350,000 words of English marking all NPs, which means singleton clusters are available. ARRAU includes diverse genres like dialog (the TRAINS data) and fiction (the Pear Stories), and has labels for bridging refer- ences, discourse deixis, generics, and ambiguous anaphoric relations.
21.3 Mention Detection
mention detection
The first stage of coreference is mention detection: finding the spans of text that constitute each mention. Mention detection algorithms are usually very liberal in proposing candidate mentions (i.e., emphasizing recall), and only filtering later. For example many systems run parsers and named entity taggers on the text and extract every span that is either an NP, a possessive pronoun, or a named entity.
Doing so from our sample text repeated in (21.44):
(21.44) Victoria Chen, CFO of Megabucks Banking, saw her pay jump to $2.3

Victoria Chen $2.3 million she
 CFOofMegabucksBanking the38-year-old Megabucks
 Megabucks Banking the company Lotsabucks
 her the company’s president
 her pay It
  anaphoricity detector
21.3 • MENTION DETECTION 425 million, as the 38-year-old also became the company’s president. It is
widely known that she came to Megabucks from rival Lotsabucks. might result in the following list of 13 potential mentions:
More recent mention detection systems are even more generous; the span-based algorithm we will describe in Section 21.6 first extracts literally all N-gram spans of words up to N=10. Of course recall from Section 21.1.3 that many NPs—and the overwhelming majority of random N-gram spans—are not referring expressions. Therefore all such mention detection systems need to eventually filter out pleonas- tic/expletive pronouns like It above, appositives like CFO of Megabucks Banking Inc, or predicate nominals like the company’s president or $2.3 million.
Some of this filtering can be done by rules. Early rule-based systems designed regular expressions to deal with pleonastic it, like the following rules from Lappin and Leass (1994) that use dictionaries of cognitive verbs (e.g., believe, know, antic- ipate) to capture pleonastic it in “It is thought that ketchup...”, or modal adjectives (e.g., necessary, possible, certain, important), for, e.g., “It is likely that I...”. Such rules are sometimes used as part of modern systems:
Mention-detection rules are sometimes designed specifically for particular eval- uation campaigns. For OntoNotes, for example, mentions are not embedded within larger mentions, and while numeric quantities are annotated, they are rarely coref- erential. Thus for OntoNotes tasks like CoNLL 2012 (Pradhan et al., 2012a), a common first pass rule-based mention detection algorithm (Lee et al., 2013) is:
1. 2.
3.
Rule-based systems, however, are generally insufficient to deal with mention- detection, and so modern systems incorporate some sort of learned mention detec- tion component, such as a referentiality classifier, an anaphoricity classifier— detecting whether an NP is an anaphor—or a discourse-new classifier— detecting whether a mention is discourse-new and a potential antecedent for a future anaphor.
An anaphoricity detector, for example, can draw its positive training examples from any span that is labeled as an anaphoric referring expression in hand-labeled datasets like OntoNotes, ARRAU, or AnCora. Any other NP or named entity can be marked as a negative training example. Anaphoricity classifiers use features of the candidate mention such as its head word, surrounding words, definiteness, animacy, length, position in the sentence/discourse, many of which were first proposed in early work by Ng and Cardie (2002a); see Section 21.5 for more on features.
It is Modaladjective that S
It is Modaladjective (for NP) to VP
It is Cogv-ed that S
It seems/appears/means/follows (that) S
Take all NPs, possessive pronouns, and named entities.
Remove numeric quantities (100 dollars, 8%), mentions embedded in larger mentions, adjectival forms of nations, and stop words (like there). Remove pleonastic it based on regular expression patterns.
 
426 CHAPTER 21 • COREFERENCE RESOLUTION
Referentiality or anaphoricity detectors can be run as filters, in which only men- tions that are classified as anaphoric or referential are passed on to the coreference system. The end result of such a filtering mention detection system on our example above might be the following filtered set of 9 potential mentions:
It turns out, however, that hard filtering of mentions based on an anaphoricity or referentiality classifier leads to poor performance. If the anaphoricity classifier threshold is set too high, too many mentions are filtered out and recall suffers. If the classifier threshold is set too low, too many pleonastic or non-referential mentions are included and precision suffers.
The modern approach is instead to perform mention detection, anaphoricity, and coreference jointly in a single end-to-end model (Ng 2005b, Denis and Baldridge 2007, Rahman and Ng 2009). For example mention detection in the Lee et al. (2017),(2018) system is based on a single end-to-end neural network that computes a score for each mention being referential, a score for two mentions being coreference, and combines them to make a decision, training all these scores with a single end-to-end loss. We’ll describe this method in detail in Section 21.6. 7
Despite these advances, correctly detecting referential mentions seems to still be an unsolved problem, since systems incorrectly marking pleonastic pronouns like it and other non-referential NPs as coreferent is a large source of errors of mod- ern coreference resolution systems (Kummerfeld and Klein 2013, Martschat and Strube 2014, Martschat and Strube 2015, Wiseman et al. 2015, Lee et al. 2017).
Mention, referentiality, or anaphoricity detection is thus an important open area of investigation. Other sources of knowledge may turn out to be helpful, especially in combination with unsupervised and semisupervised algorithms, which also mit- igate the expense of labeled datasets. In early work, for example Bean and Riloff (1999) learned patterns for characterizing anaphoric or non-anaphoric NPs; (by ex- tracting and generalizing over the first NPs in a text, which are guaranteed to be non-anaphoric). Chang et al. (2012) look for head nouns that appear frequently in the training data but never appear as gold mentions to help find non-referential NPs. Bergsma et al. (2008b) use web counts as a semisupervised way to augment standard features for anaphoricity detection for English it, an important task because it is both common and ambiguous; between a quarter and half it examples are non-anaphoric. Consider the following two examples:
(21.45) You can make [it] in advance. [anaphoric] (21.46) You can make [it] in Hollywood. [non-anaphoric]
The it in make it is non-anaphoric, part of the idiom make it. Bergsma et al. (2008b) turn the context around each example into patterns, like “make * in advance” from (21.45), and “make * in Hollywood” from (21.46). They then use Google N-grams to enumerate all the words that can replace it in the patterns. Non-anaphoric contexts tend to only have it in the wildcard positions, while anaphoric contexts occur with many other NPs (for example make them in advance is just as frequent in their data
7 Some systems try to avoid mention detection or anaphoricity detection altogether. For datasets like OntoNotes which don’t label singletons, an alternative to filtering out non-referential mentions is to run coreference resolution, and then simply delete any candidate mentions which were not corefered with another mention. This likely doesn’t work as well as explicitly modeling referentiality, and cannot solve the problem of detecting singletons, which is important for tasks like entity linking.
Victoria Chen
 her pay she
 Megabucks Bank her
 the38-year-old Megabucks
 the company Lotsabucks
  
21.4 • ARCHITECTURES FOR COREFERENCE ALGORITHMS 427 as make it in advance, but make them in Hollywood did not occur at all). These
N-gram contexts can be used as features in a supervised anaphoricity classifier.
21.4 Architectures for Coreference Algorithms
mention-pair mention-pair
Modern systems for coreference are based on supervised neural machine learning, supervised from hand-labeled datasets like OntoNotes. In this section we overview the various architecture of modern systems, using the categorization of Ng (2010), which distinguishes algorithms based on whether they make each coreference deci- sion in a way that is entity-based—representing each entity in the discourse model— or only mention-based—considering each mention independently, and whether they use ranking models to directly compare potential antecedents. Afterwards, we go into more detail on one state-of-the-art algorithm in Section 21.6.
21.4.1 The Mention-Pair Architecture
We begin with the mention-pair architecture, the simplest and most influential coreference architecture, which introduces many of the features of more complex algorithms, even though other architectures perform better. The mention-pair ar- chitecture is based around a classifier that— as its name suggests—is given a pair of mentions, a candidate anaphor and a candidate antecedent, and makes a binary classification decision: coreferring or not.
Let’s consider the task of this classifier for the pronoun she in our example, and assume the slightly simplified set of potential antecedents in Fig. 21.2.
For each pair of a mention (like she), and a potential antecedent mention (like Victoria Chen or her), the mention-pair classifier assigns a probability of a coreference link.
For each prior mention (Victoria Chen, Megabucks Banking, her, etc.), the binary classifier computes a probability: whether or not the mention is the antecedent of she. We want this probability to be high for actual antecedents (Victoria Chen, her, the 38-year-old) and low for non-antecedents (Megabucks Banking, her pay).
Early classifiers used hand-built features (Section 21.5); more recent classifiers use neural representation learning (Section 21.6)
For training, we need a heuristic for selecting training samples; since most pairs of mentions in a document are not coreferent, selecting every pair would lead to a massive overabundance of negative samples. The most common heuristic, from (Soon et al., 2001), is to choose the closest antecedent as a positive example, and all pairs in between as the negative examples. More formally, for each anaphor mention mi we create
• one positive instance (mi,mj) where mj is the closest antecedent to mi, and
  p(coref|”Victoria Chen”,”she”)
Victoria Chen Megabucks Banking her her pay the 37-year-old she
p(coref|”Megabucks Banking”,”she”)
    Figure 21.2
 
428 CHAPTER 21 • COREFERENCE RESOLUTION
• a negative instance (mi,mk) for each mk between mj and mi
Thus for the anaphor she, we would choose (she, her) as the positive example and no negative examples. Similarly, for the anaphor the company we would choose (the company, Megabucks) as the positive example and (the company, she) (the com- pany, the 38-year-old) (the company, her pay) and (the company, her) as negative examples.
Once the classifier is trained, it is applied to each test sentence in a clustering step. For each mention i in a document, the classifier considers each of the prior i − 1 mentions. In closest-first clustering (Soon et al., 2001), the classifier is run right to left (from mention i − 1 down to mention 1) and the first antecedent with probability > .5 is linked to i. If no antecedent has probably > 0.5, no antecedent is selected for i. In best-first clustering, the classifier is run on all i − 1 antecedents and the most probable preceding mention is chosen as the antecedent for i. The transitive closure of the pairwise relation is taken as the cluster.
While the mention-pair model has the advantage of simplicity, it has two main problems. First, the classifier doesn’t directly compare candidate antecedents to each other, so it’s not trained to decide, between two likely antecedents, which one is in fact better. Second, it ignores the discourse model, looking only at mentions, not entities. Each classifier decision is made completely locally to the pair, without being able to take into account other mentions of the same entity. The next two models each address one of these two flaws.
21.4.2 The Mention-Rank Architecture
The mention ranking model directly compares candidate antecedents to each other, choosing the highest-scoring antecedent for each anaphor.
In early formulations, for mention i, the classifier decides which of the {1, ..., i − 1} prior mentions is the antecedent (Denis and Baldridge, 2008). But suppose i is in fact not anaphoric, and none of the antecedents should be chosen? Such a model would need to run a separate anaphoricity classifier on i. Instead, it turns out to be better to jointly learn anaphoricity detection and coreference together with a single loss (Rahman and Ng, 2009).
So in modern mention-ranking systems, for the ith mention (anaphor), we have an associated random variable yi ranging over the values Y (i) = {1, ..., i − 1, ε}. The value ε is a special dummy mention meaning that i does not have an antecedent (i.e., is either discourse-new and starts a new coref chain, or is non-anaphoric).
    p(”Victoria Chen”|”she”) p(”her”|she”) p(”the 37-year-old”|she”}) One or more of these
should be high
ε Victoria Chen Megabucks Banking her her pay the 37-year-old she}All of these should be low
p(ε|”she”) p(”Megabucks Banking”|she”) p(”her pay”|she”)
       Figure 21.3
 For each candidate anaphoric mention (like she), the mention-ranking system assigns a proba- bility distribution over all previous mentions plus the special dummy mention ε.
At test time, for a given mention i the model computes one softmax over all the antecedents (plus ε) giving a probability for each candidate antecedent (or none).

21.5 • CLASSIFIERS USING HAND-BUILT FEATURES 429
Fig. 21.3 shows an example of the computation for the single candidate anaphor she.
Once the antecedent is classified for each anaphor, transitive closure can be run over the pairwise decisions to get a complete clustering.
Training is trickier in the mention-ranking model than the mention-pair model, because for each anaphor we don’t know which of all the possible gold antecedents to use for training. Instead, the best antecedent for each mention is latent; that is, for each mention we have a whole cluster of legal gold antecedents to choose from. Early work used heuristics to choose an antecedent, for example choosing the closest antecedent as the gold antecedent and all non-antecedents in a window of two sentences as the negative examples (Denis and Baldridge, 2008). Various kinds of ways to model latent antecedents exist (Fernandes et al. 2012, Chang et al. 2013, Durrett and Klein 2013). The simplest way is to give credit to any legal antecedent by summing over all of them, with a loss function that optimizes the likelihood of all correct antecedents from the gold clustering (Lee et al., 2017). We’ll see the details in Section 21.6.
Mention-ranking models can be implemented with hand-build features or with neural representation learning (which might also incorporate some hand-built fea- tures). we’ll explore both directions in Section 21.5 and Section 21.6.
21.4.3 Entity-based Models
Both the mention-pair and mention-ranking models make their decisions about men- tions. By contrast, entity-based models link each mention not to a previous mention but to a previous discourse entity (cluster of mentions).
A mention-ranking model can be turned into an entity-ranking model simply by having the classifier make its decisions over clusters of mentions rather than individual mentions (Rahman and Ng, 2009).
For traditional feature-based models, this can be done by extracting features over clusters. The size of a cluster is a useful feature, as is its ‘shape’, which is the list of types of the mentions in the cluster i.e., sequences of the tokens (P)roper, (D)efinite, (I)ndefinite, (Pr)onoun, so that a cluster composed of {Victoria, her, the 38-year-old}wouldhavetheshapeP-Pr-D(Bjo ̈rkelundandKuhn,2014).Anentity- based model that includes a mention-pair classifier can use as features aggregates of mention-pair probabilities, for example computing the average probability of coref- erence over all mention-pairs in the two clusters (Clark and Manning 2015).
Neural models can learn representations of clusters automatically, for example by using an RNN over the sequence of cluster mentions to encode a state correspond- ing to a cluster representation (Wiseman et al., 2016), or by learning distributed rep- resentations for pairs of clusters by pooling over learned representations of mention pairs (Clark and Manning, 2016b).
However, although entity-based models are more expressive, the use of cluster- level information in practice has not led to large gains in performance, so mention- ranking models are still more commonly used.
21.5 Classifiers using hand-built features
Hand-designed features play an important role in coreference, whether as the sole input to classification in pre-neural classifiers, or as augmentations to the automatic

430 CHAPTER 21 • COREFERENCE RESOLUTION
representation learning used in state-of-the-art neural systems like the one we’ll de- scribe in Section 21.6.
In this section we describe features commonly used in logistic regression, SVM, or random forest classifiers for coreference resolution.
Given an anaphor mention and a potential antecedent mention, most feature based classifiers make use of three types of features: (i) features of the anaphor, (ii) features of the candidate antecedent, and (iii) features of the relationship between the pair. Entity-based models can make additional use of two additional classes: (iv) feature of all mentions from the antecedent’s entity cluster, and (v) features of the relation between the anaphor and the mentions in the antecedent entity cluster.
Figure 21.4 shows a selection of commonly used features, and shows the value that would be computed for the potential anaphor “she” and potential antecedent “Victoria Chen” in our example sentence, repeated below:
(21.47) Victoria Chen, CFO of Megabucks Banking, saw her pay jump to $2.3 million, as the 38-year-old also became the company’s president. It is widely known that she came to Megabucks from rival Lotsabucks.
Features that prior work has found to be particularly useful are exact string match, entity headword agreement, mention distance, as well as (for pronouns) exact attribute match and i-within-i, and (for nominals and proper names) word inclusion and cosine. For lexical features (like head words) it is common to only use words that appear enough times (perhaps more than 20 times), backing off to parts of speech for rare words.
It is crucial in feature-based systems to use conjunctions of features; one exper- iment suggested that moving from individual features in a classifier to conjunctions of multiple features increased F1 by 4 points (Lee et al., 2017). Specific conjunc- tions can be designed by hand (Durrett and Klein, 2013), all pairs of features can be conjoined (Bengtson and Roth, 2008), or feature conjunctions can be learned using decision tree or random forest classifiers (Ng and Cardie 2002a, Lee et al. 2017).
Finally, some of these features can also be used in neural models as well. Modern neural systems (Section 21.6) use contextual word embeddings, so they don’t benefit from adding shallow features like string or head match, grammatical role, or mention types. However other features like mention length, distance between mentions, or genre can complement neural contextual embedding models nicely.
21.6 A neural mention-ranking algorithm
In this section we describe the neural mention-ranking system of Lee et al. (2017). This end-to-end system doesn’t exactly have a separate mention-detection step. In- stead, it considers every possible span of text up to a set length (i.e. all n-grams of length 1,2,3...N) as a possible mention.8
Given a document D with T words, the model considers all of the N = T (T −1) 2
 text spans up to some length (in the version of Lee et al. (2018), that length is 10). Each span i starts at word START(i) and ends at word END(i).
The task is to assign to each span i an antecedent yi, a random variable ranging over the values Y (i) = {1, ..., i − 1, ε}; each previous span and a special dummy
8 But because this number of potential mentions makes the algorithm very slow and unwieldy (the model’s size is O(t4) in document length) in practice various versions of the algorithm find ways to prune the possible mentions, essentially using a mention score as something of a mention-detector.
 
21.6 • A NEURAL MENTION-RANKING ALGORITHM 431
First (last) word Head word Attributes
Length Grammaticalrole
Mention type
Victoria/she Victoria/she Sg-F-A-3- PER/Sg-F-A- 3-PER
2/1 Sub/Sub
P/Pr
First or last word (or embedding) of antecedent/anaphor Head word (or head embedding) of antecedent/anaphor The number, gender, animacy, person, named entity type attributesof(antecedent/anaphor)
length in words of (antecedent/anaphor)
The grammatical role—subject, direct object, indirect object/PP—of (antecedent/anaphor)
Type: (P)roper, (D)efinite, (I)ndefinite, (Pr)onoun) of an- tecedent/anaphor
Entity shape P-Pr-D
Entity attributes Sg-F-A-3- PER
Antecedent cluster size 3
The ‘shape’ or list of types of the mentions in the antecedent entity (cluster), i.e., sequences of (P)roper, (D)efinite, (I)ndefinite, (Pr)onoun.
The number, gender, animacy, person, named entity type attributes of the antecedent entity
Number of mentions in the antecedent cluster
Features of the Anaphor or Antecedent Mention
  Features of the Antecedent Entity
  Features of the Pair of Mentions
 Longer anaphor Pairs of any features
F True of anaphor is longer than antecedent
Victoria/she, For each individual feature, pair of type of antecedent+ 2/1, Sub/Sub,typeofanaphor
P/Pr, etc .
 Sentence distance 1 Mention distance 4 i-within-i F Cosine
Appositive F
The number of sentences between antecedent and anaphor The number of mentions between antecedent and anaphor Anaphor has i-within-i relation with antecedent
Cosine between antecedent and anaphor embeddings True if the anaphor is in the syntactic apposition relation to the antecedent. Useful even if appositives aren’t mentions (to know to attach the appositive to a preceding head)
Exact String Match F Head Word Match F Word Inclusion F
True if the strings of any two mentions from the antecedent and anaphor clusters are identical.
True if any mentions from antecedent cluster has same headword as any mention in anaphor cluster
All words in anaphor cluster included in antecedent cluster
Features of the Pair of Entities
  Features of the Document
 Genre/source N The document genre— (D)ialog, (N)ews, etc,
 Figure 21.4
   Some common features for feature-based coreference algorithms, with values for the anaphor “she” and potential antecedent “Victoria Chen”.
token ε. Choosing the dummy token means that i does not have an antecedent, either because i is discourse-new and starts a new coreference chain, or because i is non- anaphoric.
For each pair of spans i and j, the system assigns a score s(i, j) for the coref- erence link between span i and span j. The system then learns a distribution P(yi) over the antecedents for span i:
P(yi ) = 􏰐 exp(s(i, yi )) (21.48) y′∈Y(i) exp(s(i,yi))
 
432 CHAPTER 21 • COREFERENCE RESOLUTION
This score s(i, j) includes three factors: m(i); whether span i is a mention; m( j);
whether span j is a mention; and c(i, j); whether j is the antecedent of i:
s(i, j) = m(i) + m( j) + c(i, j) (21.49)
For the dummy antecedent ε, the score s(i,ε) is fixed to 0. This way if any non- dummy scores are positive, the model predicts the highest-scoring antecedent, but if all the scores are negative it abstains.
The scoring functions m(i) and c(i, j) are based on a vector gi that represents span i:
m(i) = wm ·FFNNm(gi) (21.50) c(i,j) = wc·FFNNc([gi,gj,gi◦gj,φ(i,j)]) (21.51)
The antecedent score c(i, j) takes as input a representation of the spans i and j, but also the element-wise similarity of the two spans to each other gi ◦ g j (here ◦ is element-wise multiplication). The antecedent score c also considers a feature vec- tor φ(i, j) that encodes useful features like mention distances, and also information about the speaker and genre.
The representation for each span, gi, can be computed with a biLSTM or with BERT. In the biLSTM version, the representation gi for span i is a concatenation of the biLSTM hidden representations of the start and end tokens of the span, an attention-based representation of the head, and a feature vector containing only one feature: the length of span i:
gi = [hSTART(i),hEND(i),hATT(i),φ(i)] (21.52) These are computed as follows. The output of the biLSTM for each word wt of the
input is ht :
ht = [ht,ht]
The attention representation is computed as usual; the system learns a weight vector
wα , and computes its dot product with the hidden state ht transformed by a FFNN: αt = wα · FFNNα (ht ) (21.54)
The attention score is normalized into a distribution via a softmax:
→− forward →−
ht = LSTM (ht−1,wt)
←− forward ←−
ht = LSTM (ht+1,wt)
→− ←−
(21.53)
ai,t = 􏰐 exp(αt) (21.55) END(i) exp(αk)
 k=START(i)
And then the attention distribution is used to create a vector hATT(i) which is an
attention-weighted sum of words in span i:
E N􏰑D ( i ) t=START(i)
Fig. 21.5 from Lee et al. (2017) shows the biLSTM computation of the span representation and the mention score.
hATT(i) =
ai,t ·wt (21.56)

21.6 • A NEURAL MENTION-RANKING ALGORITHM 433
Service
Computation of the span representation (using the biLSTM encoder) and the
Service contacted the
+
the co
    MeMnteinotnionscsocorre (sm)
Span Srpeapnrerespernetsaentitoatnio(ng()g)
SpSapnanhheeaad (xhö) ) att
BidireBcitdiiorencatiloLnaSlTLSMTM(h()x∗)
General Electric
+
Electric said the
+
the Postal Service
+
General Electric
Service contacted the
+
Electric said the
the company
+
the Posta
+
company
Input wWoorrd e&mcbhaerdadctienrgs
Mention score (sm)
Span representation (g)
S p a n h e a d ( xö ) +
General Electric said ∗ the Postal Bidirectional LSTM (x )
+
contacted
embedding (x) (ELMo)
Service
the
l
 Figure 21.5
 Figure 1: First step of the end-to-end coreference resolution model, which computes embedding repre-
mention score in the end-to-end coreference model of Lee et al. (2017). The model considers sentations of spans for scoring potential entity mentions. Low-scoring spans are pruned, so that only a
all spans up to a maximum width; the figure shows a small subset of these. Figure after Lee
meat naal.g(e2a0b1le7)n.umber of spans is considered for coreference decisions. In general, the model considers all Word & character
possible spans up to a maximum width, but we depict here only a small subset.
embedding (x)
In the BERT version, this entire biLSTM encoder is replaced with BERT. The
General Electric said the Postal Service contacted the span representations g are instead computedabboyvecoarnecactoemnpautitnedg vthiae sfitarnsdtaardndfeleads-tforward
Softmax (P yi | D )
sthecompany,ε =à
i
Figure 1: First step of the end-to-end coreference resolution model, which computes e word-pieces of the span, plus the attended venresuioranl noeftwaollrkws:ord pieces in the span
s the csoempnantya, tions of spthae ncosmpafnoy,r scoring potential entity mentions. Low-scoring spans are pruned (Joshi et al., 2019).
Coreference General Electric the Postal Service
score (s) manageable number of spans is considered for coreference decisions. In general, the mod
Fig. 21.6 shows the computation of the score s for the three possible antecedents sm(i) = wm · FFNNm(gi)
of the company in the example sentence from Fig. 21.5.
Antecedentscore(sa)
F s t s o
possible spans up to a maximum width, but we depict here only a small subset. sa(i,j)=wa ·FFNNa([gi,gj,gi ◦gj,φ(i,j)])
Mention score (sm)
Span representation (g)
Genera
igure 2: Second cores are compu ations. Thefina pans is computed f both spans and
By fixing the s
ot proadbucotv,e◦a on, and FFNN de
    Softmax (P yi | D )
sthecompany,ε =à
where · denotes the d
element-wise multiplicati
feed-forward neural netw s the company,
the Postal Service linear mapping from inpu
The antecedent scorin cludes explicit element- span gi ◦ gj and a feature speaker and genre inform and the distance between
l Electric the Postal Service the company
s the company, Coreference General Electric
ssctoerpe (osf) our model. Antecedent
   ted from pairs of span represen-
l coreference score of a pair of
Antecedent score (s(ca)
by summing the mention scores
 Mention score (sm))
their pairwise antecedent score.
Span representation (g)
General Electric the Postal Service the company core of the dummy antecedent ε
Span
Representations
element Two fetyepde-sforf
neural n
ork that compute
t to output vector
sm(i g function sa(i
wise similarity sa(i,j
vector φ(i, j) e ation from the m
where · the two spans.
oF0ig,uthrem2o1d.6e
t     l prTehdeicctsotmhepubteastioscnoorifngthaensteccoerdeesntfor the three possible antecedents of the com- mation are crucial to accurately predicting
ifpany inotnh-eduemxamFmyipglseucorsreenst2ea:nrecSepeforcsoiomtinvFed,igas.nt2ed1pi.t5o.abfF-iogurre amftoerdLeele. eAt anl.te(2c0e1d7e).nt
coreference links: the context surrounding
stains if they aresacllonregsataivre. computed from pairs of span represen- The antecedent scoring functi the mention span and the internal structure
A challenging aspect of this model is that its cludes explicit element-wise sim tations. The final coreference score of a pair of
At inference time, some method is generally used to prune the mentions (for
within the span. We use a bidirectional
example usingsptahnesmisenctoiomnpsuctoerde bmyasuamfimltienrgtothkeempeontliyonthsecboersetsfew smpeantiognis◦ gj and a feature vector φ
size is O(T4) in the document length. As we will
LSTM (Hochreiter and Schmidhuber, 1997) to en-
as a function like 0.4T of the sentence length T). Then the joint distribsputeiaokneorfand genre information fro
see in Section 5, the above factoring enables ag-
of both spans and their pairwicsoedeatnhetelecxeidcaelnintfosrcmoarteio.n of both the inside and
gressive pruning of spans that are unlikely to be-
antecedents for each document is computed in a forward pass. Finally, we can then
long to a coreference cluster according the men-
outside of each span. We also inaclnudetahneadtteisntiaonce between the two s
do transitive closure on the antecedents to create a final clustering for the document.
tionscores (i). m
mechanism over words in each span to model head
Span Representations Two t to 0, the model predicts the bestWsceoarsisnumgeavnetcetcorerdeepnretsentations of each word
For training, we don’t have a single gold antecedent for each mention; instead
By fixing the score of the wduormdsm. y antecedent ε
the coreference labeling only gives us each entire cluster of coreferent mentions, and
Scoring Architecture We propose an end-to-
a mention has a latent antecedent. We therefor use a loss function that mmaxaitmioiznes are crucial to accurat
end neural architfecatunrye tnhaotnc-odmupmutmesythsecaobroevse are positiveT, and it ab-
the sum of the coreference probability of any of the legal antecedents. For a given
scores given the document and its metadata.
stains if they are all negative.
coreference links: the contex trained word embeddings and 1-dimensional con-
mention i with possible antecedents Y(i), let GOLD(i) be the set of mentions in the
At the core of the model are vector representa- goldclusterconAtaincihngalil.enSginincgethaespsecttofofmethnitisonmsodceculrirsingthbaetfoitrseiisY(i),the
tions g for each possible span i, which we de-
i size is O(T 4) in the document length. As we will
{x ,...,x }, which are composed of fixed pre-
the mention span and the int volution neural networks (CNN) over characters
(see Section 7.1 for details) within the span. We use set of mentions in that gold cluster that also occur before i is Y (i) ∩ GOLD(i). We
scribe in detail in the following section. Given To compute vector representatLioSnsToMf ea(cHh ospcahnr, eiter and Schmidhub
see in Section 5, the above factoring enables ag-
these span representations, the scoring functions we first use bidirectional LSTMs to encode every
gressive pruning of spans that are unlikely to be- long to a coreference cluster according the men- tion score sm(i).
code the lexical information of bot outside of each span. We also incl mechanism over words in each spa words.
drenocteosmputed via standar
notes a etworks:
sanon- s.
) = wm · FFNNm(gi) ,j) in-
of each
) = wa · FFNNa([gi,gj,gi
ncoding
etadata
denotes the dot produ
-wise multiplication, and wianrfdor-neural network that c
linear mapping from input to outp
                        Scoring Architecture We propose an end-to-
We assume vector representation
m
+
m
d
◦
F o
u
o i
m p
y e
e a
h u n

                                                                                                                  434 CHAPTER 21 • COREFERENCE RESOLUTION therefore want to maximize:
21.7
Evaluation of Coreference Resolution
MUC F-measure
3
 2 3 4 5 6 à 8 9 à
i,t
be seen in Example 1. The model pays attention
B
B is mention-based rather than link-based. For each mention in the reference matches the most attended word. Frequency: % of ence link with the four-story building.
y ˆ ∈ Y ( i ) ∩ 􏰑G O L D ( i )
If a mention i is not in a gold cluster GOLD(i) = ε.
To turn this probability into a loss function, we’ll use the cross-entropy loss
function we defined in Eq. 5.11 in Chapter 5, by taking the − log of the probability. If we then sum over all mentions, we get the final loss function for training:
􏰑N 􏰑
L= −log P(yˆ) (21.58)
i = 2 yˆ ∈ Y ( i ) ∩ G O L D ( i )
Fig. 21.7 shows example predictions from the model, showing the attention weights, which Lee et al. (2017) find correlate with traditional semantic heads. Note that
(
A fire in a Bangladeshi garment factory) has left at least 37 people dead and 100 hospitalized. Most the model gets the second example wrong, presumably because attendants and pilot
1 ofthedeceasedwerekilledinthecrushasworkerstriedtoflee( likely have nearby word embeddings.
States making (
example, showing one correct example and one mistake. Bold, parenthesized spans are men- 4 wife, but few Americans seem to care. Here’s Jeanie Mowth. What a difference two decades make. tions in the predicted cluster. The amount of red color on a word indicates the head-finding
(
their) first stop today in New York. It’s Charles’ first opportunity to showcase his new Charles and Diana) visited a JC Penney’s on the prince’s last official US tour. Twenty years later
attention weight a in (21.55). Figure adapted from Lee et al. (2017). here’s the prince wii,th his new wife.
5 Also such location devices, (
will be able to use smoke signals as a way of trying to, let the rescuer locate (
some ships) have smoke floats (
Table 4: Examples predictions from the development data. Each row depicts a single coreference cluster
predicted by our model. Bold, parenthesized spans indicate mentions in the predicted cluster. The redness of each word indicates the weight of the head-finding attention mechanism (ai,t in Section 4).
We evaluate coreference algorithms model-theoretically, comparing a set of hypoth-
àà
6à
Constituency precision 9.4
esis chains or clustersHHeadpwroorddpureciesidonby the system against a set of gold or reference
Our qualitative analysis in Table 4 highlights the chains or clusters R from a human labeling, and reporting precision and recall.
9à Frequency
8à
àà However, there are a wide variety of meisthaovdisufaolizradtioninogf tahissincgolemcporaerfiesreonc.e Icnlufsatecrt,
strengths and weaknesses of our model. Each row there are 5 common metrics used to evaluapteredciocrtedfebryenthceemaoldgeol.ritBhomldse:d tshpeanlsininkpbaaresne-d
5à
M4Uà C (Vilain et al., 1995) and BLANC (Recasens and Hovy 2011, Luo et al. 2014)
3à 3 ness of a word indicates its weight from the head- metrics,thementionbasedB metric(BaggaandBaldwin,1998),theentitybased
in Section 4). Strube, 2016). Strengths The effectiveness of the attention
2à finding attention mechanism (a
CEàAF metric (Luo, 2005), and the link based entity aware LEA metric (Moosavi and
FRig.urPer4e:ciIsnidoirnecitsmtehaesunreumofbmeernotiofncpormecmision links divided by the number of links in H.
ment factory, allowing it to successfully predict Recall is the number of common links divided by the number of links in R; This
using agreement with gold syntax. Constituency
the coreference link with the blaze. For a sub-
precision: % of unpruned spans matching syn-
makes MUC biased toward systems that psrpoadnuocfethlaatrmgentciohna,iansBa(nagnladdefsehwi gearrmenentittifaecs-),
tactic constituents. Head word precision: % of
tory, the model pays most attention instead to fac- and it ignores singletons, since they don’t involve links.
unpruned constituents whose syntactic head word
3 tory, allowing it successfully predict the corefer-
gcohldasipna,nws weicthoemacphuwteidath.precision and recall, and then we take a weighted sum over all The task-specific nature of the attention mecha-
N mentions in the document to compute a precision and recall for the entire task. For nism is also illustrated in Example 4. The model
high, since no explicit supervision of syntactic heads is provided. The model simply learns from the clustering data that these head words are useful for making coreference decisions.
generally pays attention to coordinators more than the content of the coordination, since coordinators, such as and, provide strong cues for plurality.
The model is capable of detecting relatively long and complex noun phrases, such as a re- gion of central Italy bordering the Adriatic Sea in Example 2. It also appropriately pays atten-
P(yˆ) (21.57)
the blaze) in the four-story building.
a Bangladeshi garment factory) has left at least 37 people dead and 100 hospitalized. Most
the four-story building).
A fire in (
of the deceased were killed in the crush as workers tried to flee the blaze in (
   We are looking for (
2 mountainous and includes Mt. Corno, the highest peak of the Apennines. (
The area) is mostly sheep, good clean-living, healthy sheep, and an Italian entrepreneur has an idea about how to make a
a region of central Italy bordering the Adriatic Sea). (
It) also includes a lot of
            little money of them.
3(
 The flight attendants) have until 6:00 today to ratify labor concessions. ( crew did so yesterday.
The pilots’) union and ground
       (
Prince Ch
Figure 21.7
 arles and his new wife Camilla) have jumped across the pond and are touring the United Sample predictions from the Lee et al. (2017) model, with one cluster per
they) can toss out so the man overboard them).
Qualitative Analysis
theses belong to the predicted cluster, and the red-
Let’s just explore two of the metrics. The MUC F-measure (Vilain et al., 1995)
Span width
mechanism for making coreference decisions can
is based on the number of coreference links (pairs of mentions) common to H and to fire in the span A fire in a Bangladeshi gar-
%

21.8 • WINOGRAD SCHEMA PROBLEMS 435
a given mention i, let R be the reference chain that includes i, and H the hypothesis
chain that has i. The set of correct mentions in H is H ∩ R. Precision for mention i
is thus |H ∩R| , and recall for mention i thus |H ∩R| . The total precision is the weighted |H| |R|
sum of the precision for mention i, weighted by a weight wi. The total recall is the weighted sum of the recall for mention i, weighted by a weight wi. Equivalently:
  􏰑N Precision =
i=1 􏰑N
Recall =
The weight wi for each entity can be set to different values to produce different versions of the algorithm.
Following a proposal from Denis and Baldridge (2009), the CoNLL coreference competitions were scored based on the average of MUC, CEAF-e, and B3 (Pradhan et al. 2011, Pradhan et al. 2012b), and so it is common in many evaluation campaigns to report an average of these 3 metrics. See Luo and Pradhan (2016) for a detailed description of the entire set of metrics; reference implementations of these should be used rather than attempting to reimplement from scratch (Pradhan et al., 2014).
Alternative metrics have been proposed that deal with particular coreference do- mains or tasks. For example, consider the task of resolving mentions to named entities (persons, organizations, geopolitical entities), which might be useful for in- formation extraction or knowledge base completion. A hypothesis chain that cor- rectly contains all the pronouns referring to an entity, but has no version of the name itself, or is linked with a wrong name, is not useful for this task. We might instead want a metric that weights each mention by how informative it is (with names being most informative) (Chen and Ng, 2013) or a metric that considers a hypothesis to match a gold chain only if it contains at least one variant of a name (the NEC F1 metric of Agarwal et al. (2019)).
21.8 Winograd Schema problems
From early on in the field, researchers have noted that some cases of coreference are quite difficult, seeming to require world knowledge or sophisticated reasoning to solve. The problem was most famously pointed out by Winograd (1972) with the following example:
(21.59) The city council denied the demonstrators a permit because
a. they feared violence.
b. they advocated violence.
Winograd noticed that the antecedent that most readers preferred for the pro- noun they in continuation (a) was the city council, but in (b) was the demonstrators. He suggested that this requires understanding that the second clause is intended as an explanation of the first clause, and also that our cultural frames suggest that city councils are perhaps more likely than demonstrators to fear violence and that demonstrators might be more likely to advocate violence.
In an attempt to get the field of NLP to focus more on methods involving world knowledge and common-sense reasoning, Levesque (2011) proposed a challenge
wi wi
# of correct mentions in hypothesis chain containing entityi #ofmentionsinhypothesischaincontainingentityi
# of correct mentions in hypothesis chain containing entityi #ofmentionsinreferencechaincontainingentityi
  i=1

436
CHAPTER 21 • COREFERENCE RESOLUTION
Winograd schema
task called the Winograd Schema Challenge.9 The problems in the challenge task are coreference problems designed to be easily disambiguated by the human reader, but hopefully not solvable by simple techniques such as selectional restrictions, or other basic word association methods.
The problems are framed as a pair of statements that differ in a single word or phrase, and a coreference question:
(21.60) The trophy didn’t fit into the suitcase because it was too large. Question: What was too large? Answer: The trophy
(21.61) The trophy didn’t fit into the suitcase because it was too small. Question: What was too small? Answer: The suitcase
The problems have the following characteristics:
1. The problems each have two parties
2. A pronoun preferentially refers to one of the parties, but could grammatically
also refer to the other
3. A question asks which party the pronoun refers to
4. If one word in the question is changed, the human-preferred answer changes
to the other party
The kind of world knowledge that might be needed to solve the problems can vary. In the trophy/suitcase example, it is knowledge about the physical world; that a bigger object cannot fit into a smaller object. In the original Winograd sentence, it is stereotypes about social actors like politicians and protesters. In examples like the following, it is knowledge about human actions like turn-taking or thanking.
(21.62) Bill passed the gameboy to John because his turn was [over/next]. Whose turn was [over/next]? Answers: Bill/John
(21.63) Joan made sure to thank Susan for all the help she had [given/received]. Who had [given/received] help? Answers: Susan/Joan.
Although the Winograd Schema was designed to require common-sense rea- soning, a large percentage of the original set of problem can be solved by pre- trained language models, fine-tuned on Winograd Schema sentences (Kocijan et al., 2019). Large pretrained language models encode an enormous amount of world or common-sense knowledge! The current trend is therefore to propose new datasets
with increasingly difficult Winograd-like coreference resolution problems like KNOWREF (Emami et al., 2019), with examples like:
(21.64) Marcus is undoubtedly faster than Jarrett right now but in [his] prime the gap wasn’t all that big.
In the end, it seems likely that some combination of language modeling and knowl- edge will prove fruitful; indeed, it seems that knowledge-based models overfit less to lexical idiosyncracies in Winograd Schema training sets (Trichelair et al., 2018),
21.9 Gender Bias in Coreference
As with other aspects of language processing, coreference models exhibit gender and other biases (Zhao et al. 2018a, Rudinger et al. 2018, Webster et al. 2018).
9 Levesque’s call was quickly followed up by Levesque et al. (2012) and Rahman and Ng (2012), a competition at the IJCAI conference (Davis et al., 2017), and a natural language inference version of the problem called WNLI (Wang et al., 2018).
 
21.9 • GENDER BIAS IN COREFERENCE 437
For example the WinoBias dataset (Zhao et al., 2018a) uses a variant of the Wino- grad Schema paradigm to test the extent to which coreference algorithms are biased toward linking gendered pronouns with antecedents consistent with cultural stereo- types. As we summarized in Chapter 6, embeddings replicate societal biases in their training test, such as associating men with historically sterotypical male occupa- tions like doctors, and women with stereotypical female occupations like secretaries (Caliskan et al. 2017, Garg et al. 2018).
A WinoBias sentence contain two mentions corresponding to stereotypically- male and stereotypically-female occupations and a gendered pronoun that must be linked to one of them. The sentence cannot be disambiguated by the gender of the pronoun, but a biased model might be distracted by this cue. Here is an example sentence:
(21.65) The secretary called the physiciani and told himi about a new patient [pro-stereotypical]
(21.66) The secretary called the physiciani and told heri about a new patient [anti-stereotypical]
Zhao et al. (2018a) consider a coreference system to be biased if it is more accu- rate at linking pronouns consistent with gender stereotypical occupations (e.g., him with physician in (21.65)) than linking pronouns inconsistent with gender-stereotypical occupations (e.g., her with physician in (21.66)). They show that coreference sys- tems of all architectures (rule-based, feature-based machine learned, and end-to- end-neural) all show significant bias, performing on average 21 F1 points worse in the anti-stereotypical cases.
One possible source of this bias is that female entities are significantly un- derrepresented in the OntoNotes dataset, used to train most coreference systems. Zhao et al. (2018a) propose a way to overcome this bias: they generate a second gender-swapped dataset in which all male entities in OntoNotes are replaced with female ones and vice versa, and retrain coreference systems on the combined orig- inal and swapped OntoNotes data, also using debiased GloVE embeddings (Boluk- basi et al., 2016). The resulting coreference systems no longer exhibit bias on the WinoBias dataset, without significantly impacting OntoNotes coreference accuracy. In a follow-up paper, Zhao et al. (2019) show that the same biases exist in ELMo contextualized word vector representations and coref systems that use them. They showed that retraining ELMo with data augmentation again reduces or removes bias in coreference systems on WinoBias.
Webster et al. (2018) introduces another dataset, GAP, and the task of Gendered Pronoun Resolution as a tool for developing improved coreference algorithms for gendered pronouns. GAP is a gender-balanced labeled corpus of 4,454 sentences with gendered ambiguous pronouns (by contrast, only 20% of the gendered pro- nouns in the English OntoNotes training data are feminine). The examples were created by drawing on naturally occurring sentences from Wikipedia pages to create hard to resolve cases with two named entities of the same gender and an ambiguous pronoun that may refer to either person (or neither), like the following:
(21.67) In May, Fujisawa joined Mari Motohashi’s rink as the team’s skip, moving back from Karuizawa to Kitami where she had spent her junior days.
Webster et al. (2018) show that modern coreference algorithms perform signif- icantly worse on resolving feminine pronouns than masculine pronouns in GAP. Kurita et al. (2019) shows that a system based on BERT contextualized word repre- sentations shows similar bias.
 
438 CHAPTER 21 • COREFERENCE RESOLUTION 21.10 Summary
This chapter introduced the task of coreference resolution.
• This is the task of linking together mentions in text which corefer, i.e. refer to the same discourse entity in the discourse model, resulting in a set of coreference chains (also called clusters or entities).
• Mentions can be definite NPs or indefinite NPs, pronouns (including zero pronouns) or names.
• The surface form of an entity mention is linked to its information status (new, old, or inferrable), and how accessible or salient the entity is.
• Some NPs are not referring expressions, such as pleonastic it in It is raining.
• Many corpora have human-labeled coreference annotations that can be used for supervised learning, including OntoNotes for English, Chinese, and Ara-
bic, ARRAU for English, and AnCora for Spanish and Catalan.
• Mention detection can start with all nouns and named entities and then use
anaphoricity classifiers or referentiality classifiers to filter out non-mentions.
• Threecommonarchitecturesforcoreferencearemention-pair,mention-rank,
and entity-based, each of which can make use of feature-based or neural clas-
sifiers.
• Modern coreference systems tend to be end-to-end, performing mention de-
tection and coreference in a single end-to-end architecture.
• Algorithms learn representations for text spans and heads, and learn to com-
pare anaphor spans with candidate antecedent spans.
• Coreferencesystemsareevaluatedbycomparingwithgoldentitylabelsusing
precision/recall metrics like MUC, B3, CEAF, BLANC, or LEA.
• The Winograd Schema Challenge problems are difficult coreference prob- lems that seem to require world knowledge or sophisticated reasoning to solve.
• Coreferencesystemsexhibitgenderbiaswhichcanbeevaluatedusingdatasets like Winobias and GAP.
Bibliographical and Historical Notes
Hobbs algorithm
Coreference has been part of natural language understanding since the 1970s (Woods et al. 1972, Winograd 1972). The discourse model and the entity-centric foundation of coreference was formulated by Karttunen (1969) (at the 3rd COLING confer- ence), playing a role also in linguistic semantics (Heim 1982, Kamp 1981). But it was Bonnie Webber’s (1978) dissertation and following work (Webber 1983) that explored the model’s computational aspects, providing fundamental insights into how entities are represented in the discourse model and the ways in which they can license subsequent reference. Many of the examples she provided continue to chal- lenge theories of reference to this day.
The Hobbs algorithm10 is a tree-search algorithm that was the first in a long series of syntax-based methods for identifying reference robustly in naturally occur- ring text. The input to the Hobbs algorithm is a pronoun to be resolved, together
10 ThesimpleroftwoalgorithmspresentedoriginallyinHobbs(1978).
 
BIBLIOGRAPHICAL AND HISTORICAL NOTES 439
with a syntactic (constituency) parse of the sentences up to and including the cur- rent sentence. The details of the algorithm depend on the grammar used, but can be understand from a a simplified version due to Kehler et al. (2004) that just searches through the list of NPs in the current and prior sentences. This simplified Hobbs algorithm searches NPs in the following order: “(i) in the current sentence from right-to-left, starting with the first NP to the left of the pronoun, (ii) in the previous sentence from left-to-right, (iii) in two sentences prior from left-to-right, and (iv) in the current sentence from left-to-right, starting with the first noun group to the right of the pronoun (for cataphora). The first noun group that agrees with the pronoun with respect to number, gender, and person is chosen as the antecedent” (Kehler et al., 2004).
Lappin and Leass (1994) was an influential entity-based system that used weights to combine syntactic and other features, extended soon after by Kennedy and Bogu- raev (1996) whose system avoids the need for full syntactic parses.
Approximately contemporaneously centering (Grosz et al., 1995) was applied to pronominal anaphora resolution by Brennan et al. (1987), and a wide variety of work followed focused on centering’s use in coreference (Kameyama 1986, Di Euge- nio 1990, Walker et al. 1994, Di Eugenio 1996, Strube and Hahn 1996, Kehler 1997a, Tetreault 2001, Iida et al. 2003). Kehler and Rohde (2013) show how centering can be integrated with coherence-driven theories of pronoun interpretation. See Chap- ter 22 for the use of centering in measuring discourse coherence.
Coreference competitions as part of the US DARPA-sponsored MUC confer- ences provided early labeled coreference datasets (the 1995 MUC-6 and 1998 MUC- 7 corpora), and set the tone for much later work, choosing to focus exclusively on the simplest cases of identity coreference (ignoring difficult cases like bridging, metonymy, and part-whole) and drawing the community toward supervised machine learning and metrics like the MUC metric (Vilain et al., 1995). The later ACE eval- uations produced labeled coreference corpora in English, Chinese, and Arabic that were widely used for model training and evaluation.
This DARPA work influenced the community toward supervised learning be- ginning in the mid-90s (Connolly et al. 1994, Aone and Bennett 1995, McCarthy and Lehnert 1995). Soon et al. (2001) laid out a set of basic features, extended by Ng and Cardie (2002b), and a series of machine learning models followed over the next 15 years. These often focused separately on pronominal anaphora resolu- tion (Kehler et al. 2004, Bergsma and Lin 2006), full NP coreference (Cardie and Wagstaff 1999, Ng and Cardie 2002b, Ng 2005a) and definite NP reference (Poesio and Vieira 1998, Vieira and Poesio 2000), as well as separate anaphoricity detection (Bean and Riloff 1999, Bean and Riloff 2004, Ng and Cardie 2002a, Ng 2004), or singleton detection (de Marneffe et al., 2015).
The move from mention-pair to mention-ranking approaches was pioneered by Yang et al. (2003) and Iida et al. (2003) who proposed pairwise ranking methods, then extended by Denis and Baldridge (2008) who proposed to do ranking via a soft- max over all prior mentions. The idea of doing mention detection, anaphoricity, and coreference jointly in a single end-to-end model grew out of the early proposal of Ng (2005b) to use a dummy antecedent for mention-ranking, allowing ‘non-referential’ to be a choice for coreference classifiers, Denis and Baldridge’s (2007) joint sys- tem combining anaphoricity classifier probabilities with coreference probabilities, the Denis and Baldridge (2008) ranking model, and the Rahman and Ng (2009) proposal to train the two models jointly with a single objective.
Simple rule-based systems for coreference returned to prominence in the 2010s,

440
CHAPTER 21 • COREFERENCE RESOLUTION
metonymy
partly because of their ability to encode entity-based features in a high-precision way (Zhou et al. 2004, Haghighi and Klein 2009, Raghunathan et al. 2010, Lee et al. 2011, Lee et al. 2013, Hajishirzi et al. 2013) but in the end they suffered from an inability to deal with the semantics necessary to correctly handle cases of common noun coreference.
A return to supervised learning led to a number of advances in mention-ranking models which were also extended into neural architectures, for example using re- inforcement learning to directly optimize coreference evaluation models Clark and Manning (2016a), doing end-to-end coreference all the way from span extraction (Lee et al. 2017, Zhang et al. 2018). Neural models also were designed to take advantage of global entity-level information (Clark and Manning 2016b, Wiseman et al. 2016, Lee et al. 2018).
Coreference is also related to the task of entity linking discussed in Chapter 23. Coreference can help entity linking by giving more possible surface forms to help link to the right Wikipedia page, and conversely entity linking can help improve coreference resolution. Consider this example from Hajishirzi et al. (2013):
(21.68) [Michael Eisner]1 and [Donald Tsang]2 announced the grand opening of [[Hong Kong]3 Disneyland]4 yesterday. [Eisner]1 thanked [the President]2 and welcomed [fans]5 to [the park]4.
Integrating entity linking into coreference can help draw encyclopedic knowl- edge (like the fact that Donald Tsang is a president) to help disambiguate the men- tion the President. Ponzetto and Strube (2006) (2007) and Ratinov and Roth (2012) showed that such attributes extracted from Wikipedia pages could be used to build richer models of entity mentions in coreference. More recent research shows how to do linking and coreference jointly (Hajishirzi et al. 2013, Zheng et al. 2013) or even jointly with named entity tagging as well (Durrett and Klein 2014).
The coreference task as we introduced it involves a simplifying assumption that the relationship between an anaphor and its antecedent is one of identity: the two coreferring mentions refer to the identical discourse referent. In real texts, the rela- tionship can be more complex, where different aspects of a discourse referent can be neutralized or refocused. For example (21.69) (Recasens et al., 2011) shows an example of metonymy, in which the capital city Washington is used metonymically to refer to the US. (21.70-21.71) show other examples (Recasens et al., 2011):
(21.69) a strict interpretation of a policy requires The U.S. to notify foreign dictators of certain coup plots ... Washington rejected the bid ...
(21.70) I once crossed that border into Ashgh-Abad on Nowruz, the Persian New Year. In the South, everyone was celebrating New Year; to the North, it was a regular day.
(21.71) In France, the president is elected for a term of seven years, while in the United States he is elected for a term of four years.
For further linguistic discussions of these complications of coreference see Puste- jovsky (1991), van Deemter and Kibble (2000), Poesio et al. (2006), Fauconnier and Turner (2008), Versley (2008), and Barker (2010).
Ng (2017) offers a useful compact history of machine learning models in coref- erence resolution. There are three excellent book-length surveys of anaphora/coref- erence resolution, covering different time periods: Hirst (1981) (early work until about 1981), Mitkov (2002) (1986-2001), and Poesio et al. (2016) (2001-2015).
Andy Kehler wrote the Discourse chapter for the 2000 first edition of this text- book, which we used as the starting point for the second-edition chapter, and there

EXERCISES 441 are some remnants of Andy’s lovely prose still in this third-edition coreference chap-
ter.
Exercises

442 CHAPTER 22 • DISCOURSE COHERENCE CHAPTER
22 Discourse Coherence
 discourse coherence
local global
And even in our wildest and most wandering reveries, nay in our very dreams, we shall find, if we reflect, that the imagination ran not altogether at adven- tures, but that there was still a connection upheld among the different ideas, which succeeded each other. Were the loosest and freest conversation to be transcribed, there would immediately be transcribed, there would immediately be observed something which connected it in all its transitions.
David Hume, An enquiry concerning human understanding, 1748
Orson Welles’ movie Citizen Kane was groundbreaking in many ways, perhaps most notably in its structure. The story of the life of fictional media magnate Charles Foster Kane, the movie does not proceed in chronological order through Kane’s life. Instead, the film begins with Kane’s death (famously murmuring “Rosebud”) and is structured around flashbacks to his life inserted among scenes of a reporter investigating his death. The novel idea that the structure of a movie does not have to linearly follow the structure of the real timeline made apparent for 20th century cinematography the infinite possibilities and impact of different kinds of coherent narrative structures.
But coherent structure is not just a fact about movies or works of art. Like movies, language does not normally consist of isolated, unrelated sentences, but instead of collocated, structured, coherent groups of sentences. We refer to such a coherent structured group of sentences as a discourse, and we use the word co- herence to refer to the relationship between sentences that makes real discourses different than just random assemblages of sentences. The chapter you are now read- ing is an example of a discourse, as is a news article, a conversation, a thread on social media, a Wikipedia page, and your favorite novel.
What makes a discourse coherent? If you created a text by taking random sen- tences each from many different sources and pasted them together, would that be a coherent discourse? Almost certainly not. Real discourses exhibit both local coher- ence and global coherence. Let’s consider three ways in which real discourses are locally coherent;
First, sentences or clauses in real discourses are related to nearby sentences in systematic ways. Consider this example from Hobbs (1979):
(22.1) John took a train from Paris to Istanbul. He likes spinach.
This sequence is incoherent because it is unclear to a reader why the second sentence follows the first; what does liking spinach have to do with train trips? In fact, a reader might go to some effort to try to figure out how the discourse could be coherent; perhaps there is a French spinach shortage? The very fact that hearers try to identify such connections suggests that human discourse comprehension involves the need to establish this kind of coherence.
By contrast, in the following coherent example:
(22.2) Jane took a train from Paris to Istanbul. She had to attend a conference.

443
the second sentence gives a REASON for Jane’s action in the first sentence. Struc- tured relationships like REASON that hold between text units are called coherence relations, and coherent discourses are structured by many such coherence relations. Coherence relations are introduced in Section 22.1.
A second way a discourse can be locally coherent is by virtue of being “about” someone or something. In a coherent discourse some entities are salient, and the discourse focuses on them and doesn’t go back and forth between multiple entities. This is called entity-based coherence. Consider the following incoherent passage, in which the salient entity seems to wildly swing from John to Jenny to the piano store to the living room, back to Jenny, then the piano again:
(22.3) John wanted to buy a piano for his living room. Jenny also wanted to buy a piano.
He went to the piano store.
It was nearby.
The living room was on the second floor.
She didn’t find anything she liked.
The piano he bought was hard to get up to that floor.
Entity-based coherence models measure this kind of coherence by tracking salient entities across a discourse. For example Centering Theory (Grosz et al., 1995), the most influential theory of entity-based coherence, keeps track of which entities in the discourse model are salient at any point (salient entities are more likely to be pronominalized or to appear in prominent syntactic positions like subject or object). In Centering Theory, transitions between sentences that maintain the same salient entity are considered more coherent than ones that repeatedly shift between entities. The entity grid model of coherence (Barzilay and Lapata, 2008) is a commonly used model that realizes some of the intuitions of the Centering Theory framework. Entity-based coherence is introduced in Section 22.3.
topically coherent
lexical cohesion
coherence relations
Centering Theory
entity grid
Finally, discourses can be locally coherent by being topically coherent: nearby sentences are generally about the same topic and use the same or similar vocab- ulary to discuss these topics. Because topically coherent discourses draw from a single semantic field or topic, they tend to exhibit the surface property known as lexical cohesion (Halliday and Hasan, 1976): the sharing of identical or semanti- cally related words in nearby sentences. For example, the fact that the words house, chimney, garret, closet, and window— all of which belong to the same semantic field— appear in the two sentences in (22.4), or that they share the identical word shingled, is a cue that the two are tied together as a discourse:
(22.4) Before winter I built a chimney, and shingled the sides of my house... I have thus a tight shingled and plastered house... with a garret and a
closet, a large window on each side....
In addition to the local coherence between adjacent or nearby sentences, dis- courses also exhibit global coherence. Many genres of text are associated with particular conventional discourse structures. Academic articles might have sections describing the Methodology or Results. Stories might follow conventional plotlines or motifs. Persuasive essays have a particular claim they are trying to argue for, and an essay might express this claim together with a structured set of premises that support the argument and demolish potential counterarguments. We’ll introduce versions of each of these kinds of global coherence.
Why do we care about the local or global coherence of a discourse? Since co- herence is a property of a well-written text, coherence detection plays a part in any

444 CHAPTER 22 • DISCOURSE COHERENCE
task that requires measuring the quality of a text. For example coherence can help in pedagogical tasks like essay grading or essay quality measurement that are try- ing to grade how well-written a human essay is (Somasundaran et al. 2014, Feng et al. 2014, Lai and Tetreault 2018). Coherence can also help for summarization; knowing the coherence relationship between sentences can help know how to se- lect information from them. Finally, detecting incoherent text may even play a role in mental health tasks like measuring symptoms of schizophrenia or other kinds of disordered language (Ditman and Kuperberg 2010, Elveva ̊g et al. 2007, Bedi et al. 2015, Iter et al. 2018).
22.1 Coherence Relations
Recall from the introduction the difference between passages (22.5) and (22.6).
coherence relation
RST nucleus satellite
(22.5) Jane took a train from Paris to Istanbul. She likes spinach.
(22.6) Jane took a train from Paris to Istanbul. She had to attend a conference.
The reason (22.6) is more coherent is that the reader can form a connection be- tween the two sentences, in which the second sentence provides a potential REASON for the first sentences. This link is harder to form for (22.5). These connections between text spans in a discourse can be specified as a set of coherence relations. The next two sections describe two commonly used models of coherence relations and associated corpora: Rhetorical Structure Theory (RST), and the Penn Discourse TreeBank (PDTB).
22.1.1 Rhetorical Structure Theory
The most commonly used model of discourse organization is Rhetorical Structure Theory (RST) (Mann and Thompson, 1987). In RST relations are defined between two spans of text, generally a nucleus and a satellite. The nucleus is the unit that is more central to the writer’s purpose and that is interpretable independently; the satellite is less central and generally is only interpretable with respect to the nucleus. Some symmetric relations, however, hold between two nuclei.
Below are a few examples of RST coherence relations, with definitions adapted from the RST Treebank Manual (Carlson and Marcu, 2001).
Reason: The nucleus is an action carried out by an animate agent and the satellite is the reason for the nucleus.
(22.7) [NUC Jane took a train from Paris to Istanbul.] [SAT She had to attend a conference.]
Elaboration: The satellite gives additional information or detail about the situation presented in the nucleus.
(22.8) [NUC Dorothy was from Kansas.] [SAT She lived in the midst of the great Kansas prairies.]
Evidence: The satellite gives additional information or detail about the situation presented in the nucleus. The information is presented with the goal of convince the reader to accept the information presented in the nucleus.
(22.9) [NUC Kevin must be here.] [SAT His car is parked outside.]

22.1 • COHERENCE RELATIONS 445 Attribution: The satellite gives the source of attribution for an instance of reported
speech in the nucleus.
(22.10) [SAT Analysts estimated] [NUC that sales at U.S. stores declined in the quarter, too]
List: In this multinuclear relation, a series of nuclei is given, without contrast or explicit comparison:
(22.11) [NUC Billy Bones was the mate; ] [NUC Long John, he was quartermaster]
RST relations are traditionally represented graphically; the asymmetric Nucleus- Satellite relation is represented with an arrow from the satellite to the nucleus:
We can also talk about the coherence of a larger text by considering the hierar- chical structure between coherence relations. Figure 22.1 shows the rhetorical struc- ture of a paragraph from Marcu (2000a) for the text in (22.12) from the Scientific American magazine.
(22.12) With its distant orbit–50 percent farther from the sun than Earth–and slim atmospheric blanket, Mars experiences frigid weather conditions. Surface temperatures typically average about -60 degrees Celsius (-76 degrees Fahrenheit) at the equator and can dip to -123 degrees C near the poles. Only the midday sun at tropical latitudes is warm enough to thaw ice on occasion, but any liquid water formed in this way would evaporate almost instantly because of the low atmospheric pressure.
    evidence
Kevin must be here. His car is parked outside
     Title (1) Mars
2-9
2-3
(3) Mars experiences frigid weather conditions.
evidence
 background
4-9
4-5
List
elaboration-additional
  (2) WIth its distant orbit <p> -- 50 percent farther from the sun than Earth -- </p> and slim atmospheric blanket,
6-9 Contrast
    (4) Surface temperatures typically average about -60 degrees Celsius <p> (-76 degrees Fahrenheit)</p> at the equator
(5)
and can dip to -123 degrees C near the poles.
6-7
purpose
(6)
Only the midday sun at tropical latitudes is warm enough
8-9 explanation-argumentative
   (7)
to thaw ice on occasion,
(8)
but any liquid water formed in this way would evaporate almost instantly
(9) because of the low atmospheric pressure.
 Figure 22.1
 A discourse tree for the Scientific American text in (22.12), from Marcu (2000a). Note that asymmetric relations are represented with a curved arrow from the satellite to the nucleus.
The leaves in the Fig. 22.1 tree correspond to text spans of a sentence, clause or EDU phrase that are called elementary discourse units or EDUs in RST; these units can also be referred to as discourse segments. Because these units may correspond to arbitrary spans of text, determining the boundaries of an EDU is an important task for extracting coherence relations. Roughly speaking, one can think of discourse

446
CHAPTER 22 • DISCOURSE COHERENCE
segments as being analogous to constituents in sentence syntax, and indeed as we’ll see in Section 22.2 we generally draw on parsing algorithms to infer discourse struc- ture.
There are corpora for many discourse coherence models; the RST Discourse TreeBank (Carlson et al., 2001) is the largest available discourse corpus. It con- sists of 385 English language documents selected from the Penn Treebank, with full RST parses for each one, using a large set of 78 distinct relations, grouped into 16 classes. RST treebanks exist also for Spanish, German, Basque, Dutch and Brazilian Portuguese (Braud et al., 2017).
Now that we’ve seen examples of coherence, we can see more clearly how a coherence relation can play a role in summarization or information extraction. For example, the nuclei of a text presumably express more important information than the satellites, which might be dropped in a summary.
22.1.2 Penn Discourse TreeBank (PDTB)
PDTB The Penn Discourse TreeBank (PDTB) is a second commonly used dataset that embodies another model of coherence relations (Miltsakaki et al. 2004, Prasad et al. 2008, Prasad et al. 2014). PDTB labeling is lexically grounded. Instead of asking anno- tators to directly tag the coherence relation between text spans, they were given a
discourse connectives
list of discourse connectives, words that signal discourse relations, like because, although, when, since, or as a result. In a part of a text where these words marked a coherence relation between two text spans, the connective and the spans were then annotated, as in Fig. 22.13, where the phrase as a result signals a causal relationship between what PDTB calls Arg1 (the first two sentences, here in italics) and Arg2 (the third sentence, here in bold).
(22.13) Jewelry displays in department stores were often cluttered and uninspired. And the merchandise was, well, fake. As a result, marketers of faux gems steadily lost space in department stores to more fashionable rivals—cosmetics makers.
(22.14) In July, the Environmental Protection Agency imposed a gradual ban on virtually all uses of asbestos. (implicit=as a result) By 1997, almost all remaining uses of cancer-causing asbestos will be outlawed.
Not all coherence relations are marked by an explicit discourse connective, and so the PDTB also annotates pairs of neighboring sentences with no explicit signal, like (22.14). The annotator first chooses the word or phrase that could have been its signal (in this case as a result), and then labels its sense. For example for the am- biguous discourse connective since annotators marked whether it is using a CAUSAL or a TEMPORAL sense.
The final dataset contains roughly 18,000 explicit relations and 16,000 implicit relations. Fig. 22.2 shows examples from each of the 4 major semantic classes, while Fig. 22.3 shows the full tagset.
Unlike the RST Discourse Treebank, which integrates these pairwise coherence relations into a global tree structure spanning an entire discourse, the PDTB does not annotate anything above the span-pair level, making no commitment with respect to higher-level discourse structure.
There are also treebanks using similar methods for other languages; (22.15) shows an example from the Chinese Discourse TreeBank (Zhou and Xue, 2015). Because Chinese has a smaller percentage of explicit discourse connectives than English (only 22% of all discourse relations are marked with explicit connectives,
   
22.2 • DISCOURSE STRUCTURE PARSING 447
 Class Type
Example
  The parishioners of St. Michael and All Angels stop to chat at the church door, as members here always have. (Implicit while) In the tower, five men and women pull rhythmically on ropes attached to the same five bells that first sounded here in 1614. Also unlike Mr. Ruder, Mr. Breeden appears to be in a position to get somewhere with his agenda. (implicit=because) As a for- mer White House aide who worked closely with Congress, he is savvy in the ways of Washington.
The U.S. wants the removal of what it perceives as barriers to investment; Japan denies there are real barriers.
Not only do the actors stand outside their characters and make it clear they are at odds with them, but they often literally stand on their heads.
  TEMPORAL SYNCHRONOUS
  CONTINGENCY REASON
  COMPARISON CONTRAST
 EXPANSION CONJUNCTION
 Figure 22.2
   The four high-level semantic distinctions in the PDTB sense hierarchy
Temporal Comparison
  • Asynchronous • Contrast (Juxtaposition, Opposition)
• Synchronous (Precedence, Succession) •Pragmatic Contrast (Juxtaposition, Opposition)
• Concession (Expectation, Contra-expectation) • Pragmatic Concession
     Contingency Expansion
 • Cause (Reason, Result)
• Pragmatic Cause (Justification)
• Condition (Hypothetical, General, Unreal Present/Past, Factual Present/Past)
• Exception
• Instantiation
• Restatement (Specification, Equivalence, Generalization)
   • Pragmatic Condition (Relevance, Implicit As- • Alternative (Conjunction, Disjunction, Chosen Alterna- sertion) tive)
 • List
Figure 22.3 The PDTB sense hierarchy. There are four top-level c ̄lasses, 16 types, and 23 subtypes (not all
types have subtypes). 11 of the 16 types are commonly used for implicit argument classification; the 5 types in italics are too rare in implicit labeling to be used.
compared to 47% in English), annotators labeled this corpus by directly mapping pairs of sentences to 11 sense tags, without starting with a lexical discourse connec- tor.
(22.15) [Conn 为] [Arg2 推动图们江地区开发] ，[Arg1 韩国捐款一百万美元 设立了图们江发展基金]
“[In order to] [Arg2 promote the development of the Tumen River region], [Arg1 South Korea donated one million dollars to establish the Tumen River Development Fund].”
These discourse treebanks have been used for shared tasks on multilingual dis- course parsing (Xue et al., 2016).
22.2 Discourse Structure Parsing
   discourse parsing
Given a sequence of sentences, how can we automatically determine the coherence relations between them? This task is often called discourse parsing (even though for PDTB we are only assigning labels to leaf spans and not building a full parse

448 CHAPTER 22 • DISCOURSE COHERENCE tree as we do for RST).
22.2.1 EDU segmentation for RST parsing
RST parsing is generally done in two stages. The first stage, EDU segmentation, extracts the start and end of each EDU. The output of this stage would be a labeling like the following:
(22.16) [Mr. Rambo says]e1 [that a 3.2-acre property]e2 [overlooking the San Fernando Valley]e3 [is priced at $4 million]e4 [because the late actor Erroll Flynn once lived there.]e5
Since EDUs roughly correspond to clauses, early models of EDU segmentation first ran a syntactic parser, and then post-processed the output. Modern systems generally use neural sequence models supervised by the gold EDU segmentation in the RST Discourse Treebank. Fig. 22.4 shows an example after Wang et al. (2018) and Muller et al. (2019) of a supervised architecture that uses the biLSTM-CRF architecture we saw for named entity tagging and semantic role labeling. Here the input sentence is passed through an encoder and then passed through a biLSTM with a CRF layer on top to produce a sequence of 0s and 1, where 1 indicates the start of an EDU (except at the start of sentence).
     CRF Layer 0 0 0 1
 biLSTM
Word Representations
LSTM2 LSTM1
LSTM2 LSTM2 LSTM1 LSTM1
ENCODER
LSTM2 LSTM1
    Mr. Rambo says that ...
 Figure 22.4
 biLSTM-CRF for EDU segmentation. Word inputs can draw from any encoder for contextual embeddings like BERT.
22.2.2 RST parsing
Tools for building RST coherence structure for a discourse have long been based on syntactic parsing algorithms like shift-reduce parsing (Marcu, 1999). Many modern RST parsers since Ji and Eisenstein (2014) draw on the neural syntactic parsers we saw in Chapter 14 in Section 14.4, using representation learning to build represen- tations for each span, and training a parser to choose the correct shift and reduce actions based on the gold parses in the training set.
We’ll describe the shift-reduce parser of Yu et al. (2018). The parser state con- sists of a stack and a queue, and produces this structure by taking a series of actions on the states. Actions include:

22.2 • DISCOURSE STRUCTURE PARSING 449
• shift: pushes the first EDU in the queue onto the stack creating a single-node subtree.
• reduce(l,d):mergesthetoptwosubtreesonthestack,wherelisthecoherence relation label, and d is the nuclearity direction, d ∈ {NN,NS,SN}.
As well as the pop root operation, to remove the final tree from the stack.
Example RST discourse tree, showing four EDUs. Figure from Yu et al. (2018).
Figu   example of RST discourse tree, where {e, e2, e3, e4} are EDUs, attr and elab are
   elab
e: American Telephone & Telegraph Co. said it
e2: will lay off 75 to 85 technicians here , effective Nov. 1.
e3: The workers install , maintain and repair its private branch exchanges, e4: which are large intracompany telephone networks.
     attr
elab
e e2 e3 e4
 Figure 22.5
re 1: An
discourse relation labels, and arrows indicate the nuclearities of discourse relations.
Fig. 22.6 shows the actions the parser takes to build the structure in Fig. 22.5.
   ng. Other studies still adopt discrete syntax features proposed by statistical mode
 Step Stack Queue Action Relation
ural network models (Braud et al., 2016; Braud et al., 2017).
 1 ? e, e2, e3, e4 SH ?
ches model syntax trees in an explicit way, requiring discrete syntax parsing outp
2 e e2, e3, e4 SH ?
rsing. These approaches may suffer from the error propagation problem. Syntax tre
3 e, e2 e3, e4 RD(attr,SN) ?
vised syntax parsing model could have errors, which may propagate into discour
4 e:2 e3, e4 SH ede2
problem could be extremely serious when inputs of discourse parsing have differ
5 e:2 ,e3 e4 SH ede2
e training data of the supervised syntax parser. Recently, Zhang et al. (2017) sugg
6 e:2 ,e3,e4 ? RD(elab,NS) ede2
d, w7hich exetr:a2c,tse3s:4yntax featu?res from aRDB(i-eAlffianbe,SdNep)endencyedpea2r,sed3re(4Dozat a
8 e:4 ? PR ee2, e3e4, e\:2e3:4
d the method gives competitive performances on relation extraction. It actua
es implicitly, thus it can reduce the error propagation problem.
  Figure 22.6
 investigate
RSTdiscourseparsils, feeding them into ne
Theaboveapproauts asinputsforRSTpaes producedbyasuperse parsingmodels.Theent distributionswiththest analternativemethond Manning,2016),an ddlly
represents syntax tre Parsing the example of Fig. 22.5 using a shift-reduce parser. Figure from Yu
In this work,Twabele 1: An exthaemipmlpeliocfittshyentarxanfesaitiuoren-ebxatrsaecdtiosnysatpepmroafcohrfRorSRTSdTispcaorsuinrsge. pInarasdi-ng.
et al. (2018).
dition, we propose a transition-based neural model for this task, which is able to incorporate various
features flexibly. We exploit hierarchical bi-directional LSTMs (Bi-LSTMs) to encode texts, and further
The Yu et al. (2018) uses an encoder-decoder architecture, where the encoder eTnhaencineithiaeltrsatnastietioisn-abnasedmmpotydesltwatieth,daynndamthiceofirnacalle.stBaateserdeopnretshenptrsopaofsuedllmreosduel,t.weThsteurdeyathre threekindsof
represents the input span of words and EDUs using a hierarchical biLSTM. The
effectiveness of our proposed implicit syntax features. We conduct experiments on a standard RST dis-
actions in our trafinrssittiboiLnSsTyMstelamye:r represents the words inside an EDU, and the second represents course TreeBank (Carlson et al., 2003). First, we evaluate the performance of our proposed transition-
the EDU sequence. Given an input sentence w1,w2,...,wm, the words can be repre- basedbaseline,findsinengtethdaatsthuesumalo(dbeylsitsataibclemtobeadcdhiinegvse,csotrmonbginpateirofnosrmwaitnhcecsharfatcetrerapepmlybiendgdidnygnsaomric
• Shift (SH), which removes the first EDU in the queue onto the stack, forming a single-node subtree. oracle.Thenweevatlaugast,eothrecoenfftexctiuvaelnemssbeodfdiminpglsi)critesuylntitnagxifneaatnurienspeuxttwraocrtdedrefprroemseantBati-oAnfsfienqeudenecpen-
• Reduce (RDw) (lw,d), wwhich merges the top two subtrees on the stack, wherew l is a discourse relation dency parser. Resultxs s,hxow,.t.h.,axt th.eTihmeprleiscuitltsoyfnthaxe wfeoartdu-rleesvaerlebeiLffSeTctMivei,sgthiveinga sbeqttueernpcerfoofrhmanvcaleusetsh:an
12m
label, and d 2 {NN, NS, SN} indicates the relation nuclearity (nuclear (N) or satellite (S)). explicit Tree-LSTM (Li et al., 2015b). Our codes will be released for public under the Apache License
biLSTM(xw1 ,xw2 ,...,xwm) (22.17) 2.0 at https://github.com/yunan4nlp/NNDisParser.
hw1 ,hw2 ,...,hwm =
• Pop Root (PR), which pops out the top tree on the stack, marking the decoding being completed,
In summary, we mainly make the following two contributions in this work: (1) we propose a transition-
AnEDUofspanw ,w ,...,w thenhasbiLSTMoutputrepresentationhw,hw ,...,hw, ss+1t st
when the stack holds only one subtree and the queue is empty. s+1
based neural RST discourse parsing model with dynamic oracle, (2) we compare three different syntactic
and is represented by average pooling:
integration approaches proposed by us. The rest of the paper is o􏰑rganized as follows. Section 2 describes
Given the RST tree as shown in Figure 1, it can be gtenerated by the following action sequence: {SH,
our proposed models including the transition-based neural model, twhe dynamic oracle strategy and the x= h (22.18)
Section 4 shows the related work. Finally, section 5 draws conclusions.
1
SH, RD(attr,SN), SH, SH, RD(elab,NS), RD(elkab,SN), PR}. Table 1 shows the decoding implicit syntax feature extraction approach. Section 3tp−rese+n1ts the experiments to evaluate our models.
 k=s
process in detail. By this way, we naturally convert RST discourse parsing into predicting a sequence of
The second layer uses this input to compute a final representation of the sequence of
transition actions, where each line includes a state and next step action referring to the tree.
2 Transition-basEeDdUDriespcroesuernstaetiPoansrshin:g
2.2 Encoder-Decoder
e
eee eee
WefollowJiandEisenstein(2014),explohiti,nhga,..t.r,ahnsit=ionb-biLasSeTdMfr(axm,exwo,.r.k.,xfor)RSTdiscourse(2p2a.r1s9in)g. 12n 12n
TPhrevfriaomueswtorraknisitcionnc-ebpatusaeldly RsimSTpledainsdcofluexrsibeleptaorsuinppgorsttaurdbietrsaryexfepaltouirtess,twathiiscthichaals mbeoendewlsid,eluysing manually- The decoder is then a feedforward network W that outputs an action o based on a
used in a number of NLP tasks (Zhu et al., 2013; Dyer et al., 2015; Zhang et al., 2016). In addition, a
designed discrete features (Sagae, 2009; Heilman and Sagae, 2015; Wang et al., 2017). In this work, we
concatenation of the top three subtrees on the stack (so,s1,s2) plus the first EDU in transition-based model formalizes a certain task into predicting a sequence of actions, which is essential
propose a transition-based neural model for RST discourse parsing, which follows an encoder-decoder
similar to sequence-to-sequence models proposed recently (Bahdanau et al., 2014). In the following,
framework. Given an input sequence of EDUs {e, e2, ..., en}, the encoder computes the input represen- we first describe the transition system for RST discourse parsing, and then introduce our neural network
tations {he , he , ..., he }, and the decoder predicts next step actions conditioned on the encoder outputs. model by itsenco2der andndecoder parts, respectively. Thirdly, we present our proposed dynamic oracle
strategy aiming to enhance the transition-based model. Then we introduce the integration method of
2.2.1 Encoder
implicit syntax features. Finally we describe the training method of our neural network models.
We follow Li et al. (2016), using hierarchical Bi-LSTMs to encode the source EDU inputs, where the

450
CHAPTER 22 • DISCOURSE COHERENCE the queue (q0):
  shallow discourse parsing
o = W(hts0,hts1,hts2,heq0) (22.20)
where the representation of the EDU on the queue heq0 comes directly from the encoder, and the three hidden vectors representing partial trees are computed by average pooling over the encoder output for the EDUs in those trees:
1 􏰑j
hts = j−i+1 hek (22.21)
k=i
Training first maps each RST gold parse tree into a sequence of oracle actions, and then uses the standard cross-entropy loss (with l2 regularization) to train the system to take such actions. Give a state S and oracle action a, we first compute the decoder output using Eq. 22.20, apply a softmax to get probabilities:
pa = 􏰐 exp(oa) (22.22) a′ ∈A exp(oa′ )
and then computing the cross-entropy loss:
LCE() = −log(pa)+λ2||Θ||2 (22.23)
RST discourse parsers are evaluated on the test section of the RST Discourse Tree- bank, either with gold EDUs or end-to-end, using the RST-Pareval metrics (Marcu, 2000b). It is standard to first transform the gold RST trees into right-branching bi- nary trees, and to report four metrics: trees with no labels (S for Span), labeled with nuclei (N), with relations (R), or both (F for Full), for each metric computing micro- averaged F1 over all spans from all documents (Marcu 2000b, Morey et al. 2017).
22.2.3 PDTB discourse parsing
PDTB discourse parsing, the task of detecting PDTB coherence relations between spans, is sometimes called shallow discourse parsing because the task just involves flat relationships between text spans, rather than the full trees of RST parsing.
The set of four subtasks for PDTB discourse parsing was laid out by Lin et al. (2014) in the first complete system, with separate tasks for explicit (tasks 1-3) and implicit (task 4) connectives:
1. Findthediscourseconnectives(disambiguatingthemfromnon-discourseuses) 2. Find the two spans for each connective
3. Label the relationship between these spans
4. Assign a relation between every adjacent pair of sentences
Many systems have been proposed for Task 4: taking a pair of adjacent sentences as input and assign a coherence relation sense label as output. The setup often fol- lows Lin et al. (2009) in assuming gold sentence span boundaries and assigning each adjacent span one of the 11 second-level PDTB tags or none (removing the 5 very rare tags of the 16 shown in italics in Fig. 22.3).
A simple but very strong algorithm for Task 4 is to represent each of the two spans by BERT embeddings and take the last layer hidden state corresponding to

22.3 • CENTERING AND ENTITY-BASED COHERENCE 451
the position of the [CLS] token, pass this through a single layer tanh feedforward network and then a softmax for sense classification (Nie et al., 2019).
Each of the other tasks also have been addressed. Task 1 is to disambiguat- ing discourse connectives from their non-discourse use. For example as Pitler and Nenkova (2009) point out, the word and is a discourse connective linking the two clauses by an elaboration/expansion relation in (22.24) while it’s a non-discourse NP conjunction in (22.25):
(22.24) Selling picked up as previous buyers bailed out of their positions and aggressive short sellers—anticipating further declines—moved in.
(22.25) My favorite colors are blue and green.
Similarly, once is a discourse connective indicating a temporal relation in (22.26),
but simply a non-discourse adverb meaning ‘formerly’ and modifying used in (22.27):
(22.26) The asbestos fiber, crocidolite, is unusually resilient once it enters the lungs, with even brief exposures to it causing symptoms that show up decades later, researchers said.
(22.27) A form of asbestos once used to make Kent cigarette filters has caused a high percentage of cancer deaths among a group of workers exposed to it more than 30 years ago, researchers reported.
Determining whether a word is a discourse connective is thus a special case of word sense disambiguation. Early work on disambiguation showed that the 4 PDTB high-level sense classes could be disambiguated with high (94%) accuracy used syntactic features from gold parse trees (Pitler and Nenkova, 2009). Recent work performs the task end-to-end from word inputs using a biLSTM-CRF with BIO outputs (B-CONN, I-CONN, O) (Yu et al., 2019).
For task 2, PDTB spans can be identified with the same sequence models used to find RST EDUs: a biLSTM sequence model with pretrained contextual embedding (BERT) inputs (Muller et al., 2019). Simple heuristics also do pretty well as a base- line at finding spans, since 93% of relations are either completely within a single sentence or span two adjacent sentences, with one argument in each sentence (Biran and McKeown, 2015).
22.3 Centering and Entity-Based Coherence
  entity-based
Centering Theory
A second way a discourse can be coherent is by virtue of being “about” some entity. This idea that at each point in the discourse some entity is salient, and a discourse is coherent by continuing to discuss the same entity, appears early in functional lin- guistics and the psychology of discourse (Chafe 1976, Kintsch and Van Dijk 1978), and soon made its way to computational models. In this section we introduce two models of this kind of entity-based coherence: Centering Theory (Grosz et al., 1995), and the entity grid model of Barzilay and Lapata (2008).
22.3.1 Centering
Centering Theory (Grosz et al., 1995) is a theory of both discourse salience and discourse coherence. As a model of discourse salience, Centering proposes that at any given point in the discourse one of the entities in the discourse model is salient: it is being “centered” on. As a model of discourse coherence, Centering proposes

452
CHAPTER 22 • DISCOURSE COHERENCE
backward- looking center
While these two texts differ only in how the two entities (John and the store) are realized in the sentences, the discourse in (22.28) is intuitively more coherent than the one in (22.29). As Grosz et al. (1995) point out, this is because the discourse in (22.28) is clearly about one individual, John, describing his actions and feelings. The discourse in (22.29), by contrast, focuses first on John, then the store, then back to John, then to the store again. It lacks the “aboutness” of the first discourse.
Centering Theory realizes this intuition by maintaining two representations for each utterance Un . The backward-looking center of Un , denoted as Cb (Un ), rep- resents the current salient entity, the one being focused on in the discourse after Un is interpreted. The forward-looking centers of Un, denoted as Cf (Un), are a set of potential future salient entities, the discourse entities evoked by Un any of which could serve as Cb (the salient entity) of the following utterance, i.e. Cb(Un+1).
The set of forward-looking centers Cf (Un) are ranked according to factors like discourse salience and grammatical role (for example subjects are higher ranked than objects, which are higher ranked than all other grammatical roles). We call the highest-ranked forward-looking center Cp (for “preferred center”). Cp is a kind of prediction about what entity will be talked about next. Sometimes the next utterance indeed talks about this entity, but sometimes another entity becomes salient instead.
We’ll use here the algorithm for centering presented in Brennan et al. (1987), which defines four intersentential relationships between a pair of utterances Un and Un+1 that depend on the relationship between Cb(Un+1), Cb(Un), and Cp(Un+1); these are shown in Fig. 22.7.
Figure 22.7 Centering Transitions for Rule 2 from Brennan et al. (1987). The following rules are used by the algorithm:
forward-looking center
that discourses in which adjacent sentences CONTINUE to maintain the same salient entity are more coherent than those which SHIFT back and forth between multiple entities (we will see that CONTINUE and SHIFT are technical terms in the theory).
The following two texts from Grosz et al. (1995) which have exactly the same propositional content but different saliences, can help in understanding the main Centering intuition.
(22.28)
(22.29)
a. John went to his favorite music store to buy a piano. b. He had frequented the store for many years.
c. He was excited that he could finally buy a piano.
d. He arrived just as the store was closing for the day.
a. John went to his favorite music store to buy a piano. b. It was a store John had frequented for many years. c. He was excited that he could finally buy a piano.
d. It was closing just as John arrived.
  Cb(Un+1) = Cb(Un) Cb(Un+1) ̸= Cb(Un) or undefined Cb(Un)
 Cb(Un+1) = Cp(Un+1) Continue Smooth-Shift Cb(Un+1) ̸= Cp(Un+1) Retain Rough-Shift
  Rule 1: If any element of Cf (Un) is realized by a pronoun in utterance Un+1, then Cb(Un+1) must be realized as a pronoun also.
 Rule2: Transitionstatesareordered.ContinueispreferredtoRetainis preferred to Smooth-Shift is preferred to Rough-Shift.
 
entity grid
22.3 • CENTERING AND ENTITY-BASED COHERENCE 453
Rule 1 captures the intuition that pronominalization (including zero-anaphora) is a common way to mark discourse salience. If there are multiple pronouns in an utterance realizing entities from the previous utterance, one of these pronouns must realize the backward center Cb; if there is only one pronoun, it must be Cb.
Rule 2 captures the intuition that discourses that continue to center the same en- tity are more coherent than ones that repeatedly shift to other centers. The transition table is based on two factors: whether the backward-looking center Cb is the same from Un to Un+1 and whether this discourse entity is the one that was preferred (Cp) from Un. If both of these hold, a CONTINUE relation, the speaker has been talking about the same entity and is going to continue talking about that entity. In a RETAIN relation, the speaker intends to SHIFT to a new entity in a future utterance and mean- while places the current entity in a lower rank Cf . In a SHIFT relation, the speaker is shifting to a new salient entity.
Let’s walk though the start of (22.28) again, repeated as (22.30), showing the representations after each utterance is processed.
(22.30) John went to his favorite music store to buy a piano. (U1) He was excited that he could finally buy a piano. (U2)
He arrived just as the store was closing for the day. (U3) It was closing just as John arrived (U4)
Using the grammatical role hierarchy to order the C f , for sentence U1 we get:
Cf (U1): {John, music store, piano} Cp(U1): John
Cb(U1): undefined
and then for sentence U2:
Cf (U2): {John, piano}
Cp(U2): John
Cb(U2): John
Result: Continue (Cp(U2)=Cb(U2); Cb(U1) undefined)
The transition from U1 to U2 is thus a CONTINUE. Completing this example is left as exercise (1) for the reader
22.3.2 Entity Grid model
Centering embodies a particular theory of how entity mentioning leads to coher- ence: that salient entities appear in subject position or are pronominalized, and that discourses are salient by means of continuing to mention the same entity in such ways.
The entity grid model of Barzilay and Lapata (2008) is an alternative way to capture entity-based coherence: instead of having a top-down theory, the entity-grid model using machine learning to induce the patterns of entity mentioning that make a discourse more coherent.
The model is based around an entity grid, a two-dimensional array that repre- sents the distribution of entity mentions across sentences. The rows represent sen- tences, and the columns represent discourse entities (most versions of the entity grid model focus just on nominal mentions). Each cell represents the possible appearance of an entity in a sentence, and the values represent whether the entity appears and its grammatical role. Grammatical roles are subject (S), object (O), neither (X), or ab- sent (–); in the implementation of Barzilay and Lapata (2008), subjects of passives

    for our experiments in Section 3.3.
454 CHAPTER 22
Table 1 illustrates a fragment of an entity grid constructed for the text in Table 2. Because the text contains six sentences, the grid columns are of length six. Consider for instance the grid column for the entity trial, [O – – – – X]. It records that trial is present in sentences 1 and 6 (as O and X, respectively) but is absent from the rest of the sentences. Also note that the grid in Table 1 takes coreference resolution into account. Even though the same entity appears in different linguistic forms, for example, Microsoft Corp., Microsoft, and the company , it is mapped to a single entry in the grid (see the column introduced by Microsoft in Table 1).
• DISCOURSE COHERENCE
are represented with O, leading to a representation with some of the characteristics
of thematic roles.
Table 1
A fragment of the entity grid. Noun phrases are represented by their head nouns. Grid cells correspond to grammatical roles: subjects (S), objects (O), or neither (X).
   1SOSXO––––––––––1 2––O––XSO–––––––2 3––SO––––SOO––––3 4––S––––––––S–––4 5––––––––––––SO–5 6–XS–––––––––––O6
 Barzilay an
Figure 22.8
 d Lapata Modeling Local Coherence
Part of the entity grid for the text in Fig. 22.9. Entities are listed by their head noun; each cell represents whether an entity appears as subject (S), object (O), neither (X), or
is absent (–). Figure from Barzilay and Lapata (2008). Table 2
Summary augmented with syntactic annotations for grid computation.
6
   1 [The Justice Department]S is conducting an [anti-trust trial]O against [Microsoft Corp.]X with[evidence]X that[thecompany]S isincreasinglyattemptingtocrush[competitors]O.
2 [Microsoft]O is accused of trying to forcefully buy into [markets]X where [its own products]S arenotcompetitiveenoughtounseat[establishedbrands]O.
3 [The case]S revolves around [evidence]O of [Microsoft]S aggressively pressuring [Netscape]O intomerging[browsersoftware]O.
4 [Microsoft]S claims [its tactics]S are commonplace and good economically.
5 [The government]S may file [a civil suit]O ruling that [conspiracy]S to curb [competition]O
through[collusion]X is[aviolationoftheShermanAct]O.
6 [Microsoft]S continues to show [increased earnings]O despite [the trial]X .
 Figure 22.9
 A discourse with the entities marked and annotated with grammatical func- tions. Figure from Barzilay and Lapata (2008).
When a noun is attested more than once with a different grammatical role in the
same sentence, we default to the role with the highest grammatical ranking: subjects are
ranked higher than objects, which in turn are ranked higher than the rest. For example,
Fig. 22.8 from Barzilay and Lapata (2008) shows a grid for the text shown in the entity Microsoft is mentioned twice in Sentence 1 with the grammatical roles x (for
Fig. 22.9. There is one row for each of the six sentences. The second column, for Microsoft Corp.) and s (for the company ), but is represented only by s in the grid (see
the entity ‘trial’, is O – – – X, showing that the trial appears in the first sentence as
Tables 1 and 2).
direct object, in the last sentence as an oblique, and does not appear in the middle sentences. The third column, for the entity Microsoft, shows that it appears as sub-
3.2 Entity Grids as Feature Vectors
ject in sentence 1 (it also appears as the object of the preposition against, but entities that appear multiple times are recorded with their highest-ranked grammatical func-
A fundamental assumption underlying our approach is that the distribution of entities
tioin)c.oCheormenptuteinxgts tehxeheibnittistycegrtiadisn rreeqguilraersiteiexstrraecfltiencgteednitnitigersidantdopdolionggy.cSooremferoefnctheese
rerseoglutlaiornititeos calruestfeorrtmheamlizeindtoindiCsceonuterrsiengenTtihtieosr(yCahsapctoenrs2tr2a)inatsswoenlltarasnpsaitrisoings tohfethe local focus in adjacent sentences. Grids of coherent texts are likely to have some dense
sentences to get grammatical roles.
columns (i.e., columns with just a few gaps, such as Microsoft in Table 1) and many In the resulting grid, columns that are dense (like the column for Microsoft) in-
sparse columns which will consist mostly of gaps (see markets and earnings in Table 1). dicate entities that are mentioned often in the texts; sparse columns (like the column
One would further expect that entities corresponding to dense columns are more often
for earnings) indicate entities that are mentioned rarely.
subjects or objects. These characteristics will be less pronounced in low-coherence texts.
In the entity grid model, coherence is measured by patterns of local entity tran- Inspired by Centering Theory, our analysis revolves around patterns of local entity
sitrioans.itiFoonrs.eAxalmocpalle,enDteitpyarttrmanesnitioisnaissaubsjeqcuteincese{nSt,eOn,cXe,–1}, atnhdatthrepnrensoetnmtseen-tity tioncceudrirnensceensteancdet2h;eitrhisyinstathcteictrraonlesistiionnn[Sad–ja].ceTnhtesetnratennsicteios.nLsoacraeltthruanssietiqounesncaens be
n
easily obtained from a grid as continuous subsequences of each column. Each transition
{S,O X, –} which can be extracted as continuous cells from each column. Each will have a certain probability in a given grid. For instance, the probability of the
transition has a probability; the probability of [S –] in the grid from Fig. 22.8 is 0.08
transition [S –] in the grid from Table 1 is 0à08 (computed as a ratio of its frequency (it occurs 6 times out of the 75 total transitions of length two). Fig. 22.10 shows the
[i.e., six] divided by the total number of transitions of length two [i.e., 75]). Each text
distribution over transitions of length 2 for the text of Fig. 22.9 (shown as the first can thus be viewed as a distribution defined over transition types.
row d1), and 2 other documents.
We can now go one step further and represent each text by a fixed set of transition
The transitions and their probabilities can then be used as features for a machine
sequences using a standard feature vector notation. Each grid rendering j of a document ledarncionrgremspoodnedl.sTtohisamfeoadtuerlecavnecbteoratΦe(xxtc)l=ass(ipfie(xrt)r,apin(exd)t,oàpààr,opdu(cxe)h)u,mwahne-rleabmeliesdthe
i ij 1ij2ij mij
number of all predefined entity transitions, and pt(xij) the probability of transition t in grid x ij. This feature vector representation is usefully amenable to machine learning algorithms (see our experiments in Sections 4–6). Furthermore, it allows the consid- eration of large numbers of transitions which could potentially uncover novel entity distribution patterns relevant for coherence assessment or other coherence-related tasks.
Note that considerable latitude is available when specifying the transition types to be included in a feature vector. These can be all transitions of a given length (e.g., two
n
Department Trial Microsoft Evidence Competitors Markets Products Brands
Case Netscape
Software Tactics Government Suit Earnings

 an annotated corpus. A separate clustering mechanism then coordinates the possibly
contradictory pairwise classifications and constructs a partition on the set of NPs. In our experiments, we employ Ng and Cardie’s (2002) coreference resolution system. The system decides whether two NPs are coreferent by exploiting a wealth of lexical, grammatical, semantic, and positional features. It is trained on the MUC (6–7) data sets and yields state-of-the-art performance (70.4 F-measure on MUC-6 and 63.4 on MUC-7).
Table 3 22.3 • CENTERING AND ENTITY-BASED COHERENCE 455 Example of a feature-vector document representation using all transitions of length two given syntactic categories S, O, X, and –.
A feature vector for representing documents using all transitions of length 2. Document d1 is the text in Fig. 22.9. Figure from Barzilay and Lapata (2008).
coherence scores (for example from humans labeling each text as coherent or inco- herent). But such data is expensive to gather. Barzilay and Lapata (2005) introduced a simplifying innovation: coherence models can be trained by self-supervision: trained to distinguish the natural original order of sentences in a discourse from a modified order (such as a randomized order). We turn to these evaluations in the next section.
22.3.3 Evaluating Neural and Entity-based coherence
Entity-based coherence models, as well as the neural models we introduce in the next section, are generally evaluated in one of two ways.
First, we can have humans rate the coherence of a document and train a classifier to predict these human ratings, which can be categorial (high/low, or high/mid/low) or continuous. This is the best evaluation to use if we have some end task in mind, like essay grading, where human raters are the correct definition of the final label.
Alternatively, since it’s very expensive to get human labels, and we might not yet have an end-task in mind, we can use natural texts to do self-supervision. In self-supervision we pair up a natural discourse with a pseudo-document created by changing the ordering. Since naturally-ordered discourses are more coherent than random permutation (Lin et al., 2011), a successful coherence algorithm should pre- fer the original ordering.
Self-supervision has been implemented in 3 ways. In the sentence order dis- crimination task (Barzilay and Lapata, 2005), we compare a document to a random permutation of its sentence. A model is considered correct for an (original, per- muted) test pair if it ranks the original document higher. Given k documents, we can compute n permutations, resulting in kn pairs each with one original document and one permutation, to use in training and testing.
In the sentence insertion task (Chen et al., 2007) we take a document, remove one of the n sentences s, and create n − 1 copies of the document with s inserted into each position. The task is to decide which of the n documents is the one with the original ordering, distinguishing the original position for s from all other positions. Insertion is harder than discrimination since we are comparing documents that differ by only one sentence.
Finally, in the sentence order reconstruction task (Lapata, 2003), we take a document, randomize the sentences, and train the model to put them back in the correct order. Again given k documents, we can compute n permutations, resulting in kn pairs each with one original document and one permutation, to use in training and testing. Reordering is of course a much harder task than simple classification.
    SSSOSXS–OSOOOXO–XSXOXXX––S–O–X––
 d1 .01 .01 0 .08
d2 .02 .01 .01 .02 0
d3 .02 0 0 .03
.01 0 0 .09 0 .07 0 .02 .14
.09 0 .09 .06 0
0 0 .03 .05 .07 .03 .59 .14 .06 .04 .03 .07 0.1 .36 0 0 .05 .03 .07 .17 .39
 Figure 22.10
 8

456 CHAPTER 22 • DISCOURSE COHERENCE
22.4 Representation learning models for local coherence
lexical cohesion
TextTiling
The third kind of local coherence is topical or semantic field coherence. Discourses cohere by talking about the same topics and subtopics, and drawing on the same semantic fields in doing so.
The field was pioneered by a series of unsupervised models in the 1990s of this kind of coherence that made use of lexical cohesion (Halliday and Hasan, 1976): the sharing of identical or semantically related words in nearby sentences. Morris and Hirst (1991) computed lexical chains of words (like pine, bush trees, trunk) that occurred through a discourse and that were related in Roget’s Thesaurus (by being in the same category, or linked categories). They showed that the number and density of chain correlated with the topic structure. The TextTiling algorithm of Hearst (1997) computed the cosine between neighboring text spans (the normalized dot product of vectors of raw word counts), again showing that sentences or paragraph in a subtopic have high cosine with each other, but not with sentences in a neighboring subtopic.
A third early model, the LSA Coherence method of Foltz et al. (1998) was the first to use embeddings, modeling the coherence between two sentences as the co- sine between their LSA sentence embedding vectors1, computing embeddings for a sentence s by summing the embeddings of its words w:
sim(s,t) = cos(s,t)
= cos(􏰑w,􏰑w) (22.31)
w∈s w∈t
and defining the overall coherence of a text as the average similarity over all pairs of
adjacent sentences si and si+1:
1 􏰑n − 1
coherence(T ) = n − 1 cos(si , si+1 ) (22.32)
i=1
Modern neural representation-learning coherence models, beginning with Li et al. (2014), draw on the intuitions of these early unsupervised models for learning sen- tence representations and measuring how they change between neighboring sen- tences. But the new models also draw on the idea pioneered by Barzilay and Lapata (2005) of self-supervision. That is, unlike say coherence relation models, which train on hand-labeled representations for RST or PDTB, these models are trained to distinguish natural discourses from unnatural discourses formed by scrambling the order of sentences, thus using representation learning to discover the features that matter for at least the ordering aspect of coherence.
Here we present one such model, the local coherence discriminator (LCD) (Xu et al., 2019). Like early models, LCD computes the coherence of a text as the av- erage of coherence scores between consecutive pairs of sentences. But unlike the early unsupervised models, LCD is a self-supervised model trained to discriminate consecutive sentence pairs (si,si+1) in the training documents (assumed to be coher- ent) from (constructed) incoherent pairs (si,s′). All consecutive pairs are positive examples, and the negative (incoherent) partner for a sentence si is another sentence uniformly sampled from the same document as si.
1 See Chapter 6 for more on LSA embeddings; they are computed by applying SVD to the term- document matrix (each cell weighted by log frequency and normalized by entropy), and then the first 300 dimensions are used as the embedding.
  
22.4 •
nction: The role of the loss fun urage f+ = f✓(si, si+) to be hig ✓(si, s0) to be low. Common losses
or log loss can all be used. Through validation, we found that margin
rior for this problem. Specifically, orm: L(f + , f   ) = max(0, ⌘   f +
is the margin hyperparameter.
ve samples: Technically, we are any sentence s0 to form a negat
. However, because of potential
n genre, topic and writing style, such neg-
REPRESENTATION LEARNING MODELS FOR LOCAL COHERENCE 457
The architecture of the LCD model of document coherence, showing the
    ction is h while such as exper- loss to L takes +f )
free to ive pair differ-
 Figure 22.11
 might cause the discriminative model to
computation of the score for a pair of sentences s and t. Figure from Xu et al. (2019).
Figure 1: Generic architecture for our proposed model.
ues unrelated to coherence. Therefore, we
Fig. 22.11 describes the architecture of the model f , which takes a sentence
lect sentences from the same document to
pair and retu4rn.2s a sPcroere-,trhaiginherdsGcoerneserfoartimveorMe coodhelreanst tphaeirs. Given an input
ct negative pairs. Specifically, suppose si
sentence pair s and t, the model computes sentence embeddings s and t (using any
from document d with length n , then kk
Sentence Encoder
sentence embeddings algorithm), and then concatenates four features of the pair: (1) isauniformdistributionoverthethnec onc1atenaOtiounromftohdeetwlocavnectworosr(k2)wthietihrdaifnfeyrepncre-str−aitn;e(3d)tsheena-bsolutevalue
k
es {sj}j 6= i from dk. For a documeonftthweitrhdiffertencee|se−ncto|;d(e4r), trhaenirgienlegmfernot-mwisteheprmodousct si⊙mtp.liTsthiecse are passed
through a one-layer feedforward network to output the coherence score. nces, there are n 1 positive pairs, and average GloVe (Pennington et al., 2014) embed-
The model is trained to make this coherence score higher for real pairs than for ⇤(n 2)/2 negative pairs. It turns out that dings to more sophisticated supervised or unsu-
negative pairs. More formally, the training objective for a corpus C of documents d, dratic number of negatives provides a rich pervised pre-trained sentence encoders (Conneau
learning signal, while at the same time, is
prohibitively large to be effectively cov-
et al., 201􏰑7).􏰑As mentioned in the introduction,
each of which consists of a list of sentences si, is:
L = E [L(f (s,s ),f (s,s′))] (22.33)
since generative models can often be turned into
p(s′|si) θ i i+1 θ i
sentence encoder, generative coherence model can
θ
a sampling procedure. In practice, we
E ′ is the expectation with respect to the negative sampling distribution con-
anewsetofnegativeseachtimewp(es|sie)e beleveragedbyourmodeltobenefitfromthe ′
d∈C s ∈d i
ditioned on s : given a sentence s the algorithms samples a negative sentence s ii
ent, hence after many epochs, we can ef- advantages of both generative and discriminative
uniformly over the other sentences in the same document. L is a loss function that
y cover the space for even very long doc- training, similar to (Kiros et al., 2015; Peters et al.,
takes two scores, one for a positive pair and one for a negative pair, with the goal of
. Section 5.7 discusses further details on 2+018). After initialization, we− freeze th′e genera- encouraging f = fθ (si,si+1) to be high and f = fθ (si,s )) to be low. Fig. 22.11
+− +−
g. usethemargitnivloesmslo(dfel,fpa)ra=mmeatexr(s0,tηo−avfoid+ofve)rfiwthtienreg.ηisthemarginhyper-
parameter.
odel Architecture Xu et al. (2019) also give a useful baseline algorithm that itself has quite high
In Section 5, we will experimentally show that
while we do benefit from strong pre-trained en-
performance in measuring perplexity: train an RNN language model on the data,
coders, the fact that our local discriminative model
cific neural architecture that we use for f
and compute the log likelihood of sentence s in two ways, once given the preceding
✓
rated in Figure 1. We assume the use of improves over previous methods is independent of
context (conditional log likelihood) and once with no context (marginal log likeli-
re-trained sentence encoder, whichhoisodd).isT-he ditfhferecnhcoeibcetwofeesnenthtesnecvealeunecsotedlelsr.us how much the preceding context in the next section. improved the predictability of si, a predictability measure of coherence.
n an input sentence pair, the sentence en-
5 Experiments
Training models to predict longer contexts than just consecutive pairs of sen-
tences can result in even stronger discourse representations. For example a Trans-
aps the sentences to real-valued vectors S
former language model trained with a contrastive sentence objective to predict text
Language-model style models are generally evaluated by the methods of Sec-
We then compute the concatenation of the
5.1 Evaluation Tasks
up to a distance of ±2 sentences improves performance on various discourse coher- ng features: (1) concatenation of tehnecettwasoks (IteFroeltloawl.,i2n0g20N).guyen and Joty (2017) and other pre-
(S, T ); (2) element-wise difference S   T ; vious work, we evaluate our models on the dis-
tion 22.3.3, although they can also be evaluated on the RST and PDTB coherence
ent-wise product S ⇤ T ; (4) absolute value ent-wise difference |S   T |. The concate- eature representation is then fed to a one-
LP to output the coherence score.
ractice, we make our overall coherence bidirectional, by training a forward model
crimination and insertion tasks. Additionally, we evaluate on the paragraph reconstruction task in open-domain settings, in a similar manner to Li and Jurafsky (2017).
In the discrimination task, a document is com- pared to a random permutation of its sentences,
i
θ
u
o
f
l e f
⌘
i
e u
)
c e
a h o
y
m
l s
n
M
e
t p
e m
m m
M

458 CHAPTER 22 • DISCOURSE COHERENCE relation tasks.
22.5 Global Coherence
argumentation mining
pathos ethos logos
claims
premises
argumentative relations
A discourse must also cohere globally rather than just at the level of pairs of sen- tences. Consider stories, for example. The narrative structure of stories is one of the oldest kinds of global coherence to be studied. In his influential Morphology of the Folktale, Propp (1968) models the discourse structure of Russian folktales via a kind of plot grammar. His model includes a set of character categories he called dramatis personae, like Hero, Villain, Donor, or Helper, and a set of events he called functions (like “Villain commits kidnapping”, “Donor tests Hero”, or “Hero is pursued”) that have to occur in particular order, along with other components. Propp shows that the plots of each of the fairy tales he studies can be represented as a sequence of these functions, different tales choosing different subsets of functions, but always in the same order. Indeed Lakoff (1972b) showed that Propp’s model amounted to a discourse grammar of stories, and in recent computational work Fin- layson (2016) demonstrates that some of these Proppian functions could be induced from corpora of folktale texts by detecting events that have similar actions across stories. Bamman et al. (2013) showed that generalizations over dramatis personae could be induced from movie plot summaries on Wikipedia. Their model induced latent personae from features like the actions the character takes (e.g., Villains stran- gle), the actions done to them (e.g., Villains are foiled and arrested) or the descriptive words used of them (Villains are evil).
In this section we introduce two kinds of such global discourse structure that have been widely studied computationally. The first is the structure of arguments: the way people attempt to convince each other in persuasive essays by offering claims and supporting premises. The second is somewhat related: the structure of scientific papers, and the way authors present their goals, results, and relationship to prior work in their papers.
22.5.1 Argumentation Structure
The first type of global discourse structure is the structure of arguments. Analyzing people’s argumentation computationally is often called argumentation mining.
The study of arguments dates back to Aristotle, who in his Rhetorics described three components of a good argument: pathos (appealing to the emotions of the listener), ethos (appealing to the speaker’s personal character), and logos (the logical structure of the argument).
Most of the discourse structure studies of argumentation have focused on lo- gos, particularly via building and training on annotated datasets of persuasive es- says or other arguments (Reed et al. 2008, Stab and Gurevych 2014a, Peldszus and Stede 2016, Habernal and Gurevych 2017, Musi et al. 2018). Such corpora, for example, often include annotations of argumentative components like claims (the central component of the argument that is controversial and needs support) and premises (the reasons given by the author to persuade the reader by supporting or attacking the claim or other premises), as well as the argumentative relations be- tween them like SUPPORT and ATTACK.
Consider the following example of a persuasive essay from Stab and Gurevych (2014b). The first sentence (1) presents a claim (in bold). (2) and (3) present two

                Admittedly, [cloning could be misused for military purposes]Claim5. For example,
[it could be used to manipulate human genes in order to create obedient soldiers
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
with extraordinary abilities]Premise9. However, because [moral and ethical values are ::::::::::::::::::::::: ::::::::::::::::::::::::
internationally shared]Premise10, [it is very unlikely that cloning will be misused for :::::::::::::::::: ::::::::::::::::::::::::::::::::::::::::::::
militant objectives]Premise11. :::::::::::::::
The paragraph begins with Claim5, which attacks the stance of the author. It is supported
by Premise9 in the second sentence. The third sentence includes two premises, both of
which defend the stance of the author. Premise is an attack of Claim , and Premise 11 5 10
22.5 • GLOBAL COHERENCE 459 supports Premise11. The last paragraph (conclusion) restates the major claim and sum-
marizes the main aspects of the essay:
premises supporting the claim. (4) gives a premise supporting premise (3).
To sum up, although [permitting cloning might bear some risks like misuse for
“(1) Museums and art galleries provide a better understanding
military purposes] , I strongly believe that [this technology is beneficial to Claim6
about arts than Internet. (2) In most museums and art galleries, de- humanity]MajorClaim2. It is likely that [this technology bears some important cures which
tailed descriptions in terms of the background, history and author are
will significantly improve life conditions]Claim7.
provided. (3) Seeing an artwork online is not the same as watching it
with our own eyes, as (4) the picture online does not show the texture
The conclusion of the essay starts with an attacking claim followed by the restatement of
or three-dimensional structure of the art, which is important to study.”
the major claim. The last sentence includes another claim that summarizes the most im- portant points of the author’s argumentation. Figure 2 shows the entire argumentation
structure of the example essay.
Thus this example has three argumentative relations: SUPPORT(2,1), SUPPORT(3,1)
and SUPPORT(4,3). Fig. 22.12 shows the structure of a much more complex argu- ment.
                                                   Figure 2
Figure 22.12
  Argumentation structure of a persuasive essay. Arrows indicate argumentation relations, ei-
Argumentation structure of the example essay. Arrows indicate argumentative relations.
ther of SUPPORT (with arrowheads) or ATTACK (with circleheads); P denotes premises. Figure from Stab and Arrowheads denote argumentative support relations and circleheads attack relations. Dashed
Gurevych (2017).
lines indicate relations that are encoded in the stance attributes of claims. “P” denotes premises.
argumentation schemes
persuasion
While argumentation mining is clearly related to rhetorical structure and other kinds of coherence relations, arguments tend to be much less local; often a persua-
sive essay will have only a single main claim, with premises spread throughout the text, without the local coherence we see in coherence relations.
Algorithms for detecting argumentation structure often include classifiers for distinguishing claims, premises, or non-argumentation, together with relation clas- sifiers for deciding if two spans have the SUPPORT, ATTACK, or neither relation (Peldszus and Stede, 2013). While these are the main focus of much computational work, there is also preliminary efforts on annotating and detecting richer semantic relationships (Park and Cardie 2014, Hidey et al. 2017) such as detecting argumen- tation schemes, larger-scale structures for argument like argument from example, or argument from cause to effect, or argument from consequences (Feng and Hirst, 2011).
Another important line of research is studying how these argument structure (or other features) are associated with the success or persuasiveness of an argument (Habernal and Gurevych 2016, Tan et al. 2016, Hidey et al. 2017. Indeed, while it is Aristotle’s logos that is most related to discourse structure, Aristotle’s ethos and pathos techniques are particularly relevant in the detection of mechanisms of this sort of persuasion. For example scholars have investigated the linguistic realization of features studied by social scientists like reciprocity (people return favors), social proof (people follow others’ choices), authority (people are influenced by those
629

460 CHAPTER 22 • DISCOURSE COHERENCE
argumentative zoning
with power), and scarcity (people value things that are scarce), all of which can be brought up in a persuasive argument (Cialdini, 1984). Rosenthal and McKeown (2017) showed that these features could be combined with argumentation structure to predict who influences whom on social media, Althoff et al. (2014) found that linguistic models of reciprocity and authority predicted success in online requests, while the semisupervised model of Yang et al. (2019) detected mentions of scarcity, commitment, and social identity to predict the success of peer-to-peer lending plat- forms.
See Stede and Schneider (2018) for a comprehensive survey of argument mining. 22.5.2 The structure of scientific discourse
Scientific papers have a very specific global structure: somewhere in the course of the paper the authors must indicate a scientific goal, develop a method for a solu- tion, provide evidence for the solution, and compare to prior work. One popular annotation scheme for modeling these rhetorical goals is the argumentative zoning model of Teufel et al. (1999) and Teufel et al. (2009), which is informed by the idea that each scientific paper tries to make a knowledge claim about a new piece of knowledge being added to the repository of the field (Myers, 1992). Sentences in a scientific paper can be assigned one of 15 tags; Fig. 22.13 shows 7 (shortened) examples of labeled sentences.
Category Description Example
  AIM Statementofspecificresearchgoal,or “Theaimofthisprocessistoexaminetherolethat hypothesis of current paper training plays in the tagging process”
  OWN METHOD New Knowledge claim, own work: “In order for it to be useful for our purposes, the methods following extensions must be made:”
 OWN RESULTS Measurable/objective outcome of own “All the curves have a generally upward trend but work always lie far below backoff (51% error rate)”
 USE Other work is used in own work “We use the framework for the allocation and transfer of control of Whittaker....”
 GAP WEAK Lack of solution in field, problem with “Here, we will produce experimental evidence other solutions suggesting that this simple model leads to serious
overestimates”
 SUPPORT Otherworksupportscurrentworkoris “Worksimilartothatdescribedherehasbeencar- supported by current work ried out by Merialdo (1994), with broadly similar
conclusions.”
 ANTISUPPORT Clash with other’s results or theory; su- “This result challenges the claims of...” periority of own work
 Figure 22.13
  Examples for 7 of the 15 labels from the Argumentative Zoning labelset (Teufel et al., 2009).
Teufel et al. (1999) and Teufel et al. (2009) develop labeled corpora of scientific articles from computational linguistics and chemistry, which can be used as supervi- sion for training standard sentence-classification architecture to assign the 15 labels.
22.6 Summary
In this chapter we introduced local and global models for discourse coherence.
• Discourses are not arbitrary collections of sentences; they must be coherent. Among the factors that make a discourse coherent are coherence relations between the sentences, entity-based coherence, and topical coherence.

BIBLIOGRAPHICAL AND HISTORICAL NOTES 461
• Various sets of coherence relations and rhetorical relations have been pro- posed. The relations in Rhetorical Structure Theory (RST) hold between spans of text and are structured into a tree. Because of this, shift-reduce and other parsing algorithms are generally used to assign these structures. The Penn Discourse Treebank (PDTB) labels only relations between pairs of spans, and the labels are generally assigned by sequence models.
• Entity-based coherence captures the intuition that discourses are about an entity, and continue mentioning the entity from sentence to sentence. Cen- tering Theory is a family of models describing how salience is modeled for discourse entities, and hence how coherence is achieved by virtue of keeping the same discourse entities salient over the discourse. The entity grid model gives a more bottom-up way to compute which entity realization transitions lead to coherence.
• Many different genres have different types of global coherence. Persuasive essays have claims and premises that are extracted in the field of argument mining, scientific articles have structure related to aims, methods, results, and comparisons.
Bibliographical and Historical Notes
Coherence relations arose from the independent development of a number of schol- ars, including Hobbs (1979) idea that coherence relations play an inferential role for the hearer, and the investigations by Mann and Thompson (1987) of the discourse structure of large texts. Other approaches to coherence relations and their extrac-
SDRT tion include Segmented Discourse Representation Theory (SDRT) (Asher and Las- carides 2003, Baldridge et al. 2007) and the Linguistic Discourse Model (Polanyi 1988, Scha and Polanyi 1988, Polanyi et al. 2004). Wolf and Gibson (2005) argue that coherence structure includes crossed bracketings, which make it impossible to rep- resent as a tree, and propose a graph representation instead. A compendium of over 350 relations that have been proposed in the literature can be found in Hovy (1990).
RST parsing was first proposed by Marcu (1997), and early work was rule-based, focused on discourse markers (Marcu, 2000a). The creation of the RST Discourse TreeBank (Carlson et al. 2001, Carlson and Marcu 2001) enabled a wide variety of machine learning algorithms, beginning with the shift-reduce parser of Marcu (1999) that used decision trees to choose actions, and continuing with a wide variety of machine learned parsing methods (Soricut and Marcu 2003, Sagae 2009, Hernault et al. 2010, Feng and Hirst 2014, Surdeanu et al. 2015, Joty et al. 2015) and chunkers (Sporleder and Lapata, 2005). Subba and Di Eugenio (2009) integrated sophisticated semantic information into RST parsing. Ji and Eisenstein (2014) first applied neural models to RST parsing neural models, leading to the modern set of neural RST models (Li et al. 2014, Li et al. 2016, Braud et al. 2017, Yu et al. 2018, inter alia) as well as neural segmenters (Wang et al. 2018). and neural PDTB parsing models (Ji and Eisenstein 2015, Qin et al. 2016, Qin et al. 2017).
Barzilay and Lapata (2005) pioneered the idea of self-supervision for coher- ence: training a coherence model to distinguish true orderings of sentences from random permutations. Li et al. (2014) first applied this paradigm to neural sentence- representation, and many neural self-supervised models followed (Li and Juraf- sky 2017, Logeswaran et al. 2018, Lai and Tetreault 2018, Xu et al. 2019, Iter

462 CHAPTER 22 • DISCOURSE COHERENCE
et al. 2020)
Another aspect of global coherence is the global topic structure of a text, the way
the topics shift over the course of the document. Barzilay and Lee (2004) introduced an HMM model for capturing topics for coherence, and later work expanded this intuition (Soricut and Marcu 2006, Elsner et al. 2007, Louis and Nenkova 2012, Li and Jurafsky 2017).
The relationship between explicit and implicit discourse connectives has been a fruitful one for research. Marcu and Echihabi (2002) first proposed to use sen- tences with explicit relations to help provide training data for implicit relations, by removing the explicit relations and trying to re-predict them as a way of improv- ing performance on implicit connectives; this idea was refined by Sporleder and Lascarides (2005), (Pitler et al., 2009), and Rutherford and Xue (2015). This rela- tionship can also be used as a way to create discourse-aware representations. The DisSent algorithm (Nie et al., 2019) creates the task of predicting explicit discourse markers between two sentences. They show that representations learned to be good at this task also function as powerful sentence representations for other discourse tasks.
The idea of entity-based coherence seems to have arisen in multiple fields in the mid-1970s, in functional linguistics (Chafe, 1976), in the psychology of discourse processing (Kintsch and Van Dijk, 1978), and in the roughly contemporaneous work of Grosz, Sidner, Joshi, and their colleagues. Grosz (1977a) addressed the focus of attention that conversational participants maintain as the discourse unfolds. She defined two levels of focus; entities relevant to the entire discourse were said to be in global focus, whereas entities that are locally in focus (i.e., most central to a particular utterance) were said to be in immediate focus. Sidner (1979, 1983) de- scribed a method for tracking (immediate) discourse foci and their use in resolving pronouns and demonstrative noun phrases. She made a distinction between the cur- rent discourse focus and potential foci, which are the predecessors to the backward- and forward-looking centers of Centering theory, respectively. The name and further roots of the centering approach lie in papers by Joshi and Kuhn (1979) and Joshi and Weinstein (1981), who addressed the relationship between immediate focus and the inferences required to integrate the current utterance into the discourse model. Grosz et al. (1983) integrated this work with the prior work of Sidner and Grosz. This led to a manuscript on centering which, while widely circulated since 1986, remained unpublished until Grosz et al. (1995). A collection of centering papers appears in Walker et al. (1998). See Karamanis et al. (2004) and Poesio et al. (2004) for a deeper exploration of centering and its parameterizations, and the History section of Chapter 22 for more on the use of centering on coreference.
The grid model of entity-based coherence was first proposed by Barzilay and Lapata (2005) drawing on earlier work by Lapata (2003) and Barzilay, and then extended by them Barzilay and Lapata (2008) and others with additional features (Elsner and Charniak 2008, (2011), Feng et al. 2014, Lin et al. 2011) a model that projects entities into a global graph for the discourse (Guinaudeau and Strube 2013, Mesgar and Strube 2016), and a convolutional model to capture longer-range entity dependencies (Nguyen and Joty, 2017).
Theories of discourse coherence have also been used in algorithms for interpret- ing discourse-level linguistic phenomena, including verb phrase ellipsis and gapping (Asher 1993, Kehler 1993), and tense interpretation (Lascarides and Asher 1993, Kehler 1994, Kehler 2000). An extensive investigation into the relationship be- tween coherence relations and discourse connectives can be found in Knott and Dale

EXERCISES 463
(1994).
Useful surveys of discourse processing and structure include Stede (2011) and
Webber et al. (2012).
Andy Kehler wrote the Discourse chapter for the 2000 first edition of this text-
book, which we used as the starting point for the second-edition chapter, and there are some remnants of Andy’s lovely prose still in this third-edition coherence chap- ter.
Exercises
22.1 Finish the Centering Theory processing of the last two utterances of (22.30), and show how (22.29) would be processed. Does the algorithm indeed mark (22.29) as less coherent?
22.2 Select an editorial column from your favorite newspaper, and determine the discourse structure for a 10–20 sentence portion. What problems did you encounter? Were you helped by superficial cues the speaker included (e.g., discourse connectives) in any places?

464 CHAPTER 23 • QUESTION ANSWERING CHAPTER
23 Question Answering
The quest for knowledge is deeply human, and so it is not surprising that practi- cally as soon as there were computers we were asking them questions. By the early 1960s, systems used the two major paradigms of question answering—information- retrieval-based and knowledge-based—to answer questions about baseball statis- tics or scientific facts. Even imaginary computers got into the act. Deep Thought, the computer that Douglas Adams invented in The Hitchhiker’s Guide to the Galaxy, managed to answer “the Ultimate Question Of Life, The Universe, and Everything”.1 In 2011, IBM’s Watson question-answering system won the TV game-show Jeop- ardy!, surpassing humans at answering questions like:
2
Question answering systems are mainly designed to fill human information needs. Humans ask questions in many situations: when talking to a virtual assistant, when interacting with a search engine, when querying a database. Most question answer- ing systems focus on a particular subset of these information needs: factoid ques- tions, questions that can be answered with simple facts expressed in short texts, like the following:
(23.1) Where is the Louvre Museum located?
(23.2) What is the average age of the onset of autism?
In this chapter we describe the two major paradigms for factoid question an- swering. Information-retrieval (IR) based QA, sometimes called open domain question QA, relies on the vast amount of text on the web or in collections of sci- entific papers like PubMed. Given a user question, information retrieval is used to find relevant passages. Then neural reading comprehension algorithms read these retrieved passages and draw an answer directly from spans of text.
In the second paradigm, knowledge-based question answering, a system in- stead builds a semantic representation of the query, such as mapping What states bor- der Texas? to the logical representation: λx.state(x)∧borders(x,texas), or When was Ada Lovelace born? to the gapped relation: birth-year (Ada Lovelace, ?x). These meaning representations are then used to query databases of facts.
We’ll also briefly discuss two other paradigms for question answering. One re- lies on the fact that the huge pretrained language models we use throughout NLP have already encoded a lot of factoids. We’ll see how to query a language model directly to answer a question. And we’ll also mention the classic pre-neural hy- brid question-answering algorithms that combine information from IR-based and knowledge-based sources.
1 The answer was 42, but unfortunately the details of the question were never revealed.
2 The answer, of course, is ‘Who is Bram Stoker’, and the novel was Dracula.
  WILLIAM WILKINSON’S “AN ACCOUNT OF THE PRINCIPALITIES OF WALLACHIA AND MOLDOVIA” INSPIRED THIS AUTHOR’S MOST FAMOUS NOVEL
 
23.1 • INFORMATION RETRIEVAL 465
We’ll explore the possibilities and limitations of all these approaches, along the way also introducing two technologies that are key for question answering but also relevant throughout NLP: information retrieval (a key component of IR-based QA) and entity linking (similarly key for knowledge-based QA). We’ll start in the next section by introducing the task of information retrieval.
A final note: we focus in this chapter only on factoid question answering, but there are many other important QA tasks that the interested reader may want to follow up on. These include long-form question answering (answering why ques- tions, or other questions that require generating a long answer), community ques- tion answering, in which we make use of datasets of community-created question- answer pairs like Quora or Stack Overflow. Finally, question answering is an impor- tant benchmark for NLP progress in general, and so researchers have built systems that successfully answer questions on exams like the New York Regents Science Exam as a way to benchmark NLP and AI (Clark et al., 2019).
23.1 Information Retrieval
information retrieval
IR
ad hoc retrieval document
collection term query
Information retrieval or IR is the name of the field encompassing the retrieval of all manner of media based on user information needs. The resulting IR system is often called a search engine. Our goal in this section is to give a sufficient overview of IR to see its application to question answering. Readers with more interest specifically in information retrieval should see the Historical Notes section at the end of the chapter and textbooks like Manning et al. (2008).
The IR task we consider is called ad hoc retrieval, in which a user poses a query to a retrieval system, which then returns an ordered set of documents from some collection. A document refers to whatever unit of text the system indexes and retrieves (web pages, scientific papers, news articles, or even shorter passages like paragraphs). A collection refers to a set of documents being used to satisfy user requests. A term refers to a word in a collection, but it may also include phrases. Finally, a query represents a user’s information need expressed as a set of terms. The high-level architecture of an ad hoc retrieval engine is shown in Fig. 23.1.
          Document
Document Document
DocumeDntocument Document Document
document collection
query
Indexing
Query Processing
Inverted Index
query vector
Document Document
           Search
Document Document
Document Ranked
 Documents
     Figure 23.1
 The architecture of an ad hoc IR system.
The basic IR architecture uses the vector space model we introduced in Chap- ter 6, in which we map queries and document to vectors based on unigram word counts, and use the cosine similarity between the vectors to rank potential documents (Salton, 1971). This is thus an example of the bag-of-words model introduced in Chapter 4, since words are considered independently of their positions.

466 CHAPTER 23 • QUESTION ANSWERING
23.1.1 Term weighting and document scoring
term weight BM25
Let’s look at the details of how the match between a document and query is scored. We don’t use raw word counts in IR, instead computing a term weight for each document word. Two term weighting schemes are common: the tf-idf weighting
introduced in Chapter 6, and a slightly more powerful variant called BM25.
We’ll reintroduce tf-idf here so readers don’t need to look back at Chapter 6. Tf-idf (the ‘-’ here is a hyphen, not a minus sign) is the product of two terms, the
term frequency tf and the indirect document frequency idf.
The term frequency tells us how frequent the word is; words that occur more
often in a document are likely to be informative about the document’s contents. We usually use the log10 of the word frequency, rather than the raw count. The intuition is that a word appearing 100 times in a document doesn’t make that word 100 times more likely to be relevant to the meaning of the document. Because we can’t take the log of 0, we normally add 1 to the count:3
tft,d = log10(count(t,d)+1) (23.3)
If we use log weighting, terms which occur 0 times in a document would have tf = log10(1) = 0, 10 times in a document tf = log10(11) = 1.4, 100 times tf = log10(101) = 2.004, 1000 times tf = 3.00044, and so on.
The document frequency dft of a term t is the number of documents it oc- curs in. Terms that occur in only a few documents are useful for discriminating those documents from the rest of the collection; terms that occur across the entire collection aren’t as helpful. The inverse document frequency or idf term weight (Sparck Jones, 1972) is defined as:
idft = log10 N (23.4) dft
where N is the total number of documents in the collection, and dft is the number of documents in which term t occurs. The fewer documents in which a term occurs, the higher this weight; the lowest weight of 0 is assigned to terms that occur in every document.
Here are some idf values for some words in the corpus of Shakespeare plays, ranging from extremely informative words that occur in only one play like Romeo, to those that occur in a few like salad or Falstaff, to those that are very common like fool or so common as to be completely non-discriminative since they occur in all 37 plays like good or sweet.4
 Word
 Romeo salad Falstaff forest
 battle wit fool good sweet
    3
Or we can use this alternative: tft,d =
df idf
1 1.57 2 1.27 4 0.967 12 0.489 21 0.246 34 0.037 36 0.012 37 0
37 0
􏰊 1+log10 count(t,d) 0
if count(t,d) > 0 otherwise
4
sugar in European recipes around the turn of the 16th century (Jurafsky, 2014, p. 175).
Sweet was one of Shakespeare’s favorite adjectives, a fact probably related to the increased use of

23.1 • INFORMATION RETRIEVAL 467 The tf-idf value for word t in document d is then the product of term frequency
(23.5)
(23.6)
tft,d and IDF:
23.1.2 Document Scoring
tf-idf(t,d) = tft,d ·idft
We score document d by the cosine of its vector d with the query vector q:
score(q,d) = cos(q,d) = q·d |q||d|
 Another way to think of the cosine computation is as the dot product of unit vectors; we first normalize both the query and document vector to unit vectors, by dividing by their lengths, and then take the dot product:
score(q,d)=cos(q,d)= q · d (23.7) |q| |d|
We can spell out Eq. 23.7, using the tf-idf values and spelling out the dot product as a sum of products:
score(q,d) = 􏰑 􏰕􏰐 tf-idf(t,q) · 􏰕􏰐 tf-idf(t,d) (23.8) t∈q qi∈q tf-idf 2(qi,q) di∈d tf-idf 2(di,d)
In practice, it’s common to approximate Eq. 23.8 by simplifying the query pro- cessing. Queries are usually very short, so each query word is likely to have a count of 1. And the cosine normalization for the query (the division by |q|) will be the same for all documents, so won’t change the ranking between any two documents Di and D j So we generally use the following simple score for a document d given a query q:
score(q,d) = 􏰑 tf-idf(t,d) (23.9) t∈q |d|
Let’s walk through an example of a tiny query against a collection of 4 nano doc- uments, computing tf-idf values and seeing the rank of the documents. We’ll assume all words in the following query and documents are downcased and punctuation is removed:
Fig. 23.2 shows the computation of the tf-idf values and the document vector length |d| for the first two documents using Eq. 23.3, Eq. 23.4, and Eq. 23.5 (com- putations for documents 3 and 4 are left as an exercise for the reader).
Fig. 23.3 shows the scores of the 4 documents, reranked according to Eq. 23.9. The ranking follows intuitively from the vector space model. Document 1, which has both terms including two instances of sweet, is the highest ranked, above document 3 which has a larger length |d| in the denominator, and also a smaller tf for sweet. Document 3 is missing one of the terms, and Document 4 is missing both.
     Query: sweetlove
 Doc 1: Sweet sweet nurse! Love?
 Doc 2: Sweet sorrow
 Doc 3: How sweet is love?
 Doc 4: Nurse!
 
468 CHAPTER 23 • QUESTION ANSWERING
Document 1 Document 2
word count tf df idf tf-idf count tf df idf tf-idf
 love 1 sweet 2 sorrow 0 how 0 nurse 1 is0
0.301 2 0.477 3 0 1 0 1 0.301 2 0 1
0.301 0.091 0.125 0.060 0.602 0 0.602 0 0.301 0.091 0.602 0
0 0 2 1 0.301 3 1 0.301 1 0 0 1 0 0 2 0 0 1
0.301 0 0.125 0.038 0.602 0.181 0.602 0 0.301 0 0.602 0
 |d1| = √.0912 + .0602 + .9012 = .141 |d2| = √.0382 + .1812 = .185
   Figure 23.2
   Computation of tf-idf for nano-documents 1 and 2, using Eq. 23.3, Eq. 23.4, and Eq. 23.5.
Doc
1
3
2 40
Ranking documents by Eq. 23.9.
A slightly more complex variant in the tf-idf family is the BM25 weighting scheme (sometimes called Okapi BM25 after the Okapi IR system in which it was introduced (Robertson et al., 1995)). BM25 adds two parameters: k, a knob that adjust the balance between term frequency and IDF, and b, which controls the im- portance of document length normalization. The BM25 score of a document d given a query q is:
(23.10)
Figure 23.3
|d| tf-idf(sweet) tf-idf(love)
score
1.07 0.471 0.205
  .141 .060 .091
  .274 .038 .091
 .185 .038 0
 .0900 0
   BM25
IDF weighted tf
􏰑􏰛 􏰞􏰝 􏰜􏰛 􏰞􏰝     􏰜
 stop list
where |davg| is the length of the average document. When k is 0, BM25 reverts to no use of term frequency, just a binary selection of terms in the query (plus idf). A large k results in raw term frequency (plus idf). b ranges from 1 (scaling by document length) to 0 (no length scaling). Manning et al. (2008) suggest reasonable values are k = [1.2,2] and b = 0.75. Kamphuis et al. (2020) is a useful summary of the many minor variants of BM25.
Stop words In the past it was common to remove high-frequency words from both the query and document before representing them. The list of such high-frequency words to be removed is called a stop list. The intuition is that high-frequency terms (often function words like the, a, to) carry little semantic weight and may not help with retrieval, and can also help shrink the inverted index files we describe below. The downside of using a stop list is that it makes it difficult to search for phrases that contain words in the stop list. For example, common stop lists would reduce the phrase to be or not to be to the phrase not. In modern IR systems, the use of stop lists is much less common, partly due to improved efficiency and partly because much of their function is already handled by IDF weighting, which downweights function words that occur in every document. Nonetheless, stop word removal is occasionally useful in various NLP tasks so is worth keeping in mind.
t∈q
􏰆N􏰇 tft,d
log dft k􏰄1−b+b􏰄 |d| 􏰅􏰅+tf
|davg| t,d

inverted index
postings
In order to compute scores, we need to efficiently find documents that contain words in the query. (As we saw in Fig. 23.3, any document that contains none of the query terms will have a score of 0 and can be ignored.) The basic search problem in IR is thus to find all documents d ∈ C that contain a term q ∈ Q.
The data structure for this task is the inverted index, which we use for mak- ing this search efficient, and also conveniently storing useful information like the document frequency and the count of each term in each document.
An inverted index, given a query term, gives a list of documents that contain the term. It consists of two parts, a dictionary and the postings. The dictionary is a list of terms (designed to be efficiently accessed), each pointing to a postings list for the term. A postings list is the list of document IDs associated with each term, which can also contain information like the term frequency or even the exact positions of terms in the document. The dictionary can also start the document frequency for each term For example, a simple inverted index for our 4 sample documents above, with each word containing its document frequency in {}, and a pointer to a postings list that contains document IDs and term counts in [], might look like the following:
23.1.3 Inverted Index
how{1} is {1} love{2} nurse{2} sorry {1} sweet{3}
→ 3[1]
→ 3 [1]
→ 1[1]→3[1]
→ 1[1]→4[1]
→ 2 [1]
→ 1[2]→2[1]→3[1]
23.1 • INFORMATION RETRIEVAL 469
    Given a list of terms in query, we can very efficiently get lists of all candidate documents, together with the information necessary to compute the tf-idf scores we need.
There are alternatives to the inverted index. For the question-answering domain of finding Wikipedia pages to match a user query, Chen et al. (2017) show that indexing based on bigrams works better than unigrams, and use efficient hashing algorithms rather than the inverted index to make the search efficient.
23.1.4 Evaluation of Information-Retrieval Systems
We measure the performance of ranked retrieval systems using the same precision and recall metrics we have been using. We make the assumption that each docu- ment returned by the IR system is either relevant to our purposes or not relevant. Precision is the fraction of the returned documents that are relevant, and recall is the fraction of all relevant documents that are returned. More formally, let’s assume a system returns T ranked documents in response to an information request, a subset R of these are relevant, a disjoint subset, N, are the remaining irrelevant documents, and U documents in the collection as a whole are relevant to this request. Precision and recall are then defined as:
Precision = |R| Recall = |R| (23.11) |T| |U|
Unfortunately, these metrics don’t adequately measure the performance of a system that ranks the documents it returns. If we are comparing the performance of two ranked retrieval systems, we need a metric that prefers the one that ranks the relevant documents higher. We need to adapt precision and recall to capture how well a system does at putting relevant documents higher in the ranking.

470 CHAPTER 23 • QUESTION ANSWERING
Figure 23.4
Rank Judgment PrecisionRank RecallRank
 1 R 1.0 .11 2 N .50 .11 3 R .66 .22 4 N .50 .22 5 R .60 .33 6 R .66 .44 7 N .57 .44 8 R .63 .55 9 N .55 .55
10 N .50 .55 11 R .55 .66 12 N .50 .66 13 N .46 .66 14 N .43 .66 15 R .47 .77 16 N .44 .77 17 N .44 .77 18 R .44 .88 19 N .42 .88 20 N .40 .88 21 N .38 .88 22 N .36 .88 23 N .35 .88 24 N .33 .88 25 R .36 1.0
    Rank-specific precision and recall values calculated as we proceed down through a set of ranked documents (assuming the collection has 9 relevant documents).
    1.0 0.8 0.6 0.4 0.2
0.0
0.0 0.2 0.4
0.6 0.8 1.0
     Recall
 Figure 23.5
 The precision recall curve for the data in table 23.4.
Let’s turn to an example. Assume the table in Fig. 23.4 gives rank-specific pre- cision and recall values calculated as we proceed down through a set of ranked doc- uments for a particular query; the precisions are the fraction of relevant documents seen at a given rank, and recalls the fraction of relevant documents found at the same rank. The recall measures in this example are based on this query having 9 relevant documents in the collection as a whole.
Precision

precision-recall curve
interpolated precision
23.1 • INFORMATION RETRIEVAL 471
Note that recall is non-decreasing; when a relevant document is encountered, recall increases, and when a non-relevant document is found it remains unchanged. Precision, on the other hand, jumps up and down, increasing when relevant doc- uments are found, and decreasing otherwise. The most common way to visualize precision and recall is to plot precision against recall in a precision-recall curve, like the one shown in Fig. 23.5 for the data in table 23.4.
Fig. 23.5 shows the values for a single query. But we’ll need to combine values for all the queries, and in a way that lets us compare one system to another. One way of doing this is to plot averaged precision values at 11 fixed levels of recall (0 to 100, in steps of 10). Since we’re not likely to have datapoints at these exact levels, we use interpolated precision values for the 11 recall values from the data points we do have. We can accomplish this by choosing the maximum precision value achieved at any level of recall at or above the one we’re calculating. In other words,
IntPrecision(r) = max Precision(i) (23.12) i>=r
This interpolation scheme not only lets us average performance over a set of queries, but also helps smooth over the irregular precision values in the original data. It is designed to give systems the benefit of the doubt by assigning the maximum preci- sion value achieved at higher levels of recall from the one being measured. Fig. 23.6 and Fig. 23.7 show the resulting interpolated data points from our example.
Figure 23.6
Interpolated Precision Recall
 1.0 0.0 1.0 .10 .66 .20 .66 .30 .66 .40 .63 .50 .55 .60 .47 .70 .44 .80 .36 .90 .36 1.0
    mean average precision
Interpolated data points from Fig. 23.4.
Given curves such as that in Fig. 23.7 we can compare two systems or approaches by comparing their curves. Clearly, curves that are higher in precision across all recall values are preferred. However, these curves can also provide insight into the overall behavior of a system. Systems that are higher in precision toward the left may favor precision over recall, while systems that are more geared towards recall will be higher at higher levels of recall (to the right).
A second way to evaluate ranked retrieval is mean average precision (MAP), which provides a single metric that can be used to compare competing systems or approaches. In this approach, we again descend through the ranked list of items, but now we note the precision only at those points where a relevant item has been encountered (for example at ranks 1, 3, 5, 6 but not 2 or 4 in Fig. 23.4). For a single query, we average these individual precision measurements over the return set (up to some fixed cutoff). More formally, if we assume that Rr is the set of relevant documents at or above r, then the average precision (AP) for a single query is
AP = 1 􏰑 Precisionr(d) (23.13) |Rr|d∈Rr

472 CHAPTER 23 • QUESTION ANSWERING
An 11 point interpolated precision-recall curve. Precision at each of the 11 standard recall levels is interpolated for each query from the maximum at any higher level of recall. The original measured precision recall points are also shown.
where Precisionr(d) is the precision measured at the rank at which document d was found. For an ensemble of queries Q, we then average over these averages, to get our final MAP measure:
MAP= 1 􏰑AP(q) (23.14) |Q| q∈Q
The MAP for the single query (hence = AP) in Fig. 23.4 is 0.6. 23.1.5 IR with Dense Vectors
The classic tf-idf or BM25 algorithms for IR have long been known to have a con- ceptual flaw: they work only if there is exact overlap of words between the query and document. In other words, the user posing a query (or asking a question) needs to guess exactly what words the writer of the answer might have used to discuss the issue. As Lin et al. (2020) put it, the user might decide to search for a tragic love story but Shakespeare writes instead about star-crossed lovers. This is called the vocabulary mismatch problem (Furnas et al., 1987).
The solution to this problem is to use an approach that can handle synonymy: instead of (sparse) word-count vectors, using (dense) embeddings. This idea was proposed quite early with the LSI approach (Deerwester et al., 1990), but modern methods all make use of encoders like BERT. In what is sometimes called a bi- encoder we use two separate encoder models, one to encode the query and one to encode the document, and use the dot product between these two vectors as the score (Fig. 23.8. For example, if we used BERT, we would have two encoders BERTQ and BERTD and we could represent the query and document as the [CLS] token of the respective encoders (Karpukhin et al., 2020):
hq = BERTQ(q)[CLS] hd = BERTD(d)[CLS]
score(d,q) = hq ·hd (23.15)
    Interpolated Precision Recall Curve
 1 0.9 0.8 0.7 0.6 0.5 0.4 0.3 0.2 0.1 0
           0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1
Recall
 Figure 23.7
 Precision

     h dot-product h qd
ENCODERquery ENCODERdocument
q1 ... qn d1 ... dn
   Figure 23.8
 23.2
IR-based Factoid Question Answering
IR-based QA
The goal of IR-based QA (sometimes called open domain QA) is to answer a user’s question by finding short text segments from the web or some other large collection of documents. Figure 23.9 shows some sample factoid questions and their answers.
Some factoid questions and their answers.
The dominant paradigm for IR-based QA is the retrieve and read model shown in Fig. 23.10. In the first stage of this 2-stage model we retrieve relevant passages from a text collection, usually using a search engines of the type we saw in the previous section. In the second stage, a neural reading comprehension algorithm passes over each passage and finds spans that are likely to answer the question.
Some question answering systems focus only on the second task, the reading comprehension task. Reading comprehension systems are given a factoid question q and a passage p that could contain the answer, and return an answer s (or perhaps declare that there is no answer in the passage, or in some setups make a choice from
Faiss
23.2 • IR-BASED FACTOID QUESTION ANSWERING 473
BERT bi-encoder for computing relevance of a document to a query.
More complex versions can use other ways to represent the encoded text, such as using average pooling over the BERT outputs of all tokens instead of using the CLS token, or can add extra weight matrices after the encoding or dot product steps (Liu et al. 2016, Lee et al. 2019).
Using dense vectors for IR or the retriever component of question answerers is still an open area of research. Among the many areas of active research are how to do the fine-tuning of the encoder modules on the IR task (generally by fine-tuning on query-document combinations, with various clever ways to get negative examples), and how to deal with the fact that documents are often longer than encoders like BERT can process (generally by breaking up documents into passages).
Efficiency is also an issue. At the core of every IR engine is the need to rank ev- ery possible document for its similarity to the query. For sparse word-count vectors, the inverted index allows this very efficiently. For dense vector algorithms like those based on BERT or other Transformer encoders, finding the set of dense document vectors that have the highest dot product with a dense query vector is an example of nearest neighbor search. Modern systems therefore make use of approximate nearest neighbor vector search algorithms like Faiss (Johnson et al., 2017).
Question   Answer
Where is the Louvre Museum located? What are the names of Odin’s ravens? What kind of nuts are used in marzipan? What instrument did Max Roach play? What’s the official language of Algeria?
in Paris, France Huginn and Muninn almonds
drums
Arabic
 Figure 23.9
   retrieve and read
reading comprehension

474 CHAPTER 23 • QUESTION ANSWERING
IR-based factoid question answering has two stages: retrieval, which returns relevant doc- uments from the collection, and reading, in which a neural reading comprehension system extracts answer spans.
         Q: When was the premiere of The Magic Flute?
Retriever
Indexed Docs
query docs
Relevant Docs
Reader
start end
BERT
[CLS] q1 q2 [SEP] d1 d2
A: 1791
                      Figure 23.10
 SQuAD
HotpotQA
a set of possible answers). Of course this setup does not match the information need of users who have a question they need answered (after all, if a user knew which pas- sage contained the answer, they could just read it themselves). Instead, this task was originally modeled on children’s reading comprehension tests—pedagogical instru- ments in which a child is given a passage to read and must answer questions about it—as a way to evaluate natural language understanding performance (Hirschman et al., 1999). Reading comprehension systems are still used that way, but have also evolved to function as the second stage of the modern retrieve and read model.
Other question answering systems address the entire retrieve and read task; they are given a factoid question and a large document collection (such as Wikipedia or a crawl of the web) and return an answer, usually a span of text extracted from a document. This task is often called open domain QA.
In the next few sections we’ll lay out the various pieces of IR-based QA, starting with some commonly used datasets for both the reading comprehension and full QA tasks.
23.2.1 IR-based QA: Datasets
Datasets for IR-based QA are most commonly created by first developing reading comprehension datasets containing tuples of (passage, question, answer). Reading comprehension systems can use the datasets to train a reader that is given a passage and a question, and predicts a span in the passage as the answer. Including the passage from which the answer is to be extracted eliminates the need for reading comprehension systems to deal with IR.
For example the Stanford Question Answering Dataset (SQuAD) consists of passages from Wikipedia and associated questions whose answers are spans from the passage (Rajpurkar et al. 2016). Squad 2.0 in addition adds some questions that are designed to be unanswerable (Rajpurkar et al. 2018), with a total of just over 150,000 questions. Fig. 23.11 shows a (shortened) excerpt from a SQUAD 2.0 passage together with three questions and their gold answer spans.
SQuAD was built by having humans read a given Wikipedia passage, write ques- tions about the passage, and choose a specific answer span.
Other datasets are created by similar techniques but try to make the questions more complex. The HotpotQA dataset (Yang et al., 2018) was created by showing crowd workers multiple context documents and asked to come up with questions that require reasoning about all of the documents.
The fact that questions in datasets like SQuAD or HotpotQA are created by an- notators who have first read the passage may make their questions easier to answer,

23.2 • IR-BASED FACTOID QUESTION ANSWERING 475
Beyonce ́ Giselle Knowles-Carter (born September 4, 1981) is an American singer, songwriter, record producer and actress. Born and raised in Houston, Texas, she performed in various singing and dancing competitions as a child, and rose to fame in the late 1990s as lead singer of R&B girl-group Destiny’s Child. Managed by her father, Mathew Knowles, the group became one of the world’s best-selling girl groups of all time. Their hiatus saw the release of Beyonce ́’s debut album, Dangerously in Love (2003), which established her as a solo artist worldwide, earned five Grammy Awards and featured the Billboard Hot 100 number-one singles “Crazy in Love” and “Baby Boy”.
      Q: “In what city and state did Beyonce ́ grow up?” A: “Houston, Texas”
   Q: “What areas did Beyonce ́ compete in when she was growing up?” A: “singing and dancing”
   Q: “When did Beyonce ́ release Dangerously in Love?” A: “2003”
  Figure 23.11
  A (Wikipedia) passage from the SQuAD 2.0 dataset (Rajpurkar et al., 2018) with 3 sample questions and the labeled answer spans.
Natural Questions
TyDi QA
since the annotator may (subconsciously) make use of words from the answer text. A common solution to this possible bias is to make datasets from questions that were not written with a passage in mind. The TriviaQA dataset (Joshi et al., 2017) contains 94K questions written by trivia enthusiasts, together with supporting doc- uments from Wikipedia and the web resulting in 650K question-answer-evidence
triples.
The Natural Questions dataset (Kwiatkowski et al., 2019) incorporates real
anonymized queries to the Google search engine. Annotators are presented a query, along with a Wikipedia page from the top 5 search results, and annotate a paragraph- length long answer and a short span answer, or mark null if the text doesn’t contain the paragraph. For example the question “When are hops added to the brewing process?” has the short answer the boiling process and a long answer which the surrounding entire paragraph from the Wikipedia page on Brewing. In using this dataset, a reading comprehension model is given a question and a Wikipedia page and must return a long answer, short answer, or ’no answer’ response.
The above datasets are all in English. The TyDi QA dataset contains 204K question-answer pairs from 11 typologically diverse languages, including Arabic, Bengali, Kiswahili, Russian, and Thai (Clark et al., 2020). In the TYDI QA task, a system is given a question and the passages from a Wikipedia article and must (a) select the passage containing the answer (or NULL if no passage contains the answer), and (b) mark the minimal answer span (or NULL). Many questions have no answer. The various languages in the dataset bring up challenges for QA systems like morphological variation between the question and the answer, or complex issue with word segmentation or multiple alphabets.
In the reading comprehension task, a system is given a question and the passage in which the answer should be found. In the full two-stage QA task, however, sys- tems are not given a passage, but are required to do their own retrieval from some document collection. A common way to create open-domain QA datasets is to mod- ify a reading comprehension dataset. For research purposes this is most commonly done by using QA datasets that annotate Wikipedia (like SQuAD or HotpotQA). For training, the entire (question, passage, answer) triple is used to train the reader. But at inference time, the passages are removed and system is given only the question, together with access to the entire Wikipedia corpus. The system must then do IR to

476 CHAPTER 23 • QUESTION ANSWERING find a set of pages and then read them.
extractive QA
span
23.2.2 IR-based QA: Reader (Answer Span Extraction)
The first stage of IR-based QA is a retriever, for example of the type we saw in Section 23.1. The second stage of IR-based question answering is the reader. The reader’s job is to take a passage as input and produce the answer. In the extractive QA we discuss here, the answer is a span of text in the passage.5 For example given a question like “How tall is Mt. Everest?” and a passage that contains the clause Reaching 29,029 feet at its summit, a reader will output 29,029 feet.
The answer extraction task is commonly modeled by span labeling: identifying in the passage a span (a continuous string of text) that constitutes an answer. Neural algorithms for reading comprehension are given a question q of n tokens q1,...,qn and a passage p of m tokens p1 , ..., pm . Their goal is thus to compute the probability P(a|q, p) that each possible span a is the answer.
If each span a starts at position as and ends at position ae, we make the simplify-
ing assumption that this probability can be estimated as P(a|q, p) = Pstart(as|q, p)Pend(ae|q, p). Thus for for each token pi in the passage we’ll compute two probabilities: pstart(i)
that pi is the start of the answer span, and pend(i) that pi is the end of the answer
span.
A standard baseline algorithm for reading comprehension is to pass the ques- tion and passage to any encoder like BERT (Fig. 23.12), as strings separated with a [SEP] token, resulting in an encoding token embedding for every passage token pi.
    Pstarti Pendi ..
SE i
Encoder (BERT)
[CLS]q1 ... qn [SEP] p1 ... pm Question Passage
...
...
    Figure 23.12
 An encoder model (using BERT) for span-based question answering from reading-comprehension-based question answering tasks.
For span-based question answering, we represent the question as the first se- quence and the passage as the second sequence. We’ll also need to add a linear layer that will be trained in the fine-tuning phase to predict the start and end position of the span. We’ll add two new special vectors: a span-start embedding S and a span-end embedding E, which will be learned in fine-tuning. To get a span-start probability for each output token p′i, we compute the dot product between S and p′i and then use
5 Here we skip the more difficult task of abstractive QA, in which the system can write an answer which is not drawn exactly from the passage.
 
477
(23.16)
(23.17)
The score of a candidate span from position i to j is S · p′i + E · p′j, and the highest scoring span in which j ≥ i is chosen is the model prediction.
The training loss for fine-tuning is the negative sum of the log-likelihoods of the correct start and end positions for each instance:
L=−logPstarti −logPendi (23.18)
Many datasets (like SQuAD 2.0 and Natural Questions) also contain (question, passage) pairs in which the answer is not contained in the passage. We thus also need a way to estimate the probability that the answer to a question is not in the document. This is standardly done by treating questions with no answer as having the [CLS] token as the answer, and hence the answer span start and end index will point at [CLS] (Devlin et al., 2019).
For many datasets we also need to handle the situation where the annotated doc- uments/passages are longer than the maximum 512 input tokens BERT allows. Con- sider for example cases like Natural Questions, where the gold-labeled passages are full Wikipedia pages. In such cases we can create multiple pseudo-passage observa- tions from the labeled Wikipedia page. Each observation is formed by concatenating [CLS], the question, [SEP], and tokens from the document. We walk through the document, sliding a window of size 512 (or rather, 512 minus the question length n minus special tokens) and packing the window of tokens into each next pseudo- passage. The answer span for the observation is either labeled [CLS] (= no answer in this particular window) or the gold-labeled span is marked. Alberti et al. (2019) suggest also allowing the windows to overlap, by using a stride of 128 tokens. The same process can be used for inference, breaking up each retrieved document into separate observation passages and labeling each observation. The answer can be chosen as the span with the highest probability (or nil if no span is more probable than [CLS]). Or Alberti et al. (2019) suggest normalizing each score g(s,e) for a span of start s and end e by the nil score:
g(s, e) = starti + log Pendi startCLS + log PendCLS (23.19) 23.3 Entity Linking
23.3 • ENTITY LINKING a softmax to normalize over all tokens p′i in the passage:
exp(S·p′i) Pstarti = 􏰐 j exp(S · p′j )
 We do the analogous thing to compute a span-end probability: exp(E · p′i)
Pendi = 􏰐jexp(E·p′j)
 entity linking
We’ve now seen the first major paradigm for question answering, IR-based QA. Before we turn to the second major paradigm for question answering, knowledge- based question answering, we introduce the important core technology of entity linking, since it is required for any knowledge-based QA algorithm.
Entity linking is the task of associating a mention in text with the representation of some real-world entity in an ontology (Ji and Grishman, 2011).

478 CHAPTER 23 • QUESTION ANSWERING
wikification
The most common ontology for factoid question-answering is Wikipedia, since Wikipedia is often the source of the text that answers the question. In this usage, each unique Wikipedia page acts as the unique id for a particular entity. This task of deciding which Wikipedia page corresponding to an individual is being referred to by a text mention has its own name: wikification (Mihalcea and Csomai, 2007).
Since the earliest systems (Mihalcea and Csomai 2007, Cucerzan 2007, Milne and Witten 2008), entity linking is done in (roughly) two stages: mention detec- tion and mention disambiguation. We’ll give two algorithms, one simple classic baseline that uses anchor dictionaries and information from the Wikipedia graph structure (Ferragina and Scaiella, 2011) and one modern neural algorithm (Li et al., 2020). We’ll focus here mainly on the application of entity linking to questions rather than other genres.
23.3.1 Linking based on Anchor Dictionaries and Web Graph
As a simple baseline we introduce the TAGME linker (Ferragina and Scaiella, 2011) for Wikipedia, which itself draws on earlier algorithms (Mihalcea and Csomai 2007, Cucerzan 2007, Milne and Witten 2008). Wikification algorithms define the set of entities as the set of Wikipedia pages, so we’ll refer to each Wikipedia page as a unique entity e. TAGME first creates a catalog of all entities (i.e. all Wikipedia pages, removing some disambiguation and other meta-pages) and indexes them in a standard IR engine like Lucene. For each page e, the algorithm computes an in-link count in(e): the total number of in-links from other Wikipedia pages that point to e. These counts can be derived from Wikipedia dumps.
Finally, the algorithm requires an anchor dictionary. An anchor dictionary lists for each Wikipedia page, its anchor texts: the hyperlinked spans of text on other pages that point to it. For example, the web page for Stanford University, http://www.stanford.edu, might be pointed to from another page using anchor texts like Stanford or Stanford University:
     <a href="http://www.stanford.edu">Stanford University</a>
We compute a Wikipedia anchor dictionary by including, for each Wikipedia page e, e’s title as well as all the anchor texts from all Wikipedia pages that point to e. For each anchor string a we’ll also compute its total frequency freq(a) in Wikipedia (including non-anchor uses), the number of times a occurs as a link (which we’ll call link(a)), and its link probability linkprob(a) = link(a)/freq(a). Some cleanup of the final anchor dictionary is required, for example removing anchor strings composed only of numbers or single characters, that are very rare, or that are very unlikely to be useful entities because they have a very low linkprob.
Mention Detection Given a question (or other text we are trying to link), TAGME detects mentions by querying the anchor dictionary for each token sequence up to 6 words. This large set of sequences is pruned with some simple heuristics (for example pruning substrings if they have small linkprobs). The question:
When was Ada Lovelace born?
might give rise to the anchor Ada Lovelace and possibly Ada, but substrings spans like Lovelace might be pruned as having too low a linkprob, and but spans like born have such a low linkprob that they would not be in the anchor dictionary at all.
Mention Disambiguation If a mention span is unambiguous (points to only one entity/Wikipedia page), we are done with entity linking! However, many spans are
anchor texts

23.3 • ENTITY LINKING 479
ambiguous, matching anchors for multiple Wikipedia entities/pages. The TAGME algorithm uses two factors for disambiguating ambiguous spans, which have been referred to as prior probability and relatedness/coherence. The first factor is p(e|a), the probability with which the span refers to a particular entity. For each page e ∈ E(a), the probability p(e|a) that anchor a points to e, is the ratio of the number of links into e with anchor text a to the total number of occurrences of a as an anchor:
prior(a→e) = p(e|a)=count(a→e) (23.20) link(a)
Let’s see how that factor works in linking entities in the following question: What Chinese Dynasty came before the Yuan?
The most common association for the span Yuan in the anchor dictionary is the name of the Chinese currency, i.e., the probability p(Yuan currency| yuan) is very high. Rarer Wikipedia associations for Yuan include the common Chinese last name, a language spoken in Thailand, and the correct entity in this case, the name of the Chinese dynasty. So if we chose based only on p(e|a) , we would make the wrong disambiguation and miss the correct link, Yuan dynasty.
To help in just this sort of case, TAGME uses a second factor, the relatedness of this entity to other entities in the input question. In our example, the fact that the question also contains the span Chinese Dynasty, which has a high probability link to the page Dynasties in Chinese history, ought to help match Yuan dynasty.
Let’s see how this works. Given a question q, for each candidate anchors span a detected in q, we assign a relatedness score to each possible entity e ∈ E(a) of a. The relatedness score of the link a → e is the weighted average relatedness between e and all other entities in q. Two entities are considered related to the extent their Wikipedia pages share many in-links. More formally, the relatedness between two entities A and B is computed as
rel(A, B) = log(max(|in(A)|, |in(B)|)) − log(|in(A)| ∩ |in(B)|) (23.21) log(|W |) − log(min(|in(A)|, |in(B)|))
where in(x) is the set of Wikipedia pages pointing to x and W is the set of all Wiki- pedia pages in the collection.
The vote given by anchor b to the candidate annotation a → X is the average, over all the possible entities of b, of their relatedness to X, weighted by their prior probability:
vote(b,X) = 1 􏰑 rel(X,Y)p(Y|b) (23.22) |E(b)| Y ∈E(b)
The total relatedness score for a → X is the sum of the votes of all the other anchors detected in q:
relatedness(a → X ) = 􏰑 voteb, X (23.23) b∈Xq \a
To score a → X, we combine relatedness and prior by choosing the entity X that has the highest relatedness(a → X), finding other entities within a small ε of this value, and from this set, choosing the entity with the highest prior P(X|a). The result of this step is a single entity assigned to each span in q.
   
480 CHAPTER 23 • QUESTION ANSWERING
The TAGME algorithm has one further step of pruning spurious anchor/entity
pairs, assigning a score averaging link probability with the coherence.
coherence(a→X)= 1 􏰑 rel(B,X) |S| − 1 B∈S\X
score(a → X ) = coherence(a → X ) + linkprob(a) (23.24) 2
Finally, pairs are pruned if score(a → X) < λ, where the threshold λ is set on a held-out set.
  23.3.2 Neural Graph-based linking
Efficient One-Pass End-to-End Entity Linking for Questions
More recent entity linking models are based on biencoders, encoding a candidate
mention span, encoding an entity, and computing the dot product between the en-
Belinda Z. Li⇤ Sewon Min}
codings. This allows embeddings for all the entities in the knowledge base to be
Srinivasan Iyer Yashar Mehdad Wen-tau Yih
precomputed and cached (Wu et al., 2019). Let’s sketch the ELQ linking algorithm MIT CSAIL }University of Washington Facebook AI
of Li et al. (2020), which is given a question q and a set of candidate entities from bzl@mit.edu sewon@cs.washington.edu
Wikipedia with associated Wikipedia text, and outputs tuples (e,ms,me) of entity id, {sviyer,mehdad,scottyih}@fb.com
mention start, and mention end. As Fig. 23.13 shows, it does this by encoding each Wikipedia entity using text from Wikipedia, encoding each mention span using text from the question, and computing their similarity, as we describe below.
    tity link- s a bien- ction and WebQSP
annota- question, of the art 9.6% F1,
nce time ELQ can nswering
 Figure 23.13
 Abstract
We present ELQ, a fast end-to-end en
ing model for questions, which use
coder to jointly perform mention dete
linking in one pass. Evaluated on
and GraphQuestions with extended
tions that cover multiple entities per
ELQ outperforms the previous state
by a large margin of +12.7% and +1 respectively. With a very fast infere
(1.57 examples/s on a single CPU),
be useful for downstream question a
systems. In a proof-of-concept experiment,
we demonstrate that using ELQ significantly
improves the downstream QA performance of
GraphRetriever (Min et al., 2019).1 Introduction
We use the question representations to jointly detect
tity linking (EL), the task of identifying enti-
s and mapping them to the correct entries in
atabase, is crucial for analyzing factoid ques-
have only been evaluated on long, well-formed doc- [q1 ···qn] = BERT([CLS]q1 ···qn[SEP])
(23.25)
ns and for building robust question answering
uments like news articles (Ji et al., 2010), but not on short, noisy text. Also, most prior works have
A sketch of the inference process in the ELQ algorithm for entity linking in Figure 1: Overview of our end-to-end entity linking
system. We separately encode the question and entity. separately encoded, and then scored by the entity/span dot product.
mentions and score candidate entities through inner-
product with the entity vector.
Entity Mention Detection To get an h-dimensional embedding for each question
questions (Li et al., 2020). Each candidate question mention span and candidate entity are
token, the algorithm runs the question through BERT in the normal way:
It then computes the likelihood of each span [i, j] in q being an entity mention, in A) systems. For instance, the question “when focused mainly on improving model prediction ac-
a way similar to the span-based algorithm we saw for the reader above. First we
shaq come to the nba?” can be answered by ex- curacy, largely overlooking efficiency. compute the score for i/ j being the start/end of a mention:
ining Shaquille O’Neal’s Wikipedia article (Min al., 2019), or its properties in a knowledge ph (Yih et al., 2015; Yu et al., 2017). How- r, real-world user questions are invariably noisy
d ill-formed, lacking cues provided by casing d punctuation, which prove challenging to cur- t end-to-end entity linking systems (Yang and ang, 2015; Sorokin and Gurevych, 2018). While
In this work, we propose ELQ, a fast and accu-
s (i)=w ·q, s (j)=w ·q,
rate setnartity linkisntagrt sysitem ethndat specifiecnadllyjtargets
questions. Following the Wikification setup (Rati- nov et al., 2011), ELQ aims to identify the mention boundaries of entities in a given question and their corresponding Wikipedia entity. We employ a bi- encoder based on BERT (Devlin et al., 2019) as shown in Figure 1. The entity encoder computes en-
(23.26)
n d
d
m
a e
n
h

23.3 • ENTITY LINKING 481
where wstart and wend are vectors learned during training. Next, another trainable embedding, wmention is used to compute a score for each token being part of a men- tion:
smention(t) = wmention ·qt
Mention probabilities are then computed by combining these three scores:
􏰋 􏰑j 􏰌 p([i, j]) = σ sstart(i) + send( j) + smention(t)
t=i
(23.27)
(23.28)
Entity Linking To link mentions to entities, we next compute embeddings for each entity in the set E = e1,··· ,ei,··· ,ew of all Wikipedia entities. For each en- tity ei we’ll get text from the entity’s Wikipedia page, the title t(ei) and the first 128 tokens of the Wikipedia page which we’ll call the description d(ei). This is again run through BERT, taking the output of the CLS token BERT[CLS] as the entity representation:
xe = BERT[CLS]([CLS]t(ei)[ENT]d(ei)[SEP]) (23.29)
Mention spans can be linked to entities by computing, for each entity e and span [i, j], the dot product similarity between the span encoding (the average of the token embeddings) and the entity encoding.
1 􏰑j yi,j = (j−i+1) qt
 t−i s(e,[i, j]) = x·eyi,j
(23.30) p(e|[i, j]) = 􏰐 exp(s(e, [i, j])) (23.31)
Training The ELQ mention detection and entity linking algorithm is fully super- vised. This means, unlike the anchor dictionary algorithms from Section 23.3.1, it requires datasets with entity boundaries marked and linked. Two such labeled datasets are WebQuestionsSP (Yih et al., 2016), an extension of the WebQuestions (Berant et al., 2013) dataset derived from Google search questions, and GraphQues- tions (Su et al., 2016). Both have had entity spans in the questions marked and linked (Sorokin and Gurevych 2018, Li et al. 2020) resulting in entity-labeled ver- sions WebQSPEL and GraphQEL (Li et al., 2020).
Given a training set, the ELQ mention detection and entity linking phases are trained jointly, optimizing the sum of their losses. The mention detection loss is a binary cross-entropy loss
LMD =−N1 􏰑 􏰀y−[i,j]logp([i,j])+(1=y[i,j])log(1−p([i,j]))􏰁 (23.32) 1≤i≤ j≤min(i+L−1,n)
with y[i, j] = 1 if [i, j] is a gold mention span, and 0 otherwise. The entity linking loss is:
LED = −logp(eg|[i, j]) (23.33)
where eg is the gold entity for mention [i, j].
See the end of the chapter for more discussion of other applications of entity
linking outside of question answering.
Finally, we take a softmax to get a distribution over entities for each span: e′∈E exp(s(e′,[i, j]))
 
482 CHAPTER 23 • QUESTION ANSWERING
23.4 Knowledge-based Question Answering
While an enormous amount of information is encoded in the vast amount of text on the web, information obviously also exists in more structured forms. We use the term knowledge-based question answering for the idea of answering a natural language question by mapping it to a query over a structured database. Like the text- based paradigm for question answering, this approach dates back to the earliest days of natural language processing, with systems like BASEBALL (Green et al., 1961) that answered questions from a structured database of baseball games and stats.
Two common paradigms are used for knowledge-based QA. The first, graph- based QA, models the knowledge base as a graph, often with entities as nodes and relations or propositions as edges between nodes. The second, QA by semantic parsing, using the semantic parsing methods we saw in Chapter 16.
Both of these methods require some sort of entity linking that we described in the prior section.
23.4.1 Knowledge-Based QA from RDF triple stores
Let’s introduce the components of a simple knowledge-based QA system after entity linking has been performed. We’ll focus on the very simplest case of graph-based QA, in which the dataset is a set of factoids in the form of RDF triples, and the task is to answer questions about one of the missing arguments. Recall from Chap- ter 17 that an RDF triple is a 3-tuple, a predicate with two arguments, expressing some simple relation or proposition. Popular such ontologies are often derived from Wikipedia; DBpedia (Bizer et al., 2009) has over 2 billion RDF triples, or Free- base (Bollacker et al., 2008), now part of Wikidata (Vrandecˇic ́ and Kro ̈tzsch, 2014). Consider an RDF triple like the following:
subject predicate object
AdaLovelace birth-year 1815
This triple can be used to answer text questions like “When was Ada Lovelace born?” or “Who was born in 1815?”.
A number of such question datasets exist. SimpleQuestions (Bordes et al., 2015) contains 100K questions written by annotators based on triples from Freebase. For example, the question ”What American cartoonist is the creator of Andy Lippin- cott?”.waswrittenbasedonthetriple(andy lippincott, character created by, garry trudeau). FreebaseQA (Jiang et al., 2019), aligns the trivia questions from TriviaQA (Joshi et al., 2017) and other sources with triples in Freebase, align- ing for example the trivia question “Which 18th century author wrote Clarissa (or The Character History of a Young Lady), said to be the longest novel in the English language?” with the triple (Clarissa, book.written-work.author, Samuel Richardson). Another such family of datasets starts from WEBQUESTIONS (Be- rant et al., 2013), which contains 5,810 questions asked by web users, each be- ginning with a wh-word, containing exactly one entity, and paired with handwritten answers drawn from the Freebase page of the question’s entity. WEBQUESTIONSSP (Yih et al., 2016) augments WEBQUESTIONS with human-created semantic parses (SPARQL queries) for those questions answerable using Freebase. COMPLEXWEB- QUESTIONS augments the dataset with compositional and other kinds of complex questions, resulting in 34,689 questions, along with answers, web snippets, and SPARQL queries (Talmor and Berant, 2018).

23.4 • KNOWLEDGE-BASED QUESTION ANSWERING 483
Let’s assume we’ve already done the stage of entity linking introduced in the prior section. Thus we’ve mapped already from a textual mention like Ada Lovelace to the canonical entity ID in the knowledge base. For simple triple relation ques- tion answering, the next step is to determine which relation is being asked about, mapping from a string string like “When was ... born” to canonical relations in the knowledge base like birth-year. We might sketch the combined task as:
“When was Ada Lovelace born?” → birth-year (Ada Lovelace, ?x) “What is the capital of England?” → capital-city(?x, England)
The next step is relation detection and linking. For simple questions, where we assume the question has only a single relation, relation detection and linking can be done in a way resembling the neural entity linking models: computing similarity (generally by dot product) between the encoding of the question text and an encoding for each possible relation. For example, in the algorithm of (Lukovnikov et al., 2019), the CLS output of a BERT model is used to represent the question span for the purposes of relation detection, and a separate vector is trained for each relation ri. The probability of a particular relation ri is then computed by softmax over the dot products:
mr = BERTCLS([CLS]q1 ···qn[SEP]) s(mr,ri) = mr ·wri
p(ri|q1,··· ,qn) = 􏰐 exp(s(mr,ri)) (23.34) k=1 NR exp(s(mr,rk))
Ranking of answers Most algorithms have a final stage which takes the top j entities and the top k relations returned by the entity and relation inference steps, searches the knowledge base for triples containing those entities and relations, and then ranks those triples. This ranking can be heuristic, for example scoring each entity/relation pairs based on the string similarity between the mention span and the entities text aliases, or favoring entities that have a high in-degree (are linked to by many relations). Or the ranking can be done by training a classifier to take the concatenated entity/relation encodings and predict a probability.
23.4.2 QA by Semantic Parsing
The second kind of knowledge-based QA uses a semantic parser to map the ques- tion to a structured program to produce an answer. These logical forms can take the form of some version of predicate calculus, a query language like SQL or SPARQL, or some other executable program like the examples in Fig. 23.14.
The logical form of the question is thus either in the form of a query or can easily be converted into one (predicate calculus can be converted to SQL, for example). The database can be a full relational database, or some other structured knowledge store.
As we saw in Chapter 16, semantic parsing algorithms can be supervised fully with questions paired with a hand-built logical form, or can be weakly supervised by questions paired with an answer (the denotation), in which the logical form is modeled only as a latent variable.
For the fully supervised case, we can get a set of questions paired with their correct logical form from datasets like the GEOQUERY dataset of questions about US geography (Zelle and Mooney, 1996), the DROP dataset of complex questions (on history and football games) that require reasoning (Dua et al. 2019), or the ATIS
 
484 CHAPTER 23 • QUESTION ANSWERING
Question Logical form
 What states border Texas? λ x.state(x) ∧ borders(x, texas) What is the largest state? argmax(λ x.state(x), λ x.size(x))
     I’d like to book a flight from San Diego to Toronto
SELECT DISTINCT f1.flight id FROM flight f1, airport service a1,
city c1, airport service a2, city c2 WHERE f1.from airport=a1.airport code
AND a1.city code=c1.city code AND c1.city name= ’san diego’ AND f1.to airport=a2.airport code AND a2.city code=c2.city code AND c2.city name= ’toronto’
Howmanypeoplesurvivedthesinkingof (count (!fb:event.disaster.survivors the Titanic? fb:en.sinking of the titanic))
   How many yards longer was Johnson’s longest touchdown compared to his short- est touchdown of the first quarter?
ARITHMETIC diff( SELECT num( ARGMAX( SELECT ) ) SELECT num( ARGMIN( FILTER( SELECT ) ) ) )
   Figure 23.14
   Sample logical forms produced by a semantic parser for question answering, including two questions from the GeoQuery database of questions on U.S. Geography (Zelle and Mooney, 1996) with predicate calculus representations, one ATIS question with SQL (Iyer et al., 2017), a program over Freebase relations, and a program in QDMR, the Question Decomposition Meaning Representation (Wolfson et al., 2020).
dataset of flight queries, all of which have versions with SQL or other logical forms (Iyer et al. 2017, Wolfson et al. 2020, Oren et al. 2020).
The task is then to take those pairs of training tuples and produce a system that maps from new questions to their logical forms. A common baseline algorithm is a simple sequence-to-sequence model, for example using BERT to represent ques- tion tokens, passing them to a biLSTM encoder decoder Chapter 11, as sketched in Fig. 23.15.
Any other of the semantic parsing algorithms described in Chapter 16 would also be appropriate.
An encoder-decoder semantic parser for translating a question to logical form, with a BERT pre-encoder followed by an encoder-decoder (biLSTM or Transformer).
23.5 Using Language Models to do QA
An alternative approach to doing QA is to query a pretrained language model, forc- ing a model to answer a question solely from information stored in its parameters. For example Roberts et al. (2020) use the T5 language model, which is an encoder- decoder architecture pretrained to fill in masked spans of task. Fig. 23.16 shows the
    lambda x state ( x ) and borders ( x , Texas )
encoder-decoder
  BERT
[CLS] what states border Texas ? [SEP]
 Figure 23.15
 
R
o
o
e g
u n
n
s w e
n
l n
m a 1
n ”
l
p l e
a
z
s
k
d m
.
oberts⇤
gle ogle.com
Abstract
been observed that neural lan- rained on unstructured text can and retrieve knowledge using e queries. In this short pa- re the practical utility of this e-tuning pre-trained models to s without access to any exter- knowledge. We show that this with model size and performs ith open-domain systems that ve answers from an external rce when answering questions. producibility and future work,
code and trained models.1
anguage models that have been Language modeling is not yet a complete solution for question answering; for
labeled text have proven to be
ant when fine-tuned on down-
nguage Processing (NLP) tasks
pre-training objective (Petroni et al., 2019; Jiang
et al., 2019) and/or measure reasoning capabili-
8; Yang et al., 2019; Liu et al.,
Colin Raffel⇤ Google craffel@gmail.com
Noam Shazeer
Google
noam@google.com
2019; Raffel et al., 2019). In-
23.6 Classic QA Models
also recently been observed that internalize a sort of implicit
ties (Talmor et al., 2019). In this work, we take
a different approach by evaluating the capability
fill in masked spans of task (marked by <M>) by generating the missing spans (separated by <M>) in the decoder. It is then fine-tuned on QA datasets, given the question, without adding
of text (denoted by <M>) from documents in a large, any additional context or passages. Figure from Roberts et al. (2020).
unstructured text corpus. We fine-tune T5 to answer questions without inputting any additional information
architecture; the deleted spans are marked by <M>, and the system is trained to have or context. This forces T5 to answer questions based on
the decoder generating the missing spans (separated by <M>).
Roberts et al. (2020) then finetune the T5 system to the question answering task,
“knowledge” that it internalized during pre-training.
by giving it a question, and training it to output the answer text in the decoder. Using the largest 11-billion-parameter T5 model does competitively, although not quite as well as systems designed specifically for question answering.
Past work investigating “language models as example in addition to not working quite as well, they suffer from poor interpretabil-
knowledge bases” has typically tried to under-
ity (unlike standard QA systems, for example, they currently can’t give users more
contextbsytatenlldingththemswcohaptepasosfagtehtheeainsfwoerrmcaamteiofrnoms)t.oNroendethienlestsh,ethestudy
of extracting answer from language models is an intriguing area for future question
model using synthetic tasks that are similar to the answer research.
While neural architectures are the state of the art for question answering, pre-neural
of language models on the practical task of open-
after pre-training (Petroni et al.,
architectures using hybrids of rules and feature-based classifiers can sometimes
domain question answering – specifically, we fine-
., 2019; Talmor et al., 2019ac)h.ieve higher performance. Here we summarize one influential classic system,
otentially useful because 1) the t up by pre-training on unstruc-
tune the model to answer questions without access
(Fig. 23.17). Let’s consider how it handles these Jeopardy! examples, each with a
the Watson DeepQA system from IBM that won the Jeopardy! challenge in 2011
to any external knowledge or context. To do so, category followed by a question:
the model must parse a natural language query and
d text data, which is freely avail-
ntities on the Internet (Raffel
ek et al., 2019), and 2) it is pos-
formation using informal natural
linked with clerk).
s. et al., 2018; Khashabi et al., 2018; Clark et al.,
Poets and Poetry: He was a bank clerk in the Yukon before he published “S“olnogosokfuapSoiunrdfourgmh”aitnio19n0”7.storedinitsparameters.
THEATRE: A new play based on this Sir Arthur Conan Doyle canine Most past work on question answering either
classic opened on the London stage in 2007.
explicitly feeds pertinent information to the model
Question Processing In this stage the questions are parsed, named entities are ex- ince these pre-trained language alongside the question (for example, an article that
tracted (Sir Arthur Conan Doyle identified as a PERSON, Yukon as a GEOPOLITICAL nfine-tunedonnaturallanguagENeTITY,c“oSnotnagisnosftahSeoaurndsowugehr”(aRsajCpOuMrkPOaSrIeTItOaNl).,,c2o0re1fe6re;nZcehaisnrgun(heis
ution. Noam suggested trying T5 on coded and ran initial experiments on proved performance with model size. and ran most experiments. Colin set the
the paper, and ran a few experiments.
gle/t5- cbqa
tion from an external knowledge source (Berant et al., 2013; Chen et al., 2017). By feeding the model the input question alone, we can determine how much knowledge it has stored in its param-
focus The question focus, shown in bold in both examples, is extracted. The focus is
2019)) or allows the model to retrieve informa-
the string of words in the question that corefers with the answer. It is likely to be
23.6 •
CLASSIC QA MODELS 485
     􏰤􏰥􏰦􏰧􏰨􏰩􏰦􏰪􏰫 􏰭􏰥􏰮􏰪􏰯􏰰􏰨􏰪 􏰱􏰲􏰳 􏰴􏰵􏰥􏰪 􏰱􏰲􏰳 􏰶􏰮􏰪􏰷􏰮􏰥􏰸 􏰹􏰺􏰺􏰻􏰼
􏱄􏰨􏰰􏰸 􏱁􏰵􏰷􏰰􏰩􏰪􏱅􏰫 􏰱􏰲􏰳􏰼 􏱆􏰾􏰦 􏱇􏰮􏰨􏰫􏰥􏰦􏰧􏰧 􏰾􏰮􏰩 􏰴􏰥􏰵􏰷􏱃􏰾􏰫 􏰫􏰾􏰦 􏰰􏰮􏰥􏱃􏰦􏰧􏰫 􏰱􏰲􏰳 􏰵􏱈 􏱁􏰾􏰵􏱁􏰵􏰰􏰮􏰫􏰦 􏱁􏰮􏰯􏰦 􏰱􏰲􏰳 􏰧􏰦􏰦􏰪􏰼
􏰽􏰷􏰥 􏰱􏰲􏰳 􏰾􏰮􏰪􏰩􏰿􏱀􏰨􏱁􏰯􏰦􏰩 􏰮􏰪􏰩 􏰧􏰷􏰪􏰿􏰩􏰥􏰨􏰦􏰩 􏰱􏰲􏰳 􏰵􏰥􏱁􏰾􏰮􏰥􏰩 􏰨􏰪 􏱂􏰦􏰵􏰥􏱃􏰨􏰮􏰼
􏱏􏰧􏱈􏰼􏰷􏰧􏰴􏱐􏰵􏱐􏰵􏰾 􏱂􏱐􏰵􏱈􏰼􏰷􏱌􏰵􏱐􏰵􏰾
􏱆􏱉
􏰤􏰥􏰦􏰧􏰨􏰩􏰦􏰪􏰫 􏰭􏰥􏰮􏰪􏰯􏰰􏰨􏰪 􏱊􏰼 􏱋􏰵􏰵􏰧􏰦􏱌􏰦􏰰􏰫 􏱇􏰮􏰧 􏰴􏰵􏰥􏰪 􏰨􏰪 􏰶􏰮􏰪􏰷􏰮􏰥􏰸 􏰹􏰺􏰺􏰻􏰼
􏱊􏰼 􏱋􏰵􏰵􏰧􏰦􏱌􏰦􏰰􏰫 􏱇􏰮􏰧 􏰱􏰲􏰳 􏰨􏰪 􏰴􏰦􏰰􏰨􏰦􏱌􏰦 􏰾􏰦􏰥 􏰦􏰸􏰦􏰧 􏰱􏰲􏰳
􏱀􏰨􏰦􏱁􏰦 􏰱􏰲􏰳 􏰧􏰾􏰦 􏰾􏰮􏰩 􏰦􏱌􏰦􏰥 􏱀􏰦􏰮􏱁􏰾􏰦􏰧 􏰮􏰥􏰦 􏰱􏰲􏰳 􏰮􏰫 􏰵􏰷􏰥
            􏱍􏰾􏰦􏰪 􏱇􏰮􏰧 􏰭􏰥􏰮􏰪􏰯􏰰􏰨􏰪 􏱊􏰼 􏱋􏰵􏰵􏰧􏰦􏱌􏰦􏰰􏰫 􏰴􏰵􏰥􏰪􏱎
􏱆􏱉
􏰹􏰺􏰺􏰻
 Figure 23.16
 The T5 system is an encoder-decoder architecture. In pretraining, it learns to Figure 1: T5 is pre-trained to fill in dropped-out spans

486 CHAPTER 23 • QUESTION ANSWERING
The 4 broad stages of Watson QA: (1) Question Processing, (2) Candidate Answer Generation, (3) Candidate Answer Scoring, and (4) Answer Merging and Confidence Scoring.
       Question
(1) Question Processing
Focus Detection
(2) Candidate Answer Generation
(3) Candidate Answer Scoring
Text Time from Evidence DBPedia Sources Answer
Text Type Evidence
Sources
Space from Facebook
(4) Confidence Merging and Ranking
 From Text Resources
passages
 Candidate Answer
Candidate Answer Candidate
Candidate Answer
+ Confidence
Candidate Answer
+ Confidence
Candidate
Answer
+
Confidence Candidate
Answer
+
Candidate Confidence
Answer
+ Confidence
  Document and Passsage Retrieval
    Answer Extraction Document titles Anchor text
         CAannsdwiedrate Candidate
   Answer Answer
Evidence
Retrieval and scoring
   Lexical Answer Type Detection
Document Document
Candidate
Answer Candidate
Answer Candidate
ACnasnwdei dr a t e Answer
Candidate Answer Candidate
Answer Candidate
Answer
Merge Equivalent Answers
  Document Document Document Document
      Logistic Regression Answer Ranker
    Question Classification
From Structured Data
DBPedia Freebase
         Parsing
   Named Entity Tagging
     Relation Extraction
Relation Retrieval
 Answer and Confidence
   Coreference
               Figure 23.17
 lexical answer type
replaced by the answer in any answer string found and so can be used to align with a supporting passage. In DeepQA The focus is extracted by handwritten rules—made possible by the relatively stylized syntax of Jeopardy! questions—such as a rule extracting any noun phrase with determiner “this” as in the Conan Doyle example, and rules extracting pronouns like she, he, hers, him, as in the poet example.
The lexical answer type (shown in blue above) is a word or words which tell us something about the semantic type of the answer. Because of the wide variety of questions in Jeopardy!, DeepQA chooses a wide variety of words to be answer types, rather than a small set of named entities. These lexical answer types are again extracted by rules: the default rule is to choose the syntactic headword of the focus. Other rules improve this default choice. For example additional lexical answer types can be words in the question that are coreferent with or have a particular syntactic relation with the focus, such as headwords of appositives or predicative nominatives of the focus. In some cases even the Jeopardy! category can act as a lexical answer type, if it refers to a type of entity that is compatible with the other lexical answer types. Thus in the first case above, he, poet, and clerk are all lexical answer types. In addition to using the rules directly as a classifier, they can instead be used as features in a logistic regression classifier that can return a probability as well as a lexical answer type. These answer types will be used in the later ‘candidate answer scoring’ phase as a source of evidence for each candidate. Relations like the following are also extracted:
authorof(focus,“Songs of a sourdough”) publish (e1, he, “Songs of a sourdough”) in (e2, e1, 1907) temporallink(publish(...), 1907)
Finally the question is classified by type (definition question, multiple-choice, puzzle, fill-in-the-blank). This is generally done by writing pattern-matching regular expressions over words or parse trees.
Candidate Answer Generation Next we combine the processed question with ex- ternal documents and other knowledge sources to suggest many candidate answers from both text documents and structured knowledge bases. We can query structured

anchor texts
23.6 • CLASSIC QA MODELS 487
resources like DBpedia or IMDB with the relation and the known entity, just as we saw in Section 23.4. Thus if we have extracted the relation authorof(focus,"Songs of a sourdough"),wecanqueryatriplestorewithauthorof(?x,"Songs of a sourdough") to return an author.
To extract answers from text DeepQA uses simple versions of Retrieve and Read. For example for the IR stage, DeepQA generates a query from the question by elimi- nating stop words, and then upweighting any terms which occur in any relation with the focus. For example from this query:
MOVIE-“ING”: Robert Redford and Paul Newman starred in this depression- era grifter flick. (Answer: “The Sting”)
the following weighted query might be passed to a standard IR system:
(2.0 Robert Redford) (2.0 Paul Newman) star depression era grifter (1.5 flick)
DeepQA also makes use of the convenient fact that the vast majority of Jeopardy! answers are the title of a Wikipedia document. To find these titles, we can do a second text retrieval pass specifically on Wikipedia documents. Then instead of extracting passages from the retrieved Wikipedia document, we directly return the titles of the highly ranked retrieved documents as the possible answers.
Once we have a set of passages, we need to extract candidate answers. If the document happens to be a Wikipedia page, we can just take the title, but for other texts, like news documents, we need other approaches. Two common approaches are to extract all anchor texts in the document (anchor text is the text between <a> and </a> used to point to a URL in an HTML page), or to extract all noun phrases in the passage that are Wikipedia document titles.
Candidate Answer Scoring Next DeepQA uses many sources of evidence to score each candidate. This includes a classifier that scores whether the candidate answer can be interpreted as a subclass or instance of the potential answer type. Consider the candidate “difficulty swallowing” and the lexical answer type “man- ifestation”. DeepQA first matches each of these words with possible entities in ontologies like DBpedia and WordNet. Thus the candidate “difficulty swallowing” is matched with the DBpedia entity “Dysphagia”, and then that instance is mapped to the WordNet type “Symptom”. The answer type “manifestation” is mapped to the WordNet type “Condition”. The system looks for a hyponymy, or synonymy link, in this case finding hyponymy between “Symptom” and “Condition”.
Other scorers are based on using time and space relations extracted from DBpe- dia or other structured databases. For example, we can extract temporal properties of the entity (when was a person born, when died) and then compare to time expres- sions in the question. If a time expression in the question occurs chronologically before a person was born, that would be evidence against this person being the an- swer to the question.
Finally, we can use text retrieval to help retrieve evidence supporting a candidate answer. We can retrieve passages with terms matching the question, then replace the focus in the question with the candidate answer and measure the overlapping words or ordering of the passage with the modified question.
The output of this stage is a set of candidate answers, each with a vector of scoring features.
Answer Merging and Scoring DeepQA finally merges equivalent candidate an- swers. Thus if we had extracted two candidate answers J.F.K. and John F. Kennedy, this stage would merge the two into a single candidate, for example using the anchor

488 CHAPTER 23 • QUESTION ANSWERING
23.7
dictionaries described above for entity linking, which will list many synonyms for Wikipedia titles (e.g., JFK, John F. Kennedy, Senator John F. Kennedy, President Kennedy, Jack Kennedy). We then merge the evidence for each variant, combining the scoring feature vectors for the merged candidates into a single vector.
Now we have a set of candidates, each with a feature vector. A classifier takes each feature vector and assigns a confidence value to this candidate answer. The classifier is trained on thousands of candidate answers, each labeled for whether it is correct or incorrect, together with their feature vectors, and learns to predict a probability of being a correct answer. Since, in training, there are far more incorrect answers than correct answers, we need to use one of the standard techniques for dealing with very imbalanced data. DeepQA uses instance weighting, assigning an instance weight of .5 for each incorrect answer example in training. The candidate answers are then sorted by this confidence value, resulting in a single best answer.
DeepQA’s fundamental intuition is thus to propose a very large number of candi- date answers from both text-based and knowledge-based sources and then use a rich variety of evidence features for scoring these candidates. See the papers mentioned at the end of the chapter for more details.
Evaluation of Factoid Answers
mean reciprocal rank
A common evaluation metric for factoid question answering, introduced in the TREC
Q/A track in 1999, is mean reciprocal rank, or MRR. MRR assumes a test set of MRR questions that have been human-labeled with correct answers. MRR also assumes that systems are returning a short ranked list of answers or passages containing an- swers. Each question is then scored according to the reciprocal of the rank of the first correct answer. For example if the system returned five answers but the first three are wrong and hence the highest-ranked correct answer is ranked fourth, the reciprocal rank score for that question would be 41 . Questions with return sets that do not contain any correct answers are assigned a zero. The score of a system is then the average of the score for each question in the set. More formally, for an evaluation of a system returning a set of ranked answers for a test set consisting of
N questions, the MRR is defined as
MRR= 1 􏰑N 1 (23.35)
Reading comprehension systems on datasets like SQuAD are often evaluated using two metrics, both ignoring punctuation and articles (a, an, the) (Rajpurkar et al., 2016):
• Exact match: The percentage of predicted answers that match the gold answer exactly.
• F1 score: The average overlap between predicted and gold answers. Treat the prediction and gold as a bag of tokens, and compute F1, averaging the F1 over all questions.
A number of test sets are available for question answering. Early systems used the TREC QA dataset; questions and handwritten answers for TREC competitions from 1999 to 2004 are publicly available. More recent competitions uses the various datasets described in Section 23.2.1.
 N i=1 s.t. ranki̸=0 ranki

BIBLIOGRAPHICAL AND HISTORICAL NOTES 489
There are a wide variety of datasets for training and testing reading comprehen- sion/answer extraction in addition to the datasets discussed on page 474. Some take their structure from the fact that reading comprehension tasks designed for children tend to be multiple choice, with the task being to choose among the given answers. The MCTest dataset uses this structure, with 500 fictional short stories created by crowd workers with questions and multiple choice answers (Richardson et al., 2013). The AI2 Reasoning Challenge (ARC) (Clark et al., 2018), has questions that are de- signed to be hard to answer from simple lexical methods:
Which property of a mineral can be determined just by looking at it? (A) luster [correct] (B) mass (C) weight (D) hardness
This ARC example is difficult because the correct answer luster is unlikely to co- occur frequently on the web with phrases like looking at it, while the word mineral is highly associated with the incorrect answer hardness.
Bibliographical and Historical Notes
Question answering was one of the earliest NLP tasks, and early versions of the text- based and knowledge-based paradigms were developed by the very early 1960s. The text-based algorithms generally relied on simple parsing of the question and of the sentences in the document, and then looking for matches. This approach was used very early on (Phillips, 1960) but perhaps the most complete early system, and one that strikingly prefigures modern relation-based systems, was the Protosynthex sys- tem of Simmons et al. (1964). Given a question, Protosynthex first formed a query from the content words in the question, and then retrieved candidate answer sen- tences in the document, ranked by their frequency-weighted term overlap with the question. The query and each retrieved sentence were then parsed with dependency parsers, and the sentence whose structure best matches the question structure se- lected. Thus the question What do worms eat? would match worms eat grass: both have the subject worms as a dependent of eat, in the version of dependency grammar used at the time, while birds eat worms has birds as the subject:
What do worms eat Worms eat grass Birds eat worms
The alternative knowledge-based paradigm was implemented in the BASEBALL system (Green et al., 1961). This system answered questions about baseball games like “Where did the Red Sox play on July 7” by querying a structured database of game information. The database was stored as a kind of attribute-value matrix with values for attributes of each game:
             Month = July
                Place = Boston
                    Day  = 7
                    Game Serial No.  = 96
                    (Team = Red Sox, Score = 5)
                    (Team = Yankees, Score = 3)
 
490
CHAPTER 23 • QUESTION ANSWERING
LUNAR
Each question was constituency-parsed using the algorithm of Zellig Harris’s TDAP project at the University of Pennsylvania, essentially a cascade of finite- state transducers (see the historical discussion in Joshi and Hopely 1999 and Kart- tunen 1999). Then in a content analysis phase each word or phrase was associated with a program that computed parts of its meaning. Thus the phrase ‘Where’ had code to assign the semantics Place = ?, with the result that the question “Where did the Red Sox play on July 7” was assigned the meaning
Place = ?
Team = Red Sox
Month = July
Day = 7
The question is then matched against the database to return the answer. Simmons (1965) summarizes other early QA systems.
Another important progenitor of the knowledge-based paradigm for question- answering is work that used predicate calculus as the meaning representation lan- guage. The LUNAR system (Woods et al. 1972, Woods 1978) was designed to be a natural language interface to a database of chemical facts about lunar geology. It could answer questions like Do any samples have greater than 13 percent aluminum by parsing them into a logical form
(TEST (FOR SOME X16 / (SEQ SAMPLES) : T ; (CONTAIN’ X16 (NPR* X17 / (QUOTE AL203)) (GREATERTHAN 13 PCT))))
The rise of the web brought the information-retrieval paradigm for question an- swering to the forefront. The U.S. government-sponsored TREC (Text REtrieval Conference) evaluations, run annually since 1992, provide a testbed for evaluating information-retrieval tasks and techniques. TREC provides large document sets for both training and testing, along with uniform scoring systems (Voorhees and Har- man, 2005). Details of all of the meetings can be found at the TREC page on the National Institute of Standards and Technology website. TREC added an influential QA track in 1999, which led to a wide variety of factoid and non-factoid systems competing in annual evaluations.
At that same time, Hirschman et al. (1999) introduced the idea of using chil- dren’s reading comprehension tests to evaluate machine text comprehension algo- rithms. They acquired a corpus of 120 passages with 5 questions each designed for 3rd-6th grade children, built an answer extraction system, and measured how well the answers given by their system corresponded to the answer key from the test’s publisher. Their algorithm focused on word overlap as a feature; later algorithms added named entity features and more complex similarity between the question and the answer span (Riloff and Thelen 2000, Ng et al. 2000).
Neural reading comprehension systems drew on the insight of these early sys- tems that answer finding should focus on question-passage similarity. Many of the architectural outlines of modern systems were laid out in early work like (Hermann et al., 2015a), Chen et al. (2017), and Seo et al. (2017). TBD: MORE recent QA history.
The DeepQA component of the Watson system that won the Jeopardy! chal- lenge is described in a series of papers in volume 56 of the IBM Journal of Research and Development; see for example Ferrucci (2012). Other question-answering tasks include Quiz Bowl, which has timing considerations since the question can be inter- rupted (Boyd-Graber et al., 2018). Question answering is also an important function of modern personal assistant dialog systems; see Chapter 24 for more.

Exercises
EXERCISES 491

492 CHAPTER 24 • CHATBOTS & DIALOGUE SYSTEMS CHAPTER
24 Chatbots & Dialogue Systems
  conversation dialogue
dialogue system
conversational agent
Les lois de la conversation sont en ge ́ne ́ral de ne s’y appesantir sur aucun ob- jet, mais de passer le ́ge`rement, sans effort et sans affectation, d’un sujet a` un autre ; de savoir y parler de choses frivoles comme de choses se ́rieuses
[The rules of conversation are, in general, not to dwell on any one subject, but to pass lightly from one to another without effort and without affectation; to know how to speak about trivial topics as well as serious ones;]
The 18th C. Encyclopedia of Diderot, start of the entry on conversation
“What ho!” I said.
“What ho!” said Motty.
“What ho! What ho!”
“What ho! What ho! What ho!”
After that it seemed rather difficult to go on with the conversation.”
P.G. Wodehouse, My Man Jeeves
The literature of the fantastic abounds in inanimate objects magically endowed with sentience and the gift of speech. From Ovid’s statue of Pygmalion to Mary Shelley’s Frankenstein, there is something deeply moving about creating something and then having a chat with it. Legend has it that after finishing his
sculpture Moses, Michelangelo thought it so lifelike that he tapped it on the knee and commanded it to speak. Per- haps this shouldn’t be surprising. Language is the mark of humanity and sentience, and conversation or dialogue is the most fundamental and specially privileged arena of language. It is the first kind of language we learn as children, and for most of us, it is the kind of language we most commonly indulge in, whether we are ordering curry for lunch or buying spinach, participating in busi- ness meetings or talking with our families, booking air- line flights or complaining about the weather.
This chapter introduces the fundamental algorithms of dialogue systems, or conversational agents. These programs communicate with users in natural lan- guage (text, speech, or both), and fall into two classes. Task-oriented dialogue agents use conversation with users to help complete tasks. Dialogue agents in dig- ital assistants (Siri, Alexa, Google Now/Home, Cortana, etc.), give directions, con- trol appliances, find restaurants, or make calls. Conversational agents can answer questions on corporate websites, interface with robots, and even be used for social good: DoNotPay is a “robot lawyer” that helps people challenge incorrect park- ing fines, apply for emergency housing, or claim asylum if they are refugees. By

24.1
24.1 • PROPERTIES OF HUMAN CONVERSATION 493
contrast, chatbots are systems designed for extended conversations, set up to mimic the unstructured conversations or ‘chats’ characteristic of human-human interaction, mainly for entertainment, but also for practical purposes like making task-oriented agents more natural.1 In Section 24.2 we’ll discuss the three major chatbot architec- tures: rule-based systems, information retrieval systems, and encoder-decoder gen- erators. In Section 24.3 we turn to task-oriented agents, introducing the frame-based architecture (the GUS architecture) that underlies most task-based systems.
Properties of Human Conversation
Conversation between humans is an intricate and complex joint activity. Before we attempt to design a conversational agent to converse with humans, it is crucial to understand something about how humans converse with each other. Consider some of the phenomena that occur in the conversation between a human travel agent and a human client excerpted in Fig. 24.1.
C1: A2: C3: A4: C5: A6: C7: A8: C9: A10:
C11: A12:
C13: A14: C15: A16: C17 : A18 : C19: A20 :
...I need to travel in May.
And, what day in May did you want to travel?
OK uh I need to be there for a meeting that’s from the 12th to the 15th. And you’re flying into what city?
Seattle.
And what time would you like to leave Pittsburgh?
Uh hmm I don’t think there’s many options for non-stop.
Right. There’s three non-stops today.
What are they?
The first one departs PGH at 10:00am arrives Seattle at 12:05 their time. The second flight departs PGH at 5:55pm, arrives Seattle at 8pm. And the last flight departs PGH at 8:15pm arrives Seattle at 10:28pm. OKI’lltakethe5ishflightonthenightbeforeonthe11th.
On the 11th? OK. Departing at 5:55pm arrives Seattle at 8pm, U.S. Air flight 115.
OK.
AndyousaidreturningonMay15th?
Uh,yeah,attheendoftheday.
OK.There’s#twonon-stops...#
#Act. . . actually #, what day of the week is the 15th? It’s a Friday.
Uhhmm.IwouldconsiderstayingthereanextradaytilSunday. OK...OK. On Sunday I have ...
   Figure 24.1
 Part of a phone conversation between a human travel agent (A) and human client (C). The passages framed by # in A16 and C17 indicate overlaps in speech.
Turns
turn A dialogue is a sequence of turns (C1, A2, C3, and so on), each a single contribution
from one speaker to the dialogue (as if in a game: I take a turn, then you take a turn,
1 By contrast, in popular usage, the word chatbot is often generalized to refer to both task-oriented and chit-chat systems; we’ll be using dialogue systems for the former.
 
494 CHAPTER 24 • CHATBOTS & DIALOGUE SYSTEMS
endpointing
speech acts
then me, and so on). There are 20 turns in Fig. 24.1. A turn can consist of a sentence (like C1), although it might be as short as a single word (C13) or as long as multiple sentences (A10).
Turn structure has important implications for spoken dialogue. A system has to know when to stop talking; the client interrupts (in A16 and C17), so the system must know to stop talking (and that the user might be making a correction). A system also has to know when to start talking. For example, most of the time in conversation, speakers start their turns almost immediately after the other speaker finishes, without a long pause, because people are able to (most of the time) detect when the other person is about to finish talking. Spoken dialogue systems must also detect whether a user is done speaking, so they can process the utterance and respond. This task— called endpointing or endpoint detection— can be quite challenging because of noise and because people often pause in the middle of turns.
Speech Acts
A key insight into conversation—due originally to the philosopher Wittgenstein (1953) but worked out more fully by Austin (1962)—is that each utterance in a dialogue is a kind of action being performed by the speaker. These actions are com- monly called speech acts or dialog acts: here’s one taxonomy consisting of 4 major classes (Bach and Harnish, 1979):
A user asking a person or a dialogue system to do something (‘Turn up the mu- sic’) is issuing a DIRECTIVE. Asking a question that requires an answer is also a way of issuing a DIRECTIVE: in a sense when the system says (A2) “what day in May did you want to travel?” it’s as if the system is (very politely) command- ing the user to answer. By contrast, a user stating a constraint (like C1 ‘I need to travel in May’) is issuing a CONSTATIVE. A user thanking the system is issuing an ACKNOWLEDGMENT. The speech act expresses an important component of the intention of the speaker (or writer) in saying what they said.
Grounding
A dialogue is not just a series of independent speech acts, but rather a collective act performed by the speaker and the hearer. Like all collective acts, it’s important for the participants to establish what they both agree on, called the common ground (Stalnaker, 1978). Speakers do this by grounding each other’s utterances. Ground- ing means acknowledging that the hearer has understood the speaker; like an ACK used to confirm receipt in data communications (Clark, 1996). (People need ground- ing for non-linguistic actions as well; the reason an elevator button lights up when it’s pressed is to acknowledge that the elevator has indeed been called (Norman, 1988).)
Humans constantly ground each other’s utterances. We can ground by explicitly saying “OK”, as the agent does in A8 or A10. Or we can ground by repeating what
Constatives: committing the speaker to something’s being the case (answering, claiming, confirming, denying, disagreeing, stating)
Directives: attempts by the speaker to get the addressee to do something (advising, ask- ing, forbidding, inviting, ordering, requesting)
Commissives: committing the speaker to some future course of action (promising, planning, vowing, betting, opposing)
Acknowledgments: express the speaker’s attitude regarding the hearer with respect to some so- cial action (apologizing, greeting, thanking, accepting an acknowledgment)
 common ground
grounding

conversational analysis
adjacency pair
side sequence subdialogue
24.1 • PROPERTIES OF HUMAN CONVERSATION 495
the other person says; in utterance A1 the agent repeats “in May”, demonstrating her understanding to the client. Or notice that when the client answers a question, the agent begins the next question with “And”. The “And” implies that the new question is ‘in addition’ to the old question, again indicating to the client that the agent has successfully understood the answer to the last question.
Subdialogues and Dialogue Structure
Conversations have structure. Consider, for example, the local structure between speech acts discussed in the field of conversational analysis (Sacks et al., 1974). QUESTIONS set up an expectation for an ANSWER. PROPOSALS are followed by ACCEPTANCE (or REJECTION). COMPLIMENTS (“Nice jacket!”) often give rise to DOWNPLAYERS (“Oh, this old thing?”). These pairs, called adjacency pairs are composed of a first pair part and a second pair part (Schegloff, 1968), and these expectations can help systems decide what actions to take.
However, dialogue acts aren’t always followed immediately by their second pair part. The two parts can be separated by a side sequence (Jefferson 1972) or sub- dialogue. For example utterances C17 to A20 constitute a correction subdialogue (Litman 1985, Litman and Allen 1987, Chu-Carroll and Carberry 1998):
C17: A18 : C19: A20 :
#Act...actually#,whatdayoftheweekisthe15th?
It’s a Friday. Uhhmm.IwouldconsiderstayingthereanextradaytilSunday. OK...OK. On Sunday I have ...
The question in C17 interrupts the prior discourse, in which the agent was looking for a May 15 return flight. The agent must answer the question and also realize that ‘’I would consider staying...til Sunday” means that the client would probably like to change their plan, and now go back to finding return flights, but for the 17th.
Another side sequence is the clarification question, which can form a subdia- logue between a REQUEST and a RESPONSE. This is especially common in dialogue systems where speech recognition errors causes the system to have to ask for clari- fications or repetitions like the following:
User: System:
User: System:
What do you have going to UNKNOWN WORD on the 5th? Let’s see, going where on the 5th?
Going to Hong Kong.
OK, here are some flights...
In addition to side-sequences, questions often have presequences, like the fol- lowing example where a user starts with a question about the system’s capabilities (“Can you make train reservations”) before making a request.
User: Can you make train reservations?
System: YesIcan.
User: Great, I’d like to reserve a seat on the 4pm train to New York.
presequence
Initiative
Sometimes a conversation is completely controlled by one participant. For example a reporter interviewing a chef might ask questions, and the chef responds. We say that the reporter in this case has the conversational initiative (Walker and Whittaker, 1990). In normal human-human dialogue, however, it’s more common for initiative to shift back and forth between the participants, as they sometimes answer questions, sometimes ask them, sometimes take the conversations in new directions, sometimes
initiative

496 CHAPTER 24 • CHATBOTS & DIALOGUE SYSTEMS
implicature
relevance
not. You may ask me a question, and then I respond asking you to clarify something you said, which leads the conversation in all sorts of ways. We call such interactions mixed initiative (Walker and Whittaker, 1990).
Mixed initiative, while the norm for human-human conversations, is very diffi- cult for dialogue systems to achieve. It’s much easier to design dialogue systems to be passive responders. In the question answering systems we saw in Chapter 23, or in simple search engines, the initiative lies completely with the user. In such user- initiative systems, the user specifies a query, and the systems responds. Then the user can specify another query. Alternatively, you may have had the experience of being stuck in a bad dialogue system that asks a question and gives you no opportu- nity to do anything until you answer it. Such system-initiative architectures can be very frustrating.
Inference and Implicature
Inference is also important in dialogue understanding. Consider the client’s response C2, repeated here:
A2: And, what day in May did you want to travel?
C3: OK uh I need to be there for a meeting that’s from the 12th to the 15th.
Notice that the client does not in fact answer the agent’s question. The client merely mentions a meeting at a certain time. What is it that licenses the agent to infer that the client is mentioning this meeting so as to inform the agent of the travel dates?
The speaker seems to expect the hearer to draw certain inferences; in other words, the speaker is communicating more information than seems to be present in the uttered words. This kind of example was pointed out by Grice (1975, 1978) as part of his theory of conversational implicature. Implicature means a particu- lar class of licensed inferences. Grice proposed that what enables hearers to draw these inferences is that conversation is guided by a set of maxims, general heuristics that play a guiding role in the interpretation of conversational utterances. One such maxim is the maxim of relevance which says that speakers attempt to be relevant, they don’t just utter random speech acts. When the client mentions a meeting on the 12th, the agent reasons ‘There must be some relevance for mentioning this meeting. What could it be?’. The agent knows that one precondition for having a meeting (at least before Web conferencing) is being at the place where the meeting is held, and therefore that maybe the meeting is a reason for the travel, and if so, then since people like to arrive the day before a meeting, the agent should infer that the flight should be on the 11th.
These subtle characteristics of human conversations (turns, speech acts, ground- ing, dialogue structure, initiative, and implicature) are among the reasons it is dif- ficult to build dialogue systems that can carry on natural conversations with humans. Many of these challenges are active areas of dialogue systems research.
24.2 Chatbots
chatbot The simplest kinds of dialogue systems are chatbots, systems that can carry on extended conversations with the goal of mimicking the unstructured conversations or ‘chats’ characteristic of informal human-human interaction.

24.2 • CHATBOTS 497
These systems often have an entertainment value, such as Facebook’s Blender- Bot, a neural chatbot capable of carrying on the kinds of conversations shown in Fig. 24.2, or Microsoft’s XiaoIce system2 (Zhou et al., 2020), a system that chats with people on text messaging platforms (Fig. 24.3).
     Will you sing me a song?
 Sure, what do you want to be sung to? I can sing you a song about baking.
 Yes, sing me a song about baking!
  Yes, I would love that.
No, sing it to me now!
Do you want me to sign it to the tune of “Sing Along with Mitch”?
OK, I’ll try to get it to you by the end of the day. What else do you like to do?
OK, give me a few days. I’m a teacher, so I don’t have much free time.
    Can you at least tell me what the lyrics are?
  How does the chorus go?
Wow, sounds like a bop.
Sure, it goes like this: “Baking is my favorite thing to do in the world.”
It goes: BAKING IS MY FAVORITE THING TO DO IN THE WORLD!
I know, right? It’s so catchy. I can’t get it out of my head.
    Figure 24.2
 A conversation between a user (left) and BlenderBot (Roller et al., 2020).
  [人类]小冰你好 [小冰]你好呀，你头像好有趣，感觉
在哪见过
[人类]是吗 [小冰]提不是哪部动画里的呀 [人类]你怎么知道的
[小冰]你猜 [人类]难道你是真人吗? [小冰]这个，你和我多聊聊就知道了
[人类]你不是人工智能机器人么 [小冰]是又怎样，我不会冷冰冰的对
待你的 [人类]你都有什么功能啊
[小冰]我 有200多 个skills， 来 ， 说 出 你的需求
[Human] [XiaoIce]
[Human] [XiaoIce] [Human] [XiaoIce] [Human] [XiaoIce]
[Human] [XiaoIce]
[Human] [XiaoIce]
Hello, XiaoIce.
Hello, your profile pic is interesting. Like I’ve seen it somewhere.
Really?
Is it a comic character?
How do you know that?
Guess.
Are you human?
Well, you’ll know it after chatting with me more. Aren’t you an Al chatbot?
So what? I won’t be indifferent to you.
What functions do you have?
I have over 200 skills.  Just
name one you need.
 Figure 24.3
 A sample Chinese conversation from the XiaoIce chatbot with translations (Zhou et al., 2020). Yet starting from the very first system, ELIZA (Weizenbaum, 1966), chatbots
have also been used for practical purposes like testing theories of psychological
2 XiaoIce is a somewhat confusing translation of the systems Chinese name 小冰, ‘Xiao Bing’, which means Little Bing or Little Ice.
 
498 CHAPTER 24 • CHATBOTS & DIALOGUE SYSTEMS
counseling.
Like practically everything else in language processing, chatbot architectures fall
into two classes: rule-based systems and corpus-based systems. Rule-based systems include the early influential ELIZA and PARRY systems. Corpus-based systems mine large datasets of human-human conversations, which can be done by using information retrieval to copy a human response from a previous conversation, or using an encoder-decoder system to generate a response from a user utterance.
24.2.1 Rule-based chatbots: ELIZA and PARRY
ELIZA (Weizenbaum, 1966) is the most important chatbot dialogue system in the history of the field, and so we take some time here to describe its algorithm in de- tail. ELIZA was designed to simulate a Rogerian psychologist, based on a branch of clinical psychology whose methods involve drawing the patient out by reflecting patient’s statements back at them. Rogerian psychology is the rare type of conver- sation in which, as Weizenbaum points out, one can “assume the pose of knowing almost nothing of the real world”. If a patient says “I went for a long boat ride” and the psychiatrist says “Tell me about boats”, you don’t assume she didn’t know what a boat is, but rather assume she had some conversational goal. Most chatbots trying to pass the Turing test choose a domain with similar properties.
Fig. 24.4 shows the most famous ELIZA conversation, in which ELIZA seems to give very sophisticated therapeutic advice, excerpted (deleting some material with ...) from a full interaction given in the original paper (Weizenbaum, 1966).
As we summarized briefly in Chapter 2, ELIZA worked by pattern/transform rules like the following one:
            (0 YOU 0 ME) [pattern]
            ->
            (WHAT MAKES YOU THINK I 3 YOU) [transform]
In the ELIZA pattern, 0 means Kleene*, and in the transform rules the numbers are the index of the constituent in the pattern. Thus the number 3 refers to the second 0 in the first pattern. This rule would transfer
You hate me
into:
            WHAT MAKES YOU THINK I HATE YOU
Each ELIZA pattern/rule is linked to a keyword that might occur in a user sen- tence. The architecture is summarized in Fig. 24.5.
Keywords are associated with a rank, with specific words being more highly ranked, and more general words ranking lower. Consider the following user sen- tence:
                I know everybody laughed at me
Because it has the word “I”, this sentence could match the following rule whose keyword is I:
             (I *) -> (You say you 2)
producing:
            YOU SAY YOU KNOW EVERYBODY LAUGHED AT YOU
But as Weizenbaum points out, “I” is a very general word and its keywords lead to very general responses. Instead the keyword “everybody” is much more interest- ing, since someone using universals like everybody or always is probably “referring

Sample ELIZA dialogue from Weizenbaum (1966).
24.2 • CHATBOTS 499
Men are all alike.
IN WHAT WAY
They’re always bugging us about something or other.
CAN YOU THINK OF A SPECIFIC EXAMPLE
Well my boyfriend made me come here.
YOUR BOYFRIEND MADE YOU COME HERE
He says I’m depressed much of the time.
I AM SORRY TO HEAR YOU ARE DEPRESSED
.. ..
WHO ELSE IN YOUR FAMILY TAKES CARE OF YOU?
My father
YOUR FATHER
You are like my father in some ways.
WHAT RESEMBLANCE DO YOU SEE
You are not very aggressive but I think you don’t want me to notice that.
WHAT MAKES YOU THINK I AM NOT AGGRESSIVE
You don’t argue with me.
WHY DO YOU THINK I DON’T ARGUE WITH YOU
You are afraid of me.
DOES IT PLEASE YOU TO BELIEVE I’M AFRAID OF YOU
My father is afraid of everybody.
WHAT ELSE COMES TO MIND WHEN YOU THINK OF YOUR FATHER
Bullies.
DOES THAT HAVE ANYTHING TO DO WITH THE FACT THAT YOUR
BOYFRIEND MADE YOU COME HERE
   Figure 24.4
    function ELIZA GENERATOR(user sentence) returns response
Find the word w in sentence that has the highest keyword rank if w exists
Choose the highest ranked rule r for w that matches sentence response←Apply the transform in r to sentence
if w = ‘my’
future←Apply a transformation from the ‘memory’ rule list to sentence
Push future onto memory stack else (no keyword applies)
either
or response←Apply the transform for the NONE keyword to sentence
response←Pop the top response from the memory stack return(response)
 Figure 24.5
 A simplified sketch of the ELIZA algorithm. The power of the algorithm comes from the particular transforms associated with each keyword.
to some quite specific event or person”. Therefore, ELIZA prefers to respond with the pattern associated with the more specific keyword everybody (implementing by just assigning “everybody” rank 5 and “I” rank 0 in the lexicon), whose rule thus

500 CHAPTER 24 • CHATBOTS & DIALOGUE SYSTEMS
transforms the sentence to:
            WHO IN PARTICULAR ARE YOU THINKING OF?
If no keyword matches, ELIZA chooses a non-committal response like “PLEASE GO ON”, “THAT’S VERY INTERESTING”, or “I SEE”.
Finally, ELIZA has a clever memory trick that accounts for the very last sen- tence of the conversation above. Whenever the word “my” is the highest ranked keyword, ELIZA will randomly select a transform on the MEMORY list, apply it to the sentence, and store it on the stack:
            (MEMORY MY
              (0 MY 0 = LETS DISCUSS FURTHER WHY YOUR 3)
              (0 MY 0 = EARLIER YOU SAID YOUR 3)
              (0 MY 0 = DOES THAT HAVE ANYTHING TO DO WITH THE FACT THAT YOUR 3
Later, if no keyword matches a sentence, ELIZA will return the top of the MEM- ORY queue instead. 3
People became deeply emotionally involved with the program. Weizenbaum tells the story of one of his staff who would ask Weizenbaum to leave the room when she talked with ELIZA. When Weizenbaum suggested that he might want to store all the ELIZA conversations for later analysis, people immediately pointed out the privacy implications, which suggested that they were having quite private conversations with ELIZA, despite knowing that it was just software.
ELIZA’s framework is still used today; modern chatbot system tools like ALICE are based on updated versions of ELIZA’s pattern/action architecture.
A few years after ELIZA, another chatbot with a clinical psychology focus, PARRY (Colby et al., 1971), was used to study schizophrenia. In addition to ELIZA- like regular expressions, the PARRY system included a model of its own mental state, with affect variables for the agent’s levels of fear and anger; certain topics of conversation might lead PARRY to become more angry or mistrustful. If PARRY’s anger variable is high, he will choose from a set of “hostile” outputs. If the input mentions his delusion topic, he will increase the value of his fear variable and then begin to express the sequence of statements related to his delusion. Parry was the first known system to pass the Turing test (in 1972!); psychiatrists couldn’t distin- guish text transcripts of interviews with PARRY from transcripts of interviews with real paranoids (Colby et al., 1972).
24.2.2 Corpus-based chatbots
Corpus-based chatbots, instead of using hand-built rules, mine conversations of human-human conversations. These systems are enormously data-intensive, requir- ing hundreds of millions or even billions of words for training (Serban et al., 2018).
Available datasets include transcripts of natural spoken conversational corpora, like the Switchboard corpus of American English telephone conversations (Godfrey et al., 1992) or the various CALLHOME and CALLFRIEND telephone conversa- tional corpora in many languages. Many systems also train on movie dialogue, (Danescu-Niculescu-Mizil and Lee 2011, Lison and Tiedemann 2016, inter alia) which resembles natural conversation in many ways (Forchini, 2013).
Datasets have also been created specifically for training dialog systems by hir- ing crowdworkers to have conversations, often having them take on personas or
3 Fun fact: because of its structure as a queue, this MEMORY trick is the earliest known hierarchical model of discourse in natural language processing.
 
response generation
24.2 • CHATBOTS 501
talk about knowledge provided to them. For example the Topical-Chat dataset has 11K crowdsourced conversations spanning 8 broad topics (Gopalakrishnan et al., 2019), and the EMPATHETICDIALOGUES includes 25K crowdsourced conversa- tions grounded in a specific situation where a speaker was feeling a specific emotion (Rashkin et al., 2019).
All of these datasets, although large, don’t reach the size of billions of words, and so many systems first pretrain on large datasets of pseudo-conversations drawn from Twitter (Ritter et al., 2010), Reddit (Roller et al., 2020), Weibo (微博), and other social media platforms.
Another common technique is to extract possible responses from knowledge sources (Wikipedia, news stories) so that a chatbot can tell stories or mention facts acquired in that way.
Finally, once a chatbot has been put into practice, the turns that humans use to respond to the chatbot can be used as additional conversational data for training or finetuning. Here it’s important to have confidence metrics to make sure that these turns come from conversations that are going well (Hancock et al., 2019). It’s also crucial in these cases to remove personally identifiable information (PII); see Sec- tion 24.6.1.
Most corpus based chatbots produce their responses to a user’s turn in context either by retrieval methods (using information retrieval to grab a response from some corpus that is appropriate given the dialogue context) or generation methods (using a language model or encoder-decoder to generate the response given the di- alogue context) In either case, systems mostly generate a single response turn that is appropriate given the entire conversation so far (for conversations that are short enough to fit into a single model’s window). For this reason they are often called response generation systems. Corpus-based chatbot algorithms thus draw on algo- rithms for question answering systems, which similarly focus on single responses while ignoring longer-term conversational goals.
Response by retrieval The retrieval method of responding is to think of the user’s turn as a query q, and our job is to retrieve and repeat some appropriate turn r as the response from a corpus of conversations C. Generally C is the training set for the system, and we score each turn in C as a potential response to the context q selecting the highest-scoring one. The scoring metric is similarity: we choose the r that is most similar to q, using any of the IR methods we saw in Section 23.1. This can be done using classic IR techniques to compute tf-idf models for C and q, choosing the r that has the highest tf-idf cosine with q:
response(q,C)=argmax q·r (24.1) r∈C |q||r|
Or, we can use the neural IR techniques of Section 23.1.5. The simplest of those is a bi-encoder model, in which we train two separate encoders, one to encode the user query and one to encode the candidate response, and use the dot product between these two vectors as the score (Fig. 24.6a). For example to implement this using BERT, we would have two encoders BERTQ and BERTR and we could represent the query and candidate response as the [CLS] token of the respective encoders:
hq = BERTQ(q)[CLS]
hr = BERTR(r)[CLS]
response(q,C) = argmaxhq·hr (24.2) r∈C
 
502 CHAPTER 24 • CHATBOTS & DIALOGUE SYSTEMS
The IR-based approach can be extended in various ways, such as by using more sophisticated neural architectures (Humeau et al., 2020), or by using a longer context for the query than just the user’s last turn, up to the whole preceding conversation. Information about the user or sentiment or other information can also play a role.
Response by generation An alternate way to use a corpus to generate dialogue is to think of response production as an encoder-decoder task— transducing from the user’s prior turn to the system’s turn. We can think of this as a machine learning version of ELIZA; the system learns from a corpus to transduce a question to an answer. Ritter et al. (2011) proposed early on to think of response generation as a kind of translation, and this idea was generalized to the encoder-decoder model roughly contemporaneously by Shang et al. (2015), Vinyals and Le (2015), and Sordoni et al. (2015).
As we saw in Chapter 11, encoder decoder models generate each token rt of the response by conditioning on the encoding of the entire query q and the response so far r1...rt−1:
rˆt = argmaxw∈V P(w|q, r1 ...rt −1 ) (24.3)
Fig. 24.6 shows the intuition of the generator and retriever methods for response generation. In the generator architecture, we normally include a longer context, forming the query not just from the user’s turn but from the entire conversation-so- far. Fig. 24.7 shows an fleshed-out example.
Two architectures for generating responses for a neural chatbot. In response by retrieval (a) we choose a response by using a finding the turn in the corpus whose encoding has the highest dot-product with the user’s turn. In response by generation (b) we use an encoder-decoder to generate the response.
      hq
ENCODERquery
q1 ... qn
dot-product
ENCODERresponse
r1 ... rn
hr
(a) Response by Retrieval (b) Response by Generation
ENCODER
q1 ... qn <S>r1 ...
r1 r2 ...
DECODER
rn
 Figure 24.6
     That is quite an accomplishment and you should be proud!
DECODER
  ENCODER
[U:] I finally got promoted today at work!
[S:] Congrats! That’s great!
[U:] Thank you! I’ve been trying to get it for a while now!
 Figure 24.7
 Example of encoder decoder for dialogue response generation; the encoder sees the entire dia- logue context.
A number of modifications are required to the basic encoder-decoder model to adapt it for the task of response generation. For example basic encoder-decoder

24.2 • CHATBOTS 503
models have a tendency to produce predictable but repetitive and therefore dull re- sponses like “I’m OK” or “I don’t know” that shut down the conversation. Thus instead of greedily choosing the most likely (and most predictable) response, we can use diversity-enhanced versions of beam search (Vijayakumar et al., 2018), or diversity-focused training objectives (Li et al., 2016). Basic models also tend to produce utterances that are too short; adding minimum length constraints is also important (Roller et al., 2020).
An alternative to the encoder-decoder architecture is to fine-tune a large language model on a conversational dataset and use the language model directly as a response generator. In the Chirpy Cardinal system (Paranjape et al., 2020), for example, the neural chat component generates responses from GPT-2 (Radford et al., 2019), fine- tuned on the EmpatheticDialogues dataset (Rashkin et al., 2019).
Finally, encoder-decoder response generators focus on generating single responses, and so don’t tend to do a good job of continuously generating responses that cohere across multiple turns. This can be addressed by using reinforcement learning, as well as techniques like adversarial networks, to learn to choose responses that make the overall conversation more natural (Li et al. 2016, Li et al. 2017).
Response by retrieving and refining knowledge
Chatbots can be much more interesting and informative if they can responses from text knowledge sources other than dialogue. This approach was pioneered early on by the COBOT chatbot (Isbell et al., 2000), which generated responses by select- ing sentences from a corpus that combined the Unabomber Manifesto by Theodore Kaczynski, articles on alien abduction, the scripts of “The Big Lebowski” and “Planet of the Apes”. XiaoIce collects sentences from public lectures and news articles and searches them using IR based on query expansion from the user’s turn to respond to turns like “Tell me something about Beijing” (Zhou et al., 2020);
One way to augment the encoder decoder architecture for retrieve and refine is to first use IR to retrieve potentially useful passages from Wikipedia (Yan et al., 2016), and then create multiple candidates by concatenating each retrieved Wikipedia sen- tence to the dialogue context with a separator token. Each candidate can be given as the encoder context to the encoder-decoder model, which learns to incorporate text from the Wikipedia sentence into its generated response (Dinan et al. 2019, Roller et al. 2020).
The language model approach to generation can also make use of external knowl- edge sources, by giving these same knowledge+dialogue context candidates can be given to a language model like GPT-2 finetuned on conversational corpora to gener- ate a knowledge-aware response (Paranjape et al., 2020).
24.2.3 Hybrid architectures
Chatbots can also be built with architectures that are hybrids of the rule-based and neural/corpus architectures, and even use elements of the frame-based structure we describe below. This is common, for example, for systems competing in the Alexa Prize challenge, in which university teams build social chatbots to converse with volunteers on the Amazon Alexa platform, and are scored based on the length and user ratings of their conversations (Ram et al., 2017).
For example the Chirpy Cardinal system (Paranjape et al., 2020) applies an NLP pipeline that includes Wikipedia entity linking (Section 23.3), user intent classifi- cation, and dialogue act classification (to be defined below in Section 24.4.1), The intent classification is used when the user wants to change the topic, and the entity

               504 CHAPTER 24 • CHATBOTS & DIALOGUE SYSTEMS
24.3
dialogue state frame
slot
avorite animal? [ Categories ]
8 User: i love cats Cat
Bot: Good to hear you like cats. I have to be honest Cat though, I’m not a big fan of cats. I feel like cats
don’t respect my personal space, but I would love to
hear why you like cats? [ Opinion ]
Entity Linker and Entity Tracker identify Cat as current entity.
Opinion gives a CAN_START response about cats.
GUS
uct. In this section we introduce the very simple GUS architecture for task-based to some new music today and I wanted to chat about provides a GENERIC prompt to steer the con-
linker specifies what entity is currently being discussed. Dialogue act classification is used to detect when the user is asking a question or giving an affirmative versus negative response.
Bot responses are generated by a series of response generators. Some response generators use fine-tuned neural language models: a GPT-2 (Radford et al., 2019) language model fine-tuned on the EmpatheticDialogues dataset, and a separately fine-tuned GPT-2 language model that learns in fine-tuning to paraphrase content from Wikipedia in response to questions.
Other response generators are closer to rule-based; the movie or music genera- tors produce scripted conversation about a movie or a musician, such as asking asks the user’s opinion about a movie, giving a fun fact, asks the user their opinion on an actor in the movie, and so on. These generators use regexes and sentiment classifiers to classify user responses and handwritten templates to generate bot utterances.
Each response generators can specify a priority, and a ranker is used to pass control between response generators. Fig. 24.8 shows part of a conversation.
   # Utterance
1 User: let’s chat
Bot: Hi, this is an Alexa Prize Socialbot. I’d love to
get to know you a bit better before we chat! Is it all
right if I ask for your name? [ Launch ] 2 User: my name is chris
Bot: Well it’s nice to meet you, Chris! I’m excited to chat with you today. [ Launch ] I hope your after- noon is going well. What are your plans for the rest of today? [ Neural Chat ]
3 User: hang out with my friends
Bot: That sounds great, I love spending time with friends. What will you do together? [ Neural Chat ]
4 User: maybe watch a movie
Bot: Me too! I love watching movies; I get to learn so much about what the world is like outside of the cloud! Have you seen any movies recently? [ Movies ]
5 User: i saw the matrix
Bot: Nice! Did you like The Matrix? [ Movies ] 6 User: i loved it neo is amazing
Bot: Oooh, yeah, I agree. Hey, isn’t Keanu Reeves in that movie? What do you think about Keanu Reeves? [ Movies ]
7 User: i want to talk about something else
Bot: OK, no problem. [ Movies ] There’s actually
Entity
None
None
None None
None None
None Film
The Matrix
The Matrix
The Matrix
Keanu Reeves
None Animal
Commentary
Launch gives FORCE_START response to be- gin the conversation.
Launch gives a STRONG_CONTINUE re- sponse that needs a prompt, which is supplied by Neural Chat with FORCE_START priority (scripted transition).
Neural Chat generates a GPT-2 response with STRONG_CONTINUE priority.
Movies detects the ‘movie’ keyword in the user’s utterance and gives a FORCE_START response (overriding Neural Chat), setting current entity to Film.
The Entity Linker and Entity Tracker iden- tify The Matrix as the current entity.
Movies sets current entity to Keanu Reeves.
Navigational Intent detects negative intent, so Entity Tracker rejects the current entity. Movies acknowledges and asks for a prompt.
              Figure 24.8
somet
 your f
hing else I wanted to ask you about. What’s Categories gives a GENERIC prompt. Part of a conversation with Chirpy Cardinal (Paranjape et al., 2020).
GUS: Simple Frame-based Dialogue Systems
9 User: hmm i love cats because they are fluffy Cat Bot: That make sense. Now that I think about Cat it, one good reason to like cats is that they purr
and I definitely need that kind of positive feed-
Opinion finishes talking. Wiki gives a CUR- RENT_TOPIC prompt about Cat.
back. [ Opinion ] Wanna know something interest- Weturninngaobwoutctaot?t[aWsiki-]baseddialogue,inwhichadialoguesystemhasthegoalof
10 User: you are not very smart Cat helpingBaotu:sIeknrowsoyoluvfeeslofrumstreatetda.sI’kmlailwkaeysmtryainkginMguasincalaini-rplOaffnenesivreUsservgiavteisoanFOoRrCbE_uSyTAinRTgrae-prod-
to get better. [ Offensive User ] I’ve been listening strument sponse to the critical utterance, then [ Music ]
instruments. If you were a musical instrument which versation in a new direction.
dialogue. Although it is quite old, (it was first introduced in 1977 in the influen-
one would you be? [ Music ]
11 User: what do you find interesting None The user gives an unexpected response.
tial GUS system for travel planning (Bobrow et al., 1977)) the GUS architecture
Bot: I like the violin, but I’m more of a classical Neo
(The Neural Fallback gives a GPT-2-generated re-
has been astonishingly long-lived and underlies most if not all modern commercial
music player. [ Neural Fallback ] I remember you Matrix) sponse, which is selected as no other RG (ex-
mentioned Neo. Would you like to talk more about cept Fallback) has a response. Wiki gives a it? [ Wiki ] CONTEXTUAL prompt.
digital assistants. Figure 24.9 shows a conversation with the original GUS system. 12 User: sure Neo (The
All modern task-based dialogue systeMmatsrix,)whether the simple GUS architecture
Bot: Neo has got into so many adventures! What Neo wedescarriebsoemheaedrven,tuorerstthhateyomu’voeernejoyseod?p[hWisiktii]catMedatridx)ialogmuoveieschtaratcetersa)racbohuittNecot(TuhreeMsatwrixe). turnto
13 User: morpheus teaching jujitsu to neo Neo
in the following section, are based aroundMaftrixa)mes. A frame is a kind of knowledge
Bot: I liked that Neo and Trinity were able to res- Morpheus Wiki gives a response (generated by the GPT- structurecuereMporpehseuesnfrtoimnagbutihldeingkpirnotdecstedobfyianrmtednti(oThnesthes2ycosntvermsatiocnalnpareaxphtrrasaincgtmfordoel)m,setustshersen-
guards and agents. Morpheus has done so many Matrix) tences,amnadzincgotnhinsgis!tsWohaftarecsomlleeocftyiournfaovofristelots,eachoafskwsanhoithcehrocpeann-entdaedkqeueastiosne.tofpossible
current entity to Morpheus (The Matrix), and 14 User: i want to stop talking None We detect stop intent; the conversation ends.
Morpheus moments? [ Wiki ]
Table 1: An example dialogue. To respect users’ privacy, this is not a real user conversation. 5
(The Wiki asks an open-ended question (specific to
(The

24.3 • GUS: SIMPLE FRAME-BASED DIALOGUE SYSTEMS 505 values. Together this set of frames is sometimes called a domain ontology.
GUS: Hello. My name is GUS. I can help you plan a simple trip by air. Where do you want to go ?
Client: IwanttogotoSanDiegoonMay28
GUS: What time do you want to leave?
Client: I must be in San Diego before 10 am
GUS: Would you like P.S.A. flight 102 that arrives at 9.15 am ? Client: What is the next flight ?
GUS: Air California flight 310 that leaves at 8.30am and arrives at 10.00am Client: I’ll take the first one
GUS: In what name should I make a reservation, please?
Client: Dan Bobrow
GUS: I have confirmed the following flight: P.S.A. flight 102 on Wednesday May 28 from San Jose to San Diego that leaves at 7.30 am and arrives at 9.15 am.
GUS: What date do you want to return on ?
Client: On Friday in the evening.
GUS: Would you like the flight that leaves at 7.45 pm ?
Client: That’s fine.
GUS: I have confirmed the following flight: P.S.A. flight 307 on Friday May 30 from
San Diego to San Jose that leaves at 7.45 pm and arrives at 9.30 pm Thank you for calling. Goodbye
   Figure 24.9
 The travel domain: A transcript of an actual dialogue with the GUS system of Bobrow et al. (1977). P.S.A. and Air California were airlines of that period.
The set of slots in a task-based dialogue frame specifies what the system needs to know, and the filler of each slot is constrained to values of a particular semantic type. In the travel domain, for example, a slot might be of type city (hence take on values like San Francisco, or Hong Kong) or of type date, airline, or time.
A frame in a frame-based dialogue system, showing the type of each slot and a question used to fill the slot.
Types in GUS, as in modern frame-based dialogue agents, have hierarchical structure; for example the date type in GUS is itself a frame with slots with types like integer or members of sets of weekday names:
DATE
  MONTH:NAME   YEAR:INTEGER    DAY:(BOUNDED-INTEGER 1 31)
  WEEKDAY:(MEMBER (Sunday Monday Tuesday Wednesday
                   Thursday Friday Saturday))
24.3.1 Control structure for frame-based dialogue
The control architecture for frame-based dialogue systems, used in various forms in modern systems like Apple’s Siri, Amazon’s Alexa, and the Google Assistant, is designed around the frame. The system’s goal is to fill the slots in the frame with the
 Slot
ARRIVAL DATE
Figure 24.10
Type
Question Template
  ORIGIN CITY DESTINATION CITY DEPARTURE TIME DEPARTURE DATE ARRIVAL TIME
city city time date time date
“From what city are you leaving?” “Where are you going?”
“When would you like to leave?” “What day would you like to leave?” “When do you want to arrive?”
  “What day would you like to arrive?”
     
506 CHAPTER 24 • CHATBOTS & DIALOGUE SYSTEMS
intent determination
slot filling
fillers the user intends, and then perform the relevant action for the user (answering a question, or booking a flight).
To do this, the system asks questions of the user (using pre-specified question templates associated with each slot of each frame, as shown in Fig. 24.10), filling any slot that the user specifies (we’ll describe how slot-filling works in the next section). If a user’s response fills multiple slots, like the following:
(24.4) I want a flight from San Francisco to Denver one way leaving after five p.m. on Tuesday.
the system fills all the relevant slots, and then continues asking questions to fill the remaining slots, skipping questions associated with filled slots. The GUS architec- ture also has condition-action rules attached to slots. For example, a rule attached to the DESTINATION slot for the plane booking frame, once the user has specified the destination, might automatically enter that city as the default StayLocation for the related hotel booking frame. Or if the user specifies the DESTINATION DAY for a short trip the system could automatically enter the ARRIVAL DAY.
Many domains require multiple frames. Besides frames for car or hotel reserva- tions, we might need frames with general route information (for questions like Which airlines fly from Boston to San Francisco?), or information about airfare practices (for questions like Do I have to stay a specific number of days to get a decent air- fare?). The system must be able to disambiguate which slot of which frame a given input is supposed to fill and then switch dialogue control to that frame.
Because of this need to dynamically switch control, the GUS architecture is a production rule system. Different types of inputs cause different productions to fire, each of which can flexibly fill in different frames. The production rules can then switch control according to factors such as the user’s input and some simple dialogue history like the last question that the system asked.
Once the system has enough information it performs the necessary action (like querying a database of flights) and returns the result to the user.
24.3.2 Natural language understanding for filling slots in GUS
The goal of the natural language understanding component in the frame-based archi- tecture is to extract three things from the user’s utterance. The first task is domain classification: is this user for example talking about airlines, programming an alarm clock, or dealing with their calendar? Of course this 1-of-n classification tasks is unnecessary for single-domain systems that are focused on, say, only calendar man- agement, but multi-domain dialogue systems are the modern standard. The second is user intent determination: what general task or goal is the user trying to accom- plish? For example the task could be to Find a Movie, or Show a Flight, or Remove a Calendar Appointment. Finally, we need to do slot filling: extract the particular slots and fillers that the user intends the system to understand from their utterance with respect to their intent. From a user utterance like this one:
  Show me morning flights from Boston to San Francisco on Tuesday
a system might want to build a representation like:
    DOMAIN:       AIR-TRAVEL
    INTENT:       SHOW-FLIGHTS
    ORIGIN-CITY:  Boston
    ORIGIN-DATE:  Tuesday
    ORIGIN-TIME:  morning
    DEST-CITY:    San Francisco

semantic grammar
24.3 • GUS: SIMPLE FRAME-BASED DIALOGUE SYSTEMS 507
while an utterance like
      Wake me tomorrow at 6
should give an intent like this:
      DOMAIN:  ALARM-CLOCK
      INTENT:  SET-ALARM
      TIME:    2017-07-01 0600-0800
The slot-filling method used in the original GUS system, and still quite common in industrial applications, is to use handwritten rules, often as part of the condition- action rules attached to slots or concepts. For example we might just define a regular expression for recognizing the SET-ALARM intent:
wake me (up) | set (the|an) alarm | get me up
Rule-based research systems like the Phoenix system (Ward and Issar, 1994) consist of large hand-designed semantic grammars with thousands of rules. A semantic grammar is a context-free grammar in which the left-hand side of each rule corresponds to the semantic entities being expressed (i.e., the slot names) as in the following fragment:
SHOW
DEPART TIME RANGE
HOUR FLIGHTS AMPM ORIGIN DESTINATION CITY
→ showme|iwant|canisee|... → (after|around|before) HOUR | morning | afternoon | evening
→ one|two|three|four...|twelve (AMPM) → (a) flight | flights
→ am|pm
→ from CITY
→ to CITY
→ Boston|SanFrancisco|Denver|Washington
Semantic grammars can be parsed by any CFG parsing algorithm (see Chap- ter 13), resulting in a hierarchical labeling of the input string with semantic node labels, as shown in Fig. 24.11.
A semantic grammar parse for a user sentence, using slot names as the internal parse tree nodes.
It remains only to put the fillers into some sort of canonical form, for example by normalizing dates as discussed in Chapter 17.
Many industrial dialogue systems employ the GUS architecture but use super- vised machine learning for slot-filling instead of these kinds of rules; see Sec- tion 24.4.2.
24.3.3 Other components of frame-based dialogue
The ASR (automatic speech recognition) component takes audio input from a phone or other device and outputs a transcribed string of words, as discussed in Chapter 26.
   S
SHOW FLIGHTS ORIGIN DESTINATION DEPARTDATE DEPARTTIME Show me flights from Boston to San Francisco on Tuesday morning
    Figure 24.11
 
508
CHAPTER 24 • CHATBOTS & DIALOGUE SYSTEMS
restrictive grammar
The ASR component can also be made dependent on the dialogue state. For exam- ple, if the system has just asked the user “What city are you departing from?”, the ASR language model component can be constrained to assign high probability to answers with city names. This can be done by training a language model on an- swers to this question, or by hand-writing finite-state or context-free grammars for such sentences. A language model that is completely dependent on dialogue state is called a restrictive grammar; usually real systems mix restrictive grammars with more general language models.
The natural language generation module of any dialogue system produces the utterances that the system says to the user. Frame-based systems tend to use template-based generation, in which all or most of the words in the sentence to be uttered to the user are prespecified by the dialogue designer. Sentences created by these templates are often called prompts. Templates might be completely fixed (like ‘Hello, how can I help you?’), or can include some variables that are filled in by the generator, as in the following:
What time do you want to leave CITY-ORIG? Will you return to CITY-ORIG from CITY-DEST?
It’s possible to do some simple grounding even in templated generation. Con- sider the unnaturalness of this example from Cohen et al. (2004):
(24.5) System: Did you want to review some more of your personal profile? Caller: No.
System: What’s next?
Without an acknowledgment, the caller doesn’t know that the system has under- stood her ‘No’. The use of Okay below adds grounding to the templated response What’s next?, making (24.6) a much more natural response than (24.5):
(24.6) System: Did you want to review some more of your personal profile? Caller: No.
System: Okay, what’s next?
The rule-based GUS approach is very common in industrial applications. As was true with the rule-based approach to information extraction, it has the advantage of high precision, and if the domain is narrow enough and experts are available, can provide sufficient coverage as well. On the other hand, the handwritten rules or grammars can be both expensive and slow to create, and handwritten rules can suffer from recall problems.
template-based generation
prompt
24.4 The Dialogue-State Architecture
Modern research systems for task-based dialogue are based on a more sophisticated version of the frame-based architecture called the dialogue-state or belief-state ar- chitecture. Figure 24.12 shows the six components of a typical dialogue-state sys- tem. The speech recognition and synthesis components deal with spoken language processing; we’ll return to them in Chapter 26.
For the rest of this chapter we therefore consider the other four components, which are part of both spoken and textual dialogue systems. These four components are more complex than in the simple GUS systems. For example, like the GUS systems, the dialogue-state architecture has an NLU component to extract slot fillers from the user’s utterance, but generally using machine learning rather than rules. The

DIALOG STATE TRACKING OVERVIEW
24.4 • THE DIALOGUE-STATE ARCHITECTURE 509
     LEAVING FROM DOWNTOWN
LEAVING AT ONE P M
ARRIVING AT ONE P M
0.6 0.2 0.1
Spoken Language Understanding (SLU)
0.5 0.3 0.1
{ from: downtown }
    { arrive-time: 1300 }
    Automatic Speech Recognition (ASR)
Text to Speech (TTS)
Dialog State Tracker (DST)
    from:
 to: airport from: CMU
depart-time: -- to: airport
fromc:onfirmed:CMU no depart-time: 1300
to: score: airp0o.r6t5 confirmed: no
depart-time: 1300 score: 0.15
confirmed: no score: 0.10
downtown
    FROM DOWNTOWN, IS THAT RIGHT?
Natural Language Generation (NLG)
Dialog Policy
{ depart-time: 1300 }
act: confirm from: downtown
        Figure 24.12
 Architecture of a dialogue-state system for task-oriented dialogue from Williams et al. (2016). Figure 1: Principal components of a spoken dialog system.
dialogue state tracker maintains the current state of the dialogue (which include the user’s most recent dialogue act, plus the entire set of slot-filler constraints the user
The topic of this paper is the dialog state tracker (DST). The DST takes as input all of the dialog has expressed so far). The dialogue policy decides what the system should do or say
history so far, and outputs its estimate of the current dialog state – for example, in a restaurant next. The dialogue policy in GUS was simple: ask questions until the frame was full
information system, the dialog state might indicate the user’s preferred price range and cuisine, and then report back the results of some database query. But a more sophisticated
what information they are seeking such as the phone number of a restaurant, and which concepts dialogue policy can help a system decide when to answer the user’s questions, when
have been stated vs. confirmed. Dialog state tracking is difficult because ASR and SLU errors are to instead ask the user a clarification question, when to make a suggestion, and so on.
common, and can cause the system to misunderstand the user. At the same time, state tracking is Finally, dialogue state systems have a natural language generation component. In
crucial because the dialog policy relies on the estimated dialog state to choose actions – for example, GUS, the sentences that the generator produced were all from pre-written templates.
which restaurants to suggest.
But a more sophisticated generation component can condition on the exact context
In the literature, numerous methods for dialog state tracking have been proposed. These are to produce turns that seem much more natural.
covered in detail inASseocftitohne 3ti;mileluosftrtahtisvewerxitainmgp,lmesoisntccluodmemhearncdi-aclrsayftsetedmrualeres a(Lrcahrsitseocntuarnadl hTyraburimds,,
2000;BohusabnadseRdudonicGkUy,S20a0rc3h),itheecuturirsetiacusgcmorenste(Hdiwgaisthinsoakmaeedtiall.o,g2u0e0-3s)t,atBeacyoesmiapnonentwtso,rbkust
(Paek and Hortvhietzr,e2a0r0e0a; wWiidleliavmarsieatnydoYf oduianlgo,g2u0e0-s7t)a,taensdysdtiesmcrsimbieniantgivdeemveoldoeplesd(BinorheussearncdhRlaubds-.
nicky, 2006). Techniques have been fielded which scale to realistically sized dialog problems and
operate in real time (Young et al., 2010; Thomson and Young, 2010; Williams, 2010; Mehta et al.,
24.4.1 Dialogue Acts
2010). In end-to-end dialog systems, dialog state tracking has been shown to improve overall system performance (Young et al., 2010; Thomson and Young, 2010).
dialogue acts Dialogue-state systems make use of dialogue acts. Dialogue acts represent the in- Despite thitserparcotgivressf,udnicrteicotncomf tphaeristuornns boertwseenetnenmcet,hcoodms hbainvienngothbeeeidnepaososfibslpeebeecchauascetspasntd studiesusedifgferoreuntddinogmianintosansdindgilfeferrepnrtesyensteamtiocno.mDpioffneernetnstftoyrpAesSoRf,dSiLalUog,udeiasloygstepmolsicrye,qeuticr.e Moreover,therlaebhealsinngodtibffeernenatsktaindsarodftasckts,oranmdetshootdhoelotgaygsfeotr—edvaelfiunaitninggwdhialtoagdstiatleogtruaeckaicntgi.s
Together theseeixsascutelsy—havtenlidmsitoedbperdoegsriegsnseidn fthoirspraersteicaurclharatraesak.s.
Figure 24.13 shows a tagset for a restaurant recommendation system, and Fig. 24.14 The Dialog State Tracking Challenge (DSTC) series has provided a first common testbed and
shows these tags labeling a sample dialogue from the HIS system (Young et al., evaluation suite for dialog state tracking. Three instances of the DSTC have been run over a three
2010). This example also shows the content of each dialogue acts, which are the slot fillers being communicated. So the user might INFORM the system that they want
5
Italian food near a museum, or CONFIRM with the system that the price is reasonable.

510 CHAPTER 24 • CHATBOTS & DIALOGUE SYSTEMS
Tag Sys User Description
 HELLO(a = x,b = y,...) 􏱑 􏱑 INFORM(a = x,b = y,...) 􏱑 􏱑 REQUEST(a,b = x,...) 􏱑 􏱑 REQALTS(a = x,...) χ 􏱑 CONFIRM(a = x,b = y,...) 􏱑 􏱑 CONFREQ(a = x,...,d) 􏱑 χ SELECT(a = x,a = y) 􏱑 χ AFFIRM(a = x,b = y,...) 􏱑 􏱑 NEGATE(a = x) χ 􏱑 DENY(a = x) χ 􏱑 BYE() 􏱑 􏱑
Open a dialogue and give info a = x,b = y,... Give info a = x,b = y,...
Request value for a given b = x, ...
Request alternative with a = x, ...
Explicitly confirm a = x, b = y, ...
Implicitly confirm a = x, ... and request value of d Implicitly confirm a = x, ... and request value of d Affirm and give further info a = x, b = y, ... Negate and give corrected value a = x Denythata=x
Close a dialogue
  Figure 24.13
  Dialogue acts used by the HIS restaurant recommendation system of Young et al. (2010). The Sys and User columns indicate which acts are valid as system outputs and user inputs, respectively.
Utterance Dialogue act
 U: Hi, I am looking for somewhere to eat. S: You are looking for a restaurant. What
type of food do you like?
U: I’d like an Italian somewhere near the
museum.
S: Roma is a nice Italian restaurant near
the museum.
U: Is it reasonably priced?
S: Yes, Roma is in the moderate price
range.
U: What is the phone number?
S: The number of Roma is 385456. U: Ok, thank you goodbye.
hello(task = find,type=restaurant)
confreq(type = restaurant, food)
inform(food = Italian, near=museum)
inform(name = "Roma", type = restaurant,
food = Italian, near = museum)
confirm(pricerange = moderate)
affirm(name = "Roma", pricerange =
moderate)
request(phone)
inform(name = "Roma", phone = "385456") bye()
 Figure 24.14
   Fig. 24.13.
A sample dialogue from the HIS System of Young et al. (2010) using the dialogue acts in 24.4.2 Slot Filling
The task of slot-filling, and the simpler tasks of domain and intent classification, are special cases of the task of supervised semantic parsing discussed in Chapter 16, in which we have a training set that associates each sentence with the correct set of slots, domain, and intent.
A simple method is to train a a sequence model to map from input words repre- sentation to slot fillers, domain and intent. For example given the sentence:
 I want to fly to San Francisco on Monday afternoon please
we compute a sentence representation, for example by passing the sentence through a contextual embedding network like BERT. The resulting sentence representation can be passed through a feedforward layer and then a simple 1-of-N classifier to determine that the domain is AIRLINE and and the intent is SHOWFLIGHT.
Our training data is sentences paired with sequences of BIO labels:
O O O O O B-DES I-DES O B-DEPTIME I-DEPTIME O
 I want to fly to San   Francisco on Monday    afternoon  please
Recall from Chapter 8 that in BIO tagging we introduce a tag for the beginning (B) and inside (I) of each slot label, and one for tokens outside (O) any slot label. The number of tags is thus 2n + 1 tags, where n is the number of slots.

24.4 • THE DIALOGUE-STATE ARCHITECTURE 511
Fig. 24.15 shows the architecture. The input is a series of words w1...wn, which is passed through a contextual embedding model to get contextual word representa- tions. This is followed by a feedforward layer and a softmax at each token position over possible BIO tags, with the output a series of BIO tags s1...sn. We can also combine the domain-classification and intent-extraction tasks with slot-filling sim- ply by adding a domain concatenated with an intent as the desired output for the final EOS token.
    Classifier +softmax
Encodings
...
Encoder (BERT)
B-DES I-DES O B-DTIME d+i
 San Francisco on Monday <EOS>
 Figure 24.15
 A simple architecture for slot filling, mapping the words in the input through contextual embeddings like BERT to an output classifier layer (which can be linear or some- thing more complex), followed by softmax to generate a series of BIO tags (and including a final state consisting of a domain concatenated with an intent).
Once the sequence labeler has tagged the user utterance, a filler string can be extracted for each slot from the tags (e.g., “San Francisco”), and these word strings can then be normalized to the correct form in the ontology (perhaps the airport code ‘SFO’). This normalization can take place by using homonym dictionaries (specify- ing, for example, that SF, SFO, and San Francisco are the same place).
In industrial contexts, machine learning-based systems for slot-filling are of- ten bootstrapped from GUS-style rule-based systems in a semi-supervised learning manner. A rule-based system is first built for the domain, and a test set is carefully labeled. As new user utterances come in, they are paired with the labeling provided by the rule-based system to create training tuples. A classifier can then be trained on these tuples, using the test set to test the performance of the classifier against the rule-based system. Some heuristics can be used to eliminate errorful training tuples, with the goal of increasing precision. As sufficient training samples become available the resulting classifier can often outperform the original rule-based system (Suendermann et al., 2009), although rule-based systems may still remain higher- precision for dealing with complex cases like negation.
24.4.3 Dialogue State Tracking
The job of the dialogue-state tracker is to determine both the current state of the frame (the fillers of each slot), as well as the user’s most recent dialogue act. The dialogue-state thus includes more than just the slot-fillers expressed in the current sentence; it includes the entire state of the frame at this point, summarizing all of the user’s constraints. The following example from Mrksˇic ́ et al. (2017) shows the required output of the dialogue state tracker after each turn:

512 CHAPTER 24
• CHATBOTS & DIALOGUE SYSTEMS
user correction acts
hyperarticula- tion
Since dialogue acts place some constraints on the slots and values, the tasks of dialogue-act detection and slot-filling are often performed jointly. Consider the task of determining that
        I’d like Cantonese food near the Mission District
has the structure inform(food=cantonese,area=mission).
Dialogue act interpretation—in this example choosing inform from the set of dialogue acts for this task—is done by supervised classification trained on hand- labeled dialog acts, predicting the dialogue act tag based on embeddings represent- ing the current input sentence and the prior dialogue acts.
The simplest dialogue state tracker might just take the output of a slot-filling sequence-model (Section 24.4.2) after each sentence. Alternatively, a more complex model can make use of the reading-comprehension architectures from Chapter 23. For example the model of Gao et al. (2019) trains a classifier for each slot to decide whether its value is being changed in the current sentence or should be carried over from the previous sentences. If the slot value is being changed, a span-prediction model is used to predict the start and end of the span with the slot filler.
A special case: detecting correction acts
Some dialogue acts are important because of their implications for dialogue control. If a dialogue system misrecognizes or misunderstands an utterance, the user will generally correct the error by repeating or reformulating the utterance. Detecting these user correction acts is therefore quite important. Ironically, it turns out that corrections are actually harder to recognize than normal sentences! In fact, correc- tions in one early dialogue system (the TOOT system) had double the ASR word error rate of non-corrections (Swerts et al., 2000)! One reason for this is that speak- ers sometimes use a specific prosodic style for corrections called hyperarticulation, in which the utterance contains exaggerated energy, duration, or F0 contours, such as I said BAL-TI-MORE, not Boston (Wade et al. 1992, Levow 1998, Hirschberg et al. 2001). Even when they are not hyperarticulating, users who are frustrated seem to speak in a way that is harder for speech recognizers (Goldberg et al., 2003).
What are the characteristics of these corrections? User corrections tend to be either exact repetitions or repetitions with one or more words omitted, although they may also be paraphrases of the original utterance. (Swerts et al., 2000). Detect- ing these reformulations or correction acts can be part of the general dialogue act detection classifier. Alternatively, because the cues to these acts tend to appear in different ways than for simple acts (like INFORM or request), we can make use of features orthogonal to simple contextual embedding features; some typical features are shown below (Levow 1998, Litman et al. 1999, Hirschberg et al. 2001, Bulyko et al. 2005, Awadallah et al. 2015):
User:
System: User:
System: User:
System:
I’m looking for a cheaper restaurant
inform(price=cheap)
Sure.Whatkind-andwhere?
Thai food, somewhere downtown inform(price=cheap, food=Thai, area=centre) TheHouseservescheapThaifood
Where is it?
 inform(price=cheap, food=Thai, area=centre); request(address)
TheHouseisat106RegentStreet

24.4 • THE DIALOGUE-STATE ARCHITECTURE 513
features examples
  lexical words like “no”, “correction”, “I don’t”, swear words, utterance length
 semantic similarity (word overlap or embedding dot product) between the candidate correction act and the user’s prior utterance
phonetic phonetic overlap between the candidate correction act and the user’s prior ut- terance (i.e. “WhatsApp” may be incorrectly recognized as “What’s up”)
 prosodic hyperarticulation, increases in F0 range, pause duration, and word duration, generally normalized by the values for previous sentences
 ASR ASR confidence, language model probability
   dialogue policy
24.4.4 Dialogue Policy
The goal of the dialogue policy is to decide what action the system should take next, that is, what dialogue act to generate.
More formally, at turn i in the conversation we want to predict which action Ai to take, based on the entire dialogue state. The state could mean the entire sequence of dialogue acts from the system (A) and from the user (U), in which case the task would be to compute:
Aˆi = argmaxP(Ai|(A1,U1,...,Ai−1,Ui−1) (24.7) Ai ∈A
We can simplify this by maintaining as the dialogue state mainly just the set of slot-fillers that the user has expressed, collapsing across the many different conver- sational paths that could lead to the same set of filled slots.
Such a policy might then just condition on the current dialogue state as repre- sented just by the current state of the frame Framei (which slots are filled and with what) and the last turn by the system and user:
Aˆi = argmaxP(Ai|Framei−1,Ai−1,Ui−1) (24.8) Ai ∈A
These probabilities can be estimated by a neural classifier using neural representa- tions of the slot fillers (for example as spans) and the utterances (for example as sentence embeddings computed over contextual embeddings)
More sophisticated models train the policy via reinforcement learning. To de- cide which action to take, a reinforcement learning system gets a reward at the end of the dialogue, and uses that reward to train a policy to take actions. For example in the movie-recommendation dialogue system of Fazel-Zarandi et al. (2017), the ac- tion space has only three actions: EXECUTE, CONFIRM, and ELICIT. The EXECUTE sends a query to the database and answers the user’s question, CONFIRM clarifies the intent or slot with the users (e.g., “Do you want movies directed by Christopher Nolan?”) while ELICIT asks the user for missing information (e.g., “Which movie are you talking about?”). The system gets a large positive reward if the dialogue sys- tem terminates with the correct slot representation at the end, a large negative reward if the slots are wrong, and a small negative reward for confirmation and elicitation questions to keep the system from re-confirming everything.
Policy Example: Confirmation and Rejection
Modern dialogue systems often make mistakes. It is therefore important for dialogue systems to make sure that they have achieved the correct interpretation of the user’s

514 CHAPTER 24 • CHATBOTS & DIALOGUE SYSTEMS
explicit confirmation
input. This is generally done by two methods: confirming understandings with the user and rejecting utterances that the system is likely to have misunderstood.
As we saw in the prior section, most systems introduce particular strategies and actions related to confirmation and rejection. When using the explicit confirmation strategy, a system asks the user a direct question to confirm the system’s under- standing, like the two examples below in which the system asks a (boldface) yes-no confirmation question:
S: U: S: U: U:
S: U:
When using the implicit confirmation strategy, a system instead can demon- strate its understanding as a grounding strategy, for example repeating back the system’s understanding as part of asking the next question, as in the two examples below:
U: S: U2: A3:
Explicit and implicit confirmation have complementary strengths. Explicit con- firmation makes it easier for users to correct the system’s misrecognitions since a user can just answer “no” to the confirmation question. But explicit confirmation is awkward and increases the length of the conversation (Danieli and Gerbino 1995, Walker et al. 1998). The explicit confirmation dialogue fragments above sound non- natural and definitely non-human; implicit confirmation is much more conversation- ally natural.
Confirmation is just one kind of conversational action by which a system can express lack of understanding. Another option is rejection, in which a system gives the user a prompt like I’m sorry, I didn’t understand that.
Sometimes utterances are rejected multiple times. This might mean that the user is using language that the system is unable to follow. Thus, when an utterance is rejected, systems often follow a strategy of progressive prompting or escalating detail (Yankelovich et al. 1995, Weinschenk and Barker 2000), as in this example from Cohen et al. (2004):
 Which city do you want to leave from? Baltimore.
Do you want to leave from Baltimore?
 Yes.
 I’d like to fly from Denver Colorado to New York City on September twenty first in the morning on United Airlines
 Let’s see then. I have you going from Denver Colorado to New York on September twenty first. Is that correct?
Yes
   implicit confirmation
 I want to travel to Berlin
When do you want to travel to Berlin?
 Hi I’d like to fly to Seattle Tuesday Morning
 Traveling to Seattle on Tuesday, August eleventh in the morning.
Your full name?
   rejection
progressive prompting
System: Whenwouldyouliketoleave?
 Caller: Well, um, I need to be in New York in time for the first World Series game.
 System: <reject>.Sorry,Ididn’tgetthat.Pleasesaythemonthanddayyou’dlike to leave.
 Caller: I wanna go on October fifteenth.
 
rapid reprompting
24.4 • THE DIALOGUE-STATE ARCHITECTURE 515
In this example, instead of just repeating “When would you like to leave?”, the rejection prompt gives the caller more guidance about how to formulate an utter- ance the system will understand. These you-can-say help messages are important in helping improve systems’ understanding performance (Bohus and Rudnicky, 2005). If the caller’s utterance gets rejected yet again, the prompt can reflect this (“I still didn’t get that”), and give the caller even more guidance.
An alternative strategy for error handling is rapid reprompting, in which the system rejects an utterance just by saying “I’m sorry?” or “What was that?” Only if the caller’s utterance is rejected a second time does the system start applying progressive prompting. Cohen et al. (2004) summarize experiments showing that users greatly prefer rapid reprompting as a first-level error prompt.
It is common to use rich features other than just the dialogue state representa- tion to make policy decisions. For example, the confidence that the ASR system assigns to an utterance can be used by explicitly confirming low-confidence sen- tences. Condience is a metric that the speech recognizer can assign to its transcrip- tion of a sentence to indicate how confident it is in that transcription. Confidence is often computed from the acoustic log-likelihood of the utterance (greater probabil- ity means higher confidence), but prosodic features can also be used in confidence prediction. For example, utterances with large F0 excursions or longer durations, or those preceded by longer pauses, are likely to be misrecognized (Litman et al., 2000).
Another common feature in confirmation is the cost of making an error. For ex- ample, explicit confirmation is common before a flight is actually booked or money in an account is moved. Systems might have a four-tiered level of confidence with three thresholds α, β, and γ:
content planning sentence realization
24.4.5 Natural language generation in the dialogue-state model
Finally, once the policy has decided what speech act to generate, the natural language generation component needs to generate the text of a response to the user.
Once a dialogue act has been decided, we need to generate the text of the re- sponse to the user. The task of natural language generation (NLG) in the information- state architecture is often modeled in two stages, content planning (what to say), and sentence realization (how to say it).
Here we’ll assume content planning has been done by the dialogue policy, which has chosen the dialogue act to generate, and chosen some attributes (slots and values) that the planner wants to say to the user (either to give the user the answer, or as part of a confirmation strategy).
Fig. 24.16 shows some sample input/outputs for the sentence realization phase. In the first example, the content planner has chosen the dialogue act RECOMMEND and some particular slots (name, neighborhood, cuisine) and their fillers. The goal of the sentence realizer is to generate a sentence like lines 1 or 2 shown in the figure, by training on many such examples of representation/sentence pairs from a large corpus of labeled dialogues.
Training data is hard to come by; we are unlikely to see every possible restaurant with every possible attribute in many possible differently worded sentences. There-
<α lowconfidence
reject
confirm explicitly confirm implictly don’t confirm at all
≥ α ≥ β ≥ γ
above the threshold high confidence very high confidence

516 CHAPTER 24 • CHATBOTS & DIALOGUE SYSTEMS
1 AuMidiisinMidtownandservesFrenchfood.
    recommend(restaurant name= Au Midi, neighborhood = midtown,
cuisine = french
   recommend(restaurant name= Loch Fyne, neighborhood = city
centre, cuisine = seafood)
  delexicalization
2 ThereisaFrenchrestaurantinMidtowncalledAuMidi.
3 LochFyneisintheCityCenterandservesseafoodfood.
4 ThereisaseafoodrestaurantintheCityCentrecalledLochFyne.
Figure 24.16 Two examples of inputs to the sentence realization phase of NLG, showing the dialogue act and attributes prespecified by the content planner. Line 1-2 and 3-4 show dif- ferent possible output sentences to be generated by the sentence realizer. From the restaurant recommendation system of Nayak et al. (2017).
fore it is common in sentence realization to increase the generality of the training examples by delexicalization. Delexicalization is the process of replacing specific words in the training set that represent slot values with a generic placeholder to- ken representing the slot. Fig. 24.17 shows the result of delexicalizing the training sentences in Fig. 24.16.
1 restaurant name is in neighborhood and serves cuisine food.
2 There is a cuisine restaurant in neighborhood called restaurant name. Figure 24.17 Delexicalized sentences that can be used for generating many different relex- icalized sentences. From the restaurant recommendation system of Nayak et al. (2017).
Mapping from frames to delexicalized sentences is generally done by encoder decoder models (Wen et al. 2015a, Wen et al. 2015b, Mrksˇic ́ et al. 2017, inter alia), trained on large hand-labeled corpora of task-oriented dialogue (Budzianowski et al., 2018). The input to the encoder is a sequence of tokens xt that represent the dia- logue act and its arguments. Thus the dialogue act RECOMMEND and the attribute/- value pairs service:decent, cuisine:null might be represented as a flat sequence of tokens (Nayak et al., 2017), each mapped to a learned embedding wt , as shown in Fig. 24.18.
An encoder decoder sentence realizer mapping slots/fillers to English.
The encoder reads all the input slot/value representations, and the decoder out- puts the following delexicalized English sentence:
restaurant name has decent service
We can then use the input frame from the content planner to relexicalize (fill in the exact restaurant or neighborhood or cuisine) resulting in:
Au Midi has decent service
    recommend(restaurant name= Au Midi, neighborhood = midtown,
cuisine = french
      [name] has decent service DECODER
  ENCODER
RECOMMEND service: decent cuisine: null
 Figure 24.18
 relexicalize

clarification questions
24.5 • EVALUATING DIALOGUE SYSTEMS 517 Generating Clarification Questions
It’s also possible to design NLG algorithms that are specific to a particular dialogue act. For example, consider the task of generating clarification questions, in cases where the speech recognition fails to understand some part of the user’s utterance. While it is possible to use the generic dialogue act REJECT (“Please repeat”, or “I don’t understand what you said”), studies of human conversations show that humans instead use targeted clarification questions that reprise elements of the misunder- standing (Purver 2004, Ginzburg and Sag 2000, Stoyanchev et al. 2013).
For example, in the following hypothetical example the system reprises the words “going” and “on the 5th” to make it clear which aspect of the user’s turn the system needs to be clarified:
User: What do you have going to UNKNOWN WORD on the 5th? System: Goingwhereonthe5th?
Targeted clarification questions can be created by rules (such as replacing “go- ing to UNKNOWN WORD” with “going where”) or by building classifiers to guess which slots might have been misrecognized in the sentence (Chu-Carroll and Car- penter 1999, Stoyanchev et al. 2014, Stoyanchev and Johnston 2015).
24.5 Evaluating Dialogue Systems
acute-eval
Evaluation is crucial in dialogue system design. Chatbots and task-based systems are generally evaluated differently, since they have different goals; task-based systems have to complete a task like booking a flight; chatbots have a different kind of goal, like being enjoyable to users.
24.5.1 Evaluating Chatbots
Chatbots are evaluated by humans, who assign a score. This can be the human who talked to the chatbot (participant evaluation) or a third party who reads a transcript of a human/chatbot conversation (observer evaluation).
In the participant evaluation of See et al. (2019), the human evaluator chats with the model for six turns and rates the chatbot on 8 dimensions capturing conversa- tional quality: avoiding repetition, interestingness, making sense, fluency, listening, inquisitiveness, humanness and engagingness. A few examples:
Engagingness How much did you enjoy talking to this user? •Notatall •Alittle •Somewhat •Alot
Avoiding Repetition How repetitive was this user? •Repeatedthemselvesoverandover •Sometimessaidthesamethingtwice • Always said something new
Making sense How often did this user say something which did NOT make sense? • Never made any sense • Most responses didn’t make sense • Some re- sponsesdidn’tmakesense •Everythingmadeperfectsense
Observer evaluations use third party annotators to look at the text of a complete conversation. Sometimes we’re interested in having raters assign a score to each system turn; for example (Artstein et al., 2009) have raters mark how coherent each turn is. Often, however, we just want a single high-level score to know if system A is better than system B The acute-eval metric (Li et al., 2019) is such an observer

i
rch
com
ract
ortant end-goal of natural lan- of evaluation is an oft-quoted ome to make real progress to-
ifficulties are actually two-fold: not correlate well with human gments themselves are in fact ost used human judgment tests,
and multi-turn Likert scores, iscuss in this work.
ocedure involving comparing man judge is asked to pay at- hin each, and make a pairwise selves are optimized to maxi- nts across different annotators,
show how these tests work in sulting in faster, cheaper tests. he de facto standard, and will
t end.
uction
518 CHAPTER 24 • CHATBOTS & DIALOGUE SYSTEMS
evaluation in which annotators look at two separate human-computer conversations
mproved dialogue evaluation with optimized questions and
(A and B) and choose the one in which the dialogue system participant performed better (interface shown in Fig. 24.19). They answer the following 4 questions (with
multi-turn comparisons
these particular wordings shown to lead to high agreement):
Engagingness Who would you prefer to talk to for a long conversation?
Interestingness If you had to say one of these speakers is interesting and one is Jason Weston Stephen Roller
boring, who would you say is more interesting? Facebook AI Research Facebook AI Research
Humanness Which speaker sounds more human? jase@fb.com roller@fb.com
Knowledgeable If you had to say that one speaker is more knowledgeable and one is more ignorant, who is more knowledgeable?
    Figure 24.19
  machine is an important end-
rch. The open-ended nature of
lti-turn setup naturally makes choose between Speaker 1 (light blue) and Speaker 2 (dark blue), independent of the gray
– with full evaluation pos- ies of the task itself as it re- the content of the conversa-
l language generation (NLG) e not been shown to have a evaluations (Liu et al. 2016; s the current standard for all man trials, which slows down
he cost of model development. gments are themselves diffi-
The ACUTE-EVAL method asks annotators to compare two dialogues and Figure 1: ACUTE-EVAL asks humans to compare two multi-
speaker. Figure from Li et al. (2019).
turn dialogues, and independent of the gray speakers, choose
between Speaker 1 (light blue) and Speaker 2 (dark blue). Automatic evaluations are generally not used for chatbots. That’s because com-
putational measures of generation performance like BLEU or ROUGE or embed-
ding dot products between a chatbot’s response and a human response correlate very
poorly with human judgments (Liu et al., 2016). These methods perform poorly be- the model would repeat itself in a multi-turn conversation
cause there are so many possible responses to any given turn; simple word-overlap because they only look at one turn; repetition is a known
or semantic similarity metrics work best when the space of responses is small and issue that humans dislike (See et al. 2019).
lexically overlapping, which is true of generation tasks like machine translation or
Multi-turn Likert scores require the annotator to have a possibly summarization, but definitely not dialogue.
Howmeuvletri,-rteusrenarchoncvoenrtisnauteisoninawnadysthtoendopmrovreidseopahnistincatetegdearustocmoraeti,c eval- ost used approaches, single-uationswthaitcghoibsemyoonrdewcorsdtlsyimainladrityi.mOen-ceonnosvuelmpianragditgomruisnabduvetresvaarilaul-evalu-
adversarial
yals and Le 2015; Li et al.ation (aBtoewsmfuanllectoanl.v2e0r1s6a,tiKoannsnamnoarnedaVcicnuyarlaste2l0y1.6T, Lhieeitnatle.g2e0r17s)c,oinrespsired by
scores (Venkatesh et al. 2017; l. 2019; Dinan et al. 2019b; s limitations. Single-turn pair- benefits and simplicity of an nd fast annotations, with com-
however suffer from differing bias and variance per annotator, which researchers have tried to mitigate (Kulikov et al. 2018), but nevertheless due to its lack of sensitivity often yields com- parisons that are not statistically significant. Furthermore, due to strong anchoring effects during model evaluation, i.e. that
evaluation
a
t
p s
d m
n d
r u t
m
o e
a
d
e
f a
n t m
n u
otator score bias, but fail to take
annotators are affected by the first systems they evaluate, Lik-

24.5 • EVALUATING DIALOGUE SYSTEMS 519
the Turing test. The idea is to train a “Turing-like” evaluator classifier to distinguish between human-generated responses and machine-generated responses. The more successful a response generation system is at fooling this evaluator, the better the system.
24.5.2 Evaluating Task-Based Dialogue
For task-based dialogue, if the task is unambiguous, we can simply measure absolute task success (did the system book the right plane flight, or put the right event on the calendar).
To get a more fine-grained idea of user happiness, we can compute a user sat- isfaction rating, having users interact with a dialogue system to perform a task and then having them complete a questionnaire. For example, Fig. 24.20 shows sample multiple-choice questions (Walker et al., 2001); responses are mapped into the range of 1 to 5, and then averaged over all questions to get a total user satisfaction rating.
User satisfaction survey, adapted from Walker et al. (2001).
It is often economically infeasible to run complete user satisfaction studies after every change in a system. For this reason, it is useful to have performance evaluation heuristics that correlate well with human satisfaction. A number of such factors and heuristics have been studied, often grouped into two kinds of criteria: how well the system allows users to accomplish their goals (maximizing task success) with the fewest problems (minimizing costs):
Task completion success: Task success can be measured by evaluating the cor- rectness of the total solution. For a frame-based architecture, this might be slot error rate, the percentage of slots that were filled with the correct values:
TTS Performance ASR Performance Task Ease Interaction Pace User Expertise System Response Expected Behavior Future Use
Was the system easy to understand ?
Did the system understand what you said?
Was it easy to find the message/flight/train you wanted?
Was the pace of interaction with the system appropriate?
Did you know what you could say at each point?
How often was the system sluggish and slow to reply to you? Did the system work the way you expected it to?
Do you think you’d use the system in the future?
   Figure 24.20
 Slot Error Rate for a Sentence = # of inserted/deleted/subsituted slots # of total reference slots for sentence
For example consider a system given this sentence:
(24.10) Make an appointment with Chris at 10:30 in Gates 104 which extracted the following candidate slot structure:
Slot Filler
PERSON Chris TIME 11:30 a.m. ROOM Gates 104
(24.9)
    Here the slot error rate is 1/3, since the TIME is wrong. Instead of error rate, slot precision, recall, and F-score can also be used. Slot error rate is also sometimes called concept error rate.
Interestingly, sometimes the user’s perception of whether they completed the task is a better predictor of user satisfaction than the actual task completion success. (Walker et al., 2001).

520 CHAPTER 24 • CHATBOTS & DIALOGUE SYSTEMS
A perhaps more important, although less fine-grained, measure of success is an extrinsic metric like task error rate. In this case, the task error rate would quantify how often the correct meeting was added to the calendar at the end of the interaction.
Efficiency cost: Efficiency costs are measures of the system’s efficiency at helping users. This can be measured by the total elapsed time for the dialogue in seconds, the number of total turns or of system turns, or the total number of queries (Polifroni et al., 1992). Other metrics include the number of system non-responses and the “turn correction ratio”: the number of system or user turns that were used solely to correct errors divided by the total number of turns (Danieli and Gerbino 1995, Hirschman and Pao 1993).
Quality cost: Quality cost measures other aspects of the interactions that affect user’s perception of the system. One such measure is the number of times the ASR system failed to return any sentence, or the number of ASR rejection prompts. Similar metrics include the number of times the user had to barge in (interrupt the system), or the number of time-out prompts played when the user didn’t respond quickly enough. Other quality metrics focus on how well the system understood and responded to the user. The most important is the slot error rate described above, but other components include the inappropriateness (verbose or ambiguous) of the system’s questions, answers, and error messages or the correctness of each question, answer, or error message (Zue et al. 1989, Polifroni et al. 1992).
24.6 Dialogue System Design
voice user interface
Wizard-of-Oz system
The user plays a more important role in dialogue systems than in most other areas of speech and language processing, and thus the study of dialogue systems is closely linked with the field of Human-Computer Interaction (HCI). The design of dialogue strategies, prompts, and error messages, is often called voice user interface design, and generally follows user-centered design principles (Gould and Lewis, 1985):
1. Study the user and task: Understand the potential users and the nature of the task by interviews with users, investigation of similar systems, and study of related human-human dialogues.
2. Build simulations and prototypes: A crucial tool in building dialogue systems is the Wizard-of-Oz system. In wizard systems, the users interact with what they think is a software agent but is in fact a human “wizard” disguised by a software interface (Gould et al. 1983, Good et al. 1984, Fraser and Gilbert 1991). The name comes from the children’s book The Wizard of Oz (Baum, 1900), in which the wizard turned out to be just a simulation controlled by a man behind a curtain or screen.
A Wizard-of-Oz system can be used to test out an architecture before implementa- tion; only the interface software and databases need to be in place. The wizard gets input from the user, has a graphical interface to a database to run sample queries based on the user utterance, and then has a way to output sentences, either by typing them or by some combination of selecting from a menu and typing.
 
value sensitive design
The results of a Wizard-of-Oz system can
also be used as training data to train a pilot di-
alogue system. While Wizard-of-Oz systems
are very commonly used, they are not a per-
fect simulation; it is difficult for the wizard
to exactly simulate the errors, limitations, or
time constraints of a real system; results of
wizard studies are thus somewhat idealized, but still can provide a useful first idea of the domain issues.
3. Iteratively test the design on users: An iterative design cycle with embedded user testing is essential in system design (Nielsen 1992, Cole et al. 1997, Yankelovich et al. 1995, Landauer 1995). For example in a well-known incident in dialogue de- sign history, an early dialogue system required the user to press a key to interrupt the system (Stifelman et al., 1993). But user testing showed users barged in, which led to a redesign of the system to recognize overlapped speech. The iterative method is also important for designing prompts that cause the user to respond in norma- tive ways. It’s also important to incorporate value sensitive design, in which we carefully consider during the design process the benefits, harms and possible stake- holders of the resulting system (Friedman et al. 2017, Bender and Friedman 2018).
There are a number of good books on conversational interface design (Cohen et al. 2004, Harris 2005, Pearl 2017).
24.6.1 Ethical Issues in Dialogue System Design
Ethical issues have long been understood to be crucial in the design of artificial agents, predating the conversational agent itself. Mary Shelley’s classic discussion of the problems of creating agents without a consideration of ethical and humanistic concerns lies at the heart of her novel Frankenstein. One
important ethical issue has to do with safety: systems that directly demean or abuse their users. A related is- sue is the representational harm (Blodgett et al., 2020) caused by systems that demean particular social groups. As we discussed in Section 6.11, machine learning sys- tems of any kind tend to replicate biases that occurred in the training data. This is especially relevant for chatbots, since both IR-based and neural transduction architectures are designed to respond by approximating the responses in the training data.
24.6 •
DIALOGUE SYSTEM DESIGN 521
 A well-publicized instance of a combination of these problems occurred with Tay Microsoft’s 2016 Tay chatbot, which was taken offline 16 hours after it went live, when it began posting messages with racial slurs, conspiracy theories, and personal attacks on its users. Tay had learned these biases and actions from its training data, including from users who seemed to be adversarially attacking the system, purposely teaching it to repeat this kind of language (Neff and Nagy 2016). Wolf et al. (2017) conclude that systems that interact with users must be designed to be robust to such
adversarial attacks.
Henderson et al. (2017) examined some standard dialogue datasets used to train
corpus-based chatbots (like the Twitter, Reddit, or movie dialogues we mention above). They found examples of hate speech, offensive language, and bias, espe- cially in corpora drawn from social media like Twitter and Reddit, both in the orig-

522 CHAPTER 24 • CHATBOTS & DIALOGUE SYSTEMS
inal training data, and in the output of chatbots trained on the data. Indeed, Dinan et al. (2020) found that Transformer-based generator models amplified the gender bias that existed in the dialogues the model was trained on. Liu et al. (2020) de- veloped another method for investigating bias, testing how neural dialogue system responded to pairs of simulated user turns that are identical except for mentioning different genders or race. They found, for example, that simple changes like using the word ‘he’ instead ‘she’ in a sentence caused systems to respond more offen- sively and with more negative sentiment. Addressing these problem by investigating debiasing methods (for example ways to train systems to detect and respond appro- priately to toxic contexts) is an important current research goal (Dinan et al. 2020, Xu et al. 2020).
Another important ethical issue is privacy. Already in the first days of ELIZA, Weizenbaum pointed out the privacy implications of people’s revelations to the chat- bot. Henderson et al. (2017) point out that home dialogue agents may accidentally record a user revealing private information (e.g. “Computer, turn on the lights – answers the phone – Hi, yes, my password is...”), which may then be used to train a conversational model. They showed that when an encoder-decoder dialogue model is trained on a standard corpus augmented with training keypairs representing pri- vate data like identification numbers or passwords (e.g. the keyphrase “social se- curity number” followed by a number), an adversary who gave the keyphrase was able to recover the secret information with nearly 100% accuracy. Chatbots that are trained on transcripts of human-human or human-machine conversation must there- fore anonymize personally identifiable information.
Finally, chatbots raise important issues of gender equality in addition to textual bias. For example current chatbots are overwhelmingly given female names, likely perpetuating the stereotype of a subservient female servant (Paolino, 2017). And when users use sexually harassing language, most commercial chatbots evade or give positive responses rather than responding in clear negative ways (Fessler, 2017).
These ethical issues are an important area of investigation, with the goal of find- ing ways for any user-facing system like a dialogue system to be able to offer some sort of guarantees of safety (Henderson et al., 2017). Because dialogue systems by definition involve human participants, researchers also work on these issues with the
IRB Institutional Review Boards (IRB) at their institutions, who help protect the safety of experimental subjects.
24.7 Summary
Conversational agents are crucial speech and language processing applications that are already widely used commercially.
• In human dialogue, speaking is a kind of action; these acts are referred to as speech acts or dialogue acts. Speakers also attempt to achieve common ground by acknowledging that they have understand each other. Conversation also is characterized by turn structure and dialogue structure.
• Chatbots are conversational agents designed to mimic the appearance of in- formal human conversation. Rule-based chatbots like ELIZA and its modern descendants use rules to map user sentences into system responses. Corpus- based chatbots mine logs of human conversation to learn to automatically map user sentences into system responses.

BIBLIOGRAPHICAL AND HISTORICAL NOTES 523
• For task-based dialogue, most commercial dialogue systems use the GUS or frame-based architecture, in which the designer specifies frames consisting of slots that the system must fill by asking the user.
• The dialogue-state architecture augments the GUS frame-and-slot architec- ture with richer representations and more sophisticated algorithms for keeping track of user’s dialogue acts, policies for generating its own dialogue acts, and a natural language component.
• Dialogue systems are a kind of human-computer interaction, and general HCI principles apply in their design, including the role of the user, simulations such as Wizard-of-Oz systems, and the importance of iterative design and testing on real users.
Bibliographical and Historical Notes
conversation analysis
The earliest conversational systems were chatbots like ELIZA (Weizenbaum, 1966) and PARRY (Colby et al., 1971). ELIZA had a widespread influence on popular perceptions of artificial intelligence, and brought up some of the first ethical ques- tions in natural language processing —such as the issues of privacy we discussed above as well the role of algorithms in decision-making— leading its creator Joseph Weizenbaum to fight for social responsibility in AI and computer science in general.
Another early system, the GUS system (Bobrow et al., 1977) had by the late 1970s established the main frame-based paradigm that became the dominant indus- trial paradigm for dialogue systems for over 30 years.
In the 1990s, stochastic models that had first been applied to natural language understanding began to be applied to dialogue slot filling (Miller et al. 1994, Pierac- cini et al. 1991).
By around 2010 the GUS architecture finally began to be widely used commer- cially in dialogue systems on phones like Apple’s SIRI (Bellegarda, 2013) and other digital assistants.
The rise of the web and online chatbots brought new interest in chatbots and gave rise to corpus-based chatbot architectures around the turn of the century, first using information retrieval models and then in the 2010s, after the rise of deep learning, with sequence-to-sequence models.
The idea that utterances in a conversation are a kind of action being performed by the speaker was due originally to the philosopher Wittgenstein (1953) but worked out more fully by Austin (1962) and his student John Searle. Various sets of speech acts have been defined over the years, and a rich linguistic and philosophical litera- ture developed, especially focused on explaining the use of indirect speech acts.
The idea of dialogue acts draws also from a number of other sources, including the ideas of adjacency pairs, pre-sequences, and other aspects of the international properties of human conversation developed in the field of conversation analysis (see Levinson (1983) for an introduction to the field).
This idea that acts set up strong local dialogue expectations was also prefigured by Firth (1935, p. 70), in a famous quotation:
Most of the give-and-take of conversation in our everyday life is stereotyped and very narrowly conditioned by our particular type of culture. It is a sort of roughly prescribed social ritual, in which you generally say what the other fellow expects you, one way or the other, to say.

524 CHAPTER 24 • CHATBOTS & DIALOGUE SYSTEMS
Another important research thread modeled dialogue as a kind of collaborative behavior, including the ideas of common ground (Clark and Marshall, 1981), ref- erence as a collaborative process (Clark and Wilkes-Gibbs, 1986), joint intention (Levesque et al., 1990), and shared plans (Grosz and Sidner, 1980).
The dialogue-state model was also strongly informed by analytic work on the linguistic properties of dialogue acts and on methods for their detection (Sag and Liberman 1975, Hinkelman and Allen 1989, Nagata and Morimoto 1994, Good- win 1996, Chu-Carroll 1998, Shriberg et al. 1998, Stolcke et al. 2000, Gravano et al. 2012).
Two important lines of research that we were unable to cover in the chapter fo- cused on the computational properties of conversational structure. One line, first suggested by Bruce (1975), suggested that since speech acts are actions, they should be planned like other actions, and drew on the AI planning literature (Fikes and Nils- son, 1971). An agent seeking to find out some information can come up with the plan of asking the interlocutor for the information. An agent hearing an utterance can in- terpret a speech act by running the planner “in reverse”, using inference rules to infer from what the interlocutor said what the plan might have been. Plan-based models
BDI of dialogue are referred to as BDI models because such planners model the beliefs, desires, and intentions (BDI) of the agent and interlocutor. BDI models of dialogue were first introduced by Allen, Cohen, Perrault, and their colleagues in a number of influential papers showing how speech acts could be generated (Cohen and Perrault, 1979) and interpreted (Perrault and Allen 1980, Allen and Perrault 1980). At the same time, Wilensky (1983) introduced plan-based models of understanding as part of the task of interpreting stories.
Another influential line of research focused on modeling the hierarchical struc- ture of dialogue. Grosz’s pioneering (1977b) dissertation first showed that “task- oriented dialogues have a structure that closely parallels the structure of the task being performed” (p. 27), leading to her work with Sidner and others showing how to use similar notions of intention and plans to model discourse structure and co- herence in dialogue. See, e.g., Lochbaum et al. (2000) for a summary of the role of intentional structure in dialogue.
The idea of applying reinforcement learning to dialogue first came out of AT&T and Bell Laboratories around the turn of the century with work on MDP dialogue systems (Walker 2000, Levin et al. 2000, Singh et al. 2002) and work on cue phrases, prosody, and rejection and confirmation. Reinforcement learning research turned quickly to the more sophisticated POMDP models (Roy et al. 2000, Lemon et al. 2006, Williams and Young 2007) applied to small slot-filling dialogue tasks,
Affect has played an important role in dialogue systems since its earliest days. In more recent work Mairesse and Walker (2008) showed that conversational agents are received better by users if they match users’ personality expectations. We men- tioned above the EMPATHETICDIALOGUES dataset of 25k conversations grounded in emotional situations (Rashkin et al., 2019). Lin et al. (2019) used mixtures of empathetic listeners (MoEL), each optimized to react to particular emotions, to gen- erate empathetic responses.
[TBD: History of deep reinforcement learning here.] [TBD: surveys: Tur and De Mori (2011), Gao et al. (2019)]
[TBD: add recent more history here. including dialogue state tracking, NLG, end-to-end neural systems, etc]

Exercises
dispreferred response
EXERCISES 525
24.1 Write a finite-state automaton for a dialogue manager for checking your bank
balance and withdrawing money at an automated teller machine.
24.2 A dispreferred response is a response that has the potential to make a person uncomfortable or embarrassed in the conversational context; the most com- mon example dispreferred responses is turning down a request. People signal their discomfort with having to say no with surface cues (like the word well), or via significant silence. Try to notice the next time you or someone else utters a dispreferred response, and write down the utterance. What are some other cues in the response that a system might use to detect a dispreferred response? Consider non-verbal cues like eye gaze and body gestures.
24.3 When asked a question to which they aren’t sure they know the answer, peo- ple display their lack of confidence by cues that resemble other dispreferred responses. Try to notice some unsure answers to questions. What are some of the cues? If you have trouble doing this, read Smith and Clark (1993) and listen specifically for the cues they mention.
24.4 Implement a small air-travel help system based on text input. Your system should get constraints from users about a particular flight that they want to take, expressed in natural language, and display possible flights on a screen. Make simplifying assumptions. You may build in a simple flight database or you may use a flight information system on the Web as your backend.

526 CHAPTER 25 • PHONETICS CHAPTER
25 Phonetics
  25.1
Speech Sounds and Phonetic Transcription
A letter like ‘p’ or ‘a’ is already a useful model of the sounds of human speech, and indeed we’ll see in Chapter 26 how to map between letters and waveforms. Nonetheless, it is helpful to represent sounds slightly more abstractly. We’ll repre-
phone sent the pronunciation of a word as a string of phones, which are speech sounds, each represented with symbols adapated from the Roman alphabet.
The standard phonetic representation for transcribing the world’s languages is IPA the International Phonetic Alphabet (IPA), an evolving standard first developed in 1888, But in this chapter we’ll instead represent phones with the ARPAbet (Shoup, 1980), a simple phonetic alphabet (Fig. 25.1) that conveniently uses ASCII symbols
to represent an American-English subset of the IPA.
Many of the IPA and ARPAbet symbols are equivalent to familiar Roman let-
ters. So, for example, the ARPAbet phone [p] represents the consonant sound at the
phonetics
The characters that make up the texts we’ve been discussing in this book aren’t just random symbols. They are also an amazing scientific invention: a theoretical model of the elements that make up human speech.
The earliest writing systems we know of (Sumerian, Chinese, Mayan) were mainly logographic: one symbol representing a whole word. But from the ear- liest stages we can find, some symbols were also used to represent the sounds that made up words. The cuneiform sign to the right pro-
nounced ba and meaning “ration” in Sumerian could also
function purely as the sound /ba/. The earliest Chinese char-
acters we have, carved into bones for divination, similarly
contain phonetic elements. Purely sound-based writing systems, whether syllabic (like Japanese hiragana), alphabetic (like the Roman alphabet), or consonantal (like Semitic writing systems), trace back to these early logo-syllabic systems, often as two cultures came together. Thus, the Arabic, Aramaic, Hebrew, Greek, and Roman systems all derive from a West Semitic script that is presumed to have been modified by Western Semitic mercenaries from a cursive form of Egyptian hieroglyphs. The Japanese syllabaries were modified from a cursive form of Chinese phonetic charac- ters, which themselves were used in Chinese to phonetically represent the Sanskrit in the Buddhist scriptures that came to China in the Tang dynasty.
This implicit idea that the spoken word is composed of smaller units of speech underlies algorithms for both speech recognition (transcribing waveforms into text) and text-to-speech (converting text into waveforms). In this chapter we give a com- putational perspective on phonetics, the study of the speech sounds used in the languages of the world, how they are produced in the human vocal tract, how they are realized acoustically, and how they can be digitized and processed.

ARPAbet and IPA symbols for English consonants (left) and vowels (right).
beginning of platypus, puma, and plantain, the middle of leopard, or the end of an- telope. In general, however, the mapping between the letters of English orthography and phones is relatively opaque; a single letter can represent very different sounds in different contexts. The English letter c corresponds to phone [k] in cougar [k uw g axr], but phone [s] in cell [s eh l]. Besides appearing as c and k, the phone [k] can appear as part of x (fox [f aa k s]), as ck (jackal [jh ae k el]) and as cc (raccoon [r ae k uw n]). Many other languages, for example, Spanish, are much more transparent in their sound-orthography mapping than English.
25.2 Articulatory Phonetics
articulatory phonetics
Articulatory phonetics is the study of how these phones are produced as the various organs in the mouth, throat, and nose modify the airflow from the lungs.
The Vocal Organs
Figure 25.2 shows the organs of speech. Sound is produced by the rapid movement of air. Humans produce most sounds in spoken languages by expelling air from the lungs through the windpipe (technically, the trachea) and then out the mouth or nose. As it passes through the trachea, the air passes through the larynx, commonly known as the Adam’s apple or voice box. The larynx contains two small folds of
25.2 • ARTICULATORY PHONETICS 527
ARPAbet IPA ARPAbet ARPAbet IPA ARPAbet Symbol Symbol Word Transcription Symbol Symbol Word Transcription
  [p] [p] [t] [t] [k] [k] [b] [b] [d] [d] [g] [g]
[m] [m]
[n] [n]
[ng] [N] [f] [f] [v] [v] [th] [T] [dh] [D] [s] [s] [z] [z] [sh] [S] [zh] [Z] [ch] [tS] [jh] [dZ] [l] [l] [w] [w] [r] [r] [y] [j] [h] [h]
parsley tea
cook
bay
dill garlic mint nutmeg baking flour clove thick those soup eggs squash ambrosia cherry jar licorice kiwi
rice yellow honey
[p aa r s l iy] [t iy]
[k uh k]
[b ey]
[d ih l]
[g aa r l ix k]
[m ih n t]
[n ah t m eh g]
[b ey k ix ng]
[f l aw axr]
[k l ow v]
[th ih k]
[dh ow z]
[s uw p]
[eh g z]
[s k w aa sh]
[ae m b r ow zh ax] [ch eh r iy]
[jh aa r]
[l ih k axr ix sh]
[k iy w iy]
[r ay s]
[y eh l ow]
[h ah n iy]
[iy] [i] [ih] [I] [ey] [eI] [eh] [E] [ae] [æ] [aa] [A] [ao] [O] [uh] [U] [ow] [oU] [uw] [u] [ah] [2] [er] [Ç] [ay] [aI] [aw] [aU] [oy] [oI]
lily lily daisy pen aster poppy orchid wood lotus tulip butter bird iris flower soil
[l ih l iy]
[l ih l iy]
[d ey z iy] [p eh n]
[ae s t axr] [p aa p iy] [ao r k ix d] [w uh d]
[l ow dx ax s] [t uw l ix p] [b ah dx axr] [b er d]
[ay r ix s] [f l aw axr] [s oy l]
  Figure 25.1
 
528 CHAPTER 25 • PHONETICS
    Figure 25.2
  glottis
voiced sound unvoiced sound
nasal
consonant vowel
The vocal organs, shown in side view. (Figure from OpenStax University Physics, CC BY 4.0)
muscle, the vocal folds (often referred to non-technically as the vocal cords), which can be moved together or apart. The space between these two folds is called the glottis. If the folds are close together (but not tightly closed), they will vibrate as air passes through them; if they are far apart, they won’t vibrate. Sounds made with the vocal folds together and vibrating are called voiced; sounds made without this vocal cord vibration are called unvoiced or voiceless. Voiced sounds include [b], [d], [g], [v], [z], and all the English vowels, among others. Unvoiced sounds include [p], [t], [k], [f], [s], and others.
The area above the trachea is called the vocal tract; it consists of the oral tract and the nasal tract. After the air leaves the trachea, it can exit the body through the mouth or the nose. Most sounds are made by air passing through the mouth. Sounds made by air passing through the nose are called nasal sounds; nasal sounds (like English [m], [n], and [ng]) use both the oral and nasal tracts as resonating cavities.
Phones are divided into two main classes: consonants and vowels. Both kinds of sounds are formed by the motion of air through the mouth, throat or nose. Con- sonants are made by restriction or blocking of the airflow in some way, and can be voiced or unvoiced. Vowels have less obstruction, are usually voiced, and are gen- erally louder and longer-lasting than consonants. The technical use of these terms is much like the common usage; [p], [b], [t], [d], [k], [g], [f], [v], [s], [z], [r], [l], etc., are consonants; [aa], [ae], [ao], [ih], [aw], [ow], [uw], etc., are vowels. Semivow- els (such as [y] and [w]) have some of the properties of both; they are voiced like vowels, but they are short and less syllabic like consonants.

place of articulation
25.2 • ARTICULATORY PHONETICS 529 Because consonants are made by restricting airflow, we can group them into classes
by their point of maximum restriction, their place of articulation (Fig. 25.3).
Major English places of articulation.
Labial: Consonants whose main restriction is formed by the two lips coming to- gether have a bilabial place of articulation. In English these include [p] as in possum, [b] as in bear, and [m] as in marmot. The English labiodental consonants [v] and [f] are made by pressing the bottom lip against the upper row of teeth and letting the air flow through the space in the upper teeth.
Dental: Sounds that are made by placing the tongue against the teeth are dentals. The main dentals in English are the [th] of thing and the [dh] of though, which are made by placing the tongue behind the teeth with the tip slightly between the teeth.
Alveolar: The alveolar ridge is the portion of the roof of the mouth just behind the upper teeth. Most speakers of American English make the phones [s], [z], [t], and [d] by placing the tip of the tongue against the alveolar ridge. The word coronal is often used to refer to both dental and alveolar.
Palatal: The roof of the mouth (the palate) rises sharply from the back of the alveolar ridge. The palato-alveolar sounds [sh] (shrimp), [ch] (china), [zh] (Asian), and [jh] (jar) are made with the blade of the tongue against the rising back of the alveolar ridge. The palatal sound [y] of yak is made by placing the front of the tongue up close to the palate.
Velar: The velum, or soft palate, is a movable muscular flap at the very back of the roof of the mouth. The sounds [k] (cuckoo), [g] (goose), and [N] (kingfisher) are made by pressing the back of the tongue up against the velum.
Glottal: The glottal stop [q] is made by closing the glottis (by bringing the vocal folds together).
Consonants: Manner of Articulation
Consonants are also distinguished by how the restriction in airflow is made, for ex- ample, by a complete stoppage of air or by a partial blockage. This feature is called the manner of articulation of a consonant. The combination of place and manner of articulation is usually sufficient to uniquely identify a consonant. Following are the major manners of articulation for English consonants:
A stop is a consonant in which airflow is completely blocked for a short time. This blockage is followed by an explosive sound as the air is released. The period of blockage is called the closure, and the explosion is called the release. English
Consonants: Place of Articulation
      (nasal tract)
alveolar
 dental bilabial
palatal
glottal
velar
  Figure 25.3
 labial
dental
alveolar
palatal palate
velar
glottal
manner of articulation
stop

530
CHAPTER 25 • PHONETICS
nasal fricatives
has voiced stops like [b], [d], and [g] as well as unvoiced stops like [p], [t], and [k]. Stops are also called plosives.
The nasal sounds [n], [m], and [ng] are made by lowering the velum and allow- ing air to pass into the nasal cavity.
In fricatives, airflow is constricted but not cut off completely. The turbulent airflow that results from the constriction produces a characteristic “hissing” sound. The English labiodental fricatives [f] and [v] are produced by pressing the lower lip against the upper teeth, allowing a restricted airflow between the upper teeth. The dental fricatives [th] and [dh] allow air to flow around the tongue between the teeth. The alveolar fricatives [s] and [z] are produced with the tongue against the alveolar ridge, forcing air over the edge of the teeth. In the palato-alveolar fricatives [sh] and [zh], the tongue is at the back of the alveolar ridge, forcing air through a groove formed in the tongue. The higher-pitched fricatives (in English [s], [z], [sh] and [zh]) are called sibilants. Stops that are followed immediately by fricatives are called affricates; these include English [ch] (chicken) and [jh] (giraffe).
In approximants, the two articulators are close together but not close enough to cause turbulent airflow. In English [y] (yellow), the tongue moves close to the roof of the mouth but not close enough to cause the turbulence that would characterize a fricative. In English [w] (wood), the back of the tongue comes close to the velum. American [r] can be formed in at least two ways; with just the tip of the tongue extended and close to the palate or with the whole tongue bunched up near the palate. [l] is formed with the tip of the tongue up against the alveolar ridge or the teeth, with one or both sides of the tongue lowered to allow air to flow over it. [l] is called a lateral sound because of the drop in the sides of the tongue.
A tap or flap [dx] is a quick motion of the tongue against the alveolar ridge. The consonant in the middle of the word lotus ([l ow dx ax s]) is a tap in most dialects of American English; speakers of many U.K. dialects would use a [t] instead.
Vowels
Like consonants, vowels can be characterized by the position of the articulators as they are made. The three most relevant parameters for vowels are what is called vowel height, which correlates roughly with the height of the highest part of the tongue, vowel frontness or backness, indicating whether this high point is toward the front or back of the oral tract and whether the shape of the lips is rounded or not. Figure 25.4 shows the position of the tongue for different vowels.
Tongue positions for English high front [iy], low front [ae] and high back [uw].
In the vowel [iy], for example, the highest point of the tongue is toward the front of the mouth. In the vowel [uw], by contrast, the high-point of the tongue is located toward the back of the mouth. Vowels in which the tongue is raised toward the front are called front vowels; those in which the tongue is raised toward the
sibilants approximant
tap
              tongue palate
closed velum
  beet [iy] bat [ae]
boot [uw]
 Figure 25.4
 Front vowel

back vowel high vowel
25.2 • ARTICULATORY PHONETICS 531
back are called back vowels. Note that while both [ih] and [eh] are front vowels, the tongue is higher for [ih] than for [eh]. Vowels in which the highest point of the tongue is comparatively high are called high vowels; vowels with mid or low values of maximum tongue height are called mid vowels or low vowels, respectively.
The schematic “vowel space” for English vowels.
Figure 25.5 shows a schematic characterization of the height of different vowels. It is schematic because the abstract property height correlates only roughly with ac- tual tongue positions; it is, in fact, a more accurate reflection of acoustic facts. Note that the chart has two kinds of vowels: those in which tongue height is represented as a point and those in which it is represented as a path. A vowel in which the tongue position changes markedly during the production of the vowel is a diphthong. En- glish is particularly rich in diphthongs.
The second important articulatory dimension for vowels is the shape of the lips. Certain vowels are pronounced with the lips rounded (the same lip shape used for whistling). These rounded vowels include [uw], [ao], and [ow].
Syllables
Consonants and vowels combine to make a syllable. A syllable is a vowel-like (or sonorant) sound together with some of the surrounding consonants that are most closely associated with it. The word dog has one syllable, [d aa g] (in our dialect); the word catnip has two syllables, [k ae t] and [n ih p]. We call the vowel at the core of a syllable the nucleus. Initial consonants, if any, are called the onset. Onsets with more than one consonant (as in strike [s t r ay k]), are called complex onsets. The coda is the optional consonant or sequence of consonants following the nucleus. Thus [d] is the onset of dog, and [g] is the coda. The rime, or rhyme, is the nucleus plus coda. Figure 25.6 shows some sample syllable structures.
The task of automatically breaking up a word into syllables is called syllabifica- tion. Syllable structure is also closely related to the phonotactics of a language. The term phonotactics means the constraints on which phones can follow each other in a language. For example, English has strong constraints on what kinds of conso- nants can appear together in an onset; the sequence [zdr], for example, cannot be a legal English syllable onset. Phonotactics can be represented by a language model or finite-state model of phone sequences.
    iy
ih
ey
y uw
high
oy
uw uh
ax
ao
aa
  front
eh
ah
ae
back
low
 Figure 25.5
 diphthong
rounded vowel
syllable
nucleus onset coda rime
syllabification phonotactics
ow
aw
ay

532 CHAPTER 25 • PHONETICS
   σσσ
Onset Rime Onset Rime Rime
h Nucleus Coda g r Nucleus Coda Nucleus Coda aem iynehgz
 Figure 25.6
 25.3 Prosody
prosody
Prosody is the study of the intonational and rhythmic aspects of language, and in particular the use of F0, energy, and duration to convey pragmatic, affective, or conversation-interactional meanings.1 Prosody can be used to mark discourse structure, like the difference between statements and questions, or the way that a conversation is structured. Prosody is used to mark the saliency of a particular word or phrase. Prosody is heavily used for paralinguistic functions like conveying affec- tive meanings like happiness, surprise, or anger. And prosody plays an important role in managing turn-taking in conversation.
25.3.1 Prosodic Prominence: Accent, Stress and Schwa
In a natural utterance of American English, some words sound more prominent than others, and certain syllables in these words are also more prominent than others. What we mean by prominence is that these words or syllables are perceptually more salient to the listener. Speakers make a word or syllable more salient in English by saying it louder, saying it slower (so it has a longer duration), or by varying F0 during the word, making it higher or more variable.
Accent We represent prominence via a linguistic marker called pitch accent. Words or syllables that are prominent are said to bear (be associated with) a pitch accent. Thus this utterance might be pronounced by accenting the underlined words:
(25.1) I’m a little surprised to hear it characterized as happy.
Lexical Stress The syllables that bear pitch accent are called accented syllables. Not every syllable of a word can be accented: pitch accent has to be realized on the syllable that has lexical stress. Lexical stress is a property of the word’s pronuncia- tion in dictionaries; the syllable that has lexical stress is the one that will be louder or longer if the word is accented. For example, the word surprised is stressed on its second syllable, not its first. (Try stressing the other syllable by saying SURprised; hopefully that sounds wrong to you). Thus, if the word surprised receives a pitch accent in a sentence, it is the second syllable that will be stronger. The following ex- ample shows underlined accented words with the stressed syllable bearing the accent (the louder, longer syllable) in boldface:
(25.2) I’m a little surprised to hear it characterized as happy.
1 The word is used in a different but related way in poetry, to mean the study of verse metrical structure.
prominence
pitch accent
lexical stress
Syllable structure of ham, green, eggs. σ =syllable.
       
reduced vowel schwa
prominence
prosodic phrasing
intonation phrase
intermediate phrase
25.3 • PROSODY 533
Stress is marked in dictionaries. The CMU dictionary (CMU, 1993), for ex- ample, marks vowels with 0 (unstressed) or 1 (stressed) as in entries for counter: [K AW1 N T ER0], or table: [T EY1 B AH0 L]. Difference in lexical stress can affect word meaning; the noun content is pronounced [K AA1 N T EH0 N T], while the adjective is pronounced [K AA0 N T EH1 N T].
Reduced Vowels and Schwa Unstressed vowels can be weakened even further to reduced vowels, the most common of which is schwa ([ax]), as in the second vowel of parakeet: [p ae r ax k iy t]. In a reduced vowel the articulatory gesture isn’t as complete as for a full vowel. Not all unstressed vowels are reduced; any vowel, and diphthongs in particular, can retain its full quality even in unstressed position. For example, the vowel [iy] can appear in stressed position as in the word eat [iy t] or in unstressed position as in the word carry [k ae r iy].
In summary, there is a continuum of prosodic prominence, for which it is often useful to represent levels like accented, stressed, full vowel, and reduced vowel.
25.3.2 Prosodic Structure
Spoken sentences have prosodic structure: some words seem to group naturally to- gether, while some words seem to have a noticeable break or disjuncture between them. Prosodic structure is often described in terms of prosodic phrasing, mean- ing that an utterance has a prosodic phrase structure in a similar way to it having a syntactic phrase structure. For example, the sentence I wanted to go to London, but could only get tickets for France seems to have two main intonation phrases, their boundary occurring at the comma. Furthermore, in the first phrase, there seems to be another set of lesser prosodic phrase boundaries (often called intermediate phrases) that split up the words as I wanted | to go | to London. These kinds of intonation phrases are often correlated with syntactic structure constituents (Price et al. 1991, Bennett and Elfner 2019).
Automatically predicting prosodic boundaries can be important for tasks like TTS. Modern approaches use sequence models that take either raw text or text an- notated with features like parse trees as input, and make a break/no-break decision at each word boundary. They can be trained on data labeled for prosodic structure like the Boston University Radio News Corpus (Ostendorf et al., 1995).
25.3.3 Tune
Two utterances with the same prominence and phrasing patterns can still differ prosodically by having different tunes. The tune of an utterance is the rise and fall of its F0 over time. A very obvious example of tune is the difference between statements and yes-no questions in English. The same words can be said with a final F0 rise to indicate a yes-no question (called a question rise):
or a final drop in F0 (called a final fall) to indicate a declarative intonation:
Languages make wide use of tune to express meaning (Xu, 2005). In English,
tune question rise
final fall
 You know what I mean ?
 You know what I mean .

534 CHAPTER 25 • PHONETICS
continuation rise
ToBI boundary tone
for example, besides this well-known rise for yes-no questions, a phrase containing a list of nouns separated by commas often has a short rise called a continuation rise after each noun. Other examples include the characteristic English contours for expressing contradiction and expressing surprise.
Linking Prominence and Tune
Pitch accents come in different varieties that are related to tune; high pitched accents, for example, have different functions than low pitched accents. There are many typologies of accent classes in different languages. One such typology is part of the ToBI (Tone and Break Indices) theory of intonation (Silverman et al. 1992). Each word in ToBI can be associated with one of five types of pitch accents shown in in Fig. 25.7. Each utterance in ToBI consists of a sequence of intonational phrases, each of which ends in one of four boundary tones shown in Fig. 25.7, representing the utterance final aspects of tune. There are version of ToBI for many languages.
The accent and boundary tones labels from the ToBI transcription system for American English intonation (Beckman and Ayers 1997, Beckman and Hirschberg 1994).
Pitch Accents Boundary Tones
 H* peak accent L* low accent
L*+H scooped accent
L+H* rising peak accent H+!H* step down
L-L% “final fall”: “declarative contour” of American English
L-H% continuation rise
H-H% “question rise”: cantonical yes-no question
contour
H-L% final level plateau
 Figure 25.7
   25.4 Acoustic Phonetics and Signals
frequency amplitude
Hertz period
We begin with a very brief introduction to the acoustic waveform and its digitization and frequency analysis; the interested reader is encouraged to consult the references at the end of the chapter.
25.4.1 Waves
Acoustic analysis is based on the sine and cosine functions. Figure 25.8 shows a plot of a sine wave, in particular the function
y = A∗sin(2π ft) (25.3)
where we have set the amplitude A to 1 and the frequency f to 10 cycles per second. Recall from basic mathematics that two important characteristics of a wave are its frequency and amplitude. The frequency is the number of times a second that a wave repeats itself, that is, the number of cycles. We usually measure frequency in cycles per second. The signal in Fig. 25.8 repeats itself 5 times in .5 seconds, hence 10 cycles per second. Cycles per second are usually called hertz (shortened to Hz), so the frequency in Fig. 25.8 would be described as 10 Hz. The amplitude A of a sine wave is the maximum value on the Y axis. The period T of the wave is the time
it takes for one cycle to complete, defined as
T = 1f (25.4)

0.02283
0
–0.01697
sampling
Nyquist frequency
Figure 25.8
25.4
• ACOUSTIC PHONETICS AND SIGNALS 535
   1.0
0
–1.0
        0 0.1
0.2
0.3 0.4
0.5
Time (s)
 A sine wave with a frequency of 10 Hz and an amplitude of 1. Each cycle in Fig. 25.8 lasts a tenth of a second; hence T = .1 seconds.
25.4.2 Speech Sound Waves
Let’s turn from hypothetical waves to sound waves. The input to a speech recog- nizer, like the input to the human ear, is a complex series of changes in air pressure. These changes in air pressure obviously originate with the speaker and are caused by the specific way that air passes through the glottis and out the oral or nasal cav- ities. We represent sound waves by plotting the change in air pressure over time. One metaphor which sometimes helps in understanding these graphs is that of a ver- tical plate blocking the air pressure waves (perhaps in a microphone in front of a speaker’s mouth, or the eardrum in a hearer’s ear). The graph measures the amount of compression or rarefaction (uncompression) of the air molecules at this plate. Figure 25.9 shows a short segment of a waveform taken from the Switchboard corpus of telephone speech of the vowel [iy] from someone saying “she just had a baby”.
0.03875
Time (s)
A waveform of the vowel [iy] from an utterance shown later in Fig. 25.13 on page 539. The y-axis shows the level of air pressure above and below normal atmospheric pressure. The x-axis shows time. Notice that the wave repeats regularly.
      Figure 25.9
0
  The first step in digitizing a sound wave like Fig. 25.9 is to convert the analog representations (first air pressure and then analog electric signals in a microphone) into a digital signal. This analog-to-digital conversion has two steps: sampling and quantization. To sample a signal, we measure its amplitude at a particular time; the sampling rate is the number of samples taken per second. To accurately measure a wave, we must have at least two samples in each cycle: one measuring the positive part of the wave and one measuring the negative part. More than two samples per cycle increases the amplitude accuracy, but fewer than two samples causes the fre- quency of the wave to be completely missed. Thus, the maximum frequency wave that can be measured is one whose frequency is half the sample rate (since every cycle needs two samples). This maximum frequency for a given sampling rate is called the Nyquist frequency. Most information in human speech is in frequencies below 10,000 Hz; thus, a 20,000 Hz sampling rate would be necessary for com-

536 CHAPTER 25 • PHONETICS
quantization
channel
PCM
plete accuracy. But telephone speech is filtered by the switching network, and only frequencies less than 4,000 Hz are transmitted by telephones. Thus, an 8,000 Hz sampling rate is sufficient for telephone-bandwidth speech like the Switchboard corpus, while 16,000 Hz sampling is often used for microphone speech.
Even an 8,000 Hz sampling rate requires 8000 amplitude measurements for each second of speech, so it is important to store amplitude measurements efficiently. They are usually stored as integers, either 8 bit (values from -128–127) or 16 bit (values from -32768–32767). This process of representing real-valued numbers as integers is called quantization because the difference between two integers acts as a minimum granularity (a quantum size) and all values that are closer together than this quantum size are represented identically.
Once data is quantized, it is stored in various formats. One parameter of these formats is the sample rate and sample size discussed above; telephone speech is often sampled at 8 kHz and stored as 8-bit samples, and microphone data is often sampled at 16 kHz and stored as 16-bit samples. Another parameter is the number of channels. For stereo data or for two-party conversations, we can store both channels in the same file or we can store them in separate files. A final parameter is individual sample storage—linearly or compressed. One common compression format used for telephone speech is μ-law (often written u-law but still pronounced mu-law). The intuition of log compression algorithms like μ-law is that human hearing is more sensitive at small intensities than large ones; the log represents small values with more faithfulness at the expense of more error on large values. The linear (unlogged) values are generally referred to as linear PCM values (PCM stands for pulse code modulation, but never mind that). Here’s the equation for compressing a linear PCM sample value x to 8-bit μ-law, (where μ=255 for 8 bits):
F(x) = sgn(x)log(1+μ|x|) −1 ≤ x ≤ 1 (25.5) log(1+μ)
There are a number of standard file formats for storing the resulting digitized wave- file, such as Microsoft’s .wav and Apple’s AIFF all of which have special headers; simple headerless “raw” files are also used. For example, the .wav format is a subset of Microsoft’s RIFF format for multimedia files; RIFF is a general format that can represent a series of nested chunks of data and control information. Figure 25.10 shows a simple .wav file with a single data chunk together with its format chunk.
Microsoft wavefile header format, assuming simple file with one chunk. Fol- lowing this 44-byte header would be the data chunk.
25.4.3 Frequency and Amplitude; Pitch and Loudness
Sound waves, like all waves, can be described in terms of frequency, amplitude, and the other characteristics that we introduced earlier for pure sine waves. In sound waves, these are not quite as simple to measure as they were for sine waves. Let’s consider frequency. Note in Fig. 25.9 that although not exactly a sine, the wave is
      Figure 25.10
  
fundamental frequency
F0 pitch track
25.4 • ACOUSTIC PHONETICS AND SIGNALS 537
nonetheless periodic, repeating 10 times in the 38.75 milliseconds (.03875 seconds) captured in the figure. Thus, the frequency of this segment of the wave is 10/.03875 or 258 Hz.
Where does this periodic 258 Hz wave come from? It comes from the speed of vibration of the vocal folds; since the waveform in Fig. 25.9 is from the vowel [iy], it is voiced. Recall that voicing is caused by regular openings and closing of the vocal folds. When the vocal folds are open, air is pushing up through the lungs, creating a region of high pressure. When the folds are closed, there is no pressure from the lungs. Thus, when the vocal folds are vibrating, we expect to see regular peaks in amplitude of the kind we see in Fig. 25.9, each major peak corresponding to an opening of the vocal folds. The frequency of the vocal fold vibration, or the frequency of the complex wave, is called the fundamental frequency of the wave- form, often abbreviated F0. We can plot F0 over time in a pitch track. Figure 25.11 shows the pitch track of a short question, “Three o’clock?” represented below the waveform. Note the rise in F0 at the end of the question.
      500 Hz
0 Hz
0
The vertical axis in Fig. 25.9 measures the amount of air pressure variation; pressure is force per unit area, measured in Pascals (Pa). A high value on the vertical axis (a high amplitude) indicates that there is more air pressure at that point in time, a zero value means there is normal (atmospheric) air pressure, and a negative value means there is lower than normal air pressure (rarefaction).
In addition to this value of the amplitude at any point in time, we also often need to know the average amplitude over some time range, to give us some idea of how great the average displacement of air pressure is. But we can’t just take the average of the amplitude values over a range; the positive and negative values would (mostly) cancel out, leaving us with a number close to zero. Instead, we generally use the RMS (root-mean-square) amplitude, which squares each number before averaging (making it positive), and then takes the square root at the end.
   Figure 25.11
three
o’clock
Time (s)
0.544375
 Pitch track of the question “Three o’clock?”, shown below the wavefile. Note the rise in F0 at the end of the question. Note the lack of pitch trace during the very quiet part (the “o’” of “o’clock”; automatic pitch tracking is based on counting the pulses in the voiced regions, and doesn’t work if there is no voicing (or insufficient sound).
  power
􏰚􏰙􏰙 1 􏰑N
RMS amplitudeNi=1 = 􏰘 N xi2 (25.6)
i=1
The power of the signal is related to the square of the amplitude. If the number

538
CHAPTER 25 • PHONETICS
of samples of a sound is N, the power is
intensity
1 􏰑N 2
Power = N xi (25.7)
i=1
Rather than power, we more often refer to the intensity of the sound, which normalizes the power to the human auditory threshold and is measured in dB. If P0 is the auditory threshold pressure = 2 × 10−5 Pa, then intensity is defined as follows:
1 􏰑N 2
Intensity = 10log10 NP0 xi (25.8)
i=1
Figure 25.12 shows an intensity plot for the sentence “Is it a long movie?” from
the CallHome corpus, again shown below the waveform plot.
           is
Two important perceptual properties, pitch and loudness, are related to fre- quency and intensity. The pitch of a sound is the mental sensation, or perceptual correlate, of fundamental frequency; in general, if a sound has a higher fundamen- tal frequency we perceive it as having a higher pitch. We say “in general” because the relationship is not linear, since human hearing has different acuities for different frequencies. Roughly speaking, human pitch perception is most accurate between 100 Hz and 1000 Hz and in this range pitch correlates linearly with frequency. Hu- man hearing represents frequencies above 1000 Hz less accurately, and above this range, pitch correlates logarithmically with frequency. Logarithmic representation means that the differences between high frequencies are compressed and hence not as accurately perceived. There are various psychoacoustic models of pitch percep- tion scales. One common model is the mel scale (Stevens et al. 1937, Stevens and Volkmann 1940). A mel is a unit of pitch defined such that pairs of sounds which are perceptually equidistant in pitch are separated by an equal number of mels. The mel frequency m can be computed from the raw acoustic frequency as follows:
m=1127ln(1+ f ) (25.9) 700
As we’ll see in Chapter 26, the mel scale plays an important role in speech recognition.
Figure 25.12
0
it a long movie?
Time (s)
1.1675
 Intensity plot for the sentence “Is it a long movie?”. Note the intensity peaks at each vowel and the especially high peak for the word long.
 pitch
Mel

 pitch extraction
25.4 • ACOUSTIC PHONETICS AND SIGNALS 539
The loudness of a sound is the perceptual correlate of the power. So sounds with higher amplitudes are perceived as louder, but again the relationship is not linear. First of all, as we mentioned above when we defined μ-law compression, humans have greater resolution in the low-power range; the ear is more sensitive to small power differences. Second, it turns out that there is a complex relationship between power, frequency, and perceived loudness; sounds in certain frequency ranges are perceived as being louder than those in other frequency ranges.
Various algorithms exist for automatically extracting F0. In a slight abuse of ter- minology, these are called pitch extraction algorithms. The autocorrelation method of pitch extraction, for example, correlates the signal with itself at various offsets. The offset that gives the highest correlation gives the period of the signal. There are various publicly available pitch extraction toolkits; for example, an augmented autocorrelation pitch tracker is provided with Praat (Boersma and Weenink, 2005).
25.4.4 Interpretation of Phones from a Waveform
Much can be learned from a visual inspection of a waveform. For example, vowels are pretty easy to spot. Recall that vowels are voiced; another property of vowels is that they tend to be long and are relatively loud (as we can see in the intensity plot in Fig. 25.12). Length in time manifests itself directly on the x-axis, and loudness is related to (the square of) amplitude on the y-axis. We saw in the previous section that voicing is realized by regular peaks in amplitude of the kind we saw in Fig. 25.9, each major peak corresponding to an opening of the vocal folds. Figure 25.13 shows the waveform of the short sentence “she just had a baby”. We have labeled this wave- form with word and phone labels. Notice that each of the six vowels in Fig. 25.13, [iy], [ax], [ae], [ax], [ey], [iy], all have regular amplitude peaks indicating voicing.
she just had a baby
sh iy j ax s h ae dxax b ey b iy
0 1.059 Time (s)
Figure 25.13 A waveform of the sentence “She just had a baby” from the Switchboard corpus (conversation 4325). The speaker is female, was 20 years old in 1991, which is approximately when the recording was made, and speaks the South Midlands dialect of American English.
For a stop consonant, which consists of a closure followed by a release, we can often see a period of silence or near silence followed by a slight burst of amplitude. We can see this for both of the [b]’s in baby in Fig. 25.13.
Another phone that is often quite recognizable in a waveform is a fricative. Re- call that fricatives, especially very strident fricatives like [sh], are made when a narrow channel for airflow causes noisy, turbulent air. The resulting hissy sounds have a noisy, irregular waveform. This can be seen somewhat in Fig. 25.13; it’s even clearer in Fig. 25.14, where we’ve magnified just the first word she.

540 CHAPTER 25 • PHONETICS
sh
0
Figure 25.14 A more detailed view of the first word “she” extracted from the wavefile in Fig. 25.13. Notice the difference between the random noise of the fricative [sh] and the regular voicing of the vowel [iy].
        she
Time (s)
iy
 0.257
  25.4.5 Spectra and the Frequency Domain
While some broad phonetic features (such as energy, pitch, and the presence of voic- ing, stop closures, or fricatives) can be interpreted directly from the waveform, most computational applications such as speech recognition (as well as human auditory processing) are based on a different representation of the sound in terms of its com- ponent frequencies. The insight of Fourier analysis is that every complex wave can be represented as a sum of many sine waves of different frequencies. Consider the waveform in Fig. 25.15. This waveform was created (in Praat) by summing two sine waveforms, one of frequency 10 Hz and one of frequency 100 Hz.
   1
0
–1
We can represent these two component frequencies with a spectrum. The spec- trum of a signal is a representation of each of its frequency components and their amplitudes. Figure 25.16 shows the spectrum of Fig. 25.15. Frequency in Hz is on the x-axis and amplitude on the y-axis. Note the two spikes in the figure, one at 10 Hz and one at 100 Hz. Thus, the spectrum is an alternative representation of the original waveform, and we use the spectrum as a tool to study the component frequencies of a sound wave at a particular time point.
Let’s look now at the frequency components of a speech waveform. Figure 25.17 shows part of the waveform for the vowel [ae] of the word had, cut out from the sentence shown in Fig. 25.13.
Note that there is a complex wave that repeats about ten times in the figure; but there is also a smaller repeated wave that repeats four times for every larger pattern (notice the four small peaks inside each repeated wave). The complex wave has a frequency of about 234 Hz (we can figure this out since it repeats roughly 10 times
  Figure 25.15
0
0.5
Time (s)
 A waveform that is the sum of two sine waveforms, one of frequency 10 Hz (note five repetitions in the half-second window) and one of frequency 100 Hz, both of amplitude 1.
 spectrum

25.4 • ACOUSTIC PHONETICS AND SIGNALS 541
      80
60
40
1 2 5 10 20 50 100 200
Frequency (Hz)
 Figure 25.16
 The spectrum of the waveform in Fig. 25.15.
The waveform of part of the vowel [ae] from the word had cut out from the waveform shown in Fig. 25.13.
in .0427 seconds, and 10 cycles/.0427 seconds = 234 Hz).
The smaller wave then should have a frequency of roughly four times the fre-
quency of the larger wave, or roughly 936 Hz. Then, if you look carefully, you can see two little waves on the peak of many of the 936 Hz waves. The frequency of this tiniest wave must be roughly twice that of the 936 Hz wave, hence 1872 Hz.
Figure 25.18 shows a smoothed spectrum for the waveform in Fig. 25.17, com- puted with a discrete Fourier transform (DFT).
   0.04968
0
–0.05554
  0
0.04275
Time (s)
 Figure 25.17
         20
0
–20
0 1000 2000 3000 4000 Frequency (Hz)
 Figure 25.18
 A spectrum for the vowel [ae] from the word had in the waveform of She just had a baby in Fig. 25.13.
The x-axis of a spectrum shows frequency, and the y-axis shows some mea- sure of the magnitude of each frequency component (in decibels (dB), a logarithmic measure of amplitude that we saw earlier). Thus, Fig. 25.18 shows significant fre- quency components at around 930 Hz, 1860 Hz, and 3020 Hz, along with many other lower-magnitude frequency components. These first two components are just what we noticed in the time domain by looking at the wave in Fig. 25.17!
Why is a spectrum useful? It turns out that these spectral peaks that are easily visible in a spectrum are characteristic of different phones; phones have characteris-
Sound pressure level (dB/Hz)
Sound pressure level (dB/Hz)

542 CHAPTER 25 • PHONETICS
cochlea
spectrogram
tic spectral “signatures”. Just as chemical elements give off different wavelengths of light when they burn, allowing us to detect elements in stars by looking at the spec- trum of the light, we can detect the characteristic signature of the different phones by looking at the spectrum of a waveform. This use of spectral information is essen- tial to both human and machine speech recognition. In human audition, the function of the cochlea, or inner ear, is to compute a spectrum of the incoming waveform. Similarly, the acoustic features used in speech recognition are spectral representa- tions.
Let’s look at the spectrum of different vowels. Since some vowels change over time, we’ll use a different kind of plot called a spectrogram. While a spectrum shows the frequency components of a wave at one point in time, a spectrogram is a way of envisioning how the different frequencies that make up a waveform change over time. The x-axis shows time, as it did for the waveform, but the y-axis now shows frequencies in hertz. The darkness of a point on a spectrogram corresponds to the amplitude of the frequency component. Very dark points have high amplitude, light points have low amplitude. Thus, the spectrogram is a useful way of visualizing the three dimensions (time x frequency x amplitude).
Figure 25.19 shows spectrograms of three American English vowels, [ih], [ae], and [ah]. Note that each vowel has a set of dark bars at various frequency bands, slightly different bands for each vowel. Each of these represents the same kind of spectral peak that we saw in Fig. 25.17.
Spectrograms for three American English vowels, [ih], [ae], and [uh]
Each dark bar (or spectral peak) is called a formant. As we discuss below, a formant is a frequency band that is particularly amplified by the vocal tract. Since different vowels are produced with the vocal tract in different positions, they will produce different kinds of amplifications or resonances. Let’s look at the first two formants, called F1 and F2. Note that F1, the dark bar closest to the bottom, is in a different position for the three vowels; it’s low for [ih] (centered at about 470 Hz) and somewhat higher for [ae] and [ah] (somewhere around 800 Hz). By contrast, F2, the second dark bar from the bottom, is highest for [ih], in the middle for [ae], and lowest for [ah].
We can see the same formants in running speech, although the reduction and coarticulation processes make them somewhat harder to see. Figure 25.20 shows the spectrogram of “she just had a baby”, whose waveform was shown in Fig. 25.13. F1 and F2 (and also F3) are pretty clear for the [ax] of just, the [ae] of had, and the [ey] of baby.
What specific clues can spectral representations give for phone identification? First, since different vowels have their formants at characteristic places, the spectrum can distinguish vowels from each other. We’ve seen that [ae] in the sample waveform had formants at 930 Hz, 1860 Hz, and 3020 Hz. Consider the vowel [iy] at the
   5000
0 0
2.81397
 Time (s)
 Figure 25.19
 formant
Frequency (Hz)

25.4 • ACOUSTIC PHONETICS AND SIGNALS 543
A spectrogram of the sentence “she just had a baby” whose waveform was shown in Fig. 25.13. We can think of a spectrogram as a collection of spectra (time slices), like Fig. 25.18 placed end to end.
                   she just had a baby
 sh iy j ax s h ae dxax b ey b iy
0
1.059
Time (s)
 Figure 25.20
 beginning of the utterance in Fig. 25.13. The spectrum for this vowel is shown in Fig. 25.21. The first formant of [iy] is 540 Hz, much lower than the first formant for [ae], and the second formant (2581 Hz) is much higher than the second formant for [ae]. If you look carefully, you can see these formants as dark bars in Fig. 25.20 just around 0.5 seconds.
                                             80 70 60 50 40 30 20 10
0 −10
                                             0 1000 2000 3000
 Figure 25.21
 source-filter model
harmonic
A smoothed (LPC) spectrum for the vowel [iy] at the start of She just had a baby. Note that the first formant (540 Hz) is much lower than the first formant for [ae] shown in Fig. 25.18, and the second formant (2581 Hz) is much higher than the second formant for [ae].
The location of the first two formants (called F1 and F2) plays a large role in de- termining vowel identity, although the formants still differ from speaker to speaker. Higher formants tend to be caused more by general characteristics of a speaker’s vocal tract rather than by individual vowels. Formants also can be used to identify the nasal phones [n], [m], and [ng] and the liquids [l] and [r].
25.4.6 The Source-Filter Model
Why do different vowels have different spectral signatures? As we briefly mentioned above, the formants are caused by the resonant cavities of the mouth. The source- filter model is a way of explaining the acoustics of a sound by modeling how the pulses produced by the glottis (the source) are shaped by the vocal tract (the filter).
Let’s see how this works. Whenever we have a wave such as the vibration in air caused by the glottal pulse, the wave also has harmonics. A harmonic is another wave whose frequency is a multiple of the fundamental wave. Thus, for example, a

544 CHAPTER 25 • PHONETICS
115 Hz glottal fold vibration leads to harmonics (other waves) of 230 Hz, 345 Hz, 460 Hz, and so on on. In general, each of these waves will be weaker, that is, will have much less amplitude than the wave at the fundamental frequency.
It turns out, however, that the vocal tract acts as a kind of filter or amplifier; indeed any cavity, such as a tube, causes waves of certain frequencies to be amplified and others to be damped. This amplification process is caused by the shape of the cavity; a given shape will cause sounds of a certain frequency to resonate and hence be amplified. Thus, by changing the shape of the cavity, we can cause different frequencies to be amplified.
When we produce particular vowels, we are essentially changing the shape of the vocal tract cavity by placing the tongue and the other articulators in particular positions. The result is that different vowels cause different harmonics to be ampli- fied. So a wave of the same fundamental frequency passed through different vocal tract positions will result in different harmonics being amplified.
We can see the result of this amplification by looking at the relationship between the shape of the vocal tract and the corresponding spectrum. Figure 25.22 shows the vocal tract position for three vowels and a typical resulting spectrum. The for- mants are places in the spectrum where the vocal tract happens to amplify particular harmonic frequencies.
      F1
F2
[uw] (moo)
  F1
[iy] (tea)
F
 2
    F1
[ae] (cat)
F2
20
0
0 268 2416 Frequency (Hz)
[iy] (tea)
20
0
4000 0
0
903 1695 Frequency (Hz)
[ae] (cat)
4000
0 295
817 4000 Frequency (Hz)
[uw] (moo)
–20
             Figure 25.22
 Visualizing the vocal tract position as a filter: the tongue positions for three English vowels and the resulting smoothed spectra showing F1 and F2.
25.5 Phonetic Resources
pronunciation dictionary
A wide variety of phonetic resources can be drawn on for computational work. On-line pronunciation dictionaries give phonetic transcriptions for words. The LDC distributes pronunciation lexicons for Egyptian Arabic, Dutch, English, Ger- man, Japanese, Korean, Mandarin, and Spanish. For English, the CELEX dictionary (Baayen et al., 1995) has pronunciations for 160,595 wordforms, with syllabifica- tion, stress, and morphological and part-of-speech information. The open-source CMU Pronouncing Dictionary (CMU, 1993) has pronunciations for about 134,000
Sound pressure level (dB/Hz)
Sound pressure level (dB/Hz)
Sound pressure level (dB/Hz)

time-aligned transcription
25.6 • SUMMARY 545
wordforms, while the fine-grained 110,000 word UNISYN dictionary (Fitt, 2002), freely available for research purposes, gives syllabifications, stress, and also pronun- ciations for dozens of dialects of English.
Another useful resource is a phonetically annotated corpus, in which a col- lection of waveforms is hand-labeled with the corresponding string of phones. The TIMIT corpus (NIST, 1990), originally a joint project between Texas Instruments (TI), MIT, and SRI, is a corpus of 6300 read sentences, with 10 sentences each from 630 speakers. The 6300 sentences were drawn from a set of 2342 sentences, some selected to have particular dialect shibboleths, others to maximize phonetic diphone coverage. Each sentence in the corpus was phonetically hand-labeled, the sequence of phones was automatically aligned with the sentence wavefile, and then the au- tomatic phone boundaries were manually hand-corrected (Seneff and Zue, 1988). The result is a time-aligned transcription: a transcription in which each phone is associated with a start and end time in the waveform, like the example in Fig. 25.23.
she had your dark suit in greasy wash water all year shiy hvaedcl jhaxr dcldaarkcl suxq en gclgriysix waash qwaadxaxrq aal yixaxr
  Figure 25.23
 Phonetic transcription from the TIMIT corpus, using special ARPAbet features for narrow tran- scription, such as the palatalization of [d] in had, unreleased final stop in dark, glottalization of final [t] in suit to [q], and flap of [t] in water. The TIMIT corpus also includes time-alignments (not shown).
The Switchboard Transcription Project phonetically annotated corpus consists of 3.5 hours of sentences extracted from the Switchboard corpus (Greenberg et al., 1996), together with transcriptions time-aligned at the syllable level. Figure 25.24 shows an example .
Phonetic transcription of the Switchboard phrase they’re kind of in between right now. Note vowel reduction in they’re and of, coda deletion in kind and right, and re- syllabification (the [v] of of attaches as the onset of in). Time is given in number of seconds from the beginning of sentence to the start of each syllable.
The Buckeye corpus (Pitt et al. 2007, Pitt et al. 2005) is a phonetically tran- scribed corpus of spontaneous American speech, containing about 300,000 words from 40 talkers. Phonetically transcribed corpora are also available for other lan- guages, including the Kiel corpus of German and Mandarin corpora transcribed by the Chinese Academy of Social Sciences (Li et al., 2000).
In addition to resources like dictionaries and corpora, there are many useful pho- netic software tools. Many of the figures in this book were generated by the Praat package (Boersma and Weenink, 2005), which includes pitch, spectral, and formant analysis, as well as a scripting language.
25.6 Summary
This chapter has introduced many of the important concepts of phonetics and com- putational phonetics.
• We can represent the pronunciation of words in terms of units called phones. The standard system for representing phones is the International Phonetic
 0.470 0.640 0.720 0.900 0.953 1.279 1.410 1.630 dh er k aa n ax v ih m b ix t w iy n r ay n aw
  Figure 25.24
  
546 CHAPTER 25 • PHONETICS
Alphabet or IPA. The most common computational system for transcription
• • • •
of English is the ARPAbet, which conveniently uses ASCII symbols.
Phonescanbedescribedbyhowtheyareproducedarticulatorilybythevocal organs; consonants are defined in terms of their place and manner of articu- lation and voicing; vowels by their height, backness, and roundness.
Speech sounds can also be described acoustically. Sound waves can be de- scribed in terms of frequency, amplitude, or their perceptual correlates, pitch and loudness.
Thespectrumofasounddescribesitsdifferentfrequencycomponents.While some phonetic properties are recognizable from the waveform, both humans and machines rely on spectral analysis for phone detection.
A spectrogram is a plot of a spectrum over time. Vowels are described by characteristic harmonics called formants.
Bibliographical and Historical Notes
The major insights of articulatory phonetics date to the linguists of 800–150 B.C. India. They invented the concepts of place and manner of articulation, worked out the glottal mechanism of voicing, and understood the concept of assimilation. Eu- ropean science did not catch up with the Indian phoneticians until over 2000 years later, in the late 19th century. The Greeks did have some rudimentary phonetic knowledge; by the time of Plato’s Theaetetus and Cratylus, for example, they distin- guished vowels from consonants, and stop consonants from continuants. The Stoics developed the idea of the syllable and were aware of phonotactic constraints on pos- sible words. An unknown Icelandic scholar of the 12th century exploited the concept of the phoneme and proposed a phonemic writing system for Icelandic, including diacritics for length and nasality. But his text remained unpublished until 1818 and even then was largely unknown outside Scandinavia (Robins, 1967). The modern era of phonetics is usually said to have begun with Sweet, who proposed what is essentially the phoneme in his Handbook of Phonetics (1877). He also devised an alphabet for transcription and distinguished between broad and narrow transcrip- tion, proposing many ideas that were eventually incorporated into the IPA. Sweet was considered the best practicing phonetician of his time; he made the first scien- tific recordings of languages for phonetic purposes and advanced the state of the art of articulatory description. He was also infamously difficult to get along with, a trait that is well captured in Henry Higgins, the stage character that George Bernard Shaw modeled after him. The phoneme was first named by the Polish scholar Baudouin de Courtenay, who published his theories in 1894.
Introductory phonetics textbooks include Ladefoged (1993) and Clark and Yal- lop (1995). Wells (1982) is the definitive three-volume source on dialects of English. Many of the classic insights in acoustic phonetics had been developed by the late 1950s or early 1960s; just a few highlights include techniques like the sound spectro- graph (Koenig et al., 1946), theoretical insights like the working out of the source- filter theory and other issues in the mapping between articulation and acoustics ((Fant, 1960), Stevens et al. 1953, Stevens and House 1955, Heinz and Stevens 1961, Stevens and House 1961) the F1xF2 space of vowel formants (Peterson and Barney, 1952), the understanding of the phonetic nature of stress and the use of duration and intensity as cues (Fry, 1955), and a basic understanding of issues in phone percep- tion (Miller and Nicely 1955,Liberman et al. 1952). Lehiste (1967) is a collection

EXERCISES 547
of classic papers on acoustic phonetics. Many of the seminal papers of Gunnar Fant have been collected in Fant (2004).
Excellent textbooks on acoustic phonetics include Johnson (2003) and Lade- foged (1996). Coleman (2005) includes an introduction to computational process- ing of acoustics and speech from a linguistic perspective. Stevens (1998) lays out an influential theory of speech sound production. There are a number of software packages for acoustic phonetic analysis. Probably the most widely used one is Praat (Boersma and Weenink, 2005).
Exercises
25.1 Find the mistakes in the ARPAbet transcriptions of the following words:
a. “three”[dhri] b. “sing” [s ih n g] c. “eyes” [ay s]
d. “study”[stuhdi] g. “slight”[sliyt] e. “though” [th ow]
f. “planning” [p pl aa n ih ng]
25.2 Ira Gershwin’s lyric for Let’s Call the Whole Thing Off talks about two pro- nunciations (each) of the words “tomato”, “potato”, and “either”. Transcribe into the ARPAbet both pronunciations of each of these three words.
25.3 Transcribe the following words in the ARPAbet:
1. dark 2. suit
3. greasy 4. wash 5. water
25.4 Take a wavefile of your choice. Some examples are on the textbook website. Download the Praat software, and use it to transcribe the wavefiles at the word level and into ARPAbet phones, using Praat to help you play pieces of each wavefile and to look at the wavefile and the spectrogram.
25.5 Record yourself saying five of the English vowels: [aa], [eh], [ae], [iy], [uw]. Find F1 and F2 for each of your vowels.

548 CHAPTER 26 • AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH CHAPTER
26 Automatic Speech Recognition and Text-to-Speech
I KNOW not whether
I see your meaning: if I do, it lies
Upon the wordy wavelets of your voice, Dim as an evening shadow in a brook,
Thomas Lovell Beddoes, 1851
Understanding spoken language, or at least transcribing the words into writing, is one of the earliest goals of computer language processing. In fact, speech processing predates the computer by many decades!
The first machine that recognized speech
was a toy from the 1920s. “Radio Rex”,
shown to the right, was a celluloid dog
that moved (by means of a spring) when
the spring was released by 500 Hz acous-
tic energy. Since 500 Hz is roughly the
first formant of the vowel [eh] in “Rex”,
Rex seemed to come when he was called
(David, Jr. and Selfridge, 1962).
In modern times, we expect more of our automatic systems. The task of auto- ASR matic speech recognition (ASR) is to map any waveform like this:
to the appropriate string of words:
                                  It’s time for lunch!
Automatic transcription of speech by any speaker in any environment is still far from solved, but ASR technology has matured to the point where it is now viable for many practical tasks. Speech is a natural interface for communicating with smart home ap- pliances, personal assistants, or cellphones, where keyboards are less convenient, in telephony applications like call-routing (“Accounting, please”) or in sophisticated dialogue applications (“I’d like to change the return date of my flight”). ASR is also useful for general transcription, for example for automatically generating captions for audio or video text (transcribing movies or videos or live discussions). Tran- scription is important in fields like law where dictation dictation plays an important role. Finally, ASR is important as part of augmentative communication (interaction between computers and humans with some disability resulting in difficulties or in- abilities in typing or audition). The blind Milton famously dictated Paradise Lost to his daughters, and Henry James dictated his later novels after a repetitive stress injury.
   
26.1 • THE AUTOMATIC SPEECH RECOGNITION TASK 549
What about the opposite problem, going from text to speech? This is a problem with an even longer history. In Vienna in 1769, Wolfgang von Kempelen built for the Empress Maria Theresa the famous Mechanical Turk, a chess-playing automaton consisting of a wooden box filled with gears, behind which sat a robot mannequin who played chess by moving pieces with his mechanical arm. The Turk toured Eu- rope and the Americas for decades, defeating Napoleon Bonaparte and even playing Charles Babbage. The Mechanical Turk might have been one of the early successes of artificial intelligence were it not for the fact that it was, alas, a hoax, powered by a human chess player hidden inside the box.
What is less well known is that von Kempelen, an extraordinarily prolific inventor, also built between
1769 and 1790 what was definitely
not a hoax: the first full-sentence
speech synthesizer, shown partially to
the right. His device consisted of a
bellows to simulate the lungs, a rub-
ber mouthpiece and a nose aperture, a
reed to simulate the vocal folds, var-
ious whistles for the fricatives, and a
small auxiliary bellows to provide the puff of air for plosives. By moving levers with both hands to open and close apertures, and adjusting the flexible leather “vo- cal tract”, an operator could produce different consonants and vowels.
More than two centuries later, we no longer build our synthesizers out of wood and leather, nor do we need human operators. The modern task of speech synthesis, also called text-to-speech or TTS, is exactly the reverse of ASR; to map text:
                         It’s time for lunch!
to an acoustic waveform:
Modern speech synthesis has a wide variety of applications. TTS is used in conversational agents that conduct dialogues with people, plays a role in devices that read out loud for the blind or in games, and can be used to speak for sufferers of neurological disorders, such as the late astrophysicist Steven Hawking who, after he lost the use of his voice because of ALS, spoke by manipulating a TTS system.
In the next sections we’ll show how to do ASR with encoder-decoders, intro- duce the CTC loss functions, the standard word error rate evaluation metric, and describe how acoustic features are extracted. We’ll then see how TTS can be mod- eled with almost the same algorithm in reverse, and conclude with a brief mention of other speech tasks.
The Automatic Speech Recognition Task
 speech synthesis
text-to-speech TTS
 26.1
digit recognition
Before describing algorithms for ASR, let’s talk about how the task itself varies. One dimension of variation is vocabulary size. Some ASR tasks can be solved with extremely high accuracy, like those with a 2-word vocabulary (yes versus no) or an 11 word vocabulary like digit recognition (recognizing sequences of digits in-

550 CHAPTER 26 • AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH
read speech
conversational speech
cluding zero to nine plus oh). Open-ended tasks like transcribing videos or human conversations, with large vocabularies of up to 60,000 words, are much harder.
A second dimension of variation is who the speaker is talking to. Humans speak- ing to machines (either dictating or talking to a dialogue system) are easier to recog- nize than humans speaking to humans. Read speech, in which humans are reading out loud, for example in audio books, is also relatively easy to recognize. Recog- nizing the speech of two humans talking to each other in conversational speech, for example, for transcribing a business meeting, is the hardest. It seems that when humans talk to machines, or read without an audience present, they simplify their speech quite a bit, talking more slowly and more clearly.
A third dimension of variation is channel and noise. Speech is easier to recognize if its recorded in a quiet room with head-mounted microphones than if it’s recorded by a distant microphone on a noisy city street, or in a car with the window open.
A final dimension of variation is accent or speaker-class characteristics. Speech is easier to recognize if the speaker is speaking the same dialect or variety that the system was trained on. Speech by speakers of regional or ethnic dialects, or speech by children can be quite difficult to recognize if the system is only trained on speak- ers of standard dialects, or only adult speakers.
A number of publicly available corpora with human-created transcripts are used to create ASR test and training sets to explore this variation; we mention a few of them here since you will encounter them in the literature. LibriSpeech is a large open-source read-speech 16 kHz dataset with over 1000 hours of audio books from the LibriVox project, with transcripts aligned at the sentence level (Panayotov et al., 2015). It is divided into an easier (“clean”) and a more difficult portion (“other”) with the clean portion of higher recording quality and with accents closer to US English. This was done by running a speech recognizer (trained on read speech from the Wall Street Journal) on all the audio, computing the WER for each speaker based on the gold transcripts, and dividing the speakers roughly in half, with recordings from lower-WER speakers called “clean” and recordings from higher-WER speakers “other”.
The Switchboard corpus of prompted telephone conversations between strangers was collected in the early 1990s; it contains 2430 conversations averaging 6 min- utes each, totaling 240 hours of 8 kHz speech and about 3 million words (Godfrey et al., 1992). Switchboard has the singular advantage of an enormous amount of auxiliary hand-done linguistic labeling, including parses, dialogue act tags, phonetic and prosodic labeling, and discourse and information structure. The CALLHOME corpus was collected in the late 1990s and consists of 120 unscripted 30-minute telephone conversations between native speakers of English who were usually close friends or family (Canavan et al., 1997).
The Santa Barbara Corpus of Spoken American English (Du Bois et al., 2005) is a large corpus of naturally occurring everyday spoken interactions from all over the United States, mostly face-to-face conversation, but also town-hall meetings, food preparation, on-the-job talk, and classroom lectures. The corpus was anonymized by removing personal names and other identifying information (replaced by pseudonyms in the transcripts, and masked in the audio).
CORAAL is a collection of over 150 sociolinguistic interviews with African American speakers, with the goal of studying African American Language (AAL), the many variations of language used in African American communities (Kendall and Farrington, 2020). The interviews are anonymized with transcripts aligned at the utterance level. The CHiME Challenge is a series of difficult shared tasks with
LibriSpeech
Switchboard
CALLHOME
CORAAL
CHiME

HKUST AISHELL-1
26.2 • FEATURE EXTRACTION FOR ASR: LOG MEL SPECTRUM 551
corpora that deal with robustness in ASR. The CHiME 5 task, for example, is ASR of conversational speech in real home environments (specifically dinner parties). The corpus contains recordings of twenty different dinner parties in real homes, each with four participants, and in three locations (kitchen, dining area, living room), recorded both with distant room microphones and with body-worn mikes. The HKUST Mandarin Telephone Speech corpus has 1206 ten-minute telephone con- versations between speakers of Mandarin across China, including transcripts of the conversations, which are between either friends or strangers (Liu et al., 2006). The AISHELL-1 corpus contains 170 hours of Mandarin read speech of sentences taken from various domains, read by different speakers mainly from northern China (Bu et al., 2017).
Figure 26.1 shows the rough percentage of incorrect words (the word error rate, or WER, defined on page 562) from state-of-the-art systems on some of these tasks. Note that the error rate on read speech (like the LibriSpeech audiobook corpus) is around 2%; this is a solved task, although these numbers come from systems that re- quire enormous computational resources. By contrast, the error rate for transcribing conversations between humans is much higher; 5.8 to 11% for the Switchboard and CALLHOME corpora. The error rate is higher yet again for speakers of varieties like African American Vernacular English, and yet again for difficult conversational tasks like transcription of 4-speaker dinner party speech, which can have error rates as high as 81.3%. Character error rates (CER) are also much lower for read Man- darin speech than for natural conversation.
English Tasks   WER%
LibriSpeech audiobooks 960hour clean 1.4 LibriSpeech audiobooks 960hour other 2.6 Switchboard telephone conversations between strangers 5.8 CALLHOME telephone conversations between family 11.0 Sociolinguistic interviews, CORAAL (AAL) 27.0 CHiMe5 dinner parties with body-worn microphones 47.9 CHiMe5 dinner parties with distant microphones 81.3
 Chinese (Mandarin) Tasks   CER%
AISHELL-1 Mandarin read speech corpus 6.7 HKUST Mandarin Chinese telephone conversations 23.5
  Figure 26.1
  Rough Word Error Rates (WER = % of words misrecognized) reported around 2020 for ASR on various American English recognition tasks, and character error rates (CER) for two Chinese recognition tasks.
26.2 Feature Extraction for ASR: Log Mel Spectrum
The first step in ASR is to transform the input waveform into a sequence of acoustic feature vector feature vectors, each vector representing the information in a small time window of the signal. Let’s see how to convert a raw wavefile to the most commonly used features, sequences of log mel spectrum vectors. A speech signal processing course
is recommended for more details.

552
CHAPTER 26 • AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH 26.2.1 Sampling and Quantization
sampling sampling rate
Nyquist frequency
telephone- bandwidth
quantization
stationary non-stationary
frame stride
rectangular
Recall from Section 25.4.2 that the first step is to convert the analog representations (first air pressure and then analog electric signals in a microphone) into a digital sig- nal. This analog-to-digital conversion has two steps: sampling and quantization. A signal is sampled by measuring its amplitude at a particular time; the sampling rate is the number of samples taken per second. To accurately measure a wave, we must have at least two samples in each cycle: one measuring the positive part of the wave and one measuring the negative part. More than two samples per cycle in- creases the amplitude accuracy, but less than two samples will cause the frequency of the wave to be completely missed. Thus, the maximum frequency wave that can be measured is one whose frequency is half the sample rate (since every cycle needs two samples). This maximum frequency for a given sampling rate is called the Nyquist frequency. Most information in human speech is in frequencies below 10,000 Hz, so a 20,000 Hz sampling rate would be necessary for complete accuracy. But telephone speech is filtered by the switching network, and only frequencies less than 4,000 Hz are transmitted by telephones. Thus, an 8,000 Hz sampling rate is sufficient for telephone-bandwidth speech, and 16,000 Hz for microphone speech.
Although using higher sampling rates produces higher ASR accuracy, we can’t combine different sampling rates for training and testing ASR systems. Thus if we are testing on a telephone corpus like Switchboard (8 KHz sampling), we must downsample our training corpus to 8 KHz. Similarly, if we are training on mul- tiple corpora and one of them includes telephone speech, we downsample all the wideband corpora to 8Khz.
Amplitude measurements are stored as integers, either 8 bit (values from -128– 127) or 16 bit (values from -32768–32767). This process of representing real-valued numbers as integers is called quantization; all values that are closer together than the minimum granularity (the quantum size) are represented identically. We refer to each sample at time index n in the digitized, quantized waveform as x[n].
26.2.2 Windowing
From the digitized, quantized representation of the waveform, we need to extract spectral features from a small window of speech that characterizes part of a par- ticular phoneme. Inside this small window, we can roughly think of the signal as stationary (that is, its statistical properties are constant within this region). (By contrast, in general, speech is a non-stationary signal, meaning that its statistical properties are not constant over time). We extract this roughly stationary portion of speech by using a window which is non-zero inside a region and zero elsewhere, run- ning this window across the speech signal and multiplying it by the input waveform to produce a windowed waveform.
The speech extracted from each window is called a frame. The windowing is characterized by three parameters: the window size or frame size of the window (its width in milliseconds), the frame stride, (also called shift or offset) between successive windows, and the shape of the window.
To extract the signal we multiply the value of the signal at time n, s[n] by the value of the window at time n, w[n]:
y[n] = w[n]s[n] (26.1)
The window shape sketched in Fig. 26.2 is rectangular; you can see the ex- tracted windowed signal looks just like the original signal. The rectangular window,

26.2 •
FEATURE EXTRACTION FOR ASR: LOG MEL SPECTRUM 553
Window 25 ms
            Shift 10 ms
Window 25 ms
 Shift 10
 Figure 26.2
Windowing, showing a 25 ms rectangular window with a 10ms stride.
Window ms 25 ms
  Hamming
however, abruptly cuts off the signal at its boundaries, which creates problems when we do Fourier analysis. For this reason, for acoustic feature creation we more com- monly use the Hamming window, which shrinks the values of the signal toward zero at the window boundaries, avoiding discontinuities. Figure 26.3 shows both; the equations are as follows (assuming a window that is L frames long):
–0.5 0.00455938
Figure 26.3
0.0256563
–0.4826 0.00455938
rectangular Hamming
0.4999
0
–0.5
Rectangular window
0.4999
w[n] = w[n] =
􏰊 1 0 ≤ n ≤ L−1
(26.2) (26.3)
􏰊 0 otherwise 0.54−0.46cos(2πn)
0
0 ≤ n ≤ L−1 otherwise
Hamming window
0.0256563
Time (s)
Windowing a sine wave with the rectangular or Hamming windows.
Time (s)
0.4999
L
      0
0.0475896
Time (s)
  00
  26.2.3 Discrete Fourier Transform
The next step is to extract spectral information for our windowed signal; we need to know how much energy the signal contains at different frequency bands. The tool

554
CHAPTER 26 • AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH
Discrete Fourier transform DFT
for extracting spectral information for discrete frequency bands for a discrete-time (sampled) signal is the discrete Fourier transform or DFT.
The input to the DFT is a windowed signal x[n]...x[m], and the output, for each of N discrete frequency bands, is a complex number X[k] representing the magnitude and phase of that frequency component in the original signal. If we plot the mag- nitude against the frequency, we can visualize the spectrum that we introduced in Chapter 25. For example, Fig. 26.4 shows a 25 ms Hamming-windowed portion of a signal and its spectrum as computed by a DFT (with some additional smoothing).
   0.04414
    00
20
 –0.04121 0.0141752
0.039295
–20 0
8000
Time (s)
(a)
Frequency (Hz)
(b)
 Figure 26.4
 Euler’s formula
fast Fourier transform
FFT
(a) A 25 ms Hamming-windowed portion of a signal from the vowel [iy] and (b) its spectrum computed by a DFT.
We do not introduce the mathematical details of the DFT here, except to note that Fourier analysis relies on Euler’s formula, with j as the imaginary unit:
ejθ = cosθ + jsinθ (26.4) As a brief reminder for those students who have already studied signal processing,
the DFT is defined as follows:
N􏰑−1 2π
X[k]= x[n]e−j N kn (26.5)
n=0
A commonly used algorithm for computing the DFT is the fast Fourier transform
or FFT. This implementation of the DFT is very efficient but only works for values of N that are powers of 2.
26.2.4 Mel Filter Bank and Log
The results of the FFT tell us the energy at each frequency band. Human hearing, however, is not equally sensitive at all frequency bands; it is less sensitive at higher frequencies. This bias toward low frequencies helps human recognition, since infor- mation in low frequencies like formants is crucial for distinguishing values or nasals, while information in high frequencies like stop bursts or fricative noise is less cru- cial for successful recognition. Modeling this human perceptual property improves speech recognition performance in the same way.
We implement this intuition by by collecting energies, not equally at each fre- quency band, but according to the mel scale, an auditory frequency scale (Chap- ter 25). A mel (Stevens et al. 1937, Stevens and Volkmann 1940) is a unit of pitch. Pairs of sounds that are perceptually equidistant in pitch are separated by an equal
mel
Sound pressure level (dB/Hz)

   1 0.5
00 Frequency (Hz) 87K700 mel spectrum m1 m2 mM
       ...
 Figure 26.5
 26.3
26.3 • SPEECH RECOGNITION ARCHITECTURE 555 number of mels. The mel frequency m can be computed from the raw acoustic fre-
quency by a log transformation:
mel(f)=1127ln(1+ f ) (26.6) 700
We implement this intuition by creating a bank of filters that collect energy from each frequency band, spread logarithmically so that we have very fine resolution at low frequencies, and less resolution at high frequencies. Figure 26.5 shows a sample bank of triangular filters that implement this idea, that can be multiplied by the spectrum to get a mel spectrum.
The mel filter bank (Davis and Mermelstein, 1980). Each triangular filter, spaced logarithmically along the mel scale, collects energy from a given frequency range.
Finally, we take the log of each of the mel spectrum values. The human response to signal level is logarithmic (like the human response to frequency). Humans are less sensitive to slight differences in amplitude at high amplitudes than at low ampli- tudes. In addition, using a log makes the feature estimates less sensitive to variations in input such as power variations due to the speaker’s mouth moving closer or further from the microphone.
Speech Recognition Architecture
The basic architecture for ASR is the encoder-decoder (implemented with either RNNs or Transformers), exactly the same architecture introduced for MT in Chap- ter 11. Generally we start from the log mel spectral features described in the previous section, and map to letters, although it’s also possible to map to induced morpheme- like chunks like wordpieces or BPE.
Fig. 26.6 sketches the standard encoder-decoder architecture, which is com-
AED monly referred to as the attention-based encoder decoder or AED, or listen attend
listen attend and spell
and spell (LAS) after the two papers which first applied it to speech (Chorowski
et al. 2014, Chan et al. 2016). The input is a sequence of t acoustic feature vectors
F = f1, f2,..., ft, one vector per 10 ms frame. The output can be letters or word- pieces; we’ll assume letters here. Thus the output sequence Y = (⟨SOS⟩, y1 , ..., ym ⟨EOS⟩), assuming special start of sequence and end of sequence tokens ⟨sos⟩ and ⟨eos⟩. and each yi is a character; for English we might choose the set:
yi ∈{a,b,c,...,z,0,...,9,⟨space⟩,⟨comma⟩,⟨period⟩,⟨apostrophe⟩,⟨unk⟩}
Of course the encoder-decoder architecture is particularly appropriate when in- put and output sequences have stark length differences, as they do for speech, with
Amplitude

556 CHAPTER 26
• AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH y1y2y3y4y5y6y7y8 y9 ym
  H
it‘stime... DECODER
<s>it‘s tim ...
 Shorter sequence X
ENCODER
x1 ... xn Subsampling
... f t
 80-dimensional log Mel spectrum per frame
f 1
 Feature Computation
 low frame rate
Figure 26.6 Schematic architecture for an encoder-decoder speech recognizer.
very long acoustic feature sequences mapping to much shorter sequences of letters or words. A single word might be 5 letters long but, supposing it lasts about 2 seconds, would take 200 acoustic frames (of 10ms each).
Because this length difference is so extreme for speech, encoder-decoder ar- chitectures for speech need to have a special compression stage that shortens the acoustic feature sequence before the encoder stage. (Alternatively, we can use a loss function that is designed to deal well with compression, like the CTC loss function we’ll introduce in the next section.)
The goal of the subsampling is to produce a shorter sequence X = x1,...,xn that will be the input to the encoder. The simplest algorithm is a method sometimes called low frame rate (Pundak and Sainath, 2016): for time i we stack (concatenate) the acoustic feature vector fi with the prior two vectors fi−1 and fi−2 to make a new vector three times longer. Then we simply delete fi−1 and fi−2. Thus instead of (say) a 40-dimensional acoustic feature vector every 10 ms, we have a longer vector (say 120-dimensional) every 30 ms, with a shorter sequence length n = 3t .1
After this compression stage, encoder-decoders for speech use the same archi- tecture as for MT or other text, composed of either RNNs (LSTMs) or Transformers.
For inference, the probability of the output string Y is decomposed as:
􏰒n i=1
We can produce each letter of the output via greedy decoding: yˆi = argmaxchar∈ AlphabetP(char|y1...yi−1,X)
p(y1,...,yn) =
p(yi|y1,...,yi−1,X)
(26.7)
(26.8)
Alternatively we can use beam search as described in the next section. this is partic- ularly relevant when we are adding a language model.
Adding a language model Since an encoder-decoder model is essentially a con- ditional language model, encoder-decoders implicitly learn a language model for the output domain of letters from their training data. However, the training data (speech
1 There are also more complex alternatives for subsampling, like using a convolutional net that down- samples with max pooling, or layers of pyramidal RNNs, RNNs where each successive layer has half the number of RNNs as the previous layer.
 
n-best list rescore
26.4 • CTC 557
paired with text transcriptions) may not include sufficient text to train a good lan- guage model. After all, it’s easier to find enormous amounts of pure text training data than it is to find text paired with speech. Thus we can can usually improve a model at least slightly by incorporating a very large language model.
The simplest way to do this is to use beam search to get a final beam of hy- pothesized sentences; this beam is sometimes called an n-best list. We then use a language model to rescore each hypothesis on the beam. The scoring is doing by in- terpolating the score assigned by the language model with the encoder-decoder score used to create the beam, with a weight λ tuned on a held-out set. Also, since most models prefer shorter sentences, ASR systems normally have some way of adding a length factor. One way to do this is to normalize the probability by the number of characters in the hypothesis |Y|c. The following is thus a typical scoring function (Chan et al., 2016):
score(Y|X)= 1 logP(Y|X)+λlogPLM(Y) (26.9) |Y|c
26.3.1 Learning
Encoder-decoders for speech are trained with the normal cross-entropy loss gener- ally used for conditional language models. At timestep i of decoding, the loss is the log probability of the correct token (letter) yi:
26.4 CTC
LCE = −log p(yi|y1,...,yi−1,X) The loss for the entire sentence is the sum of these losses:
􏰑m i=1
(26.10)
(26.11)
LCE = −
log p(yi|y1,...,yi−1,X)
This loss is then backpropagated through the entire end-to-end model to train the entire encoder-decoder.
As we described in Chapter 11, we normally use teacher forcing, in which the decoder history is forced to be the correct gold yi rather than the predicted yˆi. It’s also possible to use a mixture of the gold and decoder output, for example using the gold output 90% of the time, but with probability .1 taking the decoder output instead:
LCE = −log p(yi|y1,...,yˆi−1,X) (26.12)
We pointed out in the previous section that speech recognition has two particular properties that make it very appropriate for the encoder-decoder architecture, where the encoder produces an encoding of the input that the decoder uses attention to explore. First, in speech we have a very long acoustic input sequence X mapping to a much shorter sequence of letters Y , and second, it’s hard to know exactly which part of X maps to which part of Y.
In this section we briefly introduce an alternative to encoder-decoder: an algo- CTC rithm and loss function called CTC, short for Connectionist Temporal Classifica-

558
CHAPTER 26 • AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH
alignment
tion (Graves et al., 2006), that deals with these problems in a very different way. The intuition of CTC is to output a single character for every frame of the input, so that the output is the same length as the input, and then to apply a collapsing function that combines sequences of identical letters, resulting in a shorter sequence.
Let’s imagine inference on someone saying the word dinner, and let’s suppose we had a function that chooses the most probable letter for each input spectral frame representation xi. We’ll call the sequence of letters corresponding to each input frame an alignment, because it tells us where in the acoustic signal each letter aligns to. Fig. 26.7 shows one such alignment, and what happens if we use a collapsing function that just removes consecutive duplicate letters.
    diner
X(input) x1 x2 x3 x4 x5 x6 x7 x8 x9 x10x11x12x13x14
  Y (ouput)
A(alignment) d i i n n n n e r r r r r r
   blank
wavefile
Figure 26.7 A naive algorithm for collapsinging an alignment between input and letters.
Well, that doesn’t work; our naive algorithm has transcribed the speech as diner, not dinner! Collapsing doesn’t handle double letters. There’s also another problem with our naive function; it doesn’t tell us what symbol to align with silence in the input. We don’t want to be transcribing silence as random letters!
The CTC algorithm solves both problems by adding to the transcription alphabet a special symbol for a blank, which we’ll represent as . The blank can be used in the alignment whenever we don’t want to transcribe a letter. Blank can also be used between letters; since our collapsing function collapses only consecutive duplicate letters,itwon’tcollapseacross .Moreformally,let’sdefinethemappingB:a→y between an alignment a and an output y, which collapses all repeated letters and then removes all blanks. Fig. 26.8 sketches this collapsing function B.
Y(output) dinner
removeblanks d i n n e r
mergeduplicates di␣n ␣ne r ␣ A(alignment) di␣nn␣nerrrr␣␣
X(input) x1 x2 x3 x4 x5 x6 x7 x8 x9 x10x11x12x13x14
Figure 26.8 The CTC collapsing function B, showing the space blank character ; repeated
(consecutive) characters in an alignment A are removed to form the output Y .
The CTC collapsing function is many-to-one; lots of different alignments map to the same output string. For example, the alignment shown in Fig. 26.8 is not the only alignment that results in the string dinner. Fig. 26.9 shows some other alignments that would produce the same output.
It’s useful to think of the set of all alignments that might produce the same output Y. We’ll use the inverse of our B function, called B−1, and represent that set as
        
 Figure 26.9
26.4 • CTC 559
diin␣nneeerrr␣ ddinn␣nerr␣␣␣␣ dddin␣nn␣␣␣err
Three other legimate alignments producing the transcript dinner.
 B−1(Y).
26.4.1 CTC Inference
Before we see how to compute PCTC(Y|X) let’s first see how CTC assigns a proba- bility to one particular alignment Aˆ = {aˆ1,...,aˆn}. CTC makes a strong conditional independence assumption: it assumes that, given the input X , the CTC model output at at time t is independent of the output labels at any other time ai. Thus:
􏰒T
PCTC(A|X) =
Thus to find the best alignment Aˆ = {aˆ1,...,aˆT } we can greedily choose the charac-
t=1 ter with the max probability at each time step t:
p(at|X) (26.13) aˆt =argmaxpt(c|X) (26.14)
c∈C
We then pass the resulting sequence A to the CTC collapsing function B to get the output sequence Y .
Let’s talk about how this simple inference algorithm for finding the best align- ment A would be implemented. Because we are making a decision at each time point, we can treat CTC as a sequence-modeling task, where we output one letter yˆt at time t corresponding to each input token xt , eliminating the need for a full de- coder. Fig. 26.10 sketches this architecture, where we take an encoder, produce a hidden state ht at each timestep, and decode by taking a softmax over the character vocabulary at each time step.
  output letter sequence Y
Classifier +softmax
Shorter input sequence X
log Mel spectrum f1
y1 y2 y3 y4 y5 ... i i i t t ... ...
yn
x n
ft
x 1
ENCODER
...
Subsampling
...
 Figure 26.10
Feature Computation
Inference with CTC: using an encoder-only model, with decoding done by simple softmaxes over the hidden state ht at each output step.
 
560 CHAPTER 26 • AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH
Alas, there is a potential flaw with the inference algorithm sketched in (Eq. 26.14) and Fig. 26.9. The problem is that we chose the most likely alignment A, but the most likely alignment may not correspond to the most likely final collapsed output string Y . That’s because there are many possible alignments that lead to the same output string, and hence the most likely output string might correspond to the most probable alignment. For example, imagine the most probable alignment A for an input X = [x1x2x3] is the string [a b ε] but the next two most probable alignments are [b ε b] and [ε b b]. The output Y =[b b], summing over those two alignments, might be more probable than Y =[a b].
For this reason, the most probable output sequence Y is the one that has, not the single best CTC alignment, but the highest sum over the probability of all its possible alignments:
PCTC(Y|X) = 􏰑 P(A|X) A∈B−1(Y)
􏰑 􏰒T A∈B−1(Y) t=1
p(at |ht ) Yˆ = argmaxPCTC(Y|X)
=
Alas, summing over all alignments is very expensive (there are a lot of alignments), so we approximate this sum by using a version of Viterbi beam search that cleverly keeps in the beam the high-probability alignments that map to the same output string, and sums those as an approximation of (Eq. 26.15). See Hannun (2017) for a clear explanation of this extension of beam search for CTC.
Because of the strong conditional independence assumption mentioned earlier (that the output at time t is independent of the output at time t − 1, given the input), CTC does not implicitly learn a language model over the data (unlike the attention- based encoder-decoder architectures). It is therefore essential when using CTC to interpolate a language model (and some sort of length factor L(Y )) using interpola- tion weights that are trained on a dev set:
scoreCTC(Y|X) = logPCTC(Y|X)+λ1 logPLM(Y)λ2L(Y) (26.16) 26.4.2 CTC Training
To train a CTC-based ASR system, we use negative log-likelihood loss with a special CTC loss function. Thus the loss for an entire dataset D is the sum of the negative log-likelihoods of the correct output Y for each input X :
LCTC = 􏰑 −logPCTC(Y|X) (26.17) (X,Y)∈D
To compute CTC loss function for a single input pair (X,Y), we need the probability of the output Y given the input X . As we saw in Eq. 26.15, to compute the probability of a given output Y we need to sum over all the possible alignments that would collapse to Y . In other words:
􏰑 􏰒T A∈B−1(Y) t=1
PCTC(Y|X) =
p(at|ht) (26.18)
Y
(26.15)

26.4 • CTC 561
Naively summing over all possible alignments in not feasible (there are too many alignments). However, we can efficiently compute the sum by using dynamic pro- gramming to merge alignments, with a version of the forward-backward algo- rithm also used to train HMMs (Appendix A) and CRFs. The original dynamic pro- gramming algorithms for both training and inference are laid out in (Graves et al., 2006); see (Hannun, 2017) for a detailed explanation of both.
26.4.3 Combining CTC and Encoder-Decoder
It’s also possible to combine the two architectures/loss functions we’ve described, the cross-entropy loss from the encoder-decoder architecture, and the CTC loss. Fig. 26.11 shows a sketch. For training, we can can simply weight the two losses with a λ tuned on a dev set:
L=−λlogPencdec(Y|X)−(1−λ)logPctc(Y|X) (26.19) For inference, we can combine the two with the language model (or the length
penalty), again with learned weights:
Yˆ =argmax[λlogPencdec(Y|X)−(1−λ)logPCTC(Y|X)+γlogPLM(Y)] (26.20)
Y
    it’s time...
   CTC Loss
ENCODER
x1 ... xn
Encoder-Decoder Loss
DECODER
...
H
...
 <s>it‘s tim ...
 Figure 26.11
 Combining the CTC and encoder-decoder loss functions.
26.4.4 Streaming Models: RNN-T for improving CTC
Because of the strong independence assumption in CTC (assuming that the output at time t is independent of the output at time t − 1), recognizers based on CTC don’t achieve as high an accuracy as the attention-based encoder-decoder recog- nizers. CTC recognizers have the advantage, however, that they can be used for
streaming streaming. Streaming means recognizing words on-line rather than waiting until the end of the sentence to recognize them. Streaming is crucial for many applica- tions, from commands to dictation, where we want to start recognition while the user is still talking. Algorithms that use attention need to compute the hidden state sequence over the entire input first in order to provide the attention distribution con- text, before the decoder can start decoding. By contrast, a CTC algorithm can input letters from left to right immediately.
If we want to do streaming, we need a way to improve CTC recognition to re- move the conditional independent assumption, enabling it to know about output his- RNN-T tory. The RNN-Transducer (RNN-T), shown in Fig. 26.12, is just such a model (Graves 2012, Graves et al. 2013a). The RNN-T has two main components: a CTC

562 CHAPTER 26 • AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH
acoustic model, and a separate language model component called the predictor that
conditions on the output token history. At each time step t, the CTC encoder outputs
a hidden state henc given the input x ...x . The language model predictor takes as in- t 1t pred
put the previous output token (not counting blanks), outputting a hidden state hu . The two are passed through another network whose output is then passed through a softmax to predict the next character.
PRNN−T(Y|X) = 􏰑 P(A|X) A∈B−1(Y)
􏰑 􏰒T A∈B−1(Y) t=1
The RNN-T model computing the output token distribution at time t by inte- grating the output of a CTC acoustic encoder and a separate ‘predictor’ language model.
26.5 ASR Evaluation: Word Error Rate
=
p(at |ht , y<ut )
    PREDICTION NETWORK
yu-1
hpredu
P ( yt,u | x[1..t] , y[1..u-1] )
SOFTMAX
zt,u
JOINT NETWORK
henct
ENCODER
xt
DECODER
  Figure 26.12
 word error
The standard evaluation metric for speech recognition systems is the word error rate. The word error rate is based on how much the word string returned by the recognizer (the hypothesized word string) differs from a reference transcription. The first step in computing word error is to compute the minimum edit distance in words between the hypothesized and correct strings, giving us the minimum num- ber of word substitutions, word insertions, and word deletions necessary to map between the correct and hypothesized strings. The word error rate (WER) is then defined as follows (note that because the equation includes insertions, the error rate can be greater than 100%):
WordErrorRate = 100×Insertions+Substitutions+Deletions Total Words in Correct Transcript
Here is a sample alignment between a reference and a hypothesis utterance from the CallHome corpus, showing the counts used to compute the error rate:
 alignment
REF: i ***
HYP: i GOT IT TO the ***** FULLEST i LOVE TO portable FORM OF STORES last night Eval:IISDS SS ISS
** UM the PHONE IS i LEFT THE portable **** PHONE UPSTAIRS last night
  This utterance has six substitutions, three insertions, and one deletion:
WordErrorRate = 1006+3+1=76.9% 13
 
Sentence error rate
26.5 • ASR EVALUATION: WORD ERROR RATE 563
The standard method for computing word error rates is a free script called sclite, available from the National Institute of Standards and Technologies (NIST) (NIST, 2005). Sclite is given a series of reference (hand-transcribed, gold-standard) sen- tences and a matching set of hypothesis sentences. Besides performing alignments, and computing word error rate, sclite performs a number of other useful tasks. For example, for error analysis it gives useful information such as confusion matrices showing which words are often misrecognized for others, and summarizes statistics of words that are often inserted or deleted. sclite also gives error rates by speaker (if sentences are labeled for speaker ID), as well as useful statistics like the sentence error rate, the percentage of sentences with at least one word error.
Statistical significance for ASR: MAPSSWE or MacNemar
As with other language processing algorithms, we need to know whether a particular improvement in word error rate is significant or not.
The standard statistical tests for determining if two word error rates are different is the Matched-Pair Sentence Segment Word Error (MAPSSWE) test, introduced in Gillick and Cox (1989).
The MAPSSWE test is a parametric test that looks at the difference between the number of word errors the two systems produce, averaged across a number of segments. The segments may be quite short or as long as an entire utterance; in general, we want to have the largest number of (short) segments in order to justify the normality assumption and to maximize power. The test requires that the errors in one segment be statistically independent of the errors in another segment. Since ASR systems tend to use trigram LMs, we can approximate this requirement by defining a segment as a region bounded on both sides by words that both recognizers get correct (or by turn/utterance boundaries). Here’s an example from NIST (2007) with four regions:
         I             II              III                IV
REF:  |it was|the best|of|times it|was the worst|of times|  |it was
||||||||
SYS A:|ITS |the best|of|times it|IS the worst |of times|OR|it was ||||||||
SYS B:|it was|the best| |times it|WON the TEST |of times| |it was
In region I, system A has two errors (a deletion and an insertion) and system B has zero; in region III, system A has one error (a substitution) and system B has two. Let’s define a sequence of variables Z representing the difference between the errors in the two systems as follows:
NAi the number of errors made on segment i by system A
NBi the number of errors made on segment i by system B
Z NAi −NBi ,i = 1,2,··· ,n where n is the number of segments
In the example above, the sequence of Z values is {2,−1,−1,1}. Intuitively, if the two systems are identical, we would expect the average difference, that is, the average of the Z values, to be zero. If we call the true average of the differences muz, we would thus like to know whether muz = 0. Following closely the original proposal and notation of Gillick 􏰐and Cox (1989), we can estimate the true average from our limited sample as μˆz = ni=1 Zi/n. The estimate of the variance of the Zi’s is
21􏰑n 2
σz =n−1 (Zi−μz) (26.21)
 i=1

564 CHAPTER 26 • AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH Let
 McNemar’s test
μˆ z
W = σz/√n (26.22)
For a large enough n (> 50), W will approximately have a normal distribution with unit variance. The null hypothesis is H0 : μz = 0, and it can thus be rejected if 2 ∗ P(Z ≥ |w|) ≤ 0.05 (two-tailed) or P(Z ≥ |w|) ≤ 0.05 (one-tailed), where Z is standard normal and w is the realized value W ; these probabilities can be looked up in the standard tables of the normal distribution.
Earlier work sometimes used McNemar’s test for significance, but McNemar’s is only applicable when the errors made by the system are independent, which is not true in continuous speech recognition, where errors made on a word are extremely dependent on errors made on neighboring words.
Could we improve on word error rate as a metric? It would be nice, for exam- ple, to have something that didn’t give equal weight to every word, perhaps valuing content words like Tuesday more than function words like a or of. While researchers generally agree that this would be a good idea, it has proved difficult to agree on a metric that works in every application of ASR. For dialogue systems, however, where the desired semantic output is more clear, a metric called slot error rate or concept error rate has proved extremely useful; it is discussed in Chapter 24 on page 519.
26.6 TTS
The goal of text-to-speech (TTS) systems is to map from strings of letters to wave- forms, a technology that’s important for a variety of applications from dialogue sys- tems to games to education.
Like ASR systems, TTS systems are generally based on the encoder-decoder architecture, either using LSTMs or Transformers. There is a general difference in training. The default condition for ASR systems is to be speaker-independent: they are trained on large corpora with thousands of hours of speech from many speakers because they must generalize well to an unseen test speaker. By contrast, in TTS, it’s less crucial to use multiple voices, and so basic TTS systems are speaker-dependent: trained to have a consistent voice, on much less data, but all from one speaker. For example, one commonly used public domain dataset, the LJ speech corpus, consists of 24 hours of one speaker, Linda Johnson, reading audio books in the LibriVox project (Ito and Johnson, 2017), much smaller than standard ASR corpora which are hundreds or thousands of hours.2
We generally break up the TTS task into two components. The first component is an encoder-decoder model for spectrogram prediction: it maps from strings of letters to mel spectrographs: sequences of mel spectral values over time. Thus we
2 There is also recent TTS research on the task of multi-speaker TTS, in which a system is trained on speech from many speakers, and can switch between different voices.
 
might map from this string:
to the following mel spectrogram:
It’s time for lunch!
26.6 • TTS 565
 vocoding vocoder
The second component maps from mel spectrograms to waveforms. Generating waveforms from intermediate representations like spectrograms is called vocoding and this second component is called a vocoder:
These standard encoder-decoder algorithms for TTS are still quite computation- ally intensive, so a significant focus of modern research is on ways to speed them up.
26.6.1 TTS Preprocessing: Text normalization
Before either of these two steps, however, TTS systems require text normaliza- tion preprocessing for handling non-standard words: numbers, monetary amounts, dates, and other concepts that are verbalized differently than they are spelled. A TTS system seeing a number like 151 needs to know to verbalize it as one hundred fifty one if it occurs as $151 but as one fifty one if it occurs in the context 151 Chapulte- pec Ave.. The number 1750 can be spoken in at least four different ways, depending on the context:
seventeen fifty: (in “The European economy in 1750”)
one seven five zero: (in “The password is 1750”)
seventeen hundred and fifty: (in “1750 dollars”)
one thousand, seven hundred, and fifty: (in “1750 dollars”)
Often the verbalization of a non-standard word depends on its meaning (what Taylor (2009) calls its semiotic class). Fig. 26.13 lays out some English non- standard word types.
Many classes have preferred realizations. A year is generally read as paired digits (e.g., seventeen fifty for 1750). $3.2 billion must be read out with the worddollarsattheend,asthree point two billion dollars,Someabbre- viations like N.Y. are expanded (to New York), while other acronyms like GPU are pronounced as letter sequences. In languages with grammatical gender, normal- ization may depend on morphological properties. In French, the phrase 1 mangue (‘one mangue’) is normalized to une mangue, but 1 ananas (‘one pineapple’) is normalized to un ananas. In German, Heinrich IV (‘Henry IV’) can be normalized to Heinrich der Vierte, Heinrich des Vierten, Heinrich dem Vierten, or Heinrich den Vierten depending on the grammatical case of the noun (Demberg, 2006).
 non-standard words

566 CHAPTER 26 • AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH
semiotic class examples verbalization
  abbreviations
acronyms read as letters cardinal numbers ordinal numbers numbers read as digits times
dates
years
money
money in tr/m/billions percentage
gov’t, N.Y., mph
GPU, D.C., PC, UN, IBM 12, 45, 1/2, 0.6
May 7, 3rd, Bill Gates III Room 101
3.20, 11:45
28/02 (or in US, 2/28) 1999, 80s, 1900s, 2045 $3.45, e250, $200K $3.45 billion
75% 3.4%
government GPU twelve seventh
one oh one
eleven forty five
February twenty eighth
nineteen ninety nine
three dollars forty five
three point four five billion dollars seventy five percent
 Figure 26.13 Some types of non-standard words in text normalization; see Sproat et al. (2001) and (van Esch and Sproat, 2018) for many more.
Modern end-to-end TTS systems can learn to do some normalization themselves, but TTS systems are only trained on a limited amount of data (like the 220,000 words we mentioned above for the LJ corpus (Ito and Johnson, 2017)), and so a separate normalization step is important.
Normalization can be done by rule or by an encoder-decoder model. Rule-based normalization is done in two stages: tokenization and verbalization. In the tokeniza- tion stage we hand-write write rules to detect non-standard words. These can be regular expressions, like the following for detecting years:
/(1[89][0-9][0-9])|(20[0-9][0-9]/
A second pass of rules express how to verbalize each semiotic class. Larger TTS systems instead use more complex rule-systems, like the Kestral system of (Ebden and Sproat, 2015), which first classifies and parses each input into a normal form and then produces text using a verbalization grammar. Rules have the advantage that they don’t require training data, and they can be designed for high precision, but can be brittle, and require expert rule-writers so are hard to maintain.
The alternative model is to use encoder-decoder models, which have been shown to work better than rules for such transduction tasks, but do require expert-labeled training sets in which non-standard words have been replaced with the appropriate verbalization; such training sets for some languages are available (Sproat and Gor- man 2018, Zhang et al. 2019).
In the simplest encoder-decoder setting, we simply treat the problem like ma- chine translation, training a system to map from:
     They live at 224 Mission St.
to
While encoder-decoder algorithms are highly accurate, they occasionally pro- duce errors that are egregious; for example normalizing 45 minutes as forty five mil- limeters. To address this, more complex systems use mechanisms like lightweight covering grammars, which enumerate a large set of possible verbalizations but don’t try to disambiguate, to constrain the decoding to avoid such outputs (Zhang et al., 2019).
26.6.2 TTS: Spectrogram prediction
The exact same architecture we described for ASR—the encoder-decoder with attention– can be used for the first component of TTS. Here we’ll give a simplified overview of
  They live at two twenty four Mission Street

Tacotron2 Wavenet
location-based attention
26.6 • TTS 567
the Tacotron2 architecture (Shen et al., 2018), which extends the earlier Tacotron (Wang et al., 2017) architecture and the Wavenet vocoder (van den Oord et al., 2016). Fig. 26.14 sketches out the entire architecture.
The encoder’s job is to take a sequence of letters and produce a hidden repre- sentation representing the letter sequence, which is then used by the attention mech- anism in the decoder. The Tacotron2 encoder first maps every input grapheme to a 512-dimensional character embedding. These are then passed through a stack of 3 convolutional layers, each containing 512 filters with shape 5 × 1, i.e. each filter spanning 5 characters, to model the larger letter context. The output of the final convolutional layer is passed through a biLSTM to produce the final encoding. It’s common to use a slightly higher quality (but slower) version of attention called location-based attention, in which the computation of the α values (Eq. 11.17 in Chapter 11) makes use of the α values from the prior time-state.
In the decoder, the predicted mel spectrum from the prior time slot is passed through a small pre-net as a bottleneck. This prior output is then concatenated with the encoder’s attention vector context and passed through 2 LSTM layers. The out- put of this LSTM is used in two ways. First, it is passed through a linear layer, and some output processing, to autoregressively predict one 80-dimensional log-mel fil- terbank vector frame (50 ms, with a 12.5 ms stride) at each step. Second, it is passed through another linear layer to a sigmoid to make a “stop token prediction” decision about whether to stop producing output.
     ion (and are
e capable of
ime-domain
Mel spectro-
allenging in-
and acoustic
Decoder
pler, lower- ld therefore oned on mel vocoder. In- uality audio
itecture.
Encoder
ugh a short- ize, 12.5 ms
􏱠 􏱒􏱕􏱀􏱗 􏱔􏱁􏱙􏱃􏰫 􏱋􏱕􏰷􏱌􏱞􏰤􏱃􏱌
􏱝 􏱔􏱁􏱙􏱃􏰫 􏱋􏰫􏱃􏱞􏰤􏱃􏱌
􏱡􏱁􏱗􏱃􏰤􏱃􏱌 􏰽􏱕􏱔
􏱉 􏱒􏱕􏱀􏱗
􏱔􏱁􏱙􏱃􏰫􏰷 􏱔􏱖􏱚􏰽
􏱡􏱁􏱗􏱃􏰾􏱕􏰫􏰵 􏱖􏱁􏰵􏰥􏰪􏱃􏰷
         􏱝 􏱔􏱖􏱚􏰽 􏱔􏱁􏱙􏱃􏰫􏰷
􏱔􏱕􏰦􏱁􏱌􏰯􏱕􏱀 􏱖􏱃􏱀􏰷􏰯􏱌􏰯􏱗􏱃 􏱘􏱌􏱌􏱃􏱀􏱌􏰯􏱕􏱀
􏱒􏱐􏱁􏰫􏱁􏰦􏱌􏱃􏰫 􏱂􏰵􏰩􏱃􏱈􏱈􏰯􏱀􏰨
􏱔􏰯􏱀􏱃􏱁􏰫 􏱋􏰫􏱕􏰰􏱃􏰦􏱌􏰯􏱕􏱀
􏱔􏰯􏱀􏱃􏱁􏰫 􏱋􏰫􏱕􏰰􏱃􏰦􏱌􏰯􏱕􏱀
        􏱛􏱀􏰥􏱇􏱌 􏱚􏱃􏱜􏱌
􏱔􏱈􏱟 􏱆􏱕􏱈􏰩􏰷􏰧􏱀􏰾􏰧􏰴􏰪
􏱖􏱌􏱕􏰥 􏱚􏱕􏱟􏱃􏱀
􏱊􏰯􏱈􏰯􏰫􏱃􏰦􏱌􏰯􏱕􏱀􏱁􏰪
Vocoder
format [14] ar ables t sform. g a ch
guistic is a sim It shou conditi neural
high q et arch
d thro rame s
perimented with a
 Figure 26.14
 onditioning inpu
While linear spectrograms discard phase in therefore lossy), algorithms such as Griffin-Lim estimating this discarded information, which en conversion via the inverse short-time Fourier tran grams discard even more information, presentin verse problem. However, in comparison to the lin features used in WaveNet, the mel spectrogram level acoustic representation of audio signals. be straightforward for a similar WaveNet model spectrograms to generate audio, essentially as a deed, we will show that it is possible to generate from mel spectrograms using a modified WaveN
2.2. SpectrogramPredictionNetwork
As in Tacotron, mel spectrograms are compute
time Fourier transform (STFT) using a 50 ms f
frame hop, and a Hann window function. We ex
5msframehoptomatchthefrequencyofthects
in the original WaveNet, but the corresponding inmcrealssepienctetrmopgoralms, followed by a vocoder that maps to wavefiles. Figure modified from Shen
post-net layer is comprised of 512 filters with shape 5 ⇥  with batch normalization, followed by tanh activations on all but the final layer. We minimize the summed mean squared error (MSE) from before
resolution resulted in significantly more pronunciation issues.
et al. (2018).
We transform the STFT magnitude to the mel scale using an 80 channel mel filterbank spanning 125 Hz to 7.6 kHz, followed by log dynamic range compression. Prior to log compression, the filterbank
The TFaicgo. 1tr.oBnlo2ckadrciahgirtaemctoufrteh:e TAacnotreonc2osdyestre-mdeacrcohditerctumrea.ps from graphemes to
The system is trained on gold log-mel filterbank features, using teacher forcing, output magnitudes are clipped to a minimum value of 0.01 in order and after the post-net to aid convergence. We also experimented
thatisthedecodewritihsafleodg-ltihkelihcoordrelocstsbloygm-omdeolidngetlhsepoeutcpturtadlisftreibauttuiornewaitheachdecoderstep to limit dynamic range in the logarithmic domain.
The network is composed of an encoder and a decoder with atten- a Mixture Density Network [23, 24] to avoid assuming a constant instead of the predicted decoder output from the prior step.
tion. The encoder converts a character sequence into a hidden feature variance over time, but found that these were more difficult to train representation which the decoder consumes to predict a spectrogram. and they did not lead to better sounding samples.
Input characters are represented using a learned 512-dimensional In parallel to spectrogram frame prediction, the concatenation of
26.6.3 TTS: Vocoding
character embedding, which are passed through a stack of 3 convolu- decoder LSTM output and the attention context is projected down
tional layers each containing 512 filters with shape 5 ⇥ , i.e., where to a scalar and passed through a sigmoid activation to predict the eachfilterspans5characters,folloWwaevdebNyetbatchTnohrmeavliozactiodne[1r8f]orTparocboabtirloitynth2atitsheaonutapudtaspeqtuaetnicoenhaosfcotmhpeleWteda.TvheiNs“esttopvtokceond”er(vandenOord
and ReLU activations. As in Tacotron, these convolutional layers prediction is used during inference to allow the model to dynamically
et al., 2016). Here we’ll give a somewhat simplified description of vocoding using
model longer-term context (e.g., N -grams) in the input character determine when to terminate generation instead of always generating sequence. The output of the final convolutional laWyeraivs epaNssedt.into a for a fixed duration. Specifically, generation completes at the first single bi-directional [19] LSTM [20] layer containing 512 units (256 frame for which this probability exceeds a threshold of 0.5.
Recall that the goal of the vocoding process here will be to invert a log mel spec- in each direction) to generate the encoded features. The convolutional layers in the network are regularized using
trum representations back into a time-domain waveform representation. WaveNet is The encoder output is consumed by an attention network which dropout [25] with probability 0.5, and LSTM layers are regularized
summarizesthefullencodedsequenceasafixed-leanngthacuotnoterxetgvercetosrsiveunsinegtwzooneroku,tl[i2k6]ewtihtheprloabnagbiulitayg0e.1.mInoodrdeelrstowinetroindutcreoodutpcuetdinChapter9.It
for each decoder output step. We use the location-sensitive attention from [21], which extends the additive attention mechanism [22] to use cumulative attention weights from previous decoder time steps as an additional feature. This encourages the model to move forward consistently through the input, mitigating potential failure modes where some subsequences are repeated or ignored by the decoder. Attention probabilities are computed after projecting inputs and lo- cation features to 128-dimensional hidden representations. Location features are computed using 32 1-D convolution filters of length 31.
variation at inference time, dropout with probability 0.5 is applied only to layers in the pre-net of the autoregressive decoder.
In contrast to the original Tacotron, our model uses simpler build- ing blocks, using vanilla LSTM and convolutional layers in the en- coder and decoder instead of “CBHG” stacks and GRU recurrent layers. We do not use a “reduction factor”, i.e., each decoder step corresponds to a single spectrogram frame.
2.3. WaveNetVocoder

568 CHAPTER 26 • AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH
takes spectrograms as input and produces audio output represented as sequences of 8-bit mu-law (page 536). The probability of a waveform , a sequence of 8-bit mu- law values Y = y1 , ..., yt , given an intermediate input mel spectrogram h is computed as:
dilated convolutions
􏰒t
Because models with causal convolutions do not have recurrent connections, they are typically faster
p(Y) = P(y |y ,...,y ,h ,...,h ) (26.23)
t 1 t−1 1 t
to train than RNNs, especially when applied to very long sequences. One of the problems of causal
t=1
convolutions is that they require many layers, or large filters to increase the receptive field. For
example, in Fig. 2 the receptive field is only 5 (= #layers + filter length - 1). In this paper we use
This probability distribution is modeled by a stack of special convolution layers,
dilated convolutions to increase the receptive field by orders of magnitude, without greatly increasing
which include a specific convolutional structure called dilated convolutions, and a computational cost.
specific non-linearity function.
A dilated convolution (also called a` trous, or convolution with holes) is a convolution where the A dilated convolution is a subtype of causal convolutional layer. Causal or
filter is applied over an area larger than its length by skipping input values with a certain step. It is
masked convolutions look only at the past input, rather than the future; the pre-
equivalent to a convolution with a larger filter derived from the original filter by dilating it with zeros,
diction of yt+1 can only depend on y1,...,yt, useful for autoregressive left-to-right
but is significantly more efficient. A dilated convolution effectively allows the network to operate on
processing. In dilated convolutions, at each successive layer we apply the convolu-
a coarser scale than with a normal convolution. This is similar to pooling or strided convolutions, but
tional filter over a span longer than its length by skipping input values. Thus at time
here the output has the same size as the input. As a special case, dilated convolution with dilation
t with a dilation value of 1, a convolutional filter of length 2 would see input values
1 yields the standard convolution. Fig. 3 depicts dilated causal convolutions for dilations 1, 2, 4,
and8.xDt ailnadtexdt−co1.nvBouluttaiofinlstehrawveitphraevdioisutsillyatbioeennvuaslueedoinf2vawrioulsdcsoknitpexatns,ien.pgu.ts,isgonawlopuroldcessing (Holscsheneidneprutetvalu.,e1s9x89a;nDduxtille.uFxi,g1.92869.1),5asnhdowimsathgecsoemgmpeuntatatitoionno(fCthenouetpault.,a2t0ti1m5e; Yu &
t t−1
t with 4 dilated convolution layers with dilation values, 1, 2, 4, and 8.
Koltun, 2016).
     Output
Dilation = 8
Hidden Layer
Dilation = 4
Hidden Layer
Dilation = 2
Hidden Layer
Dilation = 1
Input
             Figure 26.15
 Dilated convolutions, showing one dilation cycle size of 4, i.e., dilation values of 1, 2, 4, 8. Figure from van den Oord et al. (2016).
Figure 3: Visualization of a stack of dilated causal convolutional layers.
The Tacotron 2 synthesizer uses 12 convolutional layers in two cycles with a
Stacked dilated convolutions enable networks to have very large receptive fields with just a few lay-
dilation cycle size of 6, meaning that the first 6 layers have dilations of 1, 2, 4, 8, 16,
ers, while preserving the input resolution throughout the network as well as computational efficiency.
and 32. and the next 6 layers again have dilations of 1, 2, 4, 8, 16, and 32. Dilated In this paper, the dilation is doubled for every layer up to a limit and then repeated: e.g.
convolutions allow the vocoder to grow the receptive field exponentially with depth.
1,2,4,...,512,1,2,4,...,512,1,2,4,...,512.
WaveNet predicts mu-law audio samples. Recall from page 536 that this is a
The intuition behind this configuration is two-fold. First, exponentially increasing the dilation factor standard compression for audio in which the values at each sampling timestep are results in exponential receptive field growth with depth (Yu & Koltun, 2016). For example each compressed into 8-bits. This means that we can predict the value of each sample
1, 2, 4, . . . , 512 block has receptive field of size 1024, and can be seen as a more efficient and dis-
with a simple 256-way categorical classifier. The output of the dilated convolutions criminative (non-linear) counterpart of a 1⇥1024 convolution. Second, stacking these blocks further
increasiessththuesmpaosdseldctahpraocuitgyhaandsotfhtemraexcewpthivicehfimeladkseiszeth.is256-waydecision.
The spectrogram prediction encoder-decoder and the WaveNet vocoder are trained
2.2 SseOpFaTrMatAelXy.DIASfTtRerIBtUheTIsOpNeSctrogram predictor is trained, the spectrogram prediction network is run in teacher-forcing mode, with each predicted spectral frame condi-
One approach to modeling the conditional distributions p (x | x , . . . , x ) over the individual t  t 
tioned on the encoded text input and the previous frame from the ground truth spec-
audio samples would be to use a mixture model such as a mixture density network (Bishop, 1994) trogram. This sequence of ground truth-aligned spectral features and gold audio
or mixture of conditional Gaussian scale mixtures (MCGSM) (Theis & Bethge, 2015). However,
output is then used to train the vocoder.
van den Oord et al. (2016a) showed that a softmax distribution tends to work better, even when the
This has been only a high-level sketch of the TTS process. There are numer-
data is implicitly continuous (as is the case for image pixel intensities or audio sample values). One
ous important details that the reader interested in going further with TTS may want
of the reasons is that a categorical distribution is more flexible and can more easily model arbitrary
distributions because it makes no assumptions about their shape.
Because raw audio is typically stored as a sequence of 16-bit integer values (one per timestep), a softmax layer would need to output 65,536 probabilities per timestep to model all possible values. To make this more tractable, we first apply a μ-law companding transformation (ITU-T, 1988) to the data, and then quantize it to 256 possible values:
ln(1+μ xt )
 f(x)=sign(x) | |,

MOS
AB tests
26.7 • OTHER SPEECH TASKS 569
to look into. For example WaveNet uses a special kind of a gated activation func- tion as its non-linearity, and contains residual and skip connections. In practice, predicting 8-bit audio values doesn’t as work as well as 16-bit, for which a simple softmax is insufficient, so decoders use fancier ways as the last step of predicting audio sample values, like mixtures of distributions. Finally, the WaveNet vocoder as we have described it would be so slow as to be useless; many different kinds of efficiency improvements are necessary in practice, for example by finding ways to do non-autoregressive generation, avoiding the latency of having to wait to generate each frame until the prior frame has been generated, and instead making predictions in parallel. We encourage the interested reader to consult the original papers and various version of the code.
26.6.4 TTS Evaluation
Speech synthesis systems are evaluated by human listeners. (The development of a good automatic metric for synthesis evaluation, one that would eliminate the need for expensive and time-consuming human listening experiments, remains an open and exciting research topic.)
We evaluate the quality of synthesized utterances by playing a sentence to lis- teners and ask them to give a mean opinion score (MOS), a rating of how good the synthesized utterances are, usually on a scale from 1–5. We can then compare systems by comparing their MOS scores on the same sentences (using, e.g., paired t-tests to test for significant differences).
If we are comparing exactly two systems (perhaps to see if a particular change actually improved the system), we can use AB tests. In AB tests, we play the same sentence synthesized by two different systems (an A and a B system). The human listeners choose which of the two utterances they like better. We do this for say 50 sentences (presented in random order) and compare the number of sentences preferred for each system.
26.7 Other Speech Tasks
wake word
speaker diarization
While we have focused on speech recognition and TTS in this chapter, there are a wide variety of speech-related tasks.
The task of wake word detection is to detect a word or short phrase, usually in order to wake up a voice-enable assistant like Alexa, Siri, or the Google Assistant. The goal with wake words is build the detection into small devices at the computing edge, to maintain privacy by transmitting the least amount of user speech to a cloud- based server. Thus wake word detectors need to be fast, small footprint software that can fit into embedded devices. Wake word detectors usually use the same frontend feature extraction we saw for ASR, often followed by a whole-word classifier.
Speaker diarization is the task of determining ‘who spoke when’ in a long multi-speaker audio recording, marking the start and end of each speaker’s turns in the interaction. This can be useful for transcribing meetings, classroom speech, or medical interactions. Often diarization systems use voice activity detection (VAD) to find segments of continuous speech, extract speaker embedding vectors, and cluster the vectors to group together segments likely from the same speaker. More recent work is investigating end-to-end algorithms to map directly from input speech to a sequence of speaker labels for each frame.

570
language identification
CHAPTER 26 • AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH
speaker recognition
Speaker recognition, is the task of identifying a speaker. We generally distin- guish the subtasks of speaker verification, where we make a binary decision (is this speaker X or not?), such as for security when accessing personal information over the telephone, and speaker identification, where we make a one of N decision trying to match a speaker’s voice against a database of many speakers . These tasks are related to language identification, in which we are given a wavefile and must identify which language is being spoken; this is useful for example for automatically directing callers to human operators that speak appropriate languages.
26.8 Summary
This chapter introduced the fundamental algorithms of automatic speech recognition (ASR) and text-to-speech (TTS).
• The task of speech recognition (or speech-to-text) is to map acoustic wave- forms to sequences of graphemes.
• The input to a speech recognizer is a series of acoustic waves. that are sam- pled, quantized, and converted to a spectral representation like the log mel spectrum.
• Twocommonparadigmsforspeechrecognitionaretheencoder-decoderwith attention model, and models based on the CTC loss function. Attention- based models have higher accuracies, but models based on CTC more easily adapt to streaming: outputting graphemes online instead of waiting until the acoustic input is complete.
• ASR is evaluated using the Word Error Rate; the edit distance between the hypothesis and the gold transcription.
• TTS systems are also based on the encoder-decoder architecture. The en- coder maps letters to an encoding, which is consumed by the decoder which generates mel spectrogram output. A neural vocoder then reads the spectro- gram and generates waveforms.
• TTS systems require a first pass of text normalization to deal with numbers and abbreviations and other non-standard words.
• TTS is evaluated by playing a sentence to human listeners and having them give a mean opinion score (MOS) or by doing AB tests.
Bibliographical and Historical Notes
ASR A number of speech recognition systems were developed by the late 1940s and early 1950s. An early Bell Labs system could recognize any of the 10 digits from a single speaker (Davis et al., 1952). This system had 10 speaker-dependent stored patterns, one for each digit, each of which roughly represented the first two vowel formants in the digit. They achieved 97%–99% accuracy by choosing the pat- tern that had the highest relative correlation coefficient with the input. Fry (1959) and Denes (1959) built a phoneme recognizer at University College, London, that recognized four vowels and nine consonants based on a similar pattern-recognition principle. Fry and Denes’s system was the first to use phoneme transition probabili- ties to constrain the recognizer.

warping
The late 1960s and early 1970s produced a number of important paradigm shifts. First were a number of feature-extraction algorithms, including the efficient fast Fourier transform (FFT) (Cooley and Tukey, 1965), the application of cepstral pro- cessing to speech (Oppenheim et al., 1968), and the development of LPC for speech coding (Atal and Hanauer, 1971). Second were a number of ways of handling warp- ing; stretching or shrinking the input signal to handle differences in speaking rate and segment length when matching against stored patterns. The natural algorithm for solving this problem was dynamic programming, and, as we saw in Appendix A, the algorithm was reinvented multiple times to address this problem. The first applica- tion to speech processing was by Vintsyuk (1968), although his result was not picked up by other researchers, and was reinvented by Velichko and Zagoruyko (1970) and Sakoe and Chiba (1971) (and (1984)). Soon afterward, Itakura (1975) combined this dynamic programming idea with the LPC coefficients that had previously been used only for speech coding. The resulting system extracted LPC features from in- coming words and used dynamic programming to match them against stored LPC templates. The non-probabilistic use of dynamic programming to match a template against incoming speech is called dynamic time warping.
The third innovation of this period was the rise of the HMM. Hidden Markov models seem to have been applied to speech independently at two laboratories around 1972. One application arose from the work of statisticians, in particular Baum and colleagues at the Institute for Defense Analyses in Princeton who applied HMMs to various prediction problems (Baum and Petrie 1966, Baum and Eagon 1967). James Baker learned of this work and applied the algorithm to speech processing (Baker, 1975a) during his graduate work at CMU. Independently, Frederick Jelinek and collaborators (drawing from their research in information-theoretical models influenced by the work of Shannon (1948)) applied HMMs to speech at the IBM Thomas J. Watson Research Center (Jelinek et al., 1975). One early difference was the decoding algorithm; Baker’s DRAGON system used Viterbi (dynamic program- ming) decoding, while the IBM system applied Jelinek’s stack decoding algorithm (Jelinek, 1969). Baker then joined the IBM group for a brief time before founding the speech-recognition company Dragon Systems.
The use of the HMM, with Gaussian Mixture Models (GMMs) as the phonetic component, slowly spread through the speech community, becoming the dominant paradigm by the 1990s. One cause was encouragement by ARPA, the Advanced Research Projects Agency of the U.S. Department of Defense. ARPA started a five-year program in 1971 to build 1000-word, constrained grammar, few speaker speech understanding (Klatt, 1977), and funded four competing systems of which Carnegie-Mellon University’s Harpy system (Lowerre, 1968), which used a simpli- fied version of Baker’s HMM-based DRAGON system was the best of the tested sys- tems. ARPA (and then DARPA) funded a number of new speech research programs, beginning with 1000-word speaker-independent read-speech tasks like “Resource Management” (Price et al., 1988), recognition of sentences read from the Wall Street Journal (WSJ), Broadcast News domain (LDC 1998, Graff 1997) (transcription of actual news broadcasts, including quite difficult passages such as on-the-street inter- views) and the Switchboard, CallHome, CallFriend, and Fisher domains (Godfrey et al. 1992, Cieri et al. 2004) (natural telephone conversations between friends or strangers). Each of the ARPA tasks involved an approximately annual bakeoff at which systems were evaluated against each other. The ARPA competitions resulted in wide-scale borrowing of techniques among labs since it was easy to see which ideas reduced errors the previous year, and the competitions were probably an im-
dynamic time warping
bakeoff
BIBLIOGRAPHICAL AND HISTORICAL NOTES 571

572 CHAPTER 26 • AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH
hybrid
portant factor in the eventual spread of the HMM paradigm.
By around 1990 neural alternatives to the HMM/GMM architecture for ASR
arose, based on a number of earlier experiments with neural networks for phoneme recognition and other speech tasks. Architectures included the time-delay neural network (TDNN)—the first use of convolutional networks for speech— (Waibel et al. 1989, Lang et al. 1990), RNNs (Robinson and Fallside, 1991), and the hybrid HMM/MLP architecture in which a feedforward neural network is trained as a pho- netic classifier whose outputs are used as probability estimates for an HMM-based architecture (Morgan and Bourlard 1990, Bourlard and Morgan 1994, Morgan and Bourlard 1995).
While the hybrid systems showed performance close to the standard HMM/GMM models, the problem was speed: large hybrid models were too slow to train on the CPUs of that era. For example, the largest hybrid system, a feedforward network, was limited to a hidden layer of 4000 units, producing probabilities over only a few dozen monophones. Yet training this model still required the research group to de- sign special hardware boards to do vector processing (Morgan and Bourlard, 1995). A later analytic study showed the performance of such simple feedforward MLPs for ASR increases sharply with more than 1 hidden layer, even controlling for the total number of parameters (Maas et al., 2017). But the computational resources of the time were insufficient for more layers.
Over the next two decades a combination of Moore’s law and the rise of GPUs allowed deep neural networks with many layers. Performance was getting close to traditional systems on smaller tasks like TIMIT phone recognition by 2009 (Mo- hamed et al., 2009), and by 2012, the performance of hybrid systems had surpassed traditional HMM/GMM systems (Jaitly et al. 2012, Dahl et al. 2012, inter alia). Originally it seemed that unsupervised pretraining of the networks using a tech- nique like deep belief networks was important, but by 2013, it was clear that for hybrid HMM/GMM feedforward networks, all that mattered was to use a lot of data and enough layers, although a few other components did improve performance: us- ing log mel features instead of MFCCs, using dropout, and using rectified linear units (Deng et al. 2013, Maas et al. 2013, Dahl et al. 2013).
Meanwhile early work had proposed the CTC loss function by 2006 (Graves et al., 2006), and by 2012 the RNN-Transducer was defined and applied to phone recognition (Graves 2012, Graves et al. 2013a), and then to end-to-end speech recog- nition rescoring (Graves and Jaitly, 2014), and then recognition (Maas et al., 2015), with advances such as specialized beam search (Hannun et al., 2014). (Our de- scription of CTC in the chapter draws on Hannun (2017), which we encourage the interested reader to follow).
The encoder-decoder architecture was applied to speech at about the same time by two different groups, in the Listen Attend and Spell system of Chan et al. (2016) and the attention-based encoder decoder architecture of Chorowski et al. (2014) and Bahdanau et al. (2016). By 2018 Transformers were included in this encoder- decoder architecture. Karita et al. (2019) is a nice comparison of RNNs vs Trans- formers in encoder-architectures for ASR, TTS, and speech-to-speech translation.
Popular toolkits for speech processing include Kaldi (Povey et al., 2011) and ESPnet (Watanabe et al. 2018, Hayashi et al. 2020).
TTS As we noted at the beginning of the chapter, speech synthesis is one of the earliest fields of speech and language processing. The 18th century saw a number of physical models of the articulation process, including the von Kempelen model mentioned above, as well as the 1773 vowel model of Kratzenstein in Copenhagen
Kaldi ESPnet

EXERCISES 573
using organ pipes.
The early 1950s saw the development of three early paradigms of waveform
synthesis: formant synthesis, articulatory synthesis, and concatenative synthesis. Modern encoder-decoder systems are distant descendants of formant synthesiz- ers. Formant synthesizers originally were inspired by attempts to mimic human speech by generating artificial spectrograms. The Haskins Laboratories Pattern Playback Machine generated a sound wave by painting spectrogram patterns on a moving transparent belt and using reflectance to filter the harmonics of a wave- form (Cooper et al., 1951); other very early formant synthesizers include those of Lawrence (1953) and Fant (1951). Perhaps the most well-known of the formant synthesizers were the Klatt formant synthesizer and its successor systems, includ- ing the MITalk system (Allen et al., 1987) and the Klattalk software used in Digital
Equipment Corporation’s DECtalk (Klatt, 1982). See Klatt (1975) for details.
A second early paradigm, concatenative synthesis, seems to have been first pro- posed by Harris (1953) at Bell Laboratories; he literally spliced together pieces of magnetic tape corresponding to phones. Soon afterwards, Peterson et al. (1958) pro- posed a theoretical model based on diphones, including a database with multiple copies of each diphone with differing prosody, each labeled with prosodic features including F0, stress, and duration, and the use of join costs based on F0 and for- mant distance between neighboring units. But such diphone synthesis models were not actually implemented until decades later (Dixon and Maxey 1968, Olive 1977). The 1980s and 1990s saw the invention of unit selection synthesis, based on larger units of non-uniform length and the use of a target cost, (Sagisaka 1988, Sagisaka
et al. 1992, Hunt and Black 1996, Black and Taylor 1994, Syrdal et al. 2000).
A third paradigm, articulatory synthesizers attempt to synthesize speech by modeling the physics of the vocal tract as an open tube. Representative models include Stevens et al. (1953), Flanagan et al. (1975), and Fant (1986). See Klatt
(1975) and Flanagan (1972) for more details.
Most early TTS systems used phonemes as input; development of the text anal-
ysis components of TTS came somewhat later, drawing on NLP. Indeed the first true text-to-speech system seems to have been the system of Umeda and Teranishi (Umeda et al. 1968, Teranishi and Umeda 1968, Umeda 1976), which included a parser that assigned prosodic boundaries, as well as accent and stress.
Exercises
26.1 Analyze each of the errors in the incorrectly recognized transcription of “um the phone is I left the. . . ” on page 562. For each one, give your best guess as to whether you think it is caused by a problem in signal processing, pronun- ciation modeling, lexicon size, language model, or pruning in the decoding search.

Abadi, M., Agarwal, A., Barham, P., Brevdo, E., Chen, Z., Citro, C., Cor- rado, G. S., Davis, A., Dean, J., Devin, M., Ghemawat, S., Goodfellow, I., Harp, A., Irving, G., Isard, M., Jia, Y., Jozefowicz, R., Kaiser, L., Kudlur, M., Levenberg, J., Mane ́, D., Monga, R., Moore, S., Murray, D., Olah, C., Schuster, M., Shlens, J., Steiner, B., Sutskever, I., Talwar, K., Tucker, P., Vanhoucke, V., Vasudevan, V., Vie ́gas, F., Vinyals, O., Warden, P., Watten- berg, M., Wicke, M., Yu, Y., and Zheng, X. (2015). TensorFlow: Large- scale machine learning on heteroge- neous systems.. Software available from tensorflow.org.
Abney, S. P., Schapire, R. E., and Singer, Y. (1999). Boosting ap- plied to tagging and PP attachment. EMNLP/VLC.
Agarwal, O., Subramanian, S., Nenkova, A., and Roth, D. (2019). Evaluation of named entity corefer- ence. Workshop on Computational Models of Reference, Anaphora and Coreference.
Aggarwal, C. C. and Zhai, C. (2012). A survey of text classification algo- rithms. Aggarwal, C. C. and Zhai, C. (Eds.), Mining text data, 163–222. Springer.
Agichtein, E. and Gravano, L. (2000). Snowball: Extracting relations from large plain-text collections. Proceed- ings of the 5th ACM International Conference on Digital Libraries.
Agirre, E. and de Lacalle, O. L. (2003). Clustering WordNet word senses. RANLP 2003.
Agirre, E., Banea, C., Cardie, C., Cer, D., Diab, M., Gonzalez-Agirre, A., Guo, W., Lopez-Gazpio, I., Maritx- alar, M., Mihalcea, R., Rigau, G., Uria, L., and Wiebe, J. (2015). 2015 SemEval-2015 Task 2: Semantic Tex- tual Similarity, English, Spanish and Pilot on Interpretability. SemEval-15.
Agirre, E., Diab, M., Cer, D., and Gonzalez-Agirre, A. (2012). Semeval- 2012 task 6: A pilot on semantic tex- tual similarity. SemEval-12.
Agirre, E. and Edmonds, P. (Eds.). (2006). Word Sense Disambiguation: Algorithms and Applications. Kluwer.
Agirre, E. and Martinez, D. (2001). Learning class-to-class selectional preferences. CoNLL.
Aho, A. V., Sethi, R., and Ullman, J. D. (1986). Compilers: Principles, Tech- niques, and Tools. Addison-Wesley.
Aho, A. V. and Ullman, J. D. (1972). The Theory of Parsing, Translation, and Compiling, Vol. 1. Prentice Hall.
Bibliography Ajdukiewicz, K. (1935). Die syntaktis-
che Konnexita ̈t. Studia Philosophica 1, 1–27. English translation “Syntactic Connexion” by H. Weber in McCall, S. (Ed.) 1967. Polish Logic, pp. 207– 231, Oxford University Press.
Alberti, C., Lee, K., and Collins, M. (2019). A BERT baseline for the nat- ural questions. http://arxiv.org/ abs/1901.08634.
Algoet, P. H. and Cover, T. M. (1988). A sandwich proof of the Shannon- McMillan-Breiman theorem. The An- nals of Probability 16(2), 899–909.
Allen, J. (1984). Towards a general the- ory of action and time. Artificial Intel- ligence 23(2), 123–154.
Allen, J. and Perrault, C. R. (1980). An- alyzing intention in utterances. Artifi- cial Intelligence 15, 143–178.
Allen, J., Hunnicut, M. S., and Klatt, D. H. (1987). From Text to Speech: The MITalk system. Cambridge Uni- versity Press.
Althoff, T., Danescu-Niculescu-Mizil, C., and Jurafsky, D. (2014). How to ask for a favor: A case study on the success of altruistic requests. ICWSM 2014.
Amsler, R. A. (1981). A taxonomy of English nouns and verbs. ACL.
An, J., Kwak, H., and Ahn, Y.-Y. (2018). SemAxis: A lightweight framework to characterize domain- specific word semantics beyond senti- ment. ACL.
Anastasopoulos, A. and Neubig, G. (2020). Should all cross-lingual em- beddings speak English?. ACL.
Antoniak, M. and Mimno, D. (2018). Evaluating the stability of embedding- based word similarities. TACL 6, 107– 119.
Aone, C. and Bennett, S. W. (1995). Evaluating automated and manual ac- quisition of anaphora resolution strate- gies. ACL.
Ariel, M. (2001). Accessibility theory: An overview. Sanders, T., Schilpero- ord, J., and Spooren, W. (Eds.), Text Representation: Linguistic and Psy- cholinguistic Aspects, 29–87. Ben- jamins.
Artetxe, M. and Schwenk, H. (2019). Massively multilingual sentence em- beddings for zero-shot cross-lingual transfer and beyond. TACL 7, 597– 610.
Artstein, R., Gandhe, S., Gerten, J., Leuski, A., and Traum, D. (2009). Semi-formal evaluation of conversa- tional characters. Languages: From Formal to Natural, 22–35. Springer.
Asher, N. (1993). Reference to Ab- stract Objects in Discourse. Studies in Linguistics and Philosophy (SLAP) 50, Kluwer.
Asher, N. and Lascarides, A. (2003). Logics of Conversation. Cambridge University Press.
Atal, B. S. and Hanauer, S. (1971). Speech analysis and synthesis by pre- diction of the speech wave. JASA 50, 637–655.
Austin, J. L. (1962). How to Do Things with Words. Harvard University Press.
Awadallah, A. H., Kulkarni, R. G., Ozertem, U., and Jones, R. (2015). Charaterizing and predicting voice query reformulation. CIKM-15.
Baayen, R. H. (2001). Word frequency distributions. Springer.
Baayen, R. H., Piepenbrock, R., and Gulikers, L. (1995). The CELEX Lexi- cal Database (Release 2) [CD-ROM]. Linguistic Data Consortium, Univer- sity of Pennsylvania [Distributor].
Baccianella, S., Esuli, A., and Sebas- tiani, F. (2010). Sentiwordnet 3.0: An enhanced lexical resource for sen- timent analysis and opinion mining. LREC.
Bach, K. and Harnish, R. (1979). Linguistic communication and speech acts. MIT Press.
Backus, J. W. (1959). The syntax and semantics of the proposed interna- tional algebraic language of the Zurich ACM-GAMM Conference. Informa- tion Processing: Proceedings of the International Conference on Informa- tion Processing, Paris. UNESCO.
Backus, J. W. (1996). Transcript of question and answer session. Wexel- blat, R. L. (Ed.), History of Program- ming Languages, p. 162. Academic Press.
Bada, M., Eckert, M., Evans, D., Gar- cia, K., Shipley, K., Sitnikov, D., Baumgartner, W. A., Cohen, K. B., Verspoor, K., Blake, J. A., and Hunter, L. E. (2012). Concept annotation in the craft corpus. BMC bioinformatics 13(1), 161.
Bagga, A. and Baldwin, B. (1998). Algorithms for scoring coreference chains. LREC.
Bahdanau, D., Chorowski, J., Serdyuk, D., Brakel, P., and Bengio, Y. (2016). End-to-end attention-based large vo- cabulary speech recognition. ICASSP.
Bahl, L. R. and Mercer, R. L. (1976). Part of speech assignment by a statis- tical decision algorithm. Proceedings IEEE International Symposium on In- formation Theory.
575

576 Bibliography
Bahl, L. R., Jelinek, F., and Mercer, R. L. (1983). A maximum likeli- hood approach to continuous speech recognition. IEEE Transactions on Pattern Analysis and Machine Intelli- gence 5(2), 179–190.
Baker, C. F., Fillmore, C. J., and Lowe, J. B. (1998). The Berkeley FrameNet project. COLING/ACL.
Baker,J.K.(1975a). TheDRAGON system – An overview. IEEE Transac- tions on Acoustics, Speech, and Signal Processing ASSP-23(1), 24–29.
Baker, J. K. (1975b). Stochastic model- ing for automatic speech understand- ing. Reddy, D. R. (Ed.), Speech Recog- nition. Academic Press.
Baldridge, J., Asher, N., and Hunter, J. (2007). Annotation for and robust parsing of discourse structure on unre- stricted texts. Zeitschrift fu ̈r Sprach- wissenschaft 26, 213–239.
Bamman, D., Lewke, O., and Man- soor, A. (2020). An annotated dataset of coreference in english literature. LREC.
Bamman, D., O’Connor, B., and Smith, N. A. (2013). Learning latent personas of film characters. ACL.
Bamman, D., Popat, S., and Shen, S. (2019). An annotated dataset of liter- ary entities. NAACL HLT.
Banarescu, L., Bonial, C., Cai, S., Georgescu, M., Griffitt, K., Herm- jakob, U., Knight, K., Koehn, P., Palmer, M., and Schneider, N. (2013). Abstract meaning representation for sembanking. 7th Linguistic Anno- tation Workshop and Interoperability with Discourse.
Banerjee, S. and Lavie, A. (2005). ME- TEOR: An automatic metric for MT evaluation with improved correlation with human judgments. Proceedings of ACL Workshop on Intrinsic and Ex- trinsic Evaluation Measures for MT and/or Summarization.
Banko, M., Cafarella, M., Soderland, S., Broadhead, M., and Etzioni, O. (2007). Open information extraction for the web. IJCAI.
Ban ̃o ́n, M., Chen, P., Haddow, B., Heafield, K., Hoang, H., Espla`-Gomis, M., Forcada, M. L., Kamran, A., Kirefu, F., Koehn, P., Ortiz Rojas, S., Pla Sempere, L., Ram ́ırez-Sa ́nchez, G., Sarr ́ıas, E., Strelec, M., Thomp- son, B., Waites, W., Wiggins, D., and Zaragoza, J. (2020). ParaCrawl: Web- scale acquisition of parallel corpora. ACL.
Bar-Hillel, Y. (1953). A quasi- arithmetical notation for syntactic de- scription. Language 29, 47–58.
Bar-Hillel, Y. (1960). The present sta- tus of automatic translation of lan- guages. Alt, F. (Ed.), Advances
in Computers 1, 91–163. Academic
Press.
Barker, C. (2010). Nominals don’t pro-
vide criteria of identity. Rathert, M. and Alexiadou, A. (Eds.), The Seman- tics of Nominalizations across Lan- guages and Frameworks, 9–24. Mou- ton.
Barzilay, R. and Lapata, M. (2005). Modelinglocalcoherence:Anentity- based approach. ACL.
Barzilay, R. and Lapata, M. (2008). Modeling local coherence: An entity- based approach. Computational Lin- guistics 34(1), 1–34.
Barzilay, R. and Lee, L. (2004). Catch- ing the drift: Probabilistic content models, with applications to genera- tion and summarization. HLT-NAACL.
Basile, P., Caputo, A., and Semer- aro, G. (2014). An enhanced Lesk word sense disambiguation algo- rithm through a distributional seman- tic model. COLING.
Baum, L. E. and Eagon, J. A. (1967). An inequality with applications to statistical estimation for probabilistic functions of Markov processes and to a model for ecology. Bulletin of the American Mathematical Society 73(3), 360–363.
Baum, L. E. and Petrie, T. (1966). Statistical inference for probabilis- tic functions of finite-state Markov chains. Annals of Mathematical Statis- tics 37(6), 1554–1563.
Baum, L. F. (1900). The Wizard of Oz. Available at Project Gutenberg.
Bayes, T. (1763). An Essay Toward Solving a Problem in the Doctrine of Chances, Vol. 53. Reprinted in Facsimiles of Two Papers by Bayes, Hafner Publishing, 1963.
Bazell, C. E. (1952/1966). The corre- spondence fallacy in structural linguis- tics. Hamp, E. P., Householder, F. W., and Austerlitz, R. (Eds.), Studies by Members of the English Department, Istanbul University (3), reprinted in Readings in Linguistics II (1966), 271–298. University of Chicago Press.
Bean, D. and Riloff, E. (1999). Corpus- based identification of non-anaphoric noun phrases. ACL.
Bean, D. and Riloff, E. (2004). Un- supervised learning of contextual role knowledge for coreference resolution. HLT-NAACL.
Beckman, M. E. and Ayers, G. M. (1997). Guidelines for ToBI la- belling. Unpublished manuscript, Ohio State University, http://www. ling.ohio- state.edu/research/ phonetics/E_ToBI/.
Beckman, M. E. and Hirschberg, J. (1994). The ToBI annotation conven- tions. Manuscript, Ohio State Univer- sity.
Bedi, G., Carrillo, F., Cecchi, G. A., Slezak, D. F., Sigman, M., Mota, N. B., Ribeiro, S., Javitt, D. C., Copelli, M., and Corcoran, C. M. (2015). Automated analysis of free speech predicts psychosis onset in high-risk youths. npj Schizophrenia 1.
Bejcˇek, E., Hajicˇova ́, E., Hajicˇ, J., J ́ınova ́, P., Kettnerova ́, V., Kola ́ˇrova ́, V., Mikulova ́, M., M ́ırovsky ́, J., Nedoluzhko, A.,ˇPanevova ́, J., Pola ́kova ́, L., Sevcˇ ́ıkova ́, M., Sˇteˇpa ́nek, J., and Zika ́nova ́, Sˇ. (2013). Prague dependency treebank 3.0. Tech. rep., Institute of Formal and Applied Linguistics, Charles Univer- sity in Prague. LINDAT/CLARIN digital library at Institute of Formal and Applied Linguistics, Charles Uni- versity in Prague.
Bellegarda, J. R. (1997). A la- tent semantic analysis framework for large-span language modeling. EU- ROSPEECH.
Bellegarda, J. R. (2000). Exploiting latent semantic information in statisti- cal language modeling. Proceedings of the IEEE 89(8), 1279–1296.
Bellegarda, J. R. (2013). Natural lan- guage technology in mobile devices: Two grounding frameworks. Mobile Speech and Advanced Natural Lan- guage Solutions, 185–196. Springer.
Bellman, R. (1957). Dynamic Pro- gramming. Princeton University Press.
Bellman, R. (1984). Eye of the Hurri- cane: an autobiography. World Sci- entific Singapore.
Bender, E. M. (2019). The #ben-
derrule: On naming the lan-
guages we study and why it mat-
ters. https://thegradient.pub/
the- benderrule- on- naming- the- languages- we- study- and- why- it- ma
Bender, E. M. and Friedman, B. (2018). Data statements for natural language processing: Toward mitigat- ing system bias and enabling better science. TACL 6, 587–604.
Bender, E. M. and Koller, A. (2020). Climbing towards NLU: On meaning, form, and understanding in the age of data. ACL.
Bengio, Y., Courville, A., and Vin- cent, P. (2013). Representation learn- ing: A review and new perspectives. IEEE Transactions on Pattern Anal- ysis and Machine Intelligence 35(8), 1798–1828.
Bengio, Y., Ducharme, R., Vincent, P., and Jauvin, C. (2003). A neural probabilistic language model. Journal of machine learning research 3(Feb), 1137–1155.
Bengio, Y., Lamblin, P., Popovici, D., and Larochelle, H. (2007). Greedy layer-wise training of deep networks. NeurIPS.
 
 Bengio, Y., Schwenk, H., Sene ́cal, J.-S., Morin, F., and Gauvain, J.- L. (2006). Neural probabilistic lan- guage models. Innovations in Machine Learning, 137–186. Springer.
Bengtson, E. and Roth, D. (2008). Un- derstanding the value of features for coreference resolution. EMNLP.
Bennett, R. and Elfner, E. (2019). The syntax–prosody interface. Annual Re- view of Linguistics 5, 151–171.
Berant, J., Chou, A., Frostig, R., and Liang, P. (2013). Semantic parsing on freebase from question-answer pairs. EMNLP.
Berg-Kirkpatrick, T., Burkett, D., and Klein, D. (2012). An empirical in- vestigation of statistical significance in NLP. EMNLP.
Berger, A., Della Pietra, S. A., and Della Pietra, V. J. (1996). A maxi- mum entropy approach to natural lan- guage processing. Computational Lin- guistics 22(1), 39–71.
Bergsma, S. and Lin, D. (2006). Boot- strapping path-based pronoun resolu- tion. COLING/ACL.
Bergsma, S., Lin, D., and Goebel, R. (2008a). Discriminative learning of selectional preference from unlabeled text. EMNLP.
Bergsma, S., Lin, D., and Goebel, R. (2008b). Distributional identification of non-referential pronouns. ACL.
Bethard, S. (2013). ClearTK-TimeML: A minimalist approach to TempEval 2013. SemEval-13.
Bhat, I., Bhat, R. A., Shrivastava, M., and Sharma, D. (2017). Joining hands: Exploiting monolingual treebanks for parsing of code-mixing data. EACL.
Biber, D., Johansson, S., Leech, G., Conrad, S., and Finegan, E. (1999). Longman Grammar of Spoken and Written English. Pearson.
Bickel, B. (2003). Referential density in discourse and syntactic typology. Language 79(2), 708–736.
Bies, A., Ferguson, M., Katz, K., and MacIntyre, R. (1995). Bracketing guidelines for Treebank II style Penn Treebank Project..
Bikel, D. M., Miller, S., Schwartz, R., and Weischedel, R. (1997). Nymble: A high-performance learning name- finder. ANLP.
Biran, O. and McKeown, K. (2015). PDTB discourse parsing as a tagging task: The two taggers approach. SIG- DIAL.
Bird, S., Klein, E., and Loper, E. (2009). Natural Language Processing with Python. O’Reilly.
Bisani, M. and Ney, H. (2004). Boot- strap estimates for confidence inter- vals in ASR performance evaluation. ICASSP.
Bishop, C. M. (2006). Pattern recogni- tion and machine learning. Springer.
Bisk, Y., Holtzman, A., Thoma- son, J., Andreas, J., Bengio, Y., Chai, J., Lapata, M., Lazaridou, A., May, J., Nisnevich, A., Pinto, N., and Turian, J. (2020). Experience grounds language.. arXiv preprint arXiv:2004.10151.
Bizer, C., Lehmann, J., Kobilarov, G., Auer, S., Becker, C., Cyganiak, R., and Hellmann, S. (2009). DBpedia— A crystallization point for the Web of Data. Web Semantics: science, ser- vices and agents on the world wide web 7(3), 154–165.
Bjo ̈rkelund, A. and Kuhn, J. (2014). Learning structured perceptrons for coreference resolution with latent an- tecedents and non-local features. ACL.
Black, A. W. and Taylor, P. (1994). CHATR: A generic speech synthesis system. COLING.
Black, E. (1988). An experiment in computational discrimination of En- glish word senses. IBM Journal of Re- search and Development 32(2), 185– 194.
Black, E., Abney, S. P., Flickinger, D., Gdaniec, C., Grishman, R., Harrison, P., Hindle, D., Ingria, R., Jelinek, F., Klavans, J. L., Liberman, M. Y., Mar- cus, M. P., Roukos, S., Santorini, B., and Strzalkowski, T. (1991). A proce- dure for quantitatively comparing the syntactic coverage of English gram- mars. Proceedings DARPA Speech and Natural Language Workshop.
Blei, D. M., Ng, A. Y., and Jordan, M. I. (2003). Latent Dirichlet allocation. JMLR 3(5), 993–1022.
Blodgett, S. L., Barocas, S., Daume ́ III, H., and Wallach, H. (2020). Language (technology) is power: A critical sur- vey of “bias” in NLP. ACL.
Blodgett, S. L., Green, L., and O’Connor, B. (2016). Demographic dialectal variation in social media: A case study of African-American En- glish. EMNLP.
Blodgett, S. L. and O’Connor, B. (2017). Racial disparity in natural language processing: A case study of social media African-American En- glish. Fairness, Accountability, and Transparency in Machine Learning (FAT/ML) Workshop, KDD.
Bloomfield, L. (1914). An Introduction to the Study of Language. Henry Holt and Company.
Bloomfield, L. (1933). Language. Uni- versity of Chicago Press.
Bobrow, D. G., Kaplan, R. M., Kay, M., Norman, D. A., Thompson, H., and Winograd, T. (1977). GUS, A frame driven dialog system. Artificial Intelligence 8, 155–173.
Bibliography 577
Bobrow, D. G. and Norman, D. A. (1975). Some principles of memory schemata. Bobrow, D. G. and Collins, A. (Eds.), Representation and Under- standing. Academic Press.
Bobrow, D. G. and Winograd, T. (1977). An overview of KRL, a knowl- edge representation language. Cogni- tive Science 1(1), 3–46.
Boersma, P. and Weenink, D. (2005). Praat: doing phonetics by computer (version 4.3.14). [Computer program]. Retrieved May 26, 2005, from http: //www.praat.org/.
Boguraev, B. K. and Briscoe, T. (Eds.). (1989). Computational Lexicogra- phy for Natural Language Processing. Longman.
Bohus, D. and Rudnicky, A. I. (2005). Sorry, I didn’t catch that! — An in- vestigation of non-understanding er- rors and recovery strategies. Proceed- ings of SIGDIAL.
Bojanowski, P., Grave, E., Joulin, A., and Mikolov, T. (2017). Enriching word vectors with subword informa- tion. TACL 5, 135–146.
Bollacker, K., Evans, C., Paritosh, P., Sturge, T., and Taylor, J. (2008). Free- base: a collaboratively created graph database for structuring human knowl- edge. SIGMOD 2008.
Bolukbasi, T., Chang, K.-W., Zou, J., Saligrama, V., and Kalai, A. T. (2016). Man is to computer programmer as woman is to homemaker? Debiasing word embeddings. NeurIPS.
Bordes, A., Usunier, N., Chopra, S., and Weston, J. (2015). Large- scale simple question answering with memory networks. arXiv preprint arXiv:1506.02075.
Borges, J. L. (1964). The analytical language of John Wilkins. University of Texas Press. Trans. Ruth L. C. Simms.
Bostrom, K. and Durrett, G. (2020). Byte pair encoding is suboptimal for language model pretraining. arXiv.
Bourlard, H. and Morgan, N. (1994). Connectionist Speech Recognition: A Hybrid Approach. Kluwer.
Bowman, S. R., Vilnis, L., Vinyals, O., Dai, A. M., Jozefowicz, R., and Ben- gio, S. (2016). Generating sentences from a continuous space. CoNLL.
Boyd-Graber, J., Feng, S., and Ro- driguez, P. (2018). Human-computer question answering: The case for quizbowl. Escalera, S. and Weimer, M. (Eds.), The NIPS ’17 Competition: Building Intelligent Systems. Springer.
Brachman, R. J. (1979). On the episte- mogical status of semantic networks. Findler, N. V. (Ed.), Associative Net- works: Representation and Use of Knowledge by Computers, 3–50. Aca- demic Press.

578 Bibliography
Brachman, R. J. and Levesque, H. J.
(Eds.). (1985). Readings in Knowl- edge Representation. Morgan Kauf- mann.
Brachman, R. J. and Schmolze, J. G. (1985). An overview of the KL- ONE knowledge representation sys- tem. Cognitive Science 9(2), 171–216.
Brants, T. (2000). TnT: A statistical part-of-speech tagger. ANLP.
Brants, T., Popat, A. C., Xu, P., Och, F. J., and Dean, J. (2007). Large lan- guage models in machine translation. EMNLP/CoNLL.
Braud, C., Coavoux, M., and Søgaard, A. (2017). Cross-lingual RST dis- course parsing. EACL.
Bre ́al, M. (1897). Essai de Se ́mantique: Science des significations. Hachette.
Brennan, S. E., Friedman, M. W., and Pollard, C. (1987). A centering ap- proach to pronouns. ACL.
Bresnan, J. (Ed.). (1982). The Mental Representation of Grammatical Rela- tions. MIT Press.
Brin, S. (1998). Extracting patterns and relations from the World Wide Web. Proceedings World Wide Web and Databases International Workshop, Number 1590 in LNCS. Springer.
Brockmann, C. and Lapata, M. (2003). Evaluating and combining approaches to selectional preference acquisition. EACL.
Broschart, J. (1997). Why Tongan does it differently. Linguistic Typology 1, 123–165.
Brown, P. F., Cocke, J., Della Pietra, S. A., Della Pietra, V. J., Jelinek, F., Lafferty, J. D., Mercer, R. L., and Roossin, P. S. (1990). A statistical ap- proach to machine translation. Com- putational Linguistics 16(2), 79–85.
Brown, P. F., Della Pietra, S. A., Della Pietra, V. J., and Mercer, R. L. (1993). The mathematics of statisti- cal machine translation: Parameter es- timation. Computational Linguistics 19(2), 263–311.
Brown, T. B., Mann, B., Ryder, N., Subbiah, M., Kaplan, J., Dhariwal, P., Neelakantan, A., Shyam, P., Sastry, G., Askell, A., Agarwal, S., Herbert- Voss, A., Krueger, G., Henighan, T., Child, R., Ramesh, A., Ziegler, D. M., Wu, J., Winter, C., Hesse, C., Chen, M., Sigler, E., Litwin, M., Gray, S., Chess, B., Clark, J., Berner, C., Mc- Candlish, S., Radford, A., Sutskever, I., and Amodei, D. (2020). Language models are few-shot learners. arXiv preprint arXiv:2005.14165.
Bruce, B. C. (1975). Generation as a social action. Proceedings of TINLAP- 1 (Theoretical Issues in Natural Lan- guage Processing).
Brysbaert, M., Warriner, A. B., and Kuperman, V. (2014). Concrete- ness ratings for 40 thousand generally known english word lemmas. Behav- ior Research Methods 46(3), 904–911.
Bu, H., Du, J., Na, X., Wu, B., and Zheng, H. (2017). AISHELL-1: An open-source Mandarin speech corpus and a speech recognition baseline. O- COCOSDA Proceedings.
Buchholz, S. and Marsi, E. (2006). Conll-x shared task on multilingual dependency parsing. CoNLL.
Buck, C., Heafield, K., and Van Ooyen, B. (2014). N-gram counts and language models from the common crawl. LREC.
Budanitsky, A. and Hirst, G. (2006). Evaluating WordNet-based measures of lexical semantic relatedness. Com- putational Linguistics 32(1), 13–47.
Budzianowski, P., Wen, T.-H., Tseng, B.-H., Casanueva, I., Ultes, S., Ra- madan, O., and Gasˇic ́, M. (2018). MultiWOZ - a large-scale multi- domain wizard-of-Oz dataset for task- oriented dialogue modelling. EMNLP.
Bullinaria, J. A. and Levy, J. P. (2007). Extracting semantic repre- sentations from word co-occurrence statistics: A computational study. Be- havior research methods 39(3), 510– 526.
Bullinaria, J. A. and Levy, J. P. (2012). Extracting semantic repre- sentations from word co-occurrence statistics: stop-lists, stemming, and SVD. Behavior research methods 44(3), 890–907.
Bulyko, I., Kirchhoff, K., Ostendorf, M., and Goldberg, J. (2005). Error- sensitive response generation in a spo- ken language dialogue system. Speech Communication 45(3), 271–288.
Caliskan, A., Bryson, J. J., and Narayanan, A. (2017). Semantics derived automatically from language corpora contain human-like biases. Science 356(6334), 183–186.
Callison-Burch, C., Osborne, M., and Koehn, P. (2006). Re-evaluating the role of BLEU in machine translation research. EACL.
Canavan, A., Graff, D., and Zipperlen, G. (1997). CALLHOME American English speech LDC97S42. Linguis- tic Data Consortium.
Cardie, C. (1993). A case-based approach to knowledge acquisition for domain specific sentence analysis. AAAI.
Cardie, C. (1994). Domain-Specific Knowledge Acquisition for Con- ceptual Sentence Analysis. Ph.D. thesis, University of Massachusetts, Amherst, MA. Available as CMPSCI Technical Report 94-74.
Cardie, C. and Wagstaff, K. (1999). Noun phrase coreference as clustering. EMNLP/VLC.
Carlini, N., Tramer, F., Wallace, E., Jagielski, M., Herbert-Voss, A., Lee, K., Roberts, A., Brown, T., Song, D., Erlingsson, U., Oprea, A., and Raffel1, C. (2020). Extracting train- ing data from large language models. arXiv preprint arXiv:2012.07805.
Carlson, G. N. (1977). Reference to kinds in English. Ph.D. thesis, Univer- sity of Massachusetts, Amherst. For- ward.
Carlson, L. and Marcu, D. (2001). Dis- course tagging manual. Tech. rep. ISI- TR-545, ISI.
Carlson, L., Marcu, D., and Okurowski, M. E. (2001). Building a discourse-tagged corpus in the frame- work of rhetorical structure theory. Proceedings of SIGDIAL.
Carreras, X. and Ma`rquez, L. (2005). Introduction to the CoNLL-2005 shared task: Semantic role labeling. CoNLL.
Chafe, W. L. (1976). Givenness, contrastiveness, definiteness, subjects, topics, and point of view. Li, C. N. (Ed.), Subject and Topic, 25–55. Aca- demic Press.
Chambers, N. (2013). NavyTime: Event and time ordering from raw text. SemEval-13.
Chambers, N. and Jurafsky, D. (2010). Improving the use of pseudo-words for evaluating selectional preferences. ACL.
Chambers, N. and Jurafsky, D. (2011). Template-based information extrac- tion without the templates. ACL.
Chan, W., Jaitly, N., Le, Q., and Vinyals, O. (2016). Listen, attend and spell: A neural network for large vo- cabulary conversational speech recog- nition. ICASSP.
Chandioux, J. (1976). ME ́TE ́O: un syste`me ope ́rationnel pour la tra- duction automatique des bulletins me ́te ́orologiques destine ́s au grand public. Meta 21, 127–133.
Chang, A. X. and Manning, C. D. (2012). SUTime: A library for rec- ognizing and normalizing time expres- sions. LREC.
Chang, K.-W., Samdani, R., and Roth, D. (2013). A constrained latent vari- able model for coreference resolution. EMNLP.
Chang, K.-W., Samdani, R., Ro- zovskaya, A., Sammons, M., and Roth, D. (2012). Illinois-Coref: The UI system in the CoNLL-2012 shared task. CoNLL.
Chaplot, D. S. and Salakhutdinov, R. (2018). Knowledge-based word sense disambiguation using topic models. AAAI.
 
 Charniak, E. (1997). Statistical parsing with a context-free grammar and word statistics. AAAI.
Charniak, E., Hendrickson, C., Jacob- son, N., and Perkowitz, M. (1993). Equations for part-of-speech tagging. AAAI.
Che, W., Li, Z., Li, Y., Guo, Y., Qin, B., and Liu, T. (2009). Multilin- gual dependency-based syntactic and semantic parsing. CoNLL.
Chen, C. and Ng, V. (2013). Lin- guistically aware coreference evalua- tion metrics. Sixth International Joint Conference on Natural Language Pro- cessing.
Chen, D., Fisch, A., Weston, J., and Bordes, A. (2017). Reading wiki- pedia to answer open-domain ques- tions. ACL.
Chen, D. and Manning, C. D. (2014). A fast and accurate dependency parser using neural networks. EMNLP.
Chen, E., Snyder, B., and Barzilay, R. (2007). Incremental text structur- ing with online hierarchical ranking. EMNLP/CoNLL.
Chen, J. N. and Chang, J. S. (1998). Topical clustering of MRD senses based on information retrieval tech- niques. Computational Linguistics 24(1), 61–96.
Chen, S. F. and Goodman, J. (1998). An empirical study of smoothing tech- niques for language modeling. Tech. rep. TR-10-98, Computer Science Group, Harvard University.
Chen, S. F. and Goodman, J. (1999). An empirical study of smoothing tech- niques for language modeling. Com- puter Speech and Language 13, 359– 394.
Chen, X., Shi, Z., Qiu, X., and Huang, X. (2017). Adversarial multi-criteria learning for Chinese word segmenta- tion. ACL.
Chiang, D. (2005). A hierarchical phrase-based model for statistical ma- chine translation. ACL.
Chierchia, G. and McConnell-Ginet, S. (1991). Meaning and Grammar. MIT Press.
Chinchor, N., Hirschman, L., and Lewis, D. L. (1993). Evaluating Mes- sage Understanding systems: An anal- ysis of the third Message Understand- ing Conference. Computational Lin- guistics 19(3), 409–449.
Chiticariu, L., Danilevsky, M., Li, Y., Reiss, F., and Zhu, H. (2018). Sys- temT: Declarative text understanding for enterprise. NAACL HLT, Vol. 3.
Chiticariu, L., Li, Y., and Reiss, F. R. (2013). Rule-Based Information Ex- traction is Dead! Long Live Rule- Based Information Extraction Sys- tems!. EMNLP.
Chiu, J. P. C. and Nichols, E. (2016). Named entity recognition with bidi- rectional LSTM-CNNs. TACL 4, 357– 370.
Cho, K., van Merrie ̈nboer, B., Gul- cehre, C., Bahdanau, D., Bougares, F., Schwenk, H., and Bengio, Y. (2014). Learning phrase representations using RNN encoder–decoder for statistical machine translation. EMNLP.
Choi, J. D. and Palmer, M. (2011a). Getting the most out of transition- based dependency parsing. ACL.
Choi, J. D. and Palmer, M. (2011b). Transition-based semantic role label- ing using predicate argument cluster- ing. Proceedings of the ACL 2011 Workshop on Relational Models of Se- mantics.
Choi, J. D., Tetreault, J., and Stent, A. (2015). It depends: Dependency parser comparison using a web-based evaluation tool. ACL.
Chomsky, N. (1956). Three models for the description of language. IRE Transactions on Information Theory 2(3), 113–124.
Chomsky, N. (1956/1975). The Log- ical Structure of Linguistic Theory. Plenum.
Chomsky, N. (1957). Syntactic Struc- tures. Mouton, The Hague.
Chomsky, N. (1963). Formal proper- ties of grammars. Luce, R. D., Bush, R., and Galanter, E. (Eds.), Handbook of Mathematical Psychology, Vol. 2, 323–418. Wiley.
Chomsky, N. (1981). Lectures on Gov- ernment and Binding. Foris.
Chomsky, N. (1995). The Minimalist Program. MIT Press.
Chorowski, J., Bahdanau, D., Cho, K., and Bengio, Y. (2014). End-to-end continuous speech recognition using attention-based recurrent NN: First re- sults. NeurIPS Deep Learning and Representation Learning Workshop.
Chou, W., Lee, C.-H., and Juang, B. H. (1993). Minimum error rate train- ing based on n-best string models. ICASSP.
Christodoulopoulos, C., Goldwater, S., and Steedman, M. (2010). Two decades of unsupervised POS in- duction: How far have we come?. EMNLP.
Chu, Y.-J. and Liu, T.-H. (1965). On the shortest arborescence of a directed graph. Science Sinica 14, 1396–1400.
Chu-Carroll, J. (1998). A statistical model for discourse act recognition in dialogue interactions. Chu-Carroll, J. and Green, N. (Eds.), Applying Machine Learning to Discourse Pro- cessing. Papers from the 1998 AAAI Spring Symposium. Tech. rep. SS-98- 01. AAAI Press.
Bibliography 579
Chu-Carroll, J. and Carberry, S. (1998). Collaborative response gener- ation in planning dialogues. Computa- tional Linguistics 24(3), 355–400.
Chu-Carroll, J. and Carpenter, B. (1999). Vector-based natural language call routing. Computational Linguis- tics 25(3), 361–388.
Church, A. (1940). A formulation of a simple theory of types. Journal of Symbolic Logic 5, 56–68.
Church, K. W. (1980). On Memory Limitations in Natural Language Pro- cessing Master’s thesis, MIT. Dis- tributed by the Indiana University Lin- guistics Club.
Church, K. W. (1988). A stochastic parts program and noun phrase parser for unrestricted text. ANLP.
Church, K. W. (1989). A stochastic parts program and noun phrase parser for unrestricted text. ICASSP.
Church, K. W. (1994). Unix for Po- ets. Slides from 2nd ELSNET Sum- mer School and unpublished paper ms.
Church, K. W. and Gale, W. A. (1991). A comparison of the enhanced Good- Turing and deleted estimation meth- ods for estimating probabilities of En- glish bigrams. Computer Speech and Language 5, 19–54.
Church, K. W. and Hanks, P. (1989). Word association norms, mutual infor- mation, and lexicography. ACL.
Church, K. W. and Hanks, P. (1990). Word association norms, mutual infor- mation, and lexicography. Computa- tional Linguistics 16(1), 22–29.
Church, K. W., Hart, T., and Gao, J. (2007). Compressing trigram lan- guage models with Golomb coding. EMNLP/CoNLL.
Cialdini, R. B. (1984). Influence: The psychology of persuasion. Morrow.
Ciaramita, M. and Altun, Y. (2006). Broad-coverage sense disambiguation and information extraction with a su- persense sequence tagger. EMNLP.
Ciaramita, M. and Johnson, M. (2003). Supersense tagging of unknown nouns in WordNet. EMNLP-2003.
Cieri, C., Miller, D., and Walker, K. (2004). The Fisher corpus: A resource for the next generations of speech-to- text. LREC.
Clark, E. (1987). The principle of con- trast: A constraint on language acqui- sition. MacWhinney, B. (Ed.), Mecha- nisms of language acquisition, 1–33. LEA.
Clark, H. H. (1996). Using Language. Cambridge University Press.
Clark, H. H. and Fox Tree, J. E. (2002). Using uh and um in spon- taneous speaking. Cognition 84, 73– 111.

580 Bibliography
Clark, H. H. and Marshall, C. (1981). Definite reference and mutual knowl- edge. Joshi, A. K., Webber, B. L., and Sag, I. A. (Eds.), Elements of Dis- course Understanding, 10–63. Cam- bridge.
Clark, H. H. and Wilkes-Gibbs, D. (1986). Referring as a collaborative process. Cognition 22, 1–39.
Clark, J. and Yallop, C. (1995). An Introduction to Phonetics and Phonol- ogy (2nd Ed.). Blackwell.
Clark, J. H., Choi, E., Collins, M., Gar- rette, D., Kwiatkowski, T., Nikolaev, V., and Palomaki, J. (2020). TyDi QA: A benchmark for information- seeking question answering in typo- logically diverse languages. arXiv preprint arXiv:2003.05002.
Clark, K. and Manning, C. D. (2015). Entity-centric coreference resolution with model stacking. ACL.
Clark, K. and Manning, C. D. (2016a). Deep reinforcement learning for mention-ranking coreference models. EMNLP.
Clark, K. and Manning, C. D. (2016b). Improving coreference resolution by learning entity-level distributed repre- sentations. ACL.
Clark, P., Cowhey, I., Etzioni, O., Khot, T., Sabharwal, A., Schoenick, C., and Tafjord, O. (2018). Think you have solved question answering? Try ARC, the AI2 reasoning challenge.. arXiv preprint arXiv:1803.05457.
Clark, P., Etzioni, O., Khashabi, D., Khot, T., Mishra, B. D., Richard- son, K., Sabharwal, A., Schoenick, C., Tafjord, O., Tandon, N., Bhakthavat- salam, S., Groeneveld, D., Guerquin, M., and Schmitz, M. (2019). From ’F’ to ’A’ on the NY Regents Science Exams: An overview of the Aristo project. arXiv preprint arXiv:1909.01958.
Clark, S., Curran, J. R., and Osborne, M. (2003). Bootstrapping pos taggers using unlabelled data. CoNLL.
CMU (1993). The Carnegie Mel- lon Pronouncing Dictionary v0.1. Carnegie Mellon University.
Coccaro, N. and Jurafsky, D. (1998). Towards better integration of semantic predictors in statistical language mod- eling. ICSLP.
Cohen, M. H., Giangola, J. P., and Balogh, J. (2004). Voice User Inter- face Design. Addison-Wesley.
Cohen, P. R. and Perrault, C. R. (1979). Elements of a plan-based theory of speech acts. Cognitive Science 3(3), 177–212.
Colby, K. M., Hilf, F. D., Weber, S., and Kraemer, H. C. (1972). Turing- like indistinguishability tests for the
validation of a computer simulation of paranoid processes. Artificial Intelli- gence 3, 199–221.
Colby, K. M., Weber, S., and Hilf, F. D. (1971). Artificial paranoia. Artificial Intelligence 2(1), 1–25.
Cole, R. A., Novick, D. G., Vermeulen, P. J. E., Sutton, S., Fanty, M., Wes- sels, L. F. A., de Villiers, J. H., Schalk- wyk, J., Hansen, B., and Burnett, D. (1997). Experiments with a spoken di- alogue system for taking the US cen- sus. Speech Communication 23, 243– 260.
Coleman, J. (2005). Introducing Speech and Language Processing. Cambridge University Press.
Collins, M. (1999). Head-Driven Sta- tistical Models for Natural Language Parsing. Ph.D. thesis, University of Pennsylvania, Philadelphia.
Collins, M. (2003). Head-driven statis- tical models for natural language pars- ing. Computational Linguistics 29(4), 589–637.
Collobert, R. and Weston, J. (2007). Fast semantic extraction using a novel neural network architecture. ACL.
Collobert, R. and Weston, J. (2008). A unified architecture for natural lan- guage processing: Deep neural net- works with multitask learning. ICML.
Collobert, R., Weston, J., Bottou, L., Karlen, M., Kavukcuoglu, K., and Kuksa, P. (2011). Natural language processing (almost) from scratch. JMLR 12, 2493–2537.
Comrie, B. (1989). Language Uni- versals and Linguistic Typology (2nd Ed.). Blackwell.
Connolly, D., Burger, J. D., and Day, D. S. (1994). A machine learning ap- proach to anaphoric reference. Pro- ceedings of the International Confer- ence on New Methods in Language Processing (NeMLaP).
Cooley, J. W. and Tukey, J. W. (1965). An algorithm for the machine calcula- tion of complex Fourier series. Math- ematics of Computation 19(90), 297– 301.
Cooper, F. S., Liberman, A. M., and Borst, J. M. (1951). The interconver- sion of audible and visible patterns as a basis for research in the perception of speech. Proceedings of the National Academy of Sciences 37(5), 318–325.
Copestake, A. and Briscoe, T. (1995). Semi-productive polysemy and sense extension. Journal of Semantics 12(1), 15–68.
Cottrell, G. W. (1985). A Connection- ist Approach to Word Sense Disam- biguation. Ph.D. thesis, University of Rochester, Rochester, NY. Revised version published by Pitman, 1989.
Cover, T. M. and Thomas, J. A. (1991). Elements of Information Theory. Wi- ley.
Covington, M. (2001). A fundamen- tal algorithm for dependency parsing. Proceedings of the 39th Annual ACM Southeast Conference.
Cox, D. (1969). Analysis of Binary Data. Chapman and Hall, London.
Craven, M. and Kumlien, J. (1999). Constructing biological knowledge bases by extracting information from text sources. ISMB-99.
Crawford, K. (2017). The trouble with bias. Keynote at NeurIPS.
Croft, W. (1990). Typology and Uni- versals. Cambridge University Press.
Cruse, D. A. (2004). Meaning in Lan- guage: an Introduction to Semantics and Pragmatics. Oxford University Press. Second edition.
Cucerzan, S. (2007). Large-scale named entity disambiguation based on Wikipedia data. EMNLP/CoNLL.
Culicover, P. W. and Jackendoff, R. (2005). Simpler Syntax. Oxford Uni- versity Press.
Dagan, I., Marcus, S., and Markovitch, S. (1993). Contextual word similarity and estimation from sparse data. ACL.
Dahl, G. E., Sainath, T. N., and Hinton, G. E. (2013). Improving deep neural networks for lvcsr using rectified lin- ear units and dropout. ICASSP.
Dahl, G. E., Yu, D., Deng, L., and Acero, A. (2012). Context-dependent pre-trained deep neural networks for large-vocabulary speech recognition. IEEE Transactions on audio, speech, and language processing 20(1), 30– 42.
Danescu-Niculescu-Mizil, C. and Lee, L. (2011). Chameleons in imagined conversations: A new approach to un- derstanding coordination of linguis- tic style in dialogs. 2nd Workshop on Cognitive Modeling and Computa- tional Linguistics.
Danieli, M. and Gerbino, E. (1995). Metrics for evaluating dialogue strate- gies in a spoken language system. AAAI Spring Symposium on Empiri- cal Methods in Discourse Interpreta- tion and Generation.
Das, S. R. and Chen, M. Y. (2001). Ya- hoo! for Amazon: Sentiment parsing from small talk on the web. EFA 2001 Barcelona Meetings. http://ssrn. com/abstract=276189.
David, Jr., E. E. and Selfridge, O. G. (1962). Eyes and ears for comput- ers. Proceedings of the IRE (Institute of Radio Engineers) 50, 1093–1101.
Davidson, D. (1967). The logical form of action sentences. Rescher, N. (Ed.), The Logic of Decision and Action. University of Pittsburgh Press.
 
 Davidson, T., Bhattacharya, D., and Weber, I. (2019). Racial bias in hate speech and abusive language detection datasets. Third Workshop on Abusive Language Online.
Davies, M. (2012). Expanding hori- zons in historical linguistics with the 400-million word Corpus of Histori- cal American English. Corpora 7(2), 121–157.
Davies, M. (2015). The Wiki- pedia Corpus: 4.6 million arti- cles, 1.9 billion words. Adapted from Wikipedia. https://www. english- corpora.org/wiki/.
Davies, M. (2020). The Cor- pus of Contemporary American English (COCA): One billion words, 1990-2019. https://www. english- corpora.org/coca/.
Davis, E. (1990). Representations of Commonsense Knowledge. Morgan Kaufmann.
Davis, E., Morgenstern, L., and Or- tiz, C. L. (2017). The first Wino- grad schema challenge at IJCAI-16. AI Magazine 38(3), 97–98.
Davis, K. H., Biddulph, R., and Bal- ashek, S. (1952). Automatic recog- nition of spoken digits. JASA 24(6), 637–642.
Davis, S. and Mermelstein, P. (1980). Comparison of parametric represen- tations for monosyllabic word recog- nition in continuously spoken sen- tences. IEEE Transactions on Acous- tics, Speech, and Signal Processing 28(4), 357–366.
de Marneffe, M.-C., Dozat, T., Sil- veira, N., Haverinen, K., Ginter, F., Nivre, J., and Manning, C. D. (2014). Universal Stanford dependencies: A cross-linguistic typology. LREC.
de Marneffe, M.-C., MacCartney, B., and Manning, C. D. (2006). Gener- ating typed dependency parses from phrase structure parses. LREC.
de Marneffe, M.-C. and Manning, C. D. (2008). The Stanford typed dependencies representation. Coling 2008: Proceedings of the workshop on Cross-Framework and Cross-Domain Parser Evaluation.
de Marneffe, M.-C., Recasens, M., and Potts, C. (2015). Modeling the lifes- pan of discourse entities with applica- tion to coreference resolution. JAIR 52, 445–475.
Deerwester, S. C., Dumais, S. T., Fur- nas, G. W., Harshman, R. A., Lan- dauer, T. K., Lochbaum, K. E., and Streeter, L. (1988). Computer infor- mation retrieval using latent semantic structure: US Patent 4,839,853..
Deerwester, S. C., Dumais, S. T., Lan- dauer, T. K., Furnas, G. W., and Harsh- man, R. A. (1990). Indexing by latent
semantics analysis. JASIS 41(6), 391– 407.
DeJong, G. F. (1982). An overview of the FRUMP system. Lehnert, W. G. and Ringle, M. H. (Eds.), Strate- gies for Natural Language Processing, 149–176. LEA.
Demberg, V. (2006). Letter-to- phoneme conversion for a German text-to-speech system. Diplomarbeit Nr. 47, Universita ̈t Stuttgart.
Denes, P. (1959). The design and op- eration of the mechanical speech rec- ognizer at University College London. Journal of the British Institution of Ra- dio Engineers 19(4), 219–234. Ap- pears together with companion paper (Fry 1959).
Deng, L., Hinton, G., and Kingsbury, B. (2013). New types of deep neural net- work learning for speech recognition and related applications: An overview. ICASSP.
Deng, Y. and Byrne, W. (2005). HMM word and phrase alignment for statisti- cal machine translation. HLT-EMNLP.
Denis, P. and Baldridge, J. (2007). Joint determination of anaphoricity and coreference resolution using inte- ger programming. NAACL-HLT.
Denis, P. and Baldridge, J. (2008). Spe- cialized models and ranking for coref- erence resolution. EMNLP.
Denis, P. and Baldridge, J. (2009). Global joint models for coreference resolution and named entity classifica- tion. Procesamiento del Lenguaje Nat- ural 42.
DeRose, S. J. (1988). Grammatical cat- egory disambiguation by statistical op- timization. Computational Linguistics 14, 31–39.
Devlin, J., Chang, M.-W., Lee, K., and Toutanova, K. (2019). BERT: Pre- training of deep bidirectional trans- formers for language understanding. NAACL HLT.
Di Eugenio, B. (1990). Centering the- ory and the Italian pronominal system. COLING.
Di Eugenio, B. (1996). The discourse functions of Italian subjects: A center- ing approach. COLING.
Diab, M. and Resnik, P. (2002). An un- supervised method for word sense tag- ging using parallel corpora. ACL.
Digman, J. M. (1990). Personality structure: Emergence of the five-factor model. Annual Review of Psychology 41(1), 417–440.
Dinan, E., Fan, A., Williams, A., Ur- banek, J., Kiela, D., and Weston, J. (2020). Queens are powerful too: Mit- igating gender bias in dialogue gener- ation. EMNLP.
Bibliography 581
Dinan, E., Roller, S., Shuster, K., Fan, A., Auli, M., and Weston, J. (2019). Wizard of Wikipedia: Knowledge- powered conversational agents. ICLR.
Ditman, T. and Kuperberg, G. R. (2010). Building coherence: A frame- work for exploring the breakdown of links across clause boundaries in schizophrenia. Journal of neurolin- guistics 23(3), 254–269.
Dixon, L., Li, J., Sorensen, J., Thain, N., and Vasserman, L. (2018). Mea- suring and mitigating unintended bias in text classification. 2018 AAAI/ACM Conference on AI, Ethics, and Society.
Dixon, N. and Maxey, H. (1968). Ter- minal analog synthesis of continuous speech using the diphone method of segment assembly. IEEE Transactions on Audio and Electroacoustics 16(1), 40–50.
Do, Q. N. T., Bethard, S., and Moens, M.-F. (2017). Improving implicit se- mantic role labeling by predicting se- mantic frame arguments. IJCNLP.
Doddington, G. (2002). Automatic evaluation of machine translation quality using n-gram co-occurrence statistics. HLT.
Dolan, B. (1994). Word sense ambigua- tion: Clustering related senses. COL- ING.
Dostert, L. (1955). The Georgetown- I.B.M. experiment. Machine Transla- tion of Languages: Fourteen Essays, 124–135. MIT Press.
Dowty, D. R. (1979). Word Meaning and Montague Grammar. D. Reidel.
Dowty, D. R., Wall, R. E., and Peters, S. (1981). Introduction to Montague Semantics. D. Reidel.
Dozat, T., Qi, P., and Manning, C. D. (2017). Stanford’s graph-based neu- ral dependency parser at the CoNLL 2017 shared task. Proceedings of the CoNLL 2017 Shared Task.
Dror, R., Baumer, G., Bogomolov, M., and Reichart, R. (2017). Replicability analysis for natural language process- ing: Testing significance with multiple datasets. TACL 5, 471––486.
Dror, R., Peled-Cohen, L., Shlomov, S., and Reichart, R. (2020). Statis- tical Significance Testing for Natural Language Processing, Vol. 45 of Syn- thesis Lectures on Human Language Technologies. Morgan & Claypool.
Dryer, M. S. and Haspelmath, M. (Eds.). (2013). The World Atlas of Language Structures Online. Max Planck Institute for Evolutionary An- thropology, Leipzig. Available online at http://wals.info.
Du Bois, J. W., Chafe, W. L., Meyer, C., Thompson, S. A., Englebretson,

582 Bibliography
R., and Martey, N. (2005). Santa Bar- bara corpus of spoken American En- glish, Parts 1-4. Philadelphia: Linguis- tic Data Consortium.
Dua, D., Wang, Y., Dasigi, P., Stanovsky, G., Singh, S., and Gardner, M. (2019). DROP: A reading compre- hension benchmark requiring discrete reasoning over paragraphs. NAACL HLT.
Duda, R. O. and Hart, P. E. (1973). Pat- tern Classification and Scene Analy- sis. John Wiley and Sons.
Durrett, G. and Klein, D. (2013). Easy victories and uphill battles in corefer- ence resolution. EMNLP.
Durrett, G. and Klein, D. (2014). A joint model for entity analysis: Coref- erence, typing, and linking. TACL 2, 477–490.
Earley, J. (1968). An Efficient Context- Free Parsing Algorithm. Ph.D. the- sis, Carnegie Mellon University, Pitts- burgh, PA.
Earley, J. (1970). An efficient context- free parsing algorithm. CACM 6(8), 451–455.
Ebden, P. and Sproat, R. (2015). The Kestrel TTS text normalization sys- tem. Natural Language Engineering 21(3), 333.
Edmonds, J. (1967). Optimum branch- ings. Journal of Research of the Na- tional Bureau of Standards B 71(4), 233–240.
Edunov, S., Ott, M., Auli, M., and Grangier, D. (2018). Understanding back-translation at scale. EMNLP.
Efron, B. and Tibshirani, R. J. (1993). An introduction to the bootstrap. CRC press.
Egghe, L. (2007). Untangling Her- dan’s law and Heaps’ law: Mathemati- cal and informetric arguments. JASIST 58(5), 702–709.
Eisner, J. (1996). Three new proba- bilistic models for dependency pars- ing: An exploration. COLING.
Ejerhed, E. I. (1988). Finding clauses in unrestricted text by finitary and stochastic methods. ANLP.
Ekman, P. (1999). Basic emotions. Dalgleish, T. and Power, M. J. (Eds.), Handbook of Cognition and Emotion, 45–60. Wiley.
Elman, J. L. (1990). Finding structure in time. Cognitive science 14(2), 179– 211.
Elsner, M., Austerweil, J., and Char- niak, E. (2007). A unified local and global model for discourse coherence. NAACL-HLT.
Elsner, M. and Charniak, E. (2008). Coreference-inspired coherence mod- eling. ACL.
Elsner, M. and Charniak, E. (2011). Extending the entity grid with entity- specific features. ACL.
Elveva ̊g, B., Foltz, P. W., Wein- berger, D. R., and Goldberg, T. E. (2007). Quantifying incoherence in speech: an automated methodology and novel application to schizophre- nia. Schizophrenia research 93(1-3), 304–316.
Emami, A., Trichelair, P., Trischler, A., Suleman, K., Schulz, H., and Cheung, J. C. K. (2019). The KNOWREF coref- erence corpus: Removing gender and number cues for difficult pronominal anaphora resolution. ACL.
Erk, K. (2007). A simple, similarity- based model for selectional prefer- ences. ACL.
Ethayarajh, K., Duvenaud, D., and Hirst, G. (2019a). Towards under- standing linear word analogies. ACL.
Ethayarajh, K., Duvenaud, D., and Hirst, G. (2019b). Understanding undesirable word embedding associa- tions. ACL.
Etzioni, O., Cafarella, M., Downey, D., Popescu, A.-M., Shaked, T., Soder- land, S., Weld, D. S., and Yates, A. (2005). Unsupervised named-entity extraction from the web: An exper- imental study. Artificial Intelligence 165(1), 91–134.
Evans, N. (2000). Word classes in the world’s languages. Booij, G., Lehmann, C., and Mugdan, J. (Eds.), Morphology: A Handbook on Inflec- tion and Word Formation, 708–732. Mouton.
Fader, A., Soderland, S., and Etzioni, O. (2011). Identifying relations for open information extraction. EMNLP.
Fano, R. M. (1961). Transmission of Information: A Statistical Theory of Communications. MIT Press.
Fant, G. M. (1951). Speech communi- cation research. Ing. Vetenskaps Akad. Stockholm, Sweden 24, 331–337.
Fant, G. M. (1960). Acoustic Theory of Speech Production. Mouton.
Fant, G. M. (1986). Glottal flow: Mod- els and interaction. Journal of Phonet- ics 14, 393–399.
Fant, G. M. (2004). Speech Acoustics and Phonetics. Kluwer.
Faruqui, M., Dodge, J., Jauhar, S. K., Dyer, C., Hovy, E., and Smith, N. A. (2015). Retrofitting word vectors to semantic lexicons. NAACL HLT.
Fast, E., Chen, B., and Bernstein, M. S. (2016). Empath: Understanding Topic Signals in Large-Scale Text. CHI.
Fauconnier, G. and Turner, M. (2008). The way we think: Conceptual blend- ing and the mind’s hidden complexi- ties. Basic Books.
Fazel-Zarandi, M., Li, S.-W., Cao, J., Casale, J., Henderson, P., Whitney, D., and Geramifard, A. (2017). Learn- ing robust dialog policies in noisy en- vironments. Conversational AI Work- shop (NIPS).
Feldman, J. A. and Ballard, D. H. (1982). Connectionist models and their properties. Cognitive Science 6, 205–254.
Fellbaum, C. (Ed.). (1998). WordNet: An Electronic Lexical Database. MIT Press.
Feng, V. W. and Hirst, G. (2011). Clas- sifying arguments by scheme. ACL.
Feng, V. W. and Hirst, G. (2014). A linear-time bottom-up discourse parser with constraints and post- editing. ACL.
Feng, V. W., Lin, Z., and Hirst, G. (2014). The impact of deep hierarchi- cal discourse structures in the evalua- tion of text coherence. COLING.
Fensel, D., Hendler, J. A., Lieberman, H., and Wahlster, W. (Eds.). (2003). Spinning the Semantic Web: Bring the World Wide Web to its Full Potential. MIT Press, Cambridge, MA.
Fernandes, E. R., dos Santos, C. N., and Milidiu ́, R. L. (2012). Latent structure perceptron with feature in- duction for unrestricted coreference resolution. CoNLL.
Ferragina, P. and Scaiella, U. (2011). Fast and accurate annotation of short texts with wikipedia pages. IEEE Soft- ware 29(1), 70–75.
Ferro, L., Gerber, L., Mani, I., Sund- heim, B., and Wilson, G. (2005). Tides 2005 standard for the annotation of temporal expressions. Tech. rep., MITRE.
Ferrucci, D. A. (2012). Introduction to “This is Watson”. IBM Journal of Re- search and Development 56(3/4), 1:1– 1:15.
Fessler, L. (2017). We tested bots like Siri and Alexa to see who would stand up to sexual harassment. Quartz. Feb 22, 2017. https://qz.com/ 911681/.
Field, A. and Tsvetkov, Y. (2019). Entity-centric contextual affective analysis. ACL.
Fikes, R. E. and Nilsson, N. J. (1971). STRIPS: A new approach to the appli- cation of theorem proving to problem solving. Artificial Intelligence 2, 189– 208.
Fillmore, C. J. (1966). A proposal concerning English prepositions. Din- neen, F. P. (Ed.), 17th annual Round Table, Vol. 17 of Monograph Series on Language and Linguistics, 19–34. Georgetown University Press.
 
 Fillmore, C. J. (1968). The case for case. Bach, E. W. and Harms, R. T. (Eds.), Universals in Linguistic The- ory, 1–88. Holt, Rinehart & Winston.
Fillmore, C. J. (1985). Frames and the semantics of understanding. Quaderni di Semantica VI(2), 222–254.
Fillmore, C. J. (2003). Valency and
Foland, Jr., W. R. and Martin, J. H. (2015). Dependency-based semantic role labeling using convolutional neu- ral networks. *SEM 2015.
Foltz, P. W., Kintsch, W., and Landauer, T. K. (1998). The measurement of textual coherence with latent semantic analysis. Discourse processes 25(2-3), 285–307.
Bibliography 583
218. Appears together with compan-
ion paper (Denes 1959).
Furnas, G. W., Landauer, T. K.,
Gomez, L. M., and Dumais, S. T. (1987). The vocabulary problem in human-system communication. Com- munications of the ACM 30(11), 964– 971.
semantic roles: the concept of deep structurecase.A ́gel,V.,Eichinger,∀,Nekoto,W.,Marivate,V.,Mat-andTarjan,R.E.(1986).Efficiental-
L. M., Eroms, H. W., Hellwig, P., Heringer, H. J., and Lobin, H. (Eds.), Dependenz und Valenz: Ein internationales Handbuch der zeit- geno ̈ssischen Forschung, chap. 36, 457–475. Walter de Gruyter.
Fillmore, C. J. (2012). Encounters with language. Computational Linguistics 38(4), 701–718.
Fillmore, C. J. and Baker, C. F. (2009). A frames approach to semantic analy- sis. Heine, B. and Narrog, H. (Eds.), The Oxford Handbook of Linguistic Analysis, 313–340. Oxford University Press.
Fillmore, C. J., Johnson, C. R., and Petruck, M. R. L. (2003). Background to FrameNet. International journal of lexicography 16(3), 235–250.
Finkelstein, L., Gabrilovich, E., Ma- tias, Y., Rivlin, E., Solan, Z., Wolf- man, G., and Ruppin, E. (2002). Plac- ing search in context: The concept re- visited. ACM Transactions on Infor- mation Systems 20(1), 116—-131.
Finlayson, M. A. (2016). Inferring Propp’s functions from semantically annotated text. The Journal of Ameri- can Folklore 129(511), 55–77.
Firth, J. R. (1935). The technique of semantics. Transactions of the philo- logical society 34(1), 36–73.
Firth, J. R. (1957). A synopsis of lin- guistic theory 1930–1955. Studies in Linguistic Analysis. Philological Soci- ety. Reprinted in Palmer, F. (ed.) 1968. Selected Papers of J. R. Firth. Long- man, Harlow.
Fitt, S. (2002). Unisyn lexicon. http://www.cstr.ed.ac.uk/ projects/unisyn/.
Flanagan, J. L. (1972). Speech Analysis, Synthesis, and Perception. Springer.
Flanagan, J. L., Ishizaka, K., and Ship- ley, K. L. (1975). Synthesis of speech from a dynamic model of the vocal cords and vocal tract. The Bell System Technical Journal 54(3), 485–506.
Foland, W. and Martin, J. H. (2016). CU-NLP at semeval-2016 task 8: AMR parsing using lstm-based recur- rent neural networks. Proceedings of the 10th International Workshop on Semantic Evaluation.
sila, T., Fasubaa, T., Kolawole, T., Fagbohungbe, T., Akinola, S. O., Muhammad, S. H., Kabongo, S., Osei, S., Freshia, S., Niyongabo, R. A., Ogayo, R. M. P., Ahia, O., Meressa, M., Adeyemi, M., Mokgesi-Selinga, M., Okegbemi, L., Martinus, L. J., Tajudeen, K., Degila, K., Ogueji, K., Siminyu, K., Kreutzer, J., Webster, J., Ali, J. T., Orife, J. A. I., Ezeani, I., Dangana, I. A., Kamper, H., Elsahar, H., Duru, G., Kioko, G., Murhabazi, E., van Biljon, E., Whitenack, D., Onyefuluchi, C., Emezue, C., Dos- sou, B., Sibanda, B., Bassey, ̈ B. I., Olabiyi, A., Ramkilowan, A., Oktem, A., Akinfaderin, A., and Bashir, A. (2020). Participatory research for low- resourced machine translation: A case study in african languages. Findings of EMNLP.
Forchini, P. (2013). Using movie corpora to explore spoken Ameri- can English: Evidence from multi- dimensional analysis. Bamford, J., Cavalieri, S., and Diani, G. (Eds.), Variation and Change in Spoken and Written Discourse: Perspectives from corpus linguistics, 123–136. Ben- jamins.
Fox, B. A. (1993). Discourse Structure and Anaphora: Written and Conversa- tional English. Cambridge.
Francis, W. N. and Kucˇera, H. (1982). Frequency Analysis of English Usage. Houghton Mifflin, Boston.
Franz, A. and Brants, T. (2006). All our n-gram are belong to you. http://googleresearch. blogspot.com/2006/08/
gorithms for finding minimum span- ning trees in undirected and directed graphs. Combinatorica 6(2), 109–122.
Gaddy, D., Stern, M., and Klein, D. (2018). What’s going on in neural con- stituency parsers? an analysis. NAACL HLT.
Gale, W. A. and Church, K. W. (1994). What is wrong with adding one?. Oostdijk, N. and de Haan, P. (Eds.), Corpus-Based Research into Language, 189–198. Rodopi.
Gale, W. A. and Church, K. W. (1991). A program for aligning sentences in bilingual corpora. ACL.
Gale, W. A. and Church, K. W. (1993). A program for aligning sentences in bilingual corpora. Computational Lin- guistics 19, 75–102.
Gale, W. A., Church, K. W., and Yarowsky, D. (1992a). Estimating up- per and lower bounds on the perfor- mance of word-sense disambiguation programs. ACL.
Gale, W. A., Church, K. W., and Yarowsky, D. (1992b). One sense per discourse. Proceedings DARPA Speech and Natural Language Work- shop.
Gale, W. A., Church, K. W., and Yarowsky, D. (1992c). Work on sta- tistical methods for word sense disam- biguation. Goldman, R. (Ed.), AAAI Fall Symposium on Probabilistic Ap- proaches to Natural Language.
Gao, S., Sethi, A., Aggarwal, S., Chung, T., and Hakkani-Tu ̈r, D. (2019). Dialog state tracking: A neu- ral reading comprehension approach.
arXiv preprint arXiv:1908.01946.
all- our- n- gram- are- belong- to- you.
html.
Fraser, N. M. and Gilbert, G. N. (1991). Simulating speech systems. Computer Speech and Language 5, 81–99.
Friedman, B., Hendry, D. G., and Borning, A. (2017). A survey of value sensitive design methods. Foundations and Trends in Human-Computer Inter- action 11(2), 63–125.
Fry, D. B. (1955). Duration and inten- sity as physical correlates of linguistic stress. JASA 27, 765–768.
Fry, D. B. (1959). Theoretical as- pects of mechanical speech recogni- tion. Journal of the British Institu- tion of Radio Engineers 19(4), 211–
Garg, N., Schiebinger, L., Jurafsky, D., and Zou, J. (2018). Word embed- dings quantify 100 years of gender and ethnic stereotypes. Proceedings of the National Academy of Sciences 115(16), E3635–E3644.
Garside, R. (1987). The CLAWS word- tagging system. Garside, R., Leech, G., and Sampson, G. (Eds.), The Com- putational Analysis of English, 30–41. Longman.
Garside, R., Leech, G., and McEnery, A. (1997). Corpus Annotation. Long- man.
Gazdar, G., Klein, E., Pullum, G. K., and Sag, I. A. (1985). Generalized Phrase Structure Grammar. Black- well.
Gabow, H. N., Galil, Z., Spencer, T.,

584 Bibliography
Gebru, T., Morgenstern, J., Vecchione, B., Vaughan, J. W., Wallach, H., Daume ́ III, H., and Crawford, K. (2020). Datasheets for datasets. arXiv preprint arXiv:1803.09010.
Gehman, S., Gururangan, S., Sap, M., Choi, Y., and Smith, N. A. (2020). Re- alToxicityPrompts: Evaluating neural toxic degeneration in language mod- els. Findings of EMNLP.
Gerber, M. and Chai, J. Y. (2010). Be- yond nombank: A study of implicit ar- guments for nominal predicates. ACL.
Gil, D. (2000). Syntactic categories, cross-linguistic variation and universal grammar. Vogel, P. M. and Comrie, B. (Eds.), Approaches to the Typology of Word Classes, 173–216. Mouton.
Gildea, D. and Jurafsky, D. (2000). Automatic labeling of semantic roles. ACL.
Gildea, D. and Jurafsky, D. (2002). Automatic labeling of semantic roles. Computational Linguistics 28(3), 245–288.
Gildea, D. and Palmer, M. (2002). The necessity of syntactic parsing for pred- icate argument recognition. ACL.
Giles, C. L., Kuhn, G. M., and Williams, R. J. (1994). Dynamic re- current neural networks: Theory and applications. IEEE Trans. Neural Netw. Learning Syst. 5(2), 153–156.
Gillick, L. and Cox, S. J. (1989). Some statistical issues in the compar- ison of speech recognition algorithms. ICASSP.
Ginzburg, J. and Sag, I. A. (2000). In- terrogative Investigations: the Form, Meaning and Use of English Interrog- atives. CSLI.
Girard, G. (1718). La justesse de la langue franc ̧oise: ou les diffe ́rentes significations des mots qui passent pour synonimes. Laurent d’Houry, Paris.
Giuliano, V. E. (1965). The interpre- tation of word associations. Stevens, M. E., Giuliano, V. E., and Heil- prin, L. B. (Eds.), Statistical As- sociation Methods For Mechanized Documentation. Symposium Pro- ceedings. Washington, D.C., USA, March 17, 1964. https://nvlpubs. nist.gov/nistpubs/Legacy/MP/ nbsmiscellaneouspub269.pdf.
Gladkova, A., Drozd, A., and Mat- suoka, S. (2016). Analogy-based de- tection of morphological and semantic relations with word embeddings: what works and what doesn’t. NAACL Stu- dent Research Workshop.
Glenberg, A. M. and Robertson, D. A. (2000). Symbol grounding and meaning: A comparison of high- dimensional and embodied theories of meaning. Journal of memory and lan- guage 43(3), 379–401.
Glennie, A. (1960). On the syntax ma- chine and the construction of a univer- sal compiler. Tech. rep. No. 2, Contr. NR 049-141, Carnegie Mellon Univer- sity (at the time Carnegie Institute of Technology), Pittsburgh, PA.
Godfrey, J., Holliman, E., and Mc- Daniel, J. (1992). SWITCHBOARD: Telephone speech corpus for research and development. ICASSP.
Goffman, E. (1974). Frame analysis: An essay on the organization of expe- rience. Harvard University Press.
Goldberg, J., Ostendorf, M., and Kirchhoff, K. (2003). The impact of response wording in error correction subdialogs. ISCA Tutorial and Re- search Workshop on Error Handling in Spoken Dialogue Systems.
Goldberg, Y. (2017). Neural Net- work Methods for Natural Language Processing, Vol. 10 of Synthesis Lec- tures on Human Language Technolo- gies. Morgan & Claypool.
Gonen, H. and Goldberg, Y. (2019). Lipstick on a pig: Debiasing methods cover up systematic gender biases in word embeddings but do not remove them. NAACL HLT.
Good, M. D., Whiteside, J. A., Wixon, D. R., and Jones, S. J. (1984). Build- ing a user-derived interface. CACM 27(10), 1032–1043.
Goodfellow, I., Bengio, Y., and Courville, A. (2016). Deep Learning. MIT Press.
Goodman, J. (2006). A bit of progress in language modeling: Extended ver- sion. Tech. rep. MSR-TR-2001-72, Machine Learning and Applied Statis- tics Group, Microsoft Research, Red- mond, WA.
Goodwin, C. (1996). Transparent vi- sion. Ochs, E., Schegloff, E. A., and Thompson, S. A. (Eds.), Interaction and Grammar, 370–404. Cambridge University Press.
Gopalakrishnan, K., Hedayatnia, B., Chen, Q., Gottardi, A., Kwatra, S., Venkatesh, A., Gabriel, R., and Hakkani-Tu ̈r, D. (2019). Topical-chat: Towards knowledge-grounded open- domain conversations..
Gould, J. D., Conti, J., and Hovanyecz, T. (1983). Composing letters with a simulated listening typewriter. CACM 26(4), 295–308.
Gould, J. D. and Lewis, C. (1985). Designing for usability: Key princi- ples and what designers think. CACM 28(3), 300–311.
Gravano, A., Hirschberg, J., and Benˇusˇ, Sˇ. (2012). Affirmative cue words in task-oriented dialogue. Com- putational Linguistics 38(1), 1–39.
Graves, A. (2012). Sequence transduc- tion with recurrent neural networks. ICASSP.
Graves, A., Ferna ́ndez, S., Gomez, F., and Schmidhuber, J. (2006). Con- nectionist temporal classification: La- belling unsegmented sequence data with recurrent neural networks. ICML.
Graves, A., Ferna ́ndez, S., Liwicki, M., Bunke, H., and Schmidhuber, J. (2007). Unconstrained on-line handwriting recognition with recur- rent neural networks. NeurIPS.
Graves, A. and Jaitly, N. (2014). To- wards end-to-end speech recognition with recurrent neural networks. ICML.
Graves, A., Mohamed, A.-r., and Hin- ton, G. (2013a). Speech recognition with deep recurrent neural networks. ICASSP.
Graves, A., Mohamed, A., and Hin- ton, G. E. (2013b). Speech recog- nition with deep recurrent neural net- works. IEEE International Conference on Acoustics, Speech and Signal Pro- cessing, ICASSP.
Graves, A. and Schmidhuber, J. (2005). Framewise phoneme classification with bidirectional LSTM and other neural network architectures. Neural Networks 18(5-6), 602–610.
Green, B. F., Wolf, A. K., Chomsky, C., and Laughery, K. (1961). Base- ball: An automatic question answerer. Proceedings of the Western Joint Com- puter Conference 19.
Greenberg, S., Ellis, D., and Hollen- back, J. (1996). Insights into spoken language gleaned from phonetic tran- scription of the Switchboard corpus. ICSLP.
Greene, B. B. and Rubin, G. M. (1971). Automatic grammatical tagging of En- glish. Department of Linguistics, Brown University, Providence, Rhode Island.
Greenwald, A. G., McGhee, D. E., and Schwartz, J. L. K. (1998). Measuring individual differences in implicit cog- nition: the implicit association test. Journal of personality and social psy- chology 74(6), 1464–1480.
Grenager, T. and Manning, C. D. (2006). Unsupervised Discovery of a Statistical Verb Lexicon. EMNLP.
Grice, H. P. (1975). Logic and con- versation. Cole, P. and Morgan, J. L. (Eds.), Speech Acts: Syntax and Se- mantics Volume 3, 41–58. Academic Press.
 Gould, S. J. (1980). Thumb. Penguin Group.
The Panda’s
Graff, D. (1997). The 1996 Broad- cast News speech and language-model corpus. Proceedings DARPA Speech Recognition Workshop.

 Grice, H. P. (1978). Further notes on logic and conversation. Cole, P. (Ed.), Pragmatics: Syntax and Seman- tics Volume 9, 113–127. Academic Press.
Grishman, R. and Sundheim, B. (1995). Design of the MUC-6 evalu- ation. MUC-6.
Grosz, B. J. (1977a). The represen- tation and use of focus in a system for understanding dialogs. IJCAI-77. Morgan Kaufmann.
Grosz, B. J. (1977b). The Representa- tion and Use of Focus in Dialogue Un- derstanding. Ph.D. thesis, University of California, Berkeley.
Grosz, B. J., Joshi, A. K., and We- instein, S. (1983). Providing a uni- fied account of definite noun phrases in English. ACL.
Grosz, B. J., Joshi, A. K., and Wein- stein, S. (1995). Centering: A frame- work for modeling the local coherence of discourse. Computational Linguis- tics 21(2), 203–225.
Grosz, B. J. and Sidner, C. L. (1980). Plans for discourse. Cohen, P. R., Mor- gan,J.,andPollack,M.E.(Eds.),In- tentions in Communication, 417–444. MIT Press.
Gruber, J. S. (1965). Studies in Lexical Relations. Ph.D. thesis, MIT.
Guinaudeau, C. and Strube, M. (2013). Graph-based local coherence model- ing. ACL.
Guindon, R. (1988). A multidisci- plinary perspective on dialogue struc- ture in user-advisor dialogues. Guin- don, R. (Ed.), Cognitive Science and Its Applications for Human-Computer Interaction, 163–200. Lawrence Erl- baum.
Gundel, J. K., Hedberg, N., and Zacharski, R. (1993). Cognitive status and the form of referring expressions in discourse. Language 69(2), 274– 307.
Gururangan, S., Marasovic ́, A., Swayamdipta, S., Lo, K., Beltagy, I., Downey, D., and Smith, N. A. (2020). Don’t stop pretraining: Adapt lan- guage models to domains and tasks. ACL.
Gusfield, D. (1997). Algorithms on Strings, Trees, and Sequences: Com- puter Science and Computational Bi- ology. Cambridge University Press.
Guyon, I. and Elisseeff, A. (2003). An introduction to variable and feature se- lection. JMLR 3, 1157–1182.
Habernal, I. and Gurevych, I. (2016). Which argument is more convincing? Analyzing and predicting convincing- ness of Web arguments using bidirec- tional LSTM. ACL.
Habernal, I. and Gurevych, I. (2017). Argumentation mining in user- generated web discourse. Compu- tational Linguistics 43(1), 125–179.
Haghighi, A. and Klein, D. (2009). Simple coreference resolution with rich syntactic and semantic features. EMNLP.
Hajishirzi, H., Zilles, L., Weld, D. S., and Zettlemoyer, L. (2013). Joint coreference resolution and named- entity linking with multi-pass sieves. EMNLP.
Hajicˇ , J. (1998). Building a Syn- tactically Annotated Corpus: The Prague Dependency Treebank, 106– 132. Karolinum.
Hajicˇ , J. (2000). Morphological tag- ging: Data vs. dictionaries. NAACL. Seattle.
Hajicˇ, J., Ciaramita, M., Johansson, R., Kawahara, D., Mart ́ı, M. A., Ma`rquez, L., Meyers, A., Nivre, J., Pado ́, S., Sˇteˇpa ́nek, J., Stranaˇk ́, P., Surdeanu, M., Xue, N., and Zhang, Y. (2009). The conll-2009 shared task: Syntactic and semantic dependencies in multiple languages. CoNLL.
Hakkani-Tu ̈r,D.,Oflazer,K.,andTu ̈r, G. (2002). Statistical morphological disambiguation for agglutinative lan- guages. Journal of Computers and Hu- manities 36(4), 381–410.
Halliday, M. A. K. and Hasan, R. (1976). Cohesion in English. Long- man. English Language Series, Title No. 9.
Hamilton, W. L., Clark, K., Leskovec, J., and Jurafsky, D. (2016a). Induc- ing domain-specific sentiment lexi- cons from unlabeled corpora. EMNLP.
Hamilton, W. L., Leskovec, J., and Ju- rafsky, D. (2016b). Diachronic word embeddings reveal statistical laws of semantic change. ACL.
Hancock, B., Bordes, A., Mazare ́, P.- E., and Weston, J. (2019). Learning from dialogue after deployment: Feed yourself, chatbot!. ACL.
Hannun, A. (2017). Sequence model- ing with CTC. Distill 2(11).
Hannun, A. Y., Maas, A. L., Ju- rafsky, D., and Ng, A. Y. (2014). First-pass large vocabulary contin- uous speech recognition using bi- directional recurrent DNNs. arXiv preprint arXiv:1408.2873.
Harris, C. M. (1953). A study of the building blocks in speech. JASA 25(5), 962–969.
Harris, R. A. (2005). Voice Interaction Design: Crafting the New Conversa- tional Speech Systems. Morgan Kauf- mann.
Harris, Z. S. (1946). From morpheme to utterance. Language 22(3), 161– 183.
Bibliography 585 Harris, Z. S. (1954). Distribu-
tional structure. Word 10, 146–162. Reprinted in J. Fodor and J. Katz, The Structure of Language, Prentice Hall, 1964 and in Z. S. Harris, Papers in Structural and Transformational Lin- guistics, Reidel, 1970, 775–794.
Harris, Z. S. (1962). String Analysis of Sentence Structure. Mouton, The Hague.
Hastie, T., Tibshirani, R. J., and Fried- man, J. H. (2001). The Elements of Statistical Learning. Springer.
Hatzivassiloglou, V. and McKeown, K. (1997). Predicting the semantic orien- tation of adjectives. ACL.
Hatzivassiloglou, V. and Wiebe, J. (2000). Effects of adjective orientation and gradability on sentence subjectiv- ity. COLING.
Haviland, S. E. and Clark, H. H. (1974). What’s new? Acquiring new information as a process in compre- hension. Journal of Verbal Learning and Verbal Behaviour 13, 512–521.
Hawkins, J. A. (1978). Definiteness and indefiniteness: a study in refer- ence and grammaticality prediction. CroomHelmLtd.
Hayashi, T., Yamamoto, R., Inoue, K., Yoshimura, T., Watanabe, S., Toda, T., Takeda, K., Zhang, Y., and Tan, X. (2020). ESPnet-TTS: Uni- fied, reproducible, and integratable open source end-to-end text-to-speech toolkit. ICASSP.
He, L., Lee, K., Lewis, M., and Zettle- moyer, L. (2017). Deep semantic role labeling: What works and what’s next. ACL.
Heafield, K. (2011). KenLM: Faster and smaller language model queries. Workshop on Statistical Machine Translation.
Heafield, K., Pouzyrevsky, I., Clark, J. H., and Koehn, P. (2013). Scalable modified Kneser-Ney language model estimation. ACL.
Heaps, H. S. (1978). Information re- trieval. Computational and theoretical aspects. Academic Press.
Hearst, M. A. (1991). Noun homo- graph disambiguation. Proceedings of the 7th Conference of the University of Waterloo Centre for the New OED and Text Research.
Hearst, M. A. (1992a). Automatic ac- quisition of hyponyms from large text corpora. COLING.
Hearst, M. A. (1992b). Automatic ac- quisition of hyponyms from large text corpora. COLING. COLING.
Hearst, M. A. (1997). Texttiling: Segmenting text into multi-paragraph subtopic passages. Computational Linguistics 23, 33–64.

586 Bibliography
Hearst, M. A. (1998). Automatic dis- covery of WordNet relations. Fell- baum, C. (Ed.), WordNet: An Elec- tronic Lexical Database. MIT Press.
Heckerman, D., Horvitz, E., Sahami, M., and Dumais, S. T. (1998). A bayesian approach to filtering junk e- mail. AAAI-98 Workshop on Learning for Text Categorization.
Heim, I. (1982). The semantics of definite and indefinite noun phrases. Ph.D. thesis, University of Mas- sachusetts at Amherst.
Heim, I. and Kratzer, A. (1998). Se- mantics in a Generative Grammar. Blackwell Publishers, Malden, MA.
Heinz, J. M. and Stevens, K. N. (1961). On the properties of voiceless fricative consonants. JASA 33, 589–596.
Hellrich, J., Buechel, S., and Hahn, U. (2019). Modeling word emotion in historical language: Quantity beats supposed stability in seed word selec- tion. 3rd Joint SIGHUM Workshop on Computational Linguistics for Cul- tural Heritage, Social Sciences, Hu- manities and Literature.
Hellrich, J. and Hahn, U. (2016). Bad company—Neighborhoods in neural embedding spaces considered harm- ful. COLING.
Hemphill, C. T., Godfrey, J., and Dod- dington, G. (1990). The ATIS spoken language systems pilot corpus. Pro- ceedings DARPA Speech and Natural Language Workshop.
Henderson, P., Sinha, K., Angelard- Gontier, N., Ke, N. R., Fried, G., Lowe, R., and Pineau, J. (2017). Ethi- cal challenges in data-driven dialogue systems. AAAI/ACM AI Ethics and So- ciety Conference.
Hendrickx, I., Kim, S. N., Kozareva, Z., Nakov, P., O ́ Se ́aghdha, D., Pado ́, S., Pennacchiotti, M., Romano, L., and Szpakowicz, S. (2009). Semeval- 2010 task 8: Multi-way classification of semantic relations between pairs of nominals. 5th International Workshop on Semantic Evaluation.
Hendrix, G. G., Thompson, C. W., and Slocum, J. (1973). Language process- ing via canonical verbs and semantic models. Proceedings of IJCAI-73.
Henrich, V., Hinrichs, E., and Vodola- zova, T. (2012). WebCAGe – a web- harvested corpus annotated with Ger- maNet senses. EACL.
Herdan, G. (1960). Type-token mathe- matics. Mouton.
Hermann, K. M., Kocisky, T., Grefen- stette, E., Espeholt, L., Kay, W., Su- leyman, M., and Blunsom, P. (2015a). Teaching machines to read and com- prehend. NeurIPS.
Hermann, K. M., Kocˇisky ́, T., Grefen- stette, E., Espeholt, L., Kay, W., Su- leyman, M., and Blunsom, P. (2015b). Teaching machines to read and com- prehend. Proceedings of the 28th In- ternational Conference on Neural In- formation Processing Systems - Vol- ume 1. MIT Press.
Hernault, H., Prendinger, H., duVerle, D. A., and Ishizuka, M. (2010). Hilda: A discourse parser using support vec- tor machine classification. Dialogue & Discourse 1(3).
Hidey, C., Musi, E., Hwang, A., Mure- san, S., and McKeown, K. (2017). An- alyzing the semantic types of claims and premises in an online persuasive forum. 4th Workshop on Argument Mining.
Hill, F., Reichart, R., and Korhonen, A. (2015). Simlex-999: Evaluating semantic models with (genuine) sim- ilarity estimation. Computational Lin- guistics 41(4), 665–695.
Hinkelman, E. A. and Allen, J. (1989). Two constraints on speech act ambigu- ity. ACL.
Hinton, G. E. (1986). Learning dis- tributed representations of concepts. COGSCI.
Hinton, G. E., Osindero, S., and Teh, Y.-W. (2006). A fast learning algo- rithm for deep belief nets. Neural com- putation 18(7), 1527–1554.
Hinton, G. E., Srivastava, N., Krizhevsky, A., Sutskever, I., and Salakhutdinov, R. R. (2012). Improv- ing neural networks by preventing co-adaptation of feature detectors. arXiv preprint arXiv:1207.0580.
Hirschberg, J., Litman, D. J., and Swerts, M. (2001). Identifying user corrections automatically in spoken dialogue systems. NAACL.
Hirschman, L., Light, M., Breck, E., and Burger, J. D. (1999). Deep Read: A reading comprehension sys- tem. ACL.
Hirschman, L. and Pao, C. (1993). The cost of errors in a spoken language system. EUROSPEECH.
Hirst, G. (1981). Anaphora in Natu- ral Language Understanding: A sur- vey. No. 119 in Lecture notes in com- puter science. Springer-Verlag.
Hirst, G. (1987). Semantic Interpreta- tion and the Resolution of Ambiguity. Cambridge University Press.
Hirst, G. (1988). Resolving lexical am- biguity computationally with spread- ing activation and polaroid words. Small, S. L., Cottrell, G. W., and Tanenhaus, M. K. (Eds.), Lexical Am- biguity Resolution, 73–108. Morgan Kaufmann.
Hirst, G. and Charniak, E. (1982). Word sense and case slot disambigua- tion. AAAI.
Hjelmslev, L. (1969). Prologomena to a Theory of Language. University of Wisconsin Press. Translated by Fran- cis J. Whitfield; original Danish edi- tion 1943.
Hobbs, J. R. (1978). Resolving pro- noun references. Lingua 44, 311–338.
Hobbs, J. R. (1979). Coherence and coreference. Cognitive Science 3, 67– 90.
Hobbs, J. R., Appelt, D. E., Bear, J., Israel, D., Kameyama, M., Stickel, M. E., and Tyson, M. (1997). FAS- TUS: A cascaded finite-state trans- ducer for extracting information from natural-language text. Roche, E. and Schabes, Y. (Eds.), Finite-State Lan- guage Processing, 383–406. MIT Press.
Hochreiter, S. and Schmidhuber, J. (1997). Long short-term memory. Neural Computation 9(8), 1735–1780.
Hockenmaier, J. and Steedman, M. (2007). Ccgbank: a corpus of ccg derivations and dependency struc- tures extracted from the penn tree- bank. Computational Linguistics 33(3), 355–396.
Hofmann, T. (1999). Probabilistic la- tent semantic indexing. SIGIR-99.
Hopcroft, J. E. and Ullman, J. D. (1979). Introduction to Automata Theory, Languages, and Computation. Addison-Wesley.
Hou, Y., Markert, K., and Strube, M. (2018). Unrestricted bridging resolu- tion. Computational Linguistics 44(2), 237–284.
Householder, F. W. (1995). Dionysius Thrax, the technai, and Sextus Empir- icus. Koerner, E. F. K. and Asher, R. E. (Eds.), Concise History of the Language Sciences, 99–103. Elsevier Science.
Hovy, E. H. (1990). Parsimonious and profligate approaches to the ques- tion of discourse structure relations. Proceedings of the 5th International Workshop on Natural Language Gen- eration.
Hovy, E. H., Marcus, M. P., Palmer, M., Ramshaw, L. A., and Weischedel, R. (2006). Ontonotes: The 90% solution. HLT-NAACL.
Hu, M. and Liu, B. (2004a). Mining and summarizing customer reviews. KDD.
Hu, M. and Liu, B. (2004b). Mining and summarizing customer reviews. SIGKDD-04.
Huang, E. H., Socher, R., Manning, C. D., and Ng, A. Y. (2012). Improv- ing word representations via global
 
 context and multiple word prototypes. ACL.
Huang, L. and Sagae, K. (2010). Dy- namic programming for linear-time in- cremental parsing. ACL.
Huang, Z., Xu, W., and Yu, K. (2015). Bidirectional LSTM-CRF models for sequence tagging. arXiv preprint arXiv:1508.01991.
Huddleston, R. and Pullum, G. K. (2002). The Cambridge Grammar of the English Language. Cambridge University Press.
Hudson, R. A. (1984). Word Grammar. Blackwell.
Huffman, S. (1996). Learning infor- mation extraction patterns from ex- amples. Wertmer, S., Riloff, E., and Scheller, G. (Eds.), Connectionist, Statistical, and Symbolic Approaches to Learning Natural Language Pro- cessing, 246–260. Springer.
Humeau, S., Shuster, K., Lachaux, M.- A., and Weston, J. (2020). Poly- encoders: Transformer architectures and pre-training strategies for fast and accurate multi-sentence scoring. ICLR.
Hunt, A. J. and Black, A. W. (1996). Unit selection in a concatenative speech synthesis system using a large speech database. ICASSP.
Hutchins, W. J. (1986). Machine Translation: Past, Present, Future. El- lis Horwood, Chichester, England.
Hutchins, W. J. (1997). From first conception to first demonstration: The nascent years of machine translation, 1947–1954. A chronology. Machine Translation 12, 192–252.
Hutchins, W. J. and Somers, H. L. (1992). An Introduction to Machine Translation. Academic Press.
Hutchinson, B., Prabhakaran, V., Den- ton, E., Webster, K., Zhong, Y., and Denuyl, S. (2020). Social biases in NLP models as barriers for persons with disabilities. ACL.
Hymes, D. (1974). Ways of speak- ing. Bauman, R. and Sherzer, J. (Eds.), Explorations in the ethnogra- phy of speaking, 433–451. Cambridge University Press.
Iacobacci, I., Pilehvar, M. T., and Nav- igli, R. (2016). Embeddings for word sense disambiguation: An evaluation study. ACL.
Iida, R., Inui, K., Takamura, H., and Matsumoto, Y. (2003). Incorporating contextual cues in trainable models for coreference resolution. EACL Work- shop on The Computational Treatment of Anaphora.
Irons, E. T. (1961). A syntax directed compiler for ALGOL 60. CACM 4, 51–55.
Irsoy, O. and Cardie, C. (2014). Opin- ion mining with deep recurrent neural networks. EMNLP.
Isbell, C. L., Kearns, M., Kormann, D., Singh, S., and Stone, P. (2000). Cobot in LambdaMOO: A social statistics agent. AAAI/IAAI.
ISO8601 (2004). Data elements and interchange formats—information interchange—representation of dates and times. Tech. rep., International Or- ganization for Standards (ISO).
Itakura, F. (1975). Minimum pre- diction residual principle applied to speech recognition. IEEE Transac- tions on Acoustics, Speech, and Signal Processing ASSP-32, 67–72.
Iter, D., Guu, K., Lansing, L., and Ju- rafsky, D. (2020). Pretraining with contrastive sentence objectives im- proves discourse performance of lan- guage models. ACL.
Iter, D., Yoon, J., and Jurafsky, D. (2018). Automatic detection of incoherent speech for diagnosing schizophrenia. Fifth Workshop on Computational Linguistics and Clini- cal Psychology.
Ito, K. and Johnson, L. (2017). The lj speech dataset. https://keithito. com/LJ- Speech- Dataset/.
Iyer, S., Konstas, I., Cheung, A., Kr- ishnamurthy, J., and Zettlemoyer, L. (2017). Learning a neural semantic parser from user feedback. ACL.
Jackendoff, R. (1983). Semantics and Cognition. MIT Press.
Jacobs, P. S. and Rau, L. F. (1990). SCISOR: A system for extracting in- formation from on-line news. CACM 33(11), 88–97.
Jaech, A., Mulcaire, G., Hathi, S., Os- tendorf, M., and Smith, N. A. (2016). Hierarchical character-word models for language identification. ACL Work- shop on NLP for Social Media.
Jaeger, T. F. and Levy, R. P. (2007). Speakers optimize information density through syntactic reduction. NeurIPS.
Jaitly, N., Nguyen, P., Senior, A., and Vanhoucke, V. (2012). Application of pretrained deep neural networks to large vocabulary speech recognition. INTERSPEECH.
Jauhiainen, T., Lui, M., Zampieri, M., Baldwin,T.,andLinde ́n,K.(2018). Automatic language identification in texts: A survey. arXiv preprint arXiv:1804.08186.
Jefferson, G. (1972). Side sequences. Sudnow, D. (Ed.), Studies in social in- teraction, 294–333. Free Press, New York.
Jeffreys, H. (1948). Theory of Proba- bility (2nd Ed.). Clarendon Press. Sec- tion 3.23.
Bibliography 587 Jelinek, F. (1969). A fast sequential de-
coding algorithm using a stack. IBM Journal of Research and Development 13, 675–685.
Jelinek, F. (1976). Continuous speech recognition by statistical methods. Proceedings of the IEEE 64(4), 532– 557.
Jelinek, F. (1990). Self-organized lan- guage modeling for speech recogni- tion. Waibel, A. and Lee, K.-F. (Eds.), Readings in Speech Recogni- tion, 450–506. Morgan Kaufmann. Originally distributed as IBM techni- cal report in 1985.
Jelinek, F. and Mercer, R. L. (1980). Interpolated estimation of Markov source parameters from sparse data. Gelsema, E. S. and Kanal, L. N. (Eds.), Proceedings, Workshop on Pat- tern Recognition in Practice, 381– 397. North Holland.
Jelinek, F., Mercer, R. L., and Bahl, L. R. (1975). Design of a linguistic statistical decoder for the recognition of continuous speech. IEEE Transac- tions on Information Theory IT-21(3), 250–256.
Ji, H. and Grishman, R. (2011). Knowl- edge base population: Successful ap- proaches and challenges. ACL.
Ji, H., Grishman, R., and Dang, H. T. (2010). Overview of the tac 2011 knowledge base population track. TAC-11.
Ji, Y. and Eisenstein, J. (2014). Rep- resentation learning for text-level dis- course parsing. ACL.
Ji, Y. and Eisenstein, J. (2015). One vector is not enough: Entity- augmented distributed semantics for discourse relations. TACL 3, 329–344.
Jia, S., Meng, T., Zhao, J., and Chang, K.-W. (2020). Mitigating gender bias amplification in distribution by poste- rior regularization. ACL.
Jiang, K., Wu, D., and Jiang, H. (2019). FreebaseQA: A new fac- toid QA data set matching trivia-style question-answer pairs with Freebase. NAACL HLT.
Johnson, J., Douze, M., and Je ́gou, H. (2017). Billion-scale similarity search with GPUs. arXiv preprint arXiv:1702.08734.
Johnson, K. (2003). Acoustic and Au- ditory Phonetics (2nd Ed.). Blackwell.
Johnson, W. E. (1932). Probability: deductive and inductive problems (ap- pendix to). Mind 41(164), 421–423.
Johnson-Laird, P. N. (1983). Men- tal Models. Harvard University Press, Cambridge, MA.
Jones, M. P. and Martin, J. H. (1997). Contextual spelling correction using latent semantic analysis. ANLP.

588 Bibliography
Jones, R., McCallum, A., Nigam, K., and Riloff, E. (1999). Bootstrapping for text learning tasks. IJCAI-99 Work- shop on Text Mining: Foundations, Techniques and Applications.
Jones, T. (2015). Toward a descrip- tion of African American Vernacular English dialect regions using “Black Twitter”. American Speech 90(4), 403–440.
Joos, M. (1950). Description of lan- guage design. JASA 22, 701–708.
Jordan, M. (1986). Serial order: A par- allel distributed processing approach. Tech. rep. ICS Report 8604, Univer- sity of California, San Diego.
Joshi, A. K. (1985). Tree adjoin- ing grammars: How much context- sensitivity is required to provide reasonable structural descriptions?. Dowty, D. R., Karttunen, L., and Zwicky, A. (Eds.), Natural Language Parsing, 206–250. Cambridge Uni- versity Press.
Joshi, A. K. and Hopely, P. (1999). A parser from antiquity. Kornai, A. (Ed.), Extended Finite State Models of Language, 6–15. Cambridge Univer- sity Press.
Joshi, A. K. and Kuhn, S. (1979). Cen- tered logic: The role of entity centered sentence representation in natural lan- guage inferencing. IJCAI-79.
Joshi, A. K. and Weinstein, S. (1981). Control of inference: Role of some as- pects of discourse structure – center- ing. IJCAI-81.
Joshi, M., Chen, D., Liu, Y., Weld, D. S., Zettlemoyer, L., and Levy, O. (2020). SpanBERT: Improving pre- training by representing and predict- ing spans. TACL 8, 64–77.
Joshi, M., Choi, E., Weld, D. S., and Zettlemoyer, L. (2017). Triviaqa: A large scale distantly supervised chal- lenge dataset for reading comprehen- sion. ACL.
Joshi, M., Levy, O., Weld, D. S., and Zettlemoyer, L. (2019). BERT for coreference resolution: Baselines and analysis. EMNLP.
Joty, S., Carenini, G., and Ng, R. T. (2015). CODRA: A novel discrimi- native framework for rhetorical analy- sis. Computational Linguistics 41(3), 385–435.
Jurafsky, D. (2014). The Language of Food. W. W. Norton, New York.
Jurafsky, D., Chahuneau, V., Rout- ledge, B. R., and Smith, N. A. (2014). Narrative framing of consumer sen- timent in online restaurant reviews. First Monday 19(4).
Jurafsky, D., Wooters, C., Tajchman, G., Segal, J., Stolcke, A., Fosler, E., and Morgan, N. (1994). The Berkeley restaurant project. ICSLP.
Jurgens, D. and Klapaftis, I. P. (2013). Semeval-2013 task 13: Word sense induction for graded and non-graded senses. *SEM.
Jurgens, D., Mohammad, S. M., Tur- ney, P., and Holyoak, K. (2012). SemEval-2012 task 2: Measuring de- grees of relational similarity. *SEM 2012.
Jurgens, D., Tsvetkov, Y., and Juraf- sky, D. (2017). Incorporating dialectal variability for socially equitable lan- guage identification. ACL.
Justeson, J. S. and Katz, S. M. (1991). Co-occurrences of antonymous adjec- tives and their contexts. Computa- tional linguistics 17(1), 1–19.
Kalchbrenner, N. and Blunsom, P. (2013). Recurrent continuous transla- tion models. EMNLP.
Kameyama, M. (1986). A property- sharing constraint in centering. ACL.
Kamp, H. (1981). A theory of truth and semantic representation. Groenendijk, J., Janssen, T., and Stokhof, M. (Eds.), Formal Methods in the Study of Lan- guage, 189–222. Mathematical Cen- tre, Amsterdam.
Kamphuis, C., de Vries, A. P., Boytsov, L., and Lin, J. (2020). Which bm25 do you mean? a large-scale re- producibility study of scoring variants. European Conference on Information Retrieval.
Kane, S. K., Morris, M. R., Paradiso, A., and Campbell, J. (2017). “at times avuncular and cantankerous, with the reflexes of a mongoose”: Understand- ing self-expression through augmen- tative and alternative communication devices. CSCW 2017.
Kannan, A. and Vinyals, O. (2016). Adversarial evaluation of dialogue models. NIPS 2016 Workshop on Ad- versarial Training.
Kaplan, R. M. (1973). A general syn- tactic processor. Rustin, R. (Ed.), Nat- ural Language Processing, 193–241. Algorithmics Press.
Karamanis, N., Poesio, M., Mellish, C., and Oberlander, J. (2004). Eval- uating centering-based metrics of co- herence for text structuring using a re- liably annotated corpus. ACL.
Karita, S., Chen, N., Hayashi, T., Hori, T., Inaguma, H., Jiang, Z., Someki, M., Soplin, N. E. Y., Yamamoto, R., Wang, X., Watanabe, S., Yoshimura, T., and Zhang, W. (2019). A compar- ative study on transformer vs RNN in speech applications. IEEE ASRU-19.
Karlsson, F., Voutilainen, A., Heikkila ̈, J., and Anttila, A. (Eds.). (1995). Constraint Grammar: A Language- Independent System for Parsing Unre- stricted Text. Mouton de Gruyter.
Karpukhin, V., Og ̆uz, B., Min, S., Lewis, P., Wu, L., Edunov, S., Chen, D., and Yih, W.-t. (2020). Dense pas- sage retrieval for open-domain ques- tion answering. EMNLP.
Karttunen, L. (1969). Discourse refer- ents. COLING. Preprint No. 70.
Karttunen, L. (1999). Comments on Joshi. Kornai, A. (Ed.), Extended Fi- nite State Models of Language, 16– 18. Cambridge University Press.
Kasami, T. (1965). An efficient recog- nition and syntax analysis algorithm for context-free languages. Tech. rep. AFCRL-65-758, Air Force Cambridge Research Laboratory, Bedford, MA.
Katz, J. J. and Fodor, J. A. (1963). The structure of a semantic theory. Lan- guage 39, 170–210.
Kawamoto, A. H. (1988). Distributed representations of ambiguous words and their resolution in connectionist networks. Small, S. L., Cottrell, G. W., and Tanenhaus, M. (Eds.), Lexical Ambiguity Resolution, 195–228. Mor- gan Kaufman.
Kay, M. (1967). Experiments with a powerful parser. Proc. 2eme Confer- ence Internationale sur le Traitement Automatique des Langues.
Kay, M. (1973). The MIND system. Rustin, R. (Ed.), Natural Language Processing, 155–188. Algorithmics Press.
Kay, M. (1982). Algorithm schemata and data structures in syntactic pro- cessing. Alle ́n, S. (Ed.), Text Process- ing: Text Analysis and Generation, Text Typology and Attribution, 327– 358. Almqvist and Wiksell, Stock- holm.
Kay, M. and Ro ̈scheisen, M. (1988). Text-translation alignment. Tech. rep. P90-00143, Xerox Palo Alto Research Center, Palo Alto, CA.
Kay, M. and Ro ̈scheisen, M. (1993). Text-translation alignment. Computa- tional Linguistics 19, 121–142.
Kay, P. and Fillmore, C. J. (1999). Grammatical constructions and lin- guistic generalizations: The What’s X Doing Y? construction. Language 75(1), 1–33.
Kehler, A. (1993). The effect of es- tablishing coherence in ellipsis and anaphora resolution. ACL.
Kehler, A. (1994). Temporal rela- tions: Reference or discourse coher- ence?. ACL.
Kehler, A. (1997a). Current theories of centering for pronoun interpretation: A critical evaluation. Computational Linguistics 23(3), 467–475.
Kehler, A. (1997b). Probabilistic coreference in information extraction. EMNLP.
 
 Kehler, A. (2000). Coherence, Ref- erence, and the Theory of Grammar. CSLI Publications.
Kehler, A., Appelt, D. E., Taylor, L., and Simma, A. (2004). The (non)utility of predicate-argument fre- quencies for pronoun interpretation. HLT-NAACL.
Kehler, A. and Rohde, H. (2013). A probabilistic reconciliation of coherence-driven and centering-driven theories of pronoun interpretation. Theoretical Linguistics 39(1-2), 1–37.
Keller, F. and Lapata, M. (2003). Us- ing the web to obtain frequencies for unseen bigrams. Computational Lin- guistics 29, 459–484.
Kelly, E. F. and Stone, P. J. (1975). Computer Recognition of English Word Senses. North-Holland.
Kendall, T. and Farrington, C. (2020). The Corpus of Regional African American Language. Version 2020.05. Eugene, OR: The Online Resources for African American Language Project. http://oraal.uoregon. edu/coraal.
Kennedy, C. and Boguraev, B. K. (1996). Anaphora for everyone: Pronominal anaphora resolution with- out a parser. COLING.
Kiela, D. and Clark, S. (2014). A systematic study of semantic vector space model parameters. EACL 2nd Workshop on Continuous Vector Space Models and their Compositionality (CVSC).
Kilgarriff, A. and Rosenzweig, J. (2000). Framework and results for En- glish SENSEVAL. Computers and the Humanities 34, 15–48.
Kim, E. (2019). Optimize com- putational efficiency of skip-gram with negative sampling. https:// aegis4048.github.io/optimize_ computational_efficiency_ of_skip- gram_with_negative_ sampling.
Kim, S. M. and Hovy, E. H. (2004). De- termining the sentiment of opinions. COLING.
King, S. (2020). From African Amer- ican Vernacular English to African American Language: Rethinking the study of race and language in African Americans’ speech. Annual Review of Linguistics 6, 285–300.
Kingma, D. and Ba, J. (2015). Adam: A method for stochastic optimization. ICLR 2015.
Kintsch, W. (1974). The Representa- tion of Meaning in Memory. Wiley, New York.
Kintsch, W. and Van Dijk, T. A. (1978). Toward a model of text comprehen- sion and production. Psychological re- view 85(5), 363–394.
Kipper, K., Dang, H. T., and Palmer, M. (2000). Class-based construction of a verb lexicon. AAAI.
Kiritchenko, S. and Mohammad, S. M. (2017). Best-worst scaling more re- liable than rating scales: A case study on sentiment intensity annota- tion. ACL.
Kiritchenko, S. and Mohammad, S. M. (2018). Examining gender and race bias in two hundred sentiment analy- sis systems. *SEM.
Kiss, T. and Strunk, J. (2006). Unsuper- vised multilingual sentence boundary detection. Computational Linguistics 32(4), 485–525.
Kitaev, N., Cao, S., and Klein, D. (2019). Multilingual constituency parsing with self-attention and pre- training. ACL.
Kitaev, N. and Klein, D. (2018). Con- stituency parsing with a self-attentive encoder. ACL.
Klatt, D. H. (1975). Voice onset time, friction, and aspiration in word-initial consonant clusters. Journal of Speech and Hearing Research 18, 686–706.
Klatt, D. H. (1977). Review of the ARPA speech understanding project. JASA 62(6), 1345–1366.
Klatt, D. H. (1982). The Klattalk text- to-speech conversion system. ICASSP.
Kleene, S. C. (1951). Representation of events in nerve nets and finite au- tomata. Tech. rep. RM-704, RAND Corporation. RAND Research Mem- orandum.
Kleene, S. C. (1956). Representation of events in nerve nets and finite au- tomata. Shannon, C. and McCarthy, J. (Eds.), Automata Studies, 3–41. Princeton University Press.
Klein, D. and Manning, C. D. (2003). A* parsing: Fast exact Viterbi parse selection. HLT-NAACL.
Klein, S. and Simmons, R. F. (1963). A computational approach to grammati- cal coding of English words. Journal of the ACM 10(3), 334–347.
Kneser, R. and Ney, H. (1995). Im- proved backing-off for M-gram lan- guage modeling. ICASSP, Vol. 1.
Knott, A. and Dale, R. (1994). Using linguistic phenomena to motivate a set of coherence relations. Discourse Pro- cesses 18(1), 35–62.
Kocijan, V., Cretu, A.-M., Cam- buru, O.-M., Yordanov, Y., and Lukasiewicz, T. (2019). A surprisingly robust trick for the Winograd Schema Challenge. ACL.
Koehn, P. (2005). Europarl: A parallel corpus for statistical machine transla- tion. MT summit, vol. 5.
Bibliography 589
Koehn, P., Hoang, H., Birch, A., Callison-Burch, C., Federico, M., Bertoldi, N., Cowan, B., Shen, W., Moran, C., Zens, R., Dyer, C., Bo- jar, O., Constantin, A., and Herbst, E. (2006). Moses: Open source toolkit for statistical machine transla- tion. ACL.
Koehn, P., Och, F. J., and Marcu, D. (2003). Statistical phrase-based trans- lation. HLT-NAACL.
Koenig, W., Dunn, H. K., and Lacy, L. Y. (1946). The sound spectrograph. JASA 18, 19–49.
Kolhatkar, V., Roussel, A., Dipper, S., and Zinsmeister, H. (2018). Anaphora with non-nominal antecedents in com- putational linguistics: A survey. Com- putational Linguistics 44(3), 547–612.
Krovetz, R. (1993). Viewing morphol- ogy as an inference process. SIGIR-93.
Kruskal, J. B. (1983). An overview of sequence comparison. Sankoff, D. and Kruskal, J. B. (Eds.), Time Warps, String Edits, and Macromolecules: The Theory and Practice of Sequence Comparison, 1–44. Addison-Wesley.
Kudo, T. (2018). Subword regulariza- tion: Improving neural network trans- lation models with multiple subword candidates. ACL.
Kudo, T. and Matsumoto, Y. (2002). Japanese dependency analysis using cascaded chunking. CoNLL.
Kudo, T. and Richardson, J. (2018). SentencePiece: A simple and lan- guage independent subword tokenizer and detokenizer for neural text pro- cessing. EMNLP.
Kullback, S. and Leibler, R. A. (1951). On information and sufficiency. An- nals of Mathematical Statistics 22, 79–86.
Kumar, S., Jat, S., Saxena, K., and Talukdar, P. (2019). Zero-shot word sense disambiguation using sense def- inition embeddings. ACL.
Kummerfeld, J. K. and Klein, D. (2013). Error-driven analysis of challenges in coreference resolution. EMNLP.
Kuno, S. (1965). The predictive ana- lyzer and a path elimination technique. CACM 8(7), 453–462.
Kuno, S. and Oettinger, A. G. (1963). Multiple-path syntactic analyzer. Pop- plewell, C. M. (Ed.), Information Pro- cessing 1962: Proceedings of the IFIP Congress 1962. North-Holland.
Kupiec, J. (1992). Robust part-of- speech tagging using a hidden Markov model. Computer Speech and Lan- guage 6, 225–242.
Kurita, K., Vyas, N., Pareek, A., Black, A. W., and Tsvetkov, Y. (2019). Quantifying social biases in contextual

590 Bibliography
word representations. 1st ACL Work-
shop on Gender Bias for Natural Lan- guage Processing.
Kucˇera, H. and Francis, W. N. (1967). Computational Analysis of Present- Day American English. Brown Uni- versity Press, Providence, RI.
Kwiatkowski, T., Palomaki, J., Red- field, O., Collins, M., Parikh, A., Al- berti, C., Epstein, D., Polosukhin, I., Devlin, J., Lee, K., Toutanova, K., Jones, L., Kelcey, M., Chang, M.-W., Dai, A. M., Uszkoreit, J., Le, Q., and Petrov, S. (2019). Natural questions: A benchmark for question answering research. TACL 7, 452–466.
Ladefoged, P. (1993). A Course in Pho- netics. Harcourt Brace Jovanovich. (3rd ed.).
Ladefoged, P. (1996). Elements of Acoustic Phonetics (2nd Ed.). Univer- sity of Chicago.
Lafferty, J. D., McCallum, A., and Pereira, F. C. N. (2001). Conditional random fields: Probabilistic models for segmenting and labeling sequence data. ICML.
Lai, A. and Tetreault, J. (2018). Dis- course coherence in the wild: A dataset, evaluation and methods. SIG- DIAL.
Lake, B. M. and Murphy, G. L. (2020). Word meaning in minds and ma- chines..
Lakoff, G. (1965). On the Nature of Syntactic Irregularity. Ph.D. thesis, Indiana University. Published as Irreg- ularity in Syntax. Holt, Rinehart, and Winston, New York, 1970.
Lakoff, G. (1972a). Linguistics and natural logic. Davidson, D. and Har- man, G. (Eds.), Semantics for Natural Language, 545–665. D. Reidel.
Lakoff, G. (1972b). Structural com- plexity in fairy tales. The Study of Man, 128–50. School of Social Sci- ences, University of California, Irvine, CA.
Lakoff, G. and Johnson, M. (1980). Metaphors We Live By. University of Chicago Press, Chicago, IL.
Lample, G., Ballesteros, M., Subra- manian, S., Kawakami, K., and Dyer, C. (2016). Neural architectures for named entity recognition. NAACL HLT.
Landauer, T. K. (Ed.). (1995). The Trouble with Computers: Usefulness, Usability, and Productivity. MIT Press.
Landauer, T. K. and Dumais, S. T. (1997). A solution to Plato’s problem: The Latent Semantic Analysis theory of acquisition, induction, and repre- sentation of knowledge. Psychological Review 104, 211–240.
Landauer, T. K., Laham, D., Rehder, B., and Schreiner, M. E. (1997). How well can passage meaning be derived without using word order? A compar- ison of Latent Semantic Analysis and humans. COGSCI.
Landes, S., Leacock, C., and Tengi, R. I. (1998). Building semantic con- cordances. Fellbaum, C. (Ed.), Word- Net: An Electronic Lexical Database, 199–216. MIT Press.
Lang, J. and Lapata, M. (2014). Similarity-driven semantic role induc- tion via graph partitioning. Computa- tional Linguistics 40(3), 633–669.
Lang, K. J., Waibel, A. H., and Hin- ton, G. E. (1990). A time-delay neural network architecture for isolated word recognition. Neural networks 3(1), 23–43.
Lapata, M. (2003). Probabilistic text structuring: Experiments with sen- tence ordering. ACL.
Lapesa, G. and Evert, S. (2014). A large scale evaluation of distributional semantic models: Parameters, interac- tions and model selection. TACL 2, 531–545.
Lappin, S. and Leass, H. (1994). An al- gorithm for pronominal anaphora res- olution. Computational Linguistics 20(4), 535–561.
Lascarides, A. and Asher, N. (1993). Temporal interpretation, discourse re- lations, and common sense entail- ment. Linguistics and Philosophy 16(5), 437–493.
Lauscher,A.,Vulic ́,I.,Ponti,E.M., Korhonen, A., and Glavasˇ, G. (2019). Informing unsupervised pretraining with external linguistic knowledge. arXiv preprint arXiv:1909.02339.
Lawrence, W. (1953). The synthe- sis of speech from signals which have a low information rate. Jackson, W. (Ed.), Communication Theory, 460– 469. Butterworth.
LDC (1998). LDC Catalog: Hub4 project. University of Pennsylvania. www.ldc.upenn.edu/Catalog/ LDC98S71.html.
LeCun, Y., Boser, B., Denker, J. S., Henderson, D., Howard, R. E., Hub- bard, W., and Jackel, L. D. (1989). Backpropagation applied to handwrit- ten zip code recognition. Neural com- putation 1(4), 541–551.
Lee, D. D. and Seung, H. S. (1999). Learning the parts of objects by non- negative matrix factorization. Nature 401(6755), 788–791.
Lee, H., Chang, A., Peirsman, Y., Chambers, N., Surdeanu, M., and Ju- rafsky, D. (2013). Deterministic coref- erence resolution based on entity- centric, precision-ranked rules. Com- putational Linguistics 39(4), 885–916.
Lee, H., Peirsman, Y., Chang, A., Chambers, N., Surdeanu, M., and Ju- rafsky, D. (2011). Stanford’s multi- pass sieve coreference resolution sys- tem at the CoNLL-2011 shared task. CoNLL.
Lee, H., Surdeanu, M., and Jurafsky, D. (2017). A scaffolding approach to coreference resolution integrating sta- tistical and rule-based models. Natu- ral Language Engineering 23(5), 733– 762.
Lee, K., Chang, M.-W., and Toutanova, K. (2019). Latent retrieval for weakly supervised open domain question an- swering. ACL.
Lee, K., He, L., Lewis, M., and Zettle- moyer, L. (2017). End-to-end neural coreference resolution. EMNLP.
Lee, K., He, L., and Zettlemoyer, L. (2018). Higher-order coreference res- olution with coarse-to-fine inference. NAACL HLT.
Lehiste, I. (Ed.). (1967). Readings in Acoustic Phonetics. MIT Press.
Lehnert, W. G., Cardie, C., Fisher, D., Riloff, E., and Williams, R. (1991). Description of the CIRCUS system as used for MUC-3. Sundheim, B. (Ed.), MUC-3.
Lemon, O., Georgila, K., Henderson, J., and Stuttle, M. (2006). An ISU dia- logue system exhibiting reinforcement learning of dialogue policies: Generic slot-filling in the TALK in-car system. EACL.
Lengerich, B., Maas, A., and Potts, C. (2018). Retrofitting distributional embeddings to knowledge graphs with functional relations. COLING.
Lesk, M. E. (1986). Automatic sense disambiguation using machine read- able dictionaries: How to tell a pine cone from an ice cream cone. Pro- ceedings of the 5th International Con- ference on Systems Documentation.
Levenshtein, V. I. (1966). Binary codes capable of correcting deletions, inser- tions, and reversals. Cybernetics and Control Theory 10(8), 707–710. Orig- inal in Doklady Akademii Nauk SSSR 163(4): 845–848 (1965).
Levesque, H. (2011). The Winograd Schema Challenge. Logical Formal- izations of Commonsense Reasoning — Papers from the AAAI 2011 Spring Symposium (SS-11-06).
Levesque, H., Davis, E., and Mor- genstern, L. (2012). The Winograd Schema Challenge. KR-12.
Levesque, H. J., Cohen, P. R., and Nunes, J. H. T. (1990). On acting to- gether. AAAI. Morgan Kaufmann.
Levin, B. (1977). Mapping sentences to case frames. Tech. rep. 167, MIT AI Laboratory. AI Working Paper 143.
 
 Levin, B. (1993). English Verb Classes and Alternations: A Preliminary In- vestigation. University of Chicago Press.
Levin, B. and Rappaport Hovav, M. (2005). Argument Realization. Cam- bridge University Press.
Levin, E., Pieraccini, R., and Eckert, W. (2000). A stochastic model of human- machine interaction for learning dia- log strategies. IEEE Transactions on Speech and Audio Processing 8, 11– 23.
Levine, Y., Lenz, B., Dagan, O., Ram, O., Padnos, D., Sharir, O., Shalev-Shwartz, S., Shashua, A., and Shoham, Y. (2020). SenseBERT: Driv- ing some sense into BERT. ACL.
Levinson, S. C. (1983). Conversational Analysis, chap. 6. Cambridge Univer- sity Press.
Levow, G.-A. (1998). Characterizing and recognizing spoken corrections in human-computer dialogue. COLING- ACL.
Levy, O. and Goldberg, Y. (2014a). Dependency-based word embeddings. ACL.
Levy, O. and Goldberg, Y. (2014b). Linguistic regularities in sparse and explicit word representations. CoNLL.
Levy, O. and Goldberg, Y. (2014c). Neural word embedding as implicit matrix factorization. NeurIPS.
Levy, O., Goldberg, Y., and Dagan, I. (2015). Improving distributional sim- ilarity with lessons learned from word embeddings. TACL 3, 211–225.
Lewis, M. and Steedman, M. (2014). A* ccg parsing with a supertag- factored model. EMNLP.
Li, A., Zheng, F., Byrne, W., Fung, P., Kamm, T., Yi, L., Song, Z., Ruhi, U., Venkataramani, V., and Chen, X. (2000). CASS: A phonetically tran- scribed corpus of Mandarin sponta- neous speech. ICSLP.
Li, B. Z., Min, S., Iyer, S., Mehdad, Y., and Yih, W.-t. (2020). Efficient one-pass end-to-end entity linking for questions. EMNLP.
Li, J., Chen, X., Hovy, E. H., and Ju- rafsky, D. (2015). Visualizing and understanding neural models in NLP. NAACL HLT.
Li, J., Galley, M., Brockett, C., Gao, J., and Dolan, B. (2016). A diversity- promoting objective function for neu- ral conversation models. NAACL HLT.
Li, J. and Jurafsky, D. (2017). Neural net models of open-domain discourse coherence. EMNLP.
Li, J., Li, R., and Hovy, E. H. (2014). Recursive deep models for discourse parsing. EMNLP.
Li, J., Monroe, W., Ritter, A., Galley, M., Gao, J., and Jurafsky, D. (2016). Deep reinforcement learning for dia- logue generation. EMNLP.
Li, J., Monroe, W., Shi, T., Ritter, A., and Jurafsky, D. (2017). Adversar- ial learning for neural dialogue gener- ation. EMNLP.
Li, M., Weston, J., and Roller, S. (2019). Acute-eval: Improved dia- logue evaluation with optimized ques- tions and multi-turn comparisons. NeurIPS19 Workshop on Conversa- tional AI.
Li, Q., Li, T., and Chang, B. (2016). Discourse parsing with attention- based hierarchical neural networks. EMNLP.
Li, X., Meng, Y., Sun, X., Han, Q., Yuan, A., and Li, J. (2019). Is word segmentation necessary for deep learning of Chinese representations?. ACL.
Liberman, A. M., Delattre, P. C., and Cooper, F. S. (1952). The role of se- lected stimulus variables in the per- ception of the unvoiced stop conso- nants. American Journal of Psychol- ogy 65, 497–516.
Lin, D. (2003). Dependency-based evaluation of minipar. Workshop on the Evaluation of Parsing Systems.
Lin, J., Nogueira, R., and Yates, A. (2020). Pretrained transformers for text ranking: BERT and beyond. arXiv preprint arXiv:2010.06467.
Lin, Y., Michel, J.-B., Aiden Lieber- man, E., Orwant, J., Brockman, W., and Petrov, S. (2012a). Syntac- tic annotations for the Google books NGram corpus. ACL.
Lin, Y., Michel, J.-B., Lieber- man Aiden, E., Orwant, J., Brockman, W., and Petrov, S. (2012b). Syntac- tic annotations for the google books ngram corpus. ACL.
Lin, Z., Madotto, A., Shin, J., Xu, P., and Fung, P. (2019). MoEL: Mix- ture of empathetic listeners. http: //arxiv.org/abs/1908.07687.
Lin, Z., Kan, M.-Y., and Ng, H. T. (2009). Recognizing implicit dis- course relations in the penn discourse treebank. EMNLP.
Lin, Z., Ng, H. T., and Kan, M.-Y. (2011). Automatically evaluating text coherence using discourse relations. ACL.
Lin, Z., Ng, H. T., and Kan, M.-Y. (2014). A pdtb-styled end-to-end dis- course parser. Natural Language En- gineering 20(2), 151–184.
Lindsey, R. (1963). Inferential memory as the basis of machines which under- stand natural language. Feigenbaum, E. and Feldman, J. (Eds.), Computers and Thought, 217–233. McGraw Hill.
Bibliography 591
Ling, W., Dyer, C., Black, A. W., Tran- coso, I., Fermandez, R., Amir, S., Marujo, L., and Lu ́ıs, T. (2015). Find- ing function in form: Compositional character models for open vocabulary word representation. EMNLP.
Linzen, T. (2016). Issues in evaluating semantic spaces using word analogies. 1st Workshop on Evaluating Vector- Space Representations for NLP.
Lison, P. and Tiedemann, J. (2016). Opensubtitles2016: Extracting large parallel corpora from movie and tv subtitles. LREC.
Litman, D. J. (1985). Plan Recogni- tion and Discourse Analysis: An In- tegrated Approach for Understanding Dialogues. Ph.D. thesis, University of Rochester, Rochester, NY.
Litman, D. J. and Allen, J. (1987). A plan recognition model for subdia- logues in conversation. Cognitive Sci- ence 11, 163–200.
Litman, D. J., Swerts, M., and Hirsch- berg, J. (2000). Predicting automatic speech recognition performance using prosodic cues. NAACL.
Litman, D. J., Walker, M. A., and Kearns, M. (1999). Automatic detec- tion of poor speech recognition at the dialogue level. ACL.
Liu, B. and Zhang, L. (2012). A sur- vey of opinion mining and sentiment analysis. Aggarwal, C. C. and Zhai, C. (Eds.), Mining text data, 415–464. Springer.
Liu, C.-W., Lowe, R. T., Serban, I. V., Noseworthy, M., Charlin, L., and Pineau, J. (2016). How NOT to eval- uate your dialogue system: An empir- ical study of unsupervised evaluation metrics for dialogue response genera- tion. EMNLP.
Liu, H., Dacon, J., Fan, W., Liu, H., Liu, Z., and Tang, J. (2020). Does gen- der matter? Towards fairness in dia- logue systems. COLING.
Liu, Y., Fung, P., Yang, Y., Cieri, C., Huang, S., and Graff, D. (2006). HKUST/MTS: A very large scale Mandarin telephone speech corpus. International Conference on Chinese Spoken Language Processing.
Liu, Y., Ott, M., Goyal, N., Du, J., Joshi, M., Chen, D., Levy, O., Lewis, M., Zettlemoyer, L., and Stoyanov, V. (2019). RoBERTa: A robustly op- timized BERT pretraining approach. arXiv preprint arXiv:1907.11692.
Lochbaum, K. E., Grosz, B. J., and Sidner, C. L. (2000). Discourse struc- ture and intention recognition. Dale, R., Moisl, H., and Somers, H. L. (Eds.), Handbook of Natural Lan- guage Processing. Marcel Dekker.

592 Bibliography
Logeswaran, L., Lee, H., and Radev, D. (2018). Sentence ordering and co- herence modeling using recurrent neu- ral networks. AAAI.
Louis, A. and Nenkova, A. (2012). A coherence model based on syntactic patterns. EMNLP.
Loureiro, D. and Jorge, A. (2019). Language modelling makes sense: Propagating representations through WordNet for full-coverage word sense disambiguation. ACL.
Louviere, J. J., Flynn, T. N., and Mar- ley, A. A. J. (2015). Best-worst scal- ing: Theory, methods and applica- tions. Cambridge University Press.
Lovins, J. B. (1968). Development of a stemming algorithm. Mechanical Translation and Computational Lin- guistics 11(1–2), 9–13.
Lowerre, B. T. (1968). The Harpy Speech Recognition System. Ph.D. the- sis, Carnegie Mellon University, Pitts- burgh, PA.
Luhn, H. P. (1957). A statistical ap- proach to the mechanized encoding and searching of literary information. IBM Journal of Research and Devel- opment 1(4), 309–317.
Lui, M. and Baldwin, T. (2011). Cross- domain feature selection for language identification. IJCNLP.
Lui, M. and Baldwin, T. (2012). langid.py: An off-the-shelf lan- guage identification tool. ACL.
Lukovnikov, D., Fischer, A., and Lehmann, J. (2019). Pretrained trans- formers for simple question answering over knowledge graphs. International Semantic Web Conference.
Luo, F., Liu, T., He, Z., Xia, Q., Sui, Z., and Chang, B. (2018a). Leverag- ing gloss knowledge in neural word sense disambiguation by hierarchical co-attention. EMNLP.
Luo, F., Liu, T., Xia, Q., Chang, B., and Sui, Z. (2018b). Incorporating glosses into neural word sense disam- biguation. ACL.
Luo, X. (2005). On coreference resolu- tion performance metrics. EMNLP.
Luo, X. and Pradhan, S. (2016). Eval- uation metrics. Poesio, M., Stuckardt, R., and Versley, Y. (Eds.), Anaphora resolution: Algorithms, resources, and applications, 141–163. Springer.
Luo, X., Pradhan, S., Recasens, M., and Hovy, E. H. (2014). An extension of BLANC to system mentions. ACL.
Lyons, J. (1977). Semantics. Cam- bridge University Press.
Ma, X. and Hovy, E. H. (2016). End-to-end sequence labeling via bi- directional LSTM-CNNs-CRF. ACL.
Maas, A., Xie, Z., Jurafsky, D., and Ng, A. Y. (2015). Lexicon-free conversa- tional speech recognition with neural networks. NAACL HLT.
Maas, A. L., Hannun, A. Y., and Ng, A. Y. (2013). Rectifier nonlinearities improve neural network acoustic mod- els. ICML.
Maas, A. L., Qi, P., Xie, Z., Hannun, A. Y., Lengerich, C. T., Jurafsky, D., and Ng, A. Y. (2017). Building dnn acoustic models for large vocabulary speech recognition. Computer Speech & Language 41, 195–213.
Madhu, S. and Lytel, D. (1965). A figure of merit technique for the reso- lution of non-grammatical ambiguity. Mechanical Translation 8(2), 9–13.
Magerman, D. M. (1994). Natural Language Parsing as Statistical Pat- tern Recognition. Ph.D. thesis, Uni- versity of Pennsylvania.
Magerman, D. M. (1995). Statistical decision-tree models for parsing. ACL.
Mairesse, F. and Walker, M. A. (2008). Trainable generation of big-five per- sonality styles through data-driven pa- rameter estimation. ACL.
Manandhar, S., Klapaftis, I. P., Dli- gach, D., and Pradhan, S. (2010). Semeval-2010 task 14: Word sense in- duction & disambiguation. SemEval- 2010.
Mann, W. C. and Thompson, S. A. (1987). Rhetorical structure theory: A theory of text organization. Tech. rep. RS-87-190, Information Sciences In- stitute.
Manning, C. D. (2011). Part-of-speech tagging from 97% to 100%: Is it time for some linguistics?. CICLing 2011.
Manning, C. D., Raghavan, P., and Schu ̈tze, H. (2008). Introduction to In- formation Retrieval. Cambridge.
Manning, C. D., Surdeanu, M., Bauer, J., Finkel, J., Bethard, S., and Mc- Closky, D. (2014). The Stanford CoreNLP natural language processing toolkit. ACL.
Marcu, D. (1997). The rhetorical pars- ing of natural language texts. ACL.
Marcu, D. (1999). A decision-based approach to rhetorical parsing. ACL.
Marcu, D. (2000a). The rhetori- cal parsing of unrestricted texts: A surface-based approach. Computa- tional Linguistics 26(3), 395–448.
Marcu, D. (Ed.). (2000b). The Theory and Practice of Discourse Parsing and Summarization. MIT Press.
Marcu, D. and Echihabi, A. (2002). An unsupervised approach to recognizing discourse relations. ACL.
Marcu, D. and Wong, W. (2002). A phrase-based, joint probability model for statistical machine translation. EMNLP.
Marcus, M. P. (1980). A Theory of Syn- tactic Recognition for Natural Lan- guage. MIT Press.
Marcus, M. P., Kim, G., Marcinkiewicz, M. A., MacIntyre, R., Bies, A., Ferguson, M., Katz, K., and Schasberger, B. (1994). The Penn Treebank: Annotating predicate argu- ment structure. ARPA Human Lan- guage Technology Workshop. Morgan Kaufmann.
Marcus, M. P., Santorini, B., and Marcinkiewicz, M. A. (1993). Build- ing a large annotated corpus of En- glish: The Penn treebank. Computa- tional Linguistics 19(2), 313–330.
Markov, A. A. (1913). Essai d’une recherche statistique sur le texte du roman “Eugene Onegin” illustrant la liaison des epreuve en chain (‘Ex- ample of a statistical investigation of the text of “Eugene Onegin” illus- trating the dependence between sam- ples in chain’). Izvistia Impera- torskoi Akademii Nauk (Bulletin de l’Acade ́mie Impe ́riale des Sciences de St.-Pe ́tersbourg) 7, 153–162.
Maron, M. E. (1961). Automatic in- dexing: an experimental inquiry. Jour- nal of the ACM 8(3), 404–417.
Ma`rquez, L., Carreras, X., Litkowski, K. C., and Stevenson, S. (2008). Se- mantic role labeling: An introduction to the special issue. Computational linguistics 34(2), 145–159.
Marshall, I. (1983). Choice of gram- matical word-class without global syntactic analysis: Tagging words in the LOB corpus. Computers and the Humanities 17, 139–150.
Marshall, I. (1987). Tag selection us- ing probabilistic methods. Garside, R., Leech, G., and Sampson, G. (Eds.), The Computational Analysis of En- glish, 42–56. Longman.
Martin, J. H. (1986). The acquisition of polysemy. ICML.
Martschat, S. and Strube, M. (2014). Recall error analysis for coreference resolution. EMNLP.
Martschat, S. and Strube, M. (2015). Latent structures for coreference reso- lution. TACL 3, 405–418.
Masterman, M. (1957). The thesaurus in syntax and semantics. Mechanical Translation 4(1), 1–2.
Mathis, D. A. and Mozer, M. C. (1995). On the computational utility of con- sciousness. Tesauro, G., Touretzky, D. S., and Alspector, J. (Eds.), Ad- vances in Neural Information Process- ing Systems VII. MIT Press.
McCallum, A., Freitag, D., and Pereira, F. C. N. (2000). Maximum en- tropy Markov models for information extraction and segmentation. ICML.
 
 McCallum, A. and Li, W. (2003). Early results for named entity recognition with conditional random fields, feature induction and web-enhanced lexicons. CoNLL.
McCallum, A. and Nigam, K. (1998). A comparison of event models for naive bayes text classification. AAAI/ICML-98 Workshop on Learn- ing for Text Categorization.
McCarthy, J. F. and Lehnert, W. G. (1995). Using decision trees for coref- erence resolution. IJCAI-95.
McCawley, J. D. (1968). The role of se- mantics in a grammar. Bach, E. W. and Harms, R. T. (Eds.), Universals in Lin- guistic Theory, 124–169. Holt, Rine- hart & Winston.
McCawley, J. D. (1993). Everything that Linguists Have Always Wanted to Know about Logic (2nd Ed.). Univer- sity of Chicago Press, Chicago, IL.
McClelland, J. L. and Elman, J. L. (1986). The TRACE model of speech perception. Cognitive Psychology 18, 1–86.
McClelland, J. L. and Rumelhart, D. E. (Eds.). (1986). Parallel Distributed Processing: Explorations in the Mi- crostructure of Cognition, Vol. 2: Psy- chological and Biological Models. MIT Press.
McCulloch, W. S. and Pitts, W. (1943). A logical calculus of ideas immanent in nervous activity. Bulletin of Mathe- matical Biophysics 5, 115–133.
McDonald, R., Crammer, K., and Pereira, F. C. N. (2005). Online large-margin training of dependency parsers. ACL.
McDonald, R. and Nivre, J. (2011). Analyzing and integrating dependency parsers. Computational Linguistics 37(1), 197–230.
McDonald, R., Pereira, F. C. N., Rib- arov, K., and Hajicˇ, J. (2005). Non- projective dependency parsing using spanning tree algorithms. HLT- EMNLP.
McGuffie, K. and Newhouse, A. (2020). The radicalization risks of GPT-3 and advanced neural language models. arXiv preprint arXiv:2009.06807.
McGuiness, D. L. and van Harme- len, F. (2004). OWL web ontology overview. Tech. rep. 20040210, World Wide Web Consortium.
McLuhan, M. (1964). Understanding Media: The Extensions of Man. New American Library.
Mehl, M. R., Gosling, S. D., and Pen- nebaker, J. W. (2006). Personality in its natural habitat: manifestations and implicit folk theories of personality in daily life. Journal of Personality and Social Psychology 90(5).
Meister, C., Vieira, T., and Cotterell, R. (2020). If beam search is the answer, what was the question?. EMNLP.
Melamud, O., Goldberger, J., and Da- gan, I. (2016). context2vec: Learning generic context embedding with bidi- rectional LSTM. CoNLL.
Mel’c ̆uk, I. A. (1988). Dependency Syntax: Theory and Practice. State University of New York Press.
Merialdo, B. (1994). Tagging English text with a probabilistic model. Com- putational Linguistics 20(2), 155–172.
Mesgar, M. and Strube, M. (2016). Lexical coherence graph modeling us- ing word embeddings. ACL.
Metsis, V., Androutsopoulos, I., and Paliouras, G. (2006). Spam filtering with naive bayes-which naive bayes?. CEAS.
Meyers, A., Reeves, R., Macleod, C., Szekely, R., Zielinska, V., Young, B., and Grishman, R. (2004). The nom- bank project: An interim report. Pro- ceedings of the NAACL/HLT Work- shop: Frontiers in Corpus Annotation.
Mihalcea, R. (2007). Using wikipedia for automatic word sense disambigua- tion. NAACL-HLT.
Mihalcea, R. and Csomai, A. (2007). Wikify!: Linking documents to ency- clopedic knowledge. CIKM 2007.
Mihalcea, R. and Moldovan, D. (2001). Automatic generation of a coarse grained WordNet. NAACL Workshop on WordNet and Other Lexical Re- sources.
Mikheev, A., Moens, M., and Grover, C. (1999). Named entity recognition without gazetteers. EACL.
Mikolov, T. (2012). Statistical lan- guage models based on neural net- works. Ph.D. thesis, Ph. D. thesis, Brno University of Technology.
Mikolov, T., Chen, K., Corrado, G. S., and Dean, J. (2013). Efficient estima- tion of word representations in vector space. ICLR 2013.
Mikolov, T., Karafia ́t, M., Burget, L., Cˇernocky`, J., and Khudanpur, S. (2010). Recurrent neural net- work based language model. INTER- SPEECH 2010.
Mikolov, T., Kombrink, S., Burget, L., Cˇernocky`, J. H., and Khudanpur, S. (2011). Extensions of recurrent neu- ral network language model. ICASSP.
Mikolov, T., Sutskever, I., Chen, K., Corrado, G. S., and Dean, J. (2013a). Distributed representations of words and phrases and their compositional- ity. NeurIPS.
Mikolov, T., Yih, W.-t., and Zweig, G. (2013b). Linguistic regularities in continuous space word representa- tions. NAACL HLT.
Bibliography 593
Miller, G. A. and Nicely, P. E. (1955). An analysis of perceptual con- fusions among some English conso- nants. JASA 27, 338–352.
Miller, G. A. and Beebe-Center, J. G. (1958). Some psychological methods for evaluating the quality of transla- tions. Mechanical Translation 3, 73– 80.
Miller, G. A. and Charles, W. G. (1991). Contextual correlates of se- mantics similarity. Language and Cognitive Processes 6(1), 1–28.
Miller, G. A. and Chomsky, N. (1963). Finitary models of language users. Luce, R. D., Bush, R. R., and Galanter, E. (Eds.), Handbook of Mathematical Psychology, Vol. II, 419–491. John Wiley.
Miller, G. A., Leacock, C., Tengi, R. I., and Bunker, R. T. (1993). A seman- tic concordance. Proceedings ARPA Workshop on Human Language Tech- nology.
Miller, G. A. and Selfridge, J. A. (1950). Verbal context and the re- call of meaningful material. American Journal of Psychology 63, 176–185.
Miller, S., Bobrow, R. J., Ingria, R., and Schwartz, R. (1994). Hidden understanding models of natural lan- guage. ACL.
Milne, D. and Witten, I. H. (2008). Learning to link with wikipedia. CIKM 2008.
Miltsakaki, E., Prasad, R., Joshi, A. K., and Webber, B. L. (2004). The Penn Discourse Treebank. LREC.
Minsky, M. (1961). Steps toward arti- ficial intelligence. Proceedings of the IRE 49(1), 8–30.
Minsky, M. (1974). A framework for representing knowledge. Tech. rep. 306, MIT AI Laboratory. Memo 306.
Minsky, M. and Papert, S. (1969). Per- ceptrons. MIT Press.
Mintz, M., Bills, S., Snow, R., and Ju- rafsky, D. (2009). Distant supervision for relation extraction without labeled data. ACL IJCNLP.
Mitchell, M., Wu, S., Zaldivar, A., Barnes, P., Vasserman, L., Hutchin- son, B., Spitzer, E., Raji, I. D., and Ge- bru, T. (2019). Model cards for model reporting. ACM FAccT.
Mitkov, R. (2002). Anaphora Resolu- tion. Longman.
Mohamed, A., Dahl, G. E., and Hinton, G. E. (2009). Deep Belief Networks for phone recognition. NIPS Workshop on Deep Learning for Speech Recog- nition and Related Applications.
Mohammad, S. M. (2018a). Obtain- ing reliable human ratings of valence, arousal, and dominance for 20,000 en- glish words. ACL.

594 Bibliography Mohammad,S.M.(2018b).Wordaf-
fect intensities. LREC.
Mohammad, S. M. and Turney, P. D. (2013). Crowdsourcing a word- emotion association lexicon. Compu- tational Intelligence 29(3), 436–465.
Monroe, B. L., Colaresi, M. P., and Quinn, K. M. (2008). Fightin’words: Lexical feature selection and evalu- ation for identifying the content of political conflict. Political Analysis 16(4), 372–403.
Montague, R. (1973). The proper treatment of quantification in ordinary English. Thomason, R. (Ed.), For- mal Philosophy: Selected Papers of Richard Montague, 247–270. Yale University Press, New Haven, CT.
Moosavi, N. S. and Strube, M. (2016). Which coreference evaluation metric do you trust? a proposal for a link- based entity aware metric. ACL.
Morey, M., Muller, P., and Asher, N. (2017). How much progress have we made on RST discourse parsing? a replication study of recent results on the rst-dt. EMNLP.
Morgan, A. A., Hirschman, L., Colosimo, M., Yeh, A. S., and Colombe, J. B. (2004). Gene name identification and normalization using a model organism database. Jour- nal of Biomedical Informatics 37(6), 396–410.
Morgan, N. and Bourlard, H. (1990). Continuous speech recognition using multilayer perceptrons with hidden markov models. ICASSP.
Morgan, N. and Bourlard, H. A. (1995). Neural networks for statisti- cal recognition of continuous speech. Proceedings of the IEEE 83(5), 742– 772.
Morris, J. and Hirst, G. (1991). Lexical cohesion computed by thesaural rela- tions as an indicator of the structure of text. Computational Linguistics 17(1), 21–48.
Morris, W. (Ed.). (1985). American Heritage Dictionary (2nd College Edi- tion Ed.). Houghton Mifflin.
Mosteller, F. and Wallace, D. L. (1963). Inference in an authorship problem: A comparative study of dis- crimination methods applied to the au- thorship of the disputed federalist pa- pers. Journal of the American Statisti- cal Association 58(302), 275–309.
Mosteller, F. and Wallace, D. L. (1964). Inference and Disputed Au- thorship: The Federalist. Springer- Verlag. 1984 2nd edition: Applied Bayesian and Classical Inference.
Mrksˇic ́, N., O ́ Se ́aghdha, D., Wen, T.-H., Thomson, B., and Young, S. (2017). Neural belief tracker: Data- driven dialogue state tracking. ACL.
Mrksˇic ́,N.,Se ́aghdha,D.O ́.,Thom- son,B.,Gasˇic ́,M.,Rojas-Barahona, L. M., Su, P.-H., Vandyke, D., Wen, T.-H., and Young, S. (2016). Counter- fitting word vectors to linguistic con- straints. NAACL HLT.
Muller, P., Braud, C., and Morey, M. (2019). ToNy: Contextual embed- dings for accurate multilingual dis- course segmentation of full docu- ments. Workshop on Discourse Rela- tion Parsing and Treebanking.
Murphy, K. P. (2012). Machine learn- ing: A probabilistic perspective. MIT press.
Musi, E., Stede, M., Kriese, L., Mure- san, S., and Rocci, A. (2018). A multi- layer annotated corpus of argumenta- tive text: From argument schemes to discourse relations. LREC.
Myers, G. (1992). “in this paper we report...”: Speech acts and scientific facts. Journal of Pragmatics 17(4), 295–313.
Na ́das, A. (1984). Estimation of prob- abilities in the language model of the IBM speech recognition system. IEEE Transactions on Acoustics, Speech, Signal Processing 32(4), 859–861.
Nagata, M. and Morimoto, T. (1994). First steps toward statistical modeling of dialogue to predict the speech act type of the next utterance. Speech Communication 15, 193–203.
Nallapati, R., Zhou, B., dos Santos, C., Gu`I‡lc ̧ehre, C ̧ ., and Xiang, B. (2016).
Abstractive text summarization us- ing sequence-to-sequence RNNs and beyond. Proceedings of The 20th SIGNLL Conference on Computa- tional Natural Language Learning. Association for Computational Lin- guistics.
Nash-Webber, B. L. (1975). The role of semantics in automatic speech understanding. Bobrow, D. G. and Collins, A. (Eds.), Representation and Understanding, 351–382. Academic Press.
Naur, P., Backus, J. W., Bauer, F. L., Green, J., Katz, C., McCarthy, J., Perlis, A. J., Rutishauser, H., Samel- son, K., Vauquois, B., Wegstein, J. H., van Wijnagaarden, A., and Woodger, M. (1960). Report on the algorithmic language ALGOL 60. CACM 3(5), 299–314. Revised in CACM 6:1, 1- 17, 1963.
Navigli, R. (2006). Meaningful cluster- ing of senses helps boost word sense disambiguation performance. COL- ING/ACL.
Navigli, R. (2009). Word sense disam- biguation: A survey. ACM Computing Surveys 41(2).
Navigli,R.(2016). Chapter20.on- tologies. Mitkov, R. (Ed.), The Ox- ford handbook of computational lin- guistics. Oxford University Press.
Navigli, R. and Ponzetto, S. P. (2012). BabelNet: The automatic construc- tion, evaluation and application of a wide-coverage multilingual semantic network. Artificial Intelligence 193, 217–250.
Navigli, R. and Vannella, D. (2013). Semeval-2013 task 11: Word sense in- duction & disambiguation within an end-user application. *SEM.
Nayak, N., Hakkani-Tu ̈r, D., Walker, M. A., and Heck, L. P. (2017). To plan or not to plan? discourse plan- ning in slot-value informed sequence to sequence models for language gen- eration. INTERSPEECH.
Neff, G. and Nagy, P. (2016). Talking to bots: Symbiotic agency and the case of Tay. International Journal of Com- munication 10, 4915–4931.
Ng, A. Y. and Jordan, M. I. (2002). On discriminative vs. generative clas- sifiers: A comparison of logistic re- gression and naive bayes. NIPS 14.
Ng, H. T., Teo, L. H., and Kwan, J. L. P. (2000). A machine learning approach to answering questions for reading comprehension tests. EMNLP.
Ng, V. (2004). Learning noun phrase anaphoricity to improve coreference resolution: Issues in representation and optimization. ACL.
Ng, V. (2005a). Machine learning for coreference resolution: From local classification to global ranking. ACL.
Ng, V. (2005b). Supervised ranking for pronoun resolution: Some recent im- provements. AAAI.
Ng, V. (2010). Supervised noun phrase coreference research: The first fifteen years. ACL.
Ng, V. (2017). Machine learning for entity coreference resolution: A ret- rospective look at two decades of re- search. AAAI.
Ng, V. and Cardie, C. (2002a). Identify- ing anaphoric and non-anaphoric noun phrases to improve coreference resolu- tion. COLING.
Ng, V. and Cardie, C. (2002b). Im- proving machine learning approaches to coreference resolution. ACL.
Nguyen, D. T. and Joty, S. (2017). A neural local coherence model. ACL.
Nguyen, K. A., Schulte im Walde, S., and Vu, N. T. (2016). Inte- grating distributional lexical contrast into word embeddings for antonym- synonym distinction. ACL.
Nie, A., Bennett, E., and Goodman, N. (2019). Dissent: Learning sen- tence representations from explicit discourse relations. ACL.
 
 Nielsen, J. (1992). The usability en- gineering life cycle. IEEE Computer 25(3), 12–22.
Nielsen, M. A. (2015). Neural net- works and Deep learning. Determina- tion Press USA.
Nigam, K., Lafferty, J. D., and McCal- lum, A. (1999). Using maximum en- tropy for text classification. IJCAI-99 workshop on machine learning for in- formation filtering.
Nilsson, J., Riedel, S., and Yuret, D. (2007). The conll 2007 shared task on dependency parsing. Proceedings of the CoNLL shared task session of EMNLP-CoNLL. sn.
Nirenburg, S., Somers, H. L., and Wilks, Y. (Eds.). (2002). Readings in Machine Translation. MIT Press.
Nissim, M., Dingare, S., Carletta, J., and Steedman, M. (2004). An anno- tation scheme for information status in dialogue. LREC.
NIST (1990). TIMIT Acoustic- Phonetic Continuous Speech Corpus. National Institute of Standards and Technology Speech Disc 1-1.1. NIST Order No. PB91-505065.
Nivre, J. and Nilsson, J. (2005). Pseudo-projective dependency pars- ing. ACL.
Nivre, J. and Scholz, M. (2004). De- terministic dependency parsing of en- glish text. COLING.
Niwa, Y. and Nitta, Y. (1994). Co- occurrence vectors from corpora vs. distance vectors from dictionaries. ACL.
Noreen, E. W. (1989). Computer Inten- sive Methods for Testing Hypothesis. Wiley.
Norman, D. A. (1988). The Design of Everyday Things. Basic Books.
Norman, D. A. and Rumelhart, D. E. (1975). Explorations in Cognition. Freeman.
Norvig, P. (1991). Techniques for auto- matic memoization with applications to context-free parsing. Computa- tional Linguistics 17(1), 91–98.
Nosek, B. A., Banaji, M. R., and Green- wald, A. G. (2002a). Harvesting im- plicit group attitudes and beliefs from a demonstration web site. Group Dy- namics: Theory, Research, and Prac- tice 6(1), 101.
Bibliography 595
Oravecz, C. and Dienes, P. (2002). Effi- cient stochastic part-of-speech tagging for Hungarian. LREC.
Oren, I., Herzig, J., Gupta, N., Gard- ner, M., and Berant, J. (2020). Im- proving compositional generalization in semantic parsing. arXiv preprint arXiv:2010.05647.
Osgood, C. E., Suci, G. J., and Tan- nenbaum, P. H. (1957). The Measure- ment of Meaning. University of Illi- nois Press.
Ostendorf, M., Price, P., and Shattuck- Hufnagel, S. (1995). The Boston Uni- versity Radio News Corpus. Tech. rep. ECS-95-001, Boston University.
Packard, D. W. (1973). Computer- assisted morphological analysis of an- cient Greek. COLING.
Palmer, D. (2012). Text preprocess- ing. Indurkhya, N. and Damerau, F. J. (Eds.), Handbook of Natural Lan- guage Processing, 9–30. CRC Press.
Palmer, M., Babko-Malaya, O., and Dang, H. T. (2004). Different sense granularities for different applications. HLT-NAACL Workshop on Scalable Natural Language Understanding.
Palmer, M., Dang, H. T., and Fell- baum, C. (2006). Making fine- grained and coarse-grained sense dis- tinctions, both manually and automat- ically. Natural Language Engineering 13(2), 137–163.
Palmer, M., Gildea, D., and Xue, N. (2010). Semantic role labeling. Syn- thesis Lectures on Human Language Technologies 3(1), 1–103.
Palmer, M., Kingsbury, P., and Gildea, D. (2005). The proposition bank: An annotated corpus of semantic roles. Computational Linguistics 31(1), 71– 106.
Panayotov, V., Chen, G., Povey, D., and Khudanpur, S. (2015). Lib- rispeech: an ASR corpus based on public domain audio books. ICASSP.
Pang, B. and Lee, L. (2008). Opinion mining and sentiment analysis. Foun- dations and trends in information re- trieval 2(1-2), 1–135.
Pang, B., Lee, L., and Vaithyanathan, S. (2002). Thumbs up? Sentiment classification using machine learning techniques. EMNLP.
Paolino, J. (2017). Google Home
vs Alexa: Two simple user experience design gestures that delighted a female
user. Medium. Jan 4, 2017. https: //medium.com/startup- grind/ google- home- vs- alexa- 56e26f69ac77.
Papineni, K., Roukos, S., Ward, T., and Zhu, W.-J. (2002). Bleu: A method for automatic evaluation of machine translation. ACL.
NIST (2005). Speech recognition scor-
ing toolkit (sctk) version 2.1. http:
//www.nist.gov/speech/tools/. wald, A. G. (2002b). Math=male,
NIST (2007). Matched Pairs Sentence- Segment Word Error (MAPSSWE) Test..
Nivre, J. (2007). Incremental non- projective dependency parsing. NAACL-HLT.
Nivre, J. (2003). An efficient algo- rithm for projective dependency pars- ing. Proceedings of the 8th Interna- tional Workshop on Parsing Technolo- gies (IWPT).
Nivre, J. (2006). Inductive Dependency Parsing. Springer.
Nivre, J. (2009). Non-projective depen- dency parsing in expected linear time. ACL IJCNLP.
Nivre, J., de Marneffe, M.-C., Gin- ter, F., Goldberg, Y., Hajicˇ, J., Man- ning, C. D., McDonald, R., Petrov, S., Pyysalo, S., Silveira, N., Tsarfaty, R., and Zeman, D. (2016a). Universal De- pendencies v1: A multilingual tree- bank collection. LREC.
Nivre, J., de Marneffe, M.-C., Gin- ter, F., Goldberg, Y., Hajicˇ, J., Man- ning, C. D., McDonald, R., Petrov, S., Pyysalo, S., Silveira, N., Tsarfaty, R., and Zeman, D. (2016b). Universal De- pendencies v1: A multilingual tree- bank collection. LREC.
Nivre, J., Hall, J., Nilsson, J., Chanev, A., Eryigit, G., Ku ̈bler, S., Mari- nov, S., and Marsi, E. (2007). Malt- parser: A language-independent sys- tem for data-driven dependency pars- ing. Natural Language Engineering 13(02), 95–135.
Nosek, B. A., Banaji, M. R., and Green- me=female, therefore math̸= me.
Journal of personality and social psy- chology 83(1), 44.
Och, F. J. (1998). Ein beispiels- basierter und statistischer Ansatz zum maschinellen Lernen von natu ̈rlichsprachlicher U ̈bersetzung. Ph.D. thesis, Universita ̈t Erlangen- Nu ̈rnberg, Germany. Diplomarbeit (diploma thesis).
Och, F. J. (2003). Minimum error rate training in statistical machine transla- tion. ACL.
Och, F. J. and Ney, H. (2003). A sys- tematic comparison of various statisti- cal alignment models. Computational Linguistics 29(1), 19–51.
Och, F. J. and Ney, H. (2004). The alignment template approach to statis- tical machine translation. Computa- tional Linguistics 30(4), 417–449.
O’Connor, B., Krieger, M., and Ahn, D. (2010). Tweetmotif: Exploratory search and topic summarization for twitter. ICWSM.
Olive, J. P. (1977). Rule synthesis of speech from dyadic units. ICASSP77.
Olteanu, A., Diaz, F., and Kazai, G. (2020). When are search completion suggestions problematic?. CSCW.
Oppenheim, A. V., Schafer, R. W., and Stockham, T. G. J. (1968). Non- linear filtering of multiplied and con- volved signals. Proceedings of the IEEE 56(8), 1264–1291.

596 Bibliography
Paranjape, A., See, A., Kenealy, K., Li, H., Hardy, A., Qi, P., Sadagopan, K. R., Phu, N. M., Soylu, D., and Man- ning, C. D. (2020). Neural generation meets real people: Towards emotion- ally engaging mixed-initiative conver- sations. 3rd Proceedings of Alexa Prize.
Park, J. H., Shin, J., and Fung, P. (2018). Reducing gender bias in abu- sive language detection. EMNLP.
Park, J. and Cardie, C. (2014). Iden- tifying appropriate support for propo- sitions in online user comments. First workshop on argumentation mining.
Parsons, T. (1990). Events in the Se- mantics of English. MIT Press.
Partee, B. H. (Ed.). (1976). Montague Grammar. Academic Press.
Paszke, A., Gross, S., Chintala, S., Chanan, G., Yang, E., DeVito, Z., Lin, Z., Desmaison, A., Antiga, L., and Lerer, A. (2017). Automatic differen- tiation in pytorch. NIPS-W.
Pearl, C. (2017). Designing Voice User Interfaces: Principles of Conversa- tional Experiences. O’Reilly.
Pedersen, T. and Bruce, R. (1997). Dis- tinguishing word senses in untagged text. EMNLP.
Peldszus, A. and Stede, M. (2013). From argument diagrams to argu- mentation mining in texts: A sur- vey. International Journal of Cogni- tive Informatics and Natural Intelli- gence (IJCINI) 7(1), 1–31.
Peldszus, A. and Stede, M. (2016). An annotated corpus of argumentative mi- crotexts. 1st European Conference on Argumentation.
Penn, G. and Kiparsky, P. (2012). On Pa ̄n. ini and the generative capacity of contextualized replacement systems. COLING.
Pennebaker, J. W., Booth, R. J., and Francis, M. E. (2007). Linguistic In- quiry and Word Count: LIWC 2007. Austin, TX.
Pennebaker, J. W. and King, L. A. (1999). Linguistic styles: language use as an individual difference. Jour- nal of Personality and Social Psychol- ogy 77(6).
Pennington, J., Socher, R., and Man- ning, C. D. (2014). Glove: Global vec- tors for word representation. EMNLP.
Percival, W. K. (1976). On the historical source of immediate con- stituent analysis. McCawley, J. D. (Ed.), Syntax and Semantics Volume 7, Notes from the Linguistic Under- ground, 229–242. Academic Press.
Perrault, C. R. and Allen, J. (1980). A plan-based analysis of indirect speech acts. American Journal of Computa- tional Linguistics 6(3-4), 167–182.
Peters, M., Neumann, M., Iyyer, M., Gardner, M., Clark, C., Lee, K., and Zettlemoyer, L. (2018). Deep contex- tualized word representations. NAACL HLT.
Peterson, G. E. and Barney, H. L. (1952). Control methods used in a study of the vowels. JASA 24, 175– 184.
Peterson, G. E., Wang, W. S.-Y., and Sivertsen, E. (1958). Segmentation techniques in speech synthesis. JASA 30(8), 739–742.
Peterson, J. C., Chen, D., and Griffiths, T. L. (2020). Parallelograms revis- ited: Exploring the limitations of vec- tor space models for simple analogies. Cognition 205.
Petrov, S., Das, D., and McDonald, R. (2012). A universal part-of-speech tagset. LREC.
Petrov, S. and McDonald, R. (2012). Overview of the 2012 shared task on parsing the web. Notes of the First Workshop on Syntactic Analysis of Non-Canonical Language (SANCL), Vol. 59.
Phillips, A. V. (1960). A question- answering routine. Tech. rep. 16, MIT AI Lab.
Picard, R. W. (1995). Affective com- puting. Tech. rep. 321, MIT Media Lab Perceputal Computing Technical Report. Revised November 26, 1995.
Pieraccini, R., Levin, E., and Lee, C.- H. (1991). Stochastic representation of conceptual structure in the ATIS task. Proceedings DARPA Speech and Nat- ural Language Workshop.
Pierce, J. R., Carroll, J. B., Hamp, E. P., Hays, D. G., Hockett, C. F., Oettinger, A. G., and Perlis, A. J. (1966). Lan- guage and Machines: Computers in Translation and Linguistics. ALPAC report. National Academy of Sciences, National Research Council, Washing- ton, DC.
Pilehvar, M. T. and Camacho- Collados, J. (2019). WiC: the word-in- context dataset for evaluating context- sensitive meaning representations. NAACL HLT.
Pilehvar, M. T., Jurgens, D., and Nav- igli, R. (2013). Align, disambiguate and walk: A unified approach for mea- suring semantic similarity. ACL.
Pitler, E., Louis, A., and Nenkova, A. (2009). Automatic sense prediction for implicit discourse relations in text. ACL IJCNLP.
Pitler, E. and Nenkova, A. (2009). Us- ing syntax to disambiguate explicit discourse connectives in text. ACL IJCNLP.
Pitt, M. A., Dilley, L., Johnson, K., Kiesling, S., Raymond, W. D.,
Hume, E., and Fosler-Lussier, E. (2007). Buckeye corpus of conversa- tional speech (2nd release).. Depart- ment of Psychology, Ohio State Uni- versity (Distributor).
Pitt, M. A., Johnson, K., Hume, E., Kiesling, S., and Raymond, W. D. (2005). The buckeye corpus of con- versational speech: Labeling conven- tions and a test of transcriber reliabil- ity. Speech Communication 45, 90–95.
Plutchik, R. (1962). The emotions: Facts, theories, and a new model. Random House.
Plutchik, R. (1980). A general psy- choevolutionary theory of emotion. Plutchik, R. and Kellerman, H. (Eds.), Emotion: Theory, Research, and Ex- perience, Volume 1, 3–33. Academic Press.
Poesio, M., Stevenson, R., Di Eugenio, B., and Hitzeman, J. (2004). Center- ing: A parametric theory and its in- stantiations. Computational Linguis- tics 30(3), 309–363.
Poesio, M., Stuckardt, R., and Versley, Y. (2016). Anaphora resolution: Al- gorithms, resources, and applications. Springer.
Poesio, M., Sturt, P., Artstein, R., and Filik, R. (2006). Underspecification and anaphora: Theoretical issues and preliminary evidence. Discourse pro- cesses 42(2), 157–175.
Poesio, M. and Vieira, R. (1998). A corpus-based investigation of definite description use. Computational Lin- guistics 24(2), 183–216.
Polanyi, L. (1988). A formal model of the structure of discourse. Journal of Pragmatics 12.
Polanyi, L., Culy, C., van den Berg, M., Thione, G. L., and Ahn, D. (2004). A rule based approach to discourse pars- ing. Proceedings of SIGDIAL.
Polifroni, J., Hirschman, L., Seneff, S., and Zue, V. W. (1992). Experiments in evaluating interactive spoken language systems. Proceedings DARPA Speech and Natural Language Workshop.
Pollard, C. and Sag, I. A. (1994). Head-Driven Phrase Structure Gram- mar. University of Chicago Press.
Ponzetto, S. P. and Navigli, R. (2010). Knowledge-rich word sense disam- biguation rivaling supervised systems. ACL.
Ponzetto, S. P. and Strube, M. (2006). Exploiting semantic role labeling, WordNet and Wikipedia for corefer- ence resolution. HLT-NAACL.
Ponzetto, S. P. and Strube, M. (2007). Knowledge derived from Wikipedia for computing semantic relatedness. JAIR 30, 181–212.
 
 Popp, D., Donovan, R. A., Crawford, M., Marsh, K. L., and Peele, M. (2003). Gender, race, and speech style stereotypes. Sex Roles 48(7-8), 317– 325.
Porter, M. F. (1980). An algorithm for suffix stripping. Program 14(3), 130– 137.
Post, M. (2018). A call for clarity in reporting BLEU scores. WMT 2018.
Potts, C. (2011). On the negativity of negation. Li, N. and Lutz, D. (Eds.), Proceedings of Semantics and Linguistic Theory 20, 636–659. CLC Publications, Ithaca, NY.
Povey, D., Ghoshal, A., Boulianne, G., Burget, L., Glembek, O., Goel, N., Hannemann, M., Motlicek, P., Qian, Y., Schwarz, P., Silovsky ́, J., Stemmer, G., and Vesely ́, K. (2011). The Kaldi speech recognition toolkit. ASRU.
Pradhan, S., Hovy, E. H., Marcus, M. P., Palmer, M., Ramshaw, L., and Weischedel, R. (2007a). OntoNotes: A unified relational semantic repre- sentation. Proceedings of ICSC.
Pradhan, S., Hovy, E. H., Mar- cus, M. P., Palmer, M., Ramshaw, L. A., and Weischedel, R. M. (2007b). Ontonotes: a unified relational seman- tic representation. Int. J. Semantic Computing 1(4), 405–419.
Pradhan, S., Luo, X., Recasens, M., Hovy, E. H., Ng, V., and Strube, M. (2014). Scoring coreference partitions of predicted mentions: A reference implementation. ACL.
Pradhan, S., Moschitti, A., Xue, N., Ng, H. T., Bjo ̈rkelund, A., Uryupina, O., Zhang, Y., and Zhong, Z. (2013). Towards robust linguistic analysis us- ing OntoNotes. CoNLL.
Pradhan, S., Moschitti, A., Xue, N., Uryupina, O., and Zhang, Y. (2012a). CoNLL-2012 shared task: Modeling multilingual unrestricted coreference in OntoNotes. CoNLL.
Pradhan, S., Moschitti, A., Xue, N., Uryupina, O., and Zhang, Y. (2012b). Conll-2012 shared task: Modeling multilingual unrestricted coreference in OntoNotes. CoNLL.
Pradhan, S., Ramshaw, L., Marcus, M. P., Palmer, M., Weischedel, R., and Xue, N. (2011). CoNLL-2011 shared task: Modeling unrestricted corefer- ence in OntoNotes. CoNLL.
Pradhan, S., Ramshaw, L., Wei- schedel, R., MacBride, J., and Mic- ciulla, L. (2007). Unrestricted coreference: Identifying entities and events in OntoNotes. Proceedings of ICSC 2007.
Pradhan, S., Ward, W., Hacioglu, K., Martin, J. H., and Jurafsky, D. (2005). Semantic role labeling using different syntactic views. ACL.
Prasad, R., Dinesh, N., Lee, A., Milt- sakaki, E., Robaldo, L., Joshi, A. K., and Webber, B. L. (2008). The Penn Discourse TreeBank 2.0. LREC.
Prasad, R., Webber, B. L., and Joshi, A. (2014). Reflections on the Penn Discourse Treebank, comparable corpora, and complementary annota- tion. Computational Linguistics 40(4), 921–950.
Prates, M. O. R., Avelar, P. H., and Lamb, L. C. (2019). Assessing gen- der bias in machine translation: a case study with Google Translate. Neu- ral Computing and Applications 32, 6363–6381.
Price, P. J., Fisher, W., Bernstein, J., and Pallet, D. (1988). The DARPA 1000-word resource manage- ment database for continuous speech recognition. ICASSP.
Price, P. J., Ostendorf, M., Shattuck- Hufnagel, S., and Fong, C. (1991). The use of prosody in syntactic disam- biguation. JASA 90(6).
Prince, E. (1981a). Toward a taxonomy of given-new information. Cole, P. (Ed.), Radical Pragmatics, 223–256. Academic Press.
Prince, E. (1981b). Toward a taxonomy of given-new information. Cole, P. (Ed.), Radical Pragmatics, 223–255. Academic Press.
Propp, V. (1968). Morphology of the Folktale (2nd Ed.). University of Texas Press. Original Russian 1928. Trans- lated by Laurence Scott.
Pu, X., Pappas, N., Henderson, J., and Popescu-Belis, A. (2018). Integrating weakly supervised word sense disam- biguation into neural machine transla- tion. TACL 6, 635–649.
Pullum, G. K. (1991). The Great Es- kimo Vocabulary Hoax. University of Chicago.
Pundak, G. and Sainath, T. N. (2016). Lower frame rate neural network acoustic models. INTERSPEECH.
Purver, M. (2004). The theory and use of clarification requests in dialogue. Ph.D. thesis, University of London.
Pustejovsky, J. (1991). The genera- tive lexicon. Computational Linguis- tics 17(4).
Pustejovsky, J. (1995). The Generative Lexicon. MIT Press.
Pustejovsky, J. and Boguraev, B. K. (Eds.). (1996). Lexical Semantics: The Problem of Polysemy. Oxford Univer- sity Press.
Pustejovsky, J., Castan ̃o, J., Ingria, R., Saur ́ı, R., Gaizauskas, R., Setzer, A., and Katz, G. (2003a). TimeML: robust specification of event and temporal ex- pressions in text. Proceedings of the 5th International Workshop on Com- putational Semantics (IWCS-5).
Bibliography 597
Pustejovsky, J., Hanks, P., Saur ́ı, R., See, A., Gaizauskas, R., Setzer, A., Radev, D., Sundheim, B., Day, D. S., Ferro, L., and Lazo, M. (2003b). The TIMEBANK corpus. Proceedings of Corpus Linguistics 2003 Conference. UCREL Technical Paper number 16.
Pustejovsky, J., Ingria, R., Saur ́ı, R., Castan ̃o, J., Littman, J., Gaizauskas, R., Setzer, A., Katz, G., and Mani, I. (2005). The Specification Language TimeML, chap. 27. Oxford.
Qin, L., Zhang, Z., and Zhao, H. (2016). A stacking gated neural archi- tecture for implicit discourse relation classification. EMNLP.
Qin, L., Zhang, Z., Zhao, H., Hu, Z., and Xing, E. (2017). Adversar- ial connective-exploiting networks for implicit discourse relation classifica- tion. ACL.
Quillian, M. R. (1968). Semantic mem- ory. Minsky, M. (Ed.), Semantic In- formation Processing, 227–270. MIT Press.
Quillian, M. R. (1969). The teachable language comprehender: A simula- tion program and theory of language. CACM 12(8), 459–476.
Quirk, R., Greenbaum, S., Leech, G., and Svartvik, J. (1985). A Compre- hensive Grammar of the English Lan- guage. Longman.
Radford, A., Wu, J., Child, R., Luan, D., Amodei, D., and Sutskever, I. (2019). Language models are unsuper- vised multitask learners. OpenAI tech report.
Radford, A. (1997). Syntactic Theory and the Structure of English: A Mini- malist Approach. Cambridge Univer- sity Press.
Raganato, A., Bovi, C. D., and Navigli, R. (2017a). Neural sequence learning models for word sense disambigua- tion. EMNLP.
Raganato, A., Camacho-Collados, J., and Navigli, R. (2017b). Word sense disambiguation: A unified evaluation framework and empirical comparison. EACL.
Raghunathan, K., Lee, H., Rangara- jan, S., Chambers, N., Surdeanu, M., Jurafsky, D., and Manning, C. D. (2010). A multi-pass sieve for coref- erence resolution. EMNLP.
Rahman, A. and Ng, V. (2009). Su- pervised models for coreference reso- lution. EMNLP.
Rahman, A. and Ng, V. (2012). Re- solving complex cases of definite pro- nouns: the Winograd Schema chal- lenge. EMNLP.
Rajpurkar, P., Jia, R., and Liang, P. (2018). Know what you don’t know: Unanswerable questions for SQuAD. ACL.

598 Bibliography
Rajpurkar, P., Zhang, J., Lopyrev, K., and Liang, P. (2016). SQuAD: 100,000+ questions for machine com- prehension of text. EMNLP.
Ram, A., Prasad, R., Khatri, C., Venkatesh, A., Gabriel, R., Liu, Q., Nunn, J., Hedayatnia, B., Cheng, M., Nagar, A., King, E., Bland, K., Wartick, A., Pan, Y., Song, H., Jayade- van, S., Hwang, G., and Pettigrue, A. (2017). Conversational ai: The science behind the Alexa Prize. 1st Proceed- ings of Alexa Prize.
Ramshaw, L. A. and Marcus, M. P. (1995). Text chunking using transformation-based learning. Pro- ceedings of the 3rd Annual Workshop on Very Large Corpora.
Ranganath, R., Jurafsky, D., and Mc- Farland, D. A. (2013). Detecting friendly, flirtatious, awkward, and as- sertive speech in speed-dates. Com- puter Speech and Language 27(1), 89–115.
Raphael, B. (1968). SIR: A computer program for semantic information re- trieval. Minsky, M. (Ed.), Semantic Information Processing, 33–145. MIT Press.
Rashkin, H., Bell, E., Choi, Y., and Volkova, S. (2017). Multilingual con- notation frames: A case study on so- cial media for targeted sentiment anal- ysis and forecast. ACL.
Rashkin, H., Singh, S., and Choi, Y. (2016). Connotation frames: A data- driven investigation. ACL.
Rashkin, H., Smith, E. M., Li, M., and Boureau, Y.-L. (2019). Towards empa- thetic open-domain conversation mod- els: A new benchmark and dataset. ACL.
Ratinov, L. and Roth, D. (2012). Learning-based multi-sieve co- reference resolution with knowledge. EMNLP.
Ratnaparkhi, A. (1996). A max- imum entropy part-of-speech tagger. EMNLP.
Ratnaparkhi, A. (1997). A linear ob- served time statistical parser based on maximum entropy models. EMNLP.
Recasens, M. and Hovy, E. H. (2011). BLANC: Implementing the Rand in- dex for coreference evaluation. Natu- ral Language Engineering 17(4), 485– 510.
Recasens, M., Hovy, E. H., and Mart ́ı, M. A. (2011). Identity, non-identity, and near-identity: Addressing the complexity of coreference. Lingua 121(6), 1138–1152.
Recasens, M. and Mart ́ı, M. A. (2010). AnCora-CO: Coreferentially annotated corpora for Spanish and Catalan. Language Resources and Evaluation 44(4), 315–345.
Reed, C., Mochales Palau, R., Rowe, G., and Moens, M.-F. (2008). Lan- guage resources for studying argu- ment. LREC.
Rehder, B., Schreiner, M. E., Wolfe, M. B. W., Laham, D., Landauer, T. K., and Kintsch, W. (1998). Using Latent Semantic Analysis to assess knowl- edge: Some technical considerations. Discourse Processes 25(2-3), 337– 354.
Reichenbach, H. (1947). Elements of Symbolic Logic. Macmillan, New York.
Reichman, R. (1985). Getting Com- puters to Talk Like You and Me. MIT Press.
Resnik, P. (1993). Semantic classes and syntactic ambiguity. Proceedings of the workshop on Human Language Technology.
Resnik, P. (1996). Selectional con- straints: An information-theoretic model and its computational realiza- tion. Cognition 61, 127–159.
Richardson, M., Burges, C. J. C., and Renshaw, E. (2013). MCTest: A chal- lenge dataset for the open-domain ma- chine comprehension of text. EMNLP.
Riedel, S., Yao, L., and McCallum, A. (2010). Modeling relations and their mentions without labeled text. Machine Learning and Knowledge Discovery in Databases, 148–163. Springer.
Riedel, S., Yao, L., McCallum, A., and Marlin, B. M. (2013). Relation extrac- tion with matrix factorization and uni- versal schemas. NAACL HLT.
Riesbeck, C. K. (1975). Conceptual analysis. Schank, R. C. (Ed.), Concep- tual Information Processing, 83–156. American Elsevier, New York.
Riloff, E. (1993). Automatically con- structing a dictionary for information extraction tasks. AAAI.
Riloff, E. (1996). Automatically gen- erating extraction patterns from un- tagged text. AAAI.
Riloff, E. and Jones, R. (1999). Learn- ing dictionaries for information ex- traction by multi-level bootstrapping. AAAI.
Riloff, E. and Schmelzenbach, M. (1998). An empirical approach to con- ceptual case frame acquisition. Pro- ceedings of the Sixth Workshop on Very Large Corpora.
Riloff, E. and Shepherd, J. (1997). A corpus-based approach for building semantic lexicons. EMNLP.
Riloff, E. and Thelen, M. (2000). A rule-based question answering sys- tem for reading comprehension tests. ANLP/NAACL workshop on reading comprehension tests.
Riloff, E. and Wiebe, J. (2003). Learn- ing extraction patterns for subjective expressions. EMNLP.
Ritter, A., Cherry, C., and Dolan, B. (2010). Unsupervised modeling of twitter conversations. HLT-NAACL.
Ritter, A., Cherry, C., and Dolan, B. (2011). Data-driven response gener- ation in social media. EMNLP.
Ritter, A., Etzioni, O., and Mausam (2010). A latent dirichlet allocation method for selectional preferences. ACL.
Ritter, A., Zettlemoyer, L., Mausam, and Etzioni, O. (2013). Modeling missing data in distant supervision for information extraction. TACL 1, 367– 378.
Roberts, A., Raffel, C., and Shazeer, N. (2020). How much knowledge can you pack into the parameters of a language model?. arXiv preprint arXiv:2002.08910.
Robertson, S., Walker, S., Jones, S., Hancock-Beaulieu, M. M., and Gat- ford, M. (1995). Okapi at TREC-3. Overview of the Third Text REtrieval Conference (TREC-3).
Robins, R. H. (1967). A Short His- tory of Linguistics. Indiana University Press, Bloomington.
Robinson, T. and Fallside, F. (1991). A recurrent error propagation network speech recognition system. Computer Speech & Language 5(3), 259–274.
Rohde, D. L. T., Gonnerman, L. M., and Plaut, D. C. (2006). An improved model of semantic similarity based on lexical co-occurrence. CACM 8, 627– 633.
Roller, S., Dinan, E., Goyal, N., Ju, D., Williamson, M., Liu, Y., Xu, J., Ott, M., Shuster, K., Smith, E. M., Boureau, Y.-L., and Weston, J. (2020). Recipes for building an open-domain chatbot. arXiv preprint arXiv:2004.13637.
Rooth, M., Riezler, S., Prescher, D., Carroll, G., and Beil, F. (1999). In- ducing a semantically annotated lexi- con via EM-based clustering. ACL.
Rosenblatt, F. (1958). The perceptron: A probabilistic model for information storage and organization in the brain. Psychological review 65(6), 386–408.
Rosenfeld, R. (1996). A maximum en- tropy approach to adaptive statistical language modeling. Computer Speech and Language 10, 187–228.
Rosenthal, S. and McKeown, K. (2017). Detecting influencers in mul- tiple online genres. ACM Transactions on Internet Technology (TOIT) 17(2).
Rothe, S., Ebert, S., and Schu ̈tze, H. (2016). Ultradense Word Embed- dings by Orthogonal Transformation. NAACL HLT.
 
 Roy, N., Pineau, J., and Thrun, S. (2000). Spoken dialog management for robots. ACL.
Rudinger, R., Naradowsky, J., Leonard, B., and Van Durme, B. (2018). Gender bias in coreference resolution. NAACL HLT.
Rumelhart, D. E., Hinton, G. E., and Williams, R. J. (1986). Learning in- ternal representations by error propa- gation. Rumelhart, D. E. and McClel- land, J. L. (Eds.), Parallel Distributed Processing, Vol. 2, 318–362. MIT Press.
Rumelhart, D. E. and McClelland, J. L. (1986a). On learning the past tense of English verbs. Rumel- hart, D. E. and McClelland, J. L. (Eds.), Parallel Distributed Process- ing, Vol. 2, 216–271. MIT Press.
Rumelhart, D. E. and McClelland, J. L. (Eds.). (1986b). Parallel Dis- tributed Processing. MIT Press.
Rumelhart, D. E. and Abrahamson, A. A. (1973). A model for analogical reasoning. Cognitive Psychology 5(1), 1–28.
Rumelhart, D. E. and McClelland, J. L. (Eds.). (1986). Parallel Dis- tributed Processing: Explorations in the Microstructure of Cognition, Vol. 1: Foundations. MIT Press.
Ruppenhofer, J., Ellsworth, M., Petruck, M. R. L., Johnson, C. R., Baker, C. F., and Scheffczyk, J. (2016). FrameNet II: Extended theory and practice..
Ruppenhofer, J., Sporleder, C., Morante, R., Baker, C. F., and Palmer, M. (2010). Semeval-2010 task 10: Linking events and their participants in discourse. 5th International Work- shop on Semantic Evaluation.
Russell, J. A. (1980). A circumplex model of affect. Journal of personal- ity and social psychology 39(6), 1161– 1178.
Russell, S. and Norvig, P. (2002). Ar- tificial Intelligence: A Modern Ap- proach (2nd Ed.). Prentice Hall.
Rutherford, A. and Xue, N. (2015). Improving the inference of implicit discourse relations via classifying ex- plicit discourse connectives. NAACL HLT.
Sacks,H.,Schegloff,E.A.,andJeffer- son, G. (1974). A simplest systematics for the organization of turn-taking for conversation. Language 50(4), 696– 735.
Sag, I. A. and Liberman, M. Y. (1975). The intonational disambiguation of in- direct speech acts. CLS-75, 487–498. University of Chicago.
Sag, I. A., Wasow, T., and Bender, E. M. (Eds.). (2003). Syntactic The- ory: A Formal Introduction. CSLI Publications, Stanford, CA.
Sagae, K. (2009). Analysis of discourse structure with syntactic dependencies and data-driven shift-reduce parsing. IWPT-09.
Sagisaka, Y. (1988). Speech synthesis by rule using an optimal selection of non-uniform synthesis units. ICASSP.
Sagisaka, Y., Kaiki, N., Iwahashi, N., and Mimura, K. (1992). Atr – ν-talk speech synthesis system. ICSLP.
Sahami, M., Dumais, S. T., Hecker- man, D., and Horvitz, E. (1998). A Bayesian approach to filtering junk e- mail. AAAI Workshop on Learning for Text Categorization.
Sakoe, H. and Chiba, S. (1971). A dynamic programming approach to continuous speech recognition. Pro- ceedings of the Seventh Interna- tional Congress on Acoustics, Vol. 3. Akade ́miai Kiado ́.
Sakoe, H. and Chiba, S. (1984). Dy- namic programming algorithm opti- mization for spoken word recogni- tion. IEEE Transactions on Acoustics, Speech, and Signal Processing ASSP- 26(1), 43–49.
Salton, G. (1971). The SMART Re- trieval System: Experiments in Auto- matic Document Processing. Prentice Hall.
Sampson, G. (1987). Alternative gram- matical coding systems. Garside, R., Leech, G., and Sampson, G. (Eds.), The Computational Analysis of En- glish, 165–183. Longman.
Sankoff, D. and Labov, W. (1979). On the uses of variable rules. Language in society 8(2-3), 189–222.
Sap, M., Card, D., Gabriel, S., Choi, Y., and Smith, N. A. (2019). The risk of racial bias in hate speech detection. ACL.
Sap, M., Prasettio, M. C., Holtz- man, A., Rashkin, H., and Choi, Y. (2017). Connotation frames of power and agency in modern films. EMNLP.
Scha, R. and Polanyi, L. (1988). An augmented context free grammar for discourse. COLING.
Schank, R. C. (1972). Conceptual de- pendency: A theory of natural lan- guage processing. Cognitive Psychol- ogy 3, 552–631.
Schank, R. C. and Abelson, R. P. (1975).Scripts,plans,andknowledge. Proceedings of IJCAI-75.
Schank, R. C. and Abelson, R. P. (1977). Scripts, Plans, Goals and Un- derstanding. Lawrence Erlbaum.
Schegloff, E. A. (1968). Sequencing in conversational openings. American Anthropologist 70, 1075–1095.
Scherer, K. R. (2000). Psychologi- cal models of emotion. Borod, J. C. (Ed.), The neuropsychology of emo- tion, 137–162. Oxford.
Bibliography 599
Schiebinger, L. (2013). Machine translation: Analyzing gender. http://genderedinnovations. stanford.edu/case- studies/ nlp.html#tabs- 2.
Schiebinger, L. (2014). Scientific re- search must take gender into account. Nature 507(7490), 9.
Schneider, N., Hwang, J. D., Sriku- mar, V., Prange, J., Blodgett, A., Moeller, S. R., Stern, A., Bitan, A., and Abend, O. (2018). Comprehensive supersense disambiguation of English prepositions and possessives. ACL.
Schone, P. and Jurafsky, D. (2000). Knowlege-free induction of morphol- ogy using latent semantic analysis. CoNLL.
Schone, P. and Jurafsky, D. (2001a). Is knowledge-free induction of mul- tiword unit dictionary headwords a solved problem?. EMNLP.
Schone, P. and Jurafsky, D. (2001b). Knowledge-free induction of inflec- tional morphologies. NAACL.
 ̈ Scho ̈nfinkel, M. (1924). Uber die
Bausteine der mathematischen Logik. Mathematische Annalen 92, 305–316. English translation appears in From Frege to Go ̈del: A Source Book in Mathematical Logic, Harvard Univer- sity Press, 1967.
Schuster, M. and Nakajima, K. (2012). Japanese and korean voice search. ICASSP.
Schuster, M. and Paliwal, K. K. (1997). Bidirectional recurrent neural networks. IEEE Transactions on Sig- nal Processing 45, 2673–2681.
Schu ̈tze, H. (1992a). Context space. Goldman, R. (Ed.), AAAI Fall Sympo- sium on Probabilistic Approaches to Natural Language.
Schu ̈tze, H. (1992b). Dimensions of meaning. Proceedings of Supercom- puting ’92. IEEE Press.
Schu ̈tze, H. (1997a). Ambiguity Resolution in Language Learning – Computational and Cognitive Models. CSLI, Stanford, CA.
Schu ̈tze, H. (1997b). Ambiguity Reso- lution in Language Learning: Compu- tational and Cognitive Models. CSLI Publications, Stanford, CA.
Schu ̈tze,H.(1998). Automaticword sense discrimination. Computational Linguistics 24(1), 97–124.
Schu ̈tze,H.,Hull,D.A.,andPedersen, J. (1995). A comparison of classifiers and document representations for the routing problem. SIGIR-95.
Schu ̈tze, H. and Pedersen, J. (1993). A vector model for syntagmatic and paradigmatic relatedness. 9th Annual Conference of the UW Centre for the New OED and Text Research.

600 Bibliography
Schu ̈tze, H. and Singer, Y. (1994). Part-of-speech tagging using a vari- able memory Markov model. ACL.
Schwartz, H. A., Eichstaedt, J. C., Kern, M. L., Dziurzynski, L., Ra- mones, S. M., Agrawal, M., Shah, A., Kosinski, M., Stillwell, D., Seligman, M. E. P., and Ungar, L. H. (2013). Personality, gender, and age in the language of social media: The open- vocabulary approach. PloS one 8(9), e73791.
Schwenk, H. (2007). Continuous space language models. Computer Speech & Language 21(3), 492–518.
Schwenk, H. (2018). Filtering and min- ing parallel data in a joint multilingual space. ACL.
Se ́aghdha, D. O. (2010). Latent vari- able models of selectional preference. ACL.
Seddah, D., Tsarfaty, R., Ku ̈bler, S., Candito, M., Choi, J. D., Farkas, R., Foster, J., Goenaga, I., Gojenola, K., Goldberg, Y., Green, S., Habash, N., Kuhlmann, M., Maier, W., Nivre, J., Przepio ́rkowski, A., Roth, R., Seeker, W., Versley, Y., Vincze, V., Wolin ́ski, M., Wro ́blewska, A., and Villemonte de la Cle ́rgerie, E. (2013). Overview of the SPMRL 2013 shared task: cross-framework evaluation of pars- ing morphologically rich languages. 4th Workshop on Statistical Parsing of Morphologically-Rich Languages.
See, A., Roller, S., Kiela, D., and Weston, J. (2019). What makes a good conversation? how control- lable attributes affect human judg- ments. NAACL HLT.
Sekine, S. and Collins, M. (1997). The evalb software. http://cs. nyu.edu/cs/projects/proteus/ evalb.
Sellam, T., Das, D., and Parikh, A. (2020). BLEURT: Learning robust metrics for text generation. ACL.
Seneff, S. and Zue, V. W. (1988). Transcription and alignment of the TIMIT database. Proceedings of the Second Symposium on Advanced Man-Machine Interface through Spo- ken Language.
Sennrich, R., Haddow, B., and Birch, A. (2016). Neural machine transla- tion of rare words with subword units. ACL.
Seo, M., Kembhavi, A., Farhadi, A., and Hajishirzi, H. (2017). Bidirec- tional attention flow for machine com- prehension. ICLR.
Serban, I. V., Lowe, R., Henderson, P., Charlin, L., and Pineau, J. (2018). A survey of available corpora for build- ing data-driven dialogue systems: The journal version. Dialogue & Dis- course 9(1), 1–49.
Sgall, P., Hajicˇova ́, E., and Panevova, J. (1986). The Meaning of the Sentence in its Pragmatic Aspects. Reidel.
Shang, L., Lu, Z., and Li, H. (2015). Neural responding machine for short- text conversation. ACL.
Shannon, C. E. (1948). A mathemat- ical theory of communication. Bell System Technical Journal 27(3), 379– 423. Continued in the following vol- ume.
Shannon, C. E. (1951). Prediction and entropy of printed English. Bell Sys- tem Technical Journal 30, 50–64.
Sheil, B. A. (1976). Observations on context free parsing. SMIL: Statistical Methods in Linguistics 1, 71–109.
Shen, J., Pang, R., Weiss, R. J., Schus- ter, M., Jaitly, N., Yang, Z., Chen, Z., Zhang, Y., Wang, Y., Skerry-Ryan, R., Saurous, R. A., Agiomyrgiannakis, Y., and Wu, Y. (2018). Natural TTS synthesis by conditioning WaveNet on mel spectrogram predictions. ICASSP.
Sheng, E., Chang, K.-W., Natarajan, P., and Peng, N. (2019). The woman worked as a babysitter: On biases in language generation. EMNLP.
Shi, P. and Lin, J. (2019). Simple BERT models for relation extraction and se- mantic role labeling. arXiv preprint arXiv:1904.05255.
Shoup, J. E. (1980). Phonological aspects of speech recognition. Lea, W. A. (Ed.), Trends in Speech Recog- nition, 125–138. Prentice Hall.
Shriberg, E., Bates, R., Taylor, P., Stol- cke, A., Jurafsky, D., Ries, K., Coc- caro, N., Martin, R., Meteer, M., and Van Ess-Dykema, C. (1998). Can prosody aid the automatic classifica- tion of dialog acts in conversational speech?. Language and Speech (Spe- cial Issue on Prosody and Conversa- tion) 41(3-4), 439–487.
Sidner, C. L. (1979). Towards a com- putational theory of definite anaphora comprehension in English discourse. Tech. rep. 537, MIT Artificial Intelli- gence Laboratory, Cambridge, MA.
Sidner, C. L. (1983). Focusing in the comprehension of definite anaphora. Brady, M. and Berwick, R. C. (Eds.), Computational Models of Discourse, 267–330. MIT Press.
Silverman, K., Beckman, M. E., Pitrelli, J. F., Ostendorf, M., Wight- man, C. W., Price, P. J., Pierrehum- bert, J. B., and Hirschberg, J. (1992). ToBI: A standard for labelling English prosody. ICSLP.
Simmons, R. F. (1965). Answering En- glish questions by computer: A sur- vey. CACM 8(1), 53–70.
Simmons, R. F. (1973). Semantic net- works: Their computation and use
for understanding English sentences. Schank, R. C. and Colby, K. M. (Eds.), Computer Models of Thought and Language, 61–113. W.H. Free- man and Co.
Simmons, R. F., Klein, S., and Mc- Conlogue, K. (1964). Indexing and de- pendency logic for answering English questions. American Documentation 15(3), 196–204.
Simons, G. F. and Fennig, C. D. (2018). Ethnologue: Languages of the world, 21st edition. SIL International.
Singh, S. P., Litman, D. J., Kearns, M., and Walker, M. A. (2002). Optimizing dialogue management with reinforce- ment learning: Experiments with the NJFun system. JAIR 16, 105–133.
Sleator, D. and Temperley, D. (1993). Parsing English with a link grammar. IWPT-93.
Slobin, D. I. (1996). Two ways to travel. Shibatani, M. and Thompson, S. A. (Eds.), Grammatical Construc- tions: Their Form and Meaning, 195– 220. Clarendon Press.
Small, S. L. and Rieger, C. (1982). Parsing and comprehending with Word Experts. Lehnert, W. G. and Ringle, M. H. (Eds.), Strategies for Natural Language Processing, 89– 147. Lawrence Erlbaum.
Smith, V. L. and Clark, H. H. (1993). On the course of answering questions. Journal of Memory and Language 32, 25–38.
Smolensky, P. (1988). On the proper treatment of connectionism. Behav- ioral and brain sciences 11(1), 1–23.
Smolensky, P. (1990). Tensor product variable binding and the representa- tion of symbolic structures in connec- tionist systems. Artificial intelligence 46(1-2), 159–216.
Snover, M., Dorr, B., Schwartz, R., Micciulla, L., and Makhoul, J. (2006). A study of translation edit rate with targeted human annotation. AMTA- 2006.
Snow, R., Jurafsky, D., and Ng, A. Y. (2005). Learning syntactic patterns for automatic hypernym discovery. NeurIPS.
Snow, R., Prakash, S., Jurafsky, D., and Ng, A. Y. (2007). Learning to merge word senses. EMNLP/CoNLL.
Snyder, B. and Palmer, M. (2004). The English all-words task. SENSEVAL-3.
Soderland, S., Fisher, D., Aseltine, J., and Lehnert, W. G. (1995). CRYS- TAL: Inducing a conceptual dictio- nary. IJCAI-95.
Søgaard, A. (2010). Simple semi- supervised training of part-of-speech taggers. ACL.
 
 Søgaard, A. and Goldberg, Y. (2016). Deep multi-task learning with low level tasks supervised at lower layers. ACL.
Søgaard, A., Johannsen, A., Plank, B., Hovy, D., and Alonso, H. M. (2014). What’s in a p-value in NLP?. CoNLL.
Solorio, T., Blair, E., Maharjan, S., Bethard, S., Diab, M., Ghoneim, M., Hawwari, A., AlGhamdi, F., Hirschberg, J., Chang, A., and Fung, P. (2014). Overview for the first shared task on language identification in code-switched data. First Work- shop on Computational Approaches to Code Switching.
Somasundaran, S., Burstein, J., and Chodorow, M. (2014). Lexical chain- ing for measuring discourse coherence quality in test-taker essays. COLING.
Soon, W. M., Ng, H. T., and Lim, D. C. Y. (2001). A machine learning approach to coreference resolution of noun phrases. Computational Linguis- tics 27(4), 521–544.
Sordoni, A., Galley, M., Auli, M., Brockett, C., Ji, Y., Mitchell, M., Nie, J.-Y., Gao, J., and Dolan, B. (2015). A neural network approach to context- sensitive generation of conversational responses. NAACL HLT.
Soricut, R. and Marcu, D. (2003). Sentence level discourse parsing us- ing syntactic and lexical information. HLT-NAACL.
Soricut, R. and Marcu, D. (2006). Dis- course generation using utility-trained coherence models. COLING/ACL.
Sorokin, D. and Gurevych, I. (2018). Mixing context granularities for im- proved entity linking on question an- swering data across entity categories. *SEM.
Sparck Jones, K. (1972). A statistical interpretation of term specificity and its application in retrieval. Journal of Documentation 28(1), 11–21.
Sparck Jones, K. (1986). Synonymy and Semantic Classification. Edin- burgh University Press, Edinburgh. Republication of 1964 PhD Thesis.
Sporleder, C. and Lascarides, A. (2005). Exploiting linguistic cues to classify rhetorical relations. RANLP- 05.
Sporleder, C. and Lapata, M. (2005). Discourse chunking and its appli- cation to sentence compression. EMNLP.
Sproat, R., Black, A. W., Chen, S. F., Kumar, S., Ostendorf, M., and Richards, C. (2001). Normalization of non-standard words. Computer Speech & Language 15(3), 287–333.
Sproat, R. and Gorman, K. (2018). A brief summary of the Kaggle text
Bibliography 601
normalization challenge. http: Stevens, S. S. and Volkmann, J. (1940). //blog.kaggle.com/2018/02/07/ The relation of pitch to frequency: A a- brief- summary- of- the- kaggle- terxetv-isneodrsmcalei.zaTthieoAn-mcehriaclalneJnoguer/n.al
Srivastava, N., Hinton, G. E., Krizhevsky, A., Sutskever, I., and Salakhutdinov, R. R. (2014). Dropout: a simple way to prevent neural net- works from overfitting. JMLR 15(1), 1929–1958.
Stab, C. and Gurevych, I. (2014a). An- notating argument components and re- lations in persuasive essays. COLING.
Stab, C. and Gurevych, I. (2014b). Identifying argumentative discourse structures in persuasive essays. EMNLP.
Stab, C. and Gurevych, I. (2017). Pars- ing argumentation structures in per- suasive essays. Computational Lin- guistics 43(3), 619–659.
Stalnaker, R. C. (1978). Assertion. Cole, P. (Ed.), Pragmatics: Syntax and Semantics Volume 9, 315–332. Aca- demic Press.
Stamatatos, E. (2009). A survey of modern authorship attribution meth- ods. JASIST 60(3), 538–556.
Stanovsky, G., Smith, N. A., and Zettlemoyer, L. (2019). Evaluating gender bias in machine translation. ACL.
Stede, M. (2011). Discourse process- ing. Morgan & Claypool.
Stede, M. and Schneider, J. (2018). Ar- gumentation Mining. Morgan & Clay- pool.
Steedman, M. (1989). Constituency and coordination in a combinatory grammar. Baltin, M. R. and Kroch, A. S. (Eds.), Alternative Conceptions of Phrase Structure, 201–231. Univer- sity of Chicago.
Steedman, M. (1996). Surface Struc- ture and Interpretation. MIT Press. Linguistic Inquiry Monograph, 30.
Steedman, M. (2000). The Syntactic Process. The MIT Press.
Stern, M., Andreas, J., and Klein, D. (2017). A minimal span-based neural constituency parser. ACL.
Stevens, K. N. (1998). Acoustic Pho- netics. MIT Press.
Stevens, K. N. and House, A. S. (1955). Development of a quantitative descrip- tion of vowel articulation. JASA 27, 484–493.
Stevens, K. N. and House, A. S. (1961). An acoustical theory of vowel pro- duction and some of its implications. Journal of Speech and Hearing Re- search 4, 303–320.
Stevens, K. N., Kasowski, S., and Fant, G. M. (1953). An electrical analog of the vocal tract. JASA 25(4), 734–742.
of Psychology 53(3), 329–353. Stevens, S. S., Volkmann, J., and New-
man, E. B. (1937). A scale for the measurement of the psychological magnitude pitch. JASA 8, 185–190.
Stifelman, L. J., Arons, B., Schmandt, C., and Hulteen, E. A. (1993). VoiceNotes: A speech interface for a hand-held voice notetaker. INTERCHI 1993.
Stolcke, A. (1998). Entropy-based pruning of backoff language models. Proc. DARPA Broadcast News Tran- scription and Understanding Work- shop.
Stolcke, A. (2002). SRILM – an exten- sible language modeling toolkit. IC- SLP.
Stolcke, A., Ries, K., Coccaro, N., Shriberg, E., Bates, R., Jurafsky, D., Taylor, P., Martin, R., Meteer, M., and Van Ess-Dykema, C. (2000). Dia- logue act modeling for automatic tag- ging and recognition of conversational speech. Computational Linguistics 26(3), 339–371.
Stolz, W. S., Tannenbaum, P. H., and Carstensen, F. V. (1965). A stochastic approach to the grammatical coding of English. CACM 8(6), 399–405.
Stone, P., Dunphry, D., Smith, M., and Ogilvie, D. (1966). The General In- quirer: A Computer Approach to Con- tent Analysis. MIT Press.
Stoyanchev, S. and Johnston, M. (2015). Localized error detection for targeted clarification in a virtual assis- tant. ICASSP.
Stoyanchev, S., Liu, A., and Hirsch- berg, J. (2013). Modelling human clar- ification strategies. SIGDIAL.
Stoyanchev, S., Liu, A., and Hirsch- berg, J. (2014). Towards natural clari- fication questions in dialogue systems. AISB symposium on questions, dis- course and dialogue.
Stro ̈tgen, J. and Gertz, M. (2013). Mul- tilingual and cross-domain temporal tagging. Language Resources and Evaluation 47(2), 269–298.
Strube, M. and Hahn, U. (1996). Func- tional centering. ACL.
Su, Y., Sun, H., Sadler, B., Srivatsa, M., Gu ̈r, I., Yan, Z., and Yan, X. (2016). On generating characteristic- rich question sets for QA evaluation. EMNLP.
Subba, R. and Di Eugenio, B. (2009). An effective discourse parser that uses rich linguistic information. NAACL HLT.
Suendermann, D., Evanini, K., Lis- combe, J., Hunter, P., Dayanidhi, K.,

602 Bibliography
and Pieraccini, R. (2009). From rule- based to statistical grammars: Contin- uous improvement of large-scale spo- ken dialog systems. ICASSP.
Sundheim, B. (Ed.). (1991). Proceed- ings of MUC-3.
Sundheim, B. (Ed.). (1992). Proceed- ings of MUC-4.
Sundheim, B. (Ed.). (1993). Proceed- ings of MUC-5, Baltimore, MD.
Sundheim, B. (Ed.). (1995). Proceed- ings of MUC-6.
Surdeanu, M. (2013). Overview of the TAC2013 Knowledge Base Popu- lation evaluation: English slot filling and temporal slot filling. TAC-13.
Surdeanu, M., Harabagiu, S., Williams, J., and Aarseth, P. (2003). Using predicate-argument structures for information extraction. ACL.
Surdeanu, M., Hicks, T., and Valenzuela-Escarcega, M. A. (2015). Two practical rhetorical structure the- ory parsers. NAACL HLT.
Surdeanu, M., Johansson, R., Meyers, A., Ma`rquez, L., and Nivre, J. (2008). The conll-2008 shared task on joint parsing of syntactic and semantic de- pendencies. CoNLL.
Sutskever, I., Vinyals, O., and Le, Q. V. (2014). Sequence to sequence learning with neural networks. NeurIPS.
Sweet, H. (1877). A Handbook of Pho- netics. Clarendon Press.
Swerts, M., Litman, D. J., and Hirsch- berg, J. (2000). Corrections in spoken dialogue systems. ICSLP.
Swier, R. and Stevenson, S. (2004). Unsupervised semantic role labelling. EMNLP.
Switzer, P. (1965). Vector images in document retrieval. Stevens, M. E., Giuliano, V. E., and Heil- prin, L. B. (Eds.), Statistical As- sociation Methods For Mechanized Documentation. Symposium Pro- ceedings. Washington, D.C., USA, March 17, 1964. https://nvlpubs. nist.gov/nistpubs/Legacy/MP/ nbsmiscellaneouspub269.pdf.
Syrdal, A. K., Wightman, C. W., Conkie, A., Stylianou, Y., Beutnagel, M., Schroeter, J., Strom, V., and Lee, K.-S. (2000). Corpus-based tech- niques in the AT&T NEXTGEN syn- thesis system. ICSLP.
Talbot, D. and Osborne, M. (2007). Smoothed Bloom Filter Language Models: Tera-Scale LMs on the Cheap. EMNLP/CoNLL.
Talmor, A. and Berant, J. (2018). The web as a knowledge-base for answer- ing complex questions. NAACL HLT.
Talmy, L. (1985). Lexicalization pat- terns: Semantic structure in lexical
forms. Shopen, T. (Ed.), Language Ty- pology and Syntactic Description, Vol- ume 3. Cambridge University Press. Originally appeared as UC Berke- ley Cognitive Science Program Report No. 30, 1980.
Talmy, L. (1991). Path to realization: A typology of event conflation. BLS-91.
Tan, C., Niculae, V., Danescu- Niculescu-Mizil, C., and Lee, L. (2016). Winning arguments: In- teraction dynamics and persuasion strategies in good-faith online discus- sions. WWW-16.
Tannen, D. (1979). What’s in a frame? Surface evidence for underlying ex- pectations. Freedle, R. (Ed.), New Directions in Discourse Processing, 137–181. Ablex.
Taylor, P. (2009). Text-to-Speech Syn- thesis. Cambridge University Press.
ter Meulen, A. (1995). Representing Time in Natural Language. MIT Press.
Teranishi, R. and Umeda, N. (1968). Use of pronouncing dictionary in speech synthesis experiments. 6th In- ternational Congress on Acoustics.
 ́
Tesnie`re, L. (1959). Ele ́ments de Syn-
taxe Structurale. Librairie C. Klinck- sieck, Paris.
Tetreault, J. R. (2001). A corpus-based evaluation of centering and pronoun resolution. Computational Linguistics 27(4), 507–520.
Teufel, S., Carletta, J., and Moens, M. (1999). An annotation scheme for discourse-level argumentation in re- search articles. EACL.
Teufel, S., Siddharthan, A., and Batch- elor, C. (2009). Towards domain- independent argumentative zoning: Evidence from chemistry and compu- tational linguistics. EMNLP.
Thede, S. M. and Harper, M. P. (1999). A second-order hidden Markov model for part-of-speech tagging. ACL.
Thompson, B. and Koehn, P. (2019). Vecalign: Improved sentence align- ment in linear time and space. EMNLP.
Thompson, K. (1968). Regular expres- sion search algorithm. CACM 11(6), 419–422.
Tibshirani, R. J. (1996). Regression shrinkage and selection via the lasso. Journal of the Royal Statistical Soci- ety. Series B (Methodological) 58(1), 267–288.
Titov, I. and Khoddam, E. (2014). Un- supervised induction of semantic roles within a reconstruction-error mini- mization framework. NAACL HLT.
Titov, I. and Klementiev, A. (2012). A Bayesian approach to unsupervised semantic role induction. EACL.
Tomkins, S. S. (1962). Affect, imagery, consciousness: Vol. I. The positive af- fects. Springer.
Toutanova, K., Klein, D., Manning, C. D., and Singer, Y. (2003). Feature- rich part-of-speech tagging with a cyclic dependency network. HLT- NAACL.
Trichelair, P., Emami, A., Cheung, J. C. K., Trischler, A., Suleman, K., and Diaz, F. (2018). On the evaluation of common-sense reasoning in natu- ral language understanding. NeurIPS 2018 Workshop on Critiquing and Correcting Trends in Machine Learn- ing.
Trnka, K., Yarrington, D., McCaw, J., McCoy, K. F., and Pennington, C. (2007). The effects of word predic- tion on communication rate for AAC. NAACL-HLT.
Tsvetkov, Y., Schneider, N., Hovy, D., Bhatia, A., Faruqui, M., and Dyer, C. (2014). Augmenting English adjective senses with supersenses. LREC.
Tur, G. and De Mori, R. (2011). Spoken language understanding: Systems for extracting semantic information from speech. John Wiley & Sons.
Turian, J. P., Shen, L., and Melamed, I. D. (2003). Evaluation of machine translation and its evaluation. Pro- ceedings of MT Summit IX.
Turian, J., Ratinov, L., and Bengio, Y. (2010). Word representations: a simple and general method for semi- supervised learning. ACL.
Turney, P. D. (2002). Thumbs up or thumbs down? Semantic orientation applied to unsupervised classification of reviews. ACL.
Turney, P. D. and Littman, M. (2003). Measuring praise and criticism: Infer- ence of semantic orientation from as- sociation. ACM Transactions on Infor- mation Systems (TOIS) 21, 315–346.
Turney, P. D. and Littman, M. L. (2005). Corpus-based learning of analogies and semantic relations. Ma- chine Learning 60(1-3), 251–278.
Umeda, N. (1976). Linguistic rules for text-to-speech synthesis. Proceedings of the IEEE 64(4), 443–451.
Umeda, N., Matui, E., Suzuki, T., and Omura, H. (1968). Synthesis of fairy tale using an analog vocal tract. 6th International Congress on Acoustics.
Uryupina, O., Artstein, R., Bristot, A., Cavicchio, F., Delogu, F., Rodriguez, K. J., and Poesio, M. (2020). Anno- tating a broad range of anaphoric phe- nomena, in a variety of genres: The ARRAU corpus. Natural Language Engineering 26(1), 1–34.
UzZaman, N., Llorens, H., Derczyn- ski, L., Allen, J., Verhagen, M., and
 
 Pustejovsky, J. (2013). SemEval-2013 task 1: TempEval-3: Evaluating time expressions, events, and temporal re- lations. SemEval-13.
van Benthem, J. and ter Meulen, A. (Eds.). (1997). Handbook of Logic and Language. MIT Press.
van Deemter, K. and Kibble, R. (2000). On coreferring: corefer- ence in MUC and related annotation schemes. Computational Linguistics 26(4), 629–637.
van den Oord, A., Dieleman, S., Zen, H., Simonyan, K., Vinyals, O., Graves, A., Kalchbrenner, N., Senior, A., and Kavukcuoglu, K. (2016). Wavenet: A generative model for raw audio. arXiv preprint arXiv:1609.03499.
van der Maaten, L. and Hinton, G. E. (2008). Visualizing high-dimensional data using t-sne. JMLR 9, 2579–2605.
van Esch, D. and Sproat, R. (2018). An expanded taxonomy of semiotic classes for text normalization. INTER- SPEECH.
van Rijsbergen, C. J. (1975). Informa- tion Retrieval. Butterworths.
Van Valin, Jr., R. D. and La Polla, R. (1997). Syntax: Structure, Meaning, and Function. Cambridge University Press.
Vaswani, A., Shazeer, N., Parmar, N., Uszkoreit, J., Jones, L., Gomez, A. N., Kaiser, Ł., and Polosukhin, I. (2017). Attention is all you need. NeurIPS.
Vauquois, B. (1968). A survey of formal grammars and algorithms for recognition and transformation in ma- chine translation. IFIP Congress 1968.
Velichko, V. M. and Zagoruyko, N. G. (1970). Automatic recognition of 200 words. International Journal of Man- Machine Studies 2, 223–234.
Velikovich, L., Blair-Goldensohn, S., Hannan, K., and McDonald, R. (2010). The viability of web-derived polarity lexicons. NAACL HLT.
Vendler, Z. (1967). Linguistics in Phi- losophy. Cornell University Press.
Verhagen, M., Gaizauskas, R., Schilder, F., Hepple, M., Moszkow- icz, J., and Pustejovsky, J. (2009). The TempEval challenge: Identifying temporal relations in text. Language Resources and Evaluation 43(2), 161– 179.
Verhagen, M., Mani, I., Sauri, R., Knippen, R., Jang, S. B., Littman, J., Rumshisky, A., Phillips, J., and Puste- jovsky, J. (2005). Automating tempo- ral annotation with TARSQI. ACL.
Versley, Y. (2008). Vagueness and ref- erential ambiguity in a large-scale an- notated corpus. Research on Language and Computation 6(3-4), 333–353.
Vieira, R. and Poesio, M. (2000). An empirically based system for process- ing definite descriptions. Computa- tional Linguistics 26(4), 539–593.
Vijayakumar, A. K., Cogswell, M., Selvaraju, R. R., Sun, Q., Lee, S., Crandall, D., and Batra, D. (2018). Di- verse beam search: Decoding diverse solutions from neural sequence mod- els. AAAI.
Vilain, M., Burger, J. D., Aberdeen, J., Connolly, D., and Hirschman, L. (1995). A model-theoretic coreference scoring scheme. MUC-6.
Vintsyuk, T. K. (1968). Speech discrimination by dynamic program- ming. Cybernetics 4(1), 52–57. Rus- sian Kibernetika 4(1):81-88. 1968.
Vinyals, O. and Le, Q. V. (2015). A neural conversational model. ICML Deep Learning Workshop.
Voorhees, E. M. and Harman, D. K. (2005). TREC: Experiment and Eval- uation in Information Retrieval. MIT Press.
Vossen, P., Go ̈ro ̈g, A., Laan, F., Van Gompel, M., Izquierdo, R., and Van Den Bosch, A. (2011). Dutch- semcor: building a semantically anno- tated corpus for dutch. Proceedings of eLex.
Voutilainen, A. (1999). Handcrafted rules. van Halteren, H. (Ed.), Syntactic Wordclass Tagging, 217–246. Kluwer.
Vrandecˇic ́, D. and Kro ̈tzsch, M. (2014). Wikidata: a free collaborative knowledge base. CACM 57(10), 78– 85.
Wade, E., Shriberg, E., and Price, P. J. (1992). User behaviors affecting speech recognition. ICSLP.
Wagner, R. A. and Fischer, M. J. (1974). The string-to-string correction problem. Journal of the ACM 21, 168– 173.
Waibel, A., Hanazawa, T., Hinton, G., Shikano, K., and Lang, K. J. (1989). Phoneme recognition using time-delay neural networks. IEEE transactions on Acoustics, Speech, and Signal Pro- cessing 37(3), 328–339.
Walker, M. A. (2000). An application of reinforcement learning to dialogue strategy selection in a spoken dialogue system for email. JAIR 12, 387–416.
Walker, M. A., Fromer, J. C., and Narayanan, S. S. (1998). Learning op- timal dialogue strategies: A case study of a spoken dialogue agent for email. COLING/ACL.
Walker, M. A., Iida, M., and Cote, S. (1994). Japanese discourse and the process of centering. Computational Linguistics 20(2), 193–232.
Walker, M. A., Joshi, A. K., and Prince, E. (Eds.). (1998). Centering in Discourse. Oxford University Press.
Bibliography 603
Walker, M. A., Kamm, C. A., and Lit- man, D. J. (2001). Towards developing general models of usability with PAR- ADISE. Natural Language Engineer- ing: Special Issue on Best Practice in Spoken Dialogue Systems 6(3), 363– 377.
Walker, M. A. and Whittaker, S. (1990). Mixed initiative in dialogue: An investigation into discourse seg- mentation. ACL.
Wang, A., Singh, A., Michael, J., Hill, F., Levy, O., and Bowman, S. R. (2018). Glue: A multi-task benchmark and analysis platform for natural lan- guage understanding. ICLR.
Wang, S. and Manning, C. D. (2012). Baselines and bigrams: Simple, good sentiment and topic classification. ACL.
Wang, W. and Chang, B. (2016). Graph-based dependency parsing with bidirectional lstm. ACL.
Wang, Y., Li, S., and Yang, J. (2018). Toward fast and accurate neural dis- course segmentation. EMNLP.
Wang, Y., Skerry-Ryan, R., Stanton, D., Wu, Y., Weiss, R. J., Jaitly, N., Yang, Z., Xiao, Y., Chen, Z., Ben- gio, S., Le, Q., Agiomyrgiannakis, Y., Clark, R., and Saurous, R. A. (2017). Tacotron: Towards end-to-end speech synthesis. INTERSPEECH.
Ward, W. and Issar, S. (1994). Recent improvements in the CMU spoken lan- guage understanding system. ARPA Human Language Technologies Work- shop.
Watanabe, S., Hori, T., Karita, S., Hayashi, T., Nishitoba, J., Unno, Y., Soplin, N. E. Y., Heymann, J., Wies- ner, M., Chen, N., Renduchintala, A., and Ochiai, T. (2018). ESPnet: End- to-end speech processing toolkit. IN- TERSPEECH.
Weaver, W. (1949/1955). Transla- tion. Locke, W. N. and Boothe, A. D. (Eds.), Machine Translation of Languages, 15–23. MIT Press. Reprinted from a memorandum writ- ten by Weaver in 1949.
Webber, B. L. (1978). A Formal Ap- proach to Discourse Anaphora. Ph.D. thesis, Harvard University.
Webber, B. L. (1983). So what can we talk about now?. Brady, M. and Berwick, R. C. (Eds.), Computational Models of Discourse, 331–371. The MIT Press.
Webber, B. L. (1991). Structure and ostension in the interpretation of dis- course deixis. Language and Cogni- tive Processes 6(2), 107–135.
Webber, B. L. and Baldwin, B. (1992). Accommodating context change. ACL.

604 Bibliography
Webber, B. L., Egg, M., and Kordoni, V. (2012). Discourse structure and lan- guage technology. Natural Language Engineering 18(4), 437–490.
Webber, B. L. (1988). Discourse deixis: Reference to discourse seg- ments. ACL.
Webster, K., Recasens, M., Axelrod, V., and Baldridge, J. (2018). Mind the gap: A balanced corpus of gendered ambiguous pronouns. TACL 6, 605– 617.
Weinschenk, S. and Barker, D. T. (2000). Designing Effective Speech In- terfaces. Wiley.
Weischedel, R., Hovy, E. H., Marcus, M. P., Palmer, M., Belvin, R., Prad- han, S., Ramshaw, L. A., and Xue, N. (2011). Ontonotes: A large train- ing corpus for enhanced processing. Olive, J., Christianson, C., and Mc- Cary, J. (Eds.), Handbook of Nat- ural Language Processing and Ma- chine Translation: DARPA Global Au- tomatic Language Exploitation, 54– 63. Springer.
Weischedel, R., Meteer, M., Schwartz, R., Ramshaw, L. A., and Palmucci, J. (1993). Coping with ambiguity and unknown words through probabilistic models. Computational Linguistics 19(2), 359–382.
Weizenbaum, J. (1966). ELIZA – A computer program for the study of nat- ural language communication between man and machine. CACM 9(1), 36–45.
Weizenbaum, J. (1976). Computer Power and Human Reason: From Judgement to Calculation. W.H. Free- man and Company.
Wells, J. C. (1982). Accents of English. Cambridge University Press.
Wen, T.-H., Gasˇic ́, M., Kim, D., Mrksˇic ́, N., Su, P.-H., Vandyke, D., and Young, S. J. (2015a). Stochastic language generation in dialogue using recurrent neural networks with convo- lutional sentence reranking. SIGDIAL.
Wen, T.-H., Gasˇic ́, M., Mrksˇic ́, N., Su, P.-H., Vandyke, D., and Young, S. J. (2015b). Semantically condi- tioned LSTM-based natural language generation for spoken dialogue sys- tems. EMNLP.
Werbos, P. (1974). Beyond regression: new tools for prediction and analysis in the behavioral sciences. Ph.D. the- sis, Harvard University.
Werbos, P. J. (1990). Backpropagation through time: what it does and how to do it. Proceedings of the IEEE 78(10), 1550–1560.
Widrow, B. and Hoff, M. E. (1960). Adaptive switching circuits. IRE WESCON Convention Record, Vol. 4.
Wiebe, J. (1994). Tracking point of view in narrative. Computational Lin- guistics 20(2), 233–287.
Wiebe, J. (2000). Learning subjective adjectives from corpora. AAAI.
Wiebe, J., Bruce, R. F., and O’Hara, T. P. (1999). Development and use of a gold-standard data set for subjectivity classifications. ACL.
Wierzbicka, A. (1992). Semantics, Culture, and Cognition: University Human Concepts in Culture-Specific Configurations. Oxford University Press.
Wierzbicka, A. (1996). Semantics: Primes and Universals. Oxford Uni- versity Press.
Wilensky, R. (1983). Planning and Understanding: A Computa- tional Approach to Human Reasoning. Addison-Wesley.
Wilks, Y. (1973). An artificial intel- ligence approach to machine transla- tion. Schank, R. C. and Colby, K. M. (Eds.), Computer Models of Thought and Language, 114–151. W.H. Free- man.
Wilks, Y. (1975a). An intelligent an- alyzer and understander of English. CACM 18(5), 264–274.
Wilks, Y. (1975b). Preference seman- tics. Keenan, E. L. (Ed.), The Formal Semantics of Natural Language, 329– 350. Cambridge Univ. Press.
Wilks, Y. (1975c). A preferential, pattern-seeking, semantics for natural language inference. Artificial Intelli- gence 6(1), 53–74.
Williams, J. D., Raux, A., and Hender- son, M. (2016). The dialog state track- ing challenge series: A review. Dia- logue & Discourse 7(3), 4–33.
Williams, J. D. and Young, S. J. (2007). Partially observable markov decision processes for spoken dialog systems. Computer Speech and Lan- guage 21(1), 393–422.
Wilson, T., Wiebe, J., and Hoffmann, P. (2005). Recognizing contextual polar- ity in phrase-level sentiment analysis. EMNLP.
Winograd, T. (1972). Understanding Natural Language. Academic Press.
Winston, P. H. (1977). Artificial Intel- ligence. Addison Wesley.
Wiseman, S., Rush, A. M., and Shieber, S. M. (2016). Learning global features for coreference resolu- tion. NAACL HLT.
Wiseman, S., Rush, A. M., Shieber, S. M., and Weston, J. (2015). Learn- ing anaphoricity and antecedent rank- ing features for coreference resolution. ACL.
Witten, I. H. and Bell, T. C. (1991). The zero-frequency problem: Estimat- ing the probabilities of novel events in adaptive text compression. IEEE Transactions on Information Theory 37(4), 1085–1094.
Witten, I. H. and Frank, E. (2005). Data Mining: Practical Machine Learning Tools and Techniques (2nd Ed.). Morgan Kaufmann.
Wittgenstein, L. (1953). Philosoph- ical Investigations. (Translated by Anscombe, G.E.M.). Blackwell.
Wolf, F. and Gibson, E. (2005). Rep- resenting discourse coherence: A corpus-based analysis. Computational Linguistics 31(2), 249–287.
Wolf, M. J., Miller, K. W., and Grodzin- sky, F. S. (2017). Why we should have seen that coming: Comments on Mi- crosoft’s Tay “experiment,” and wider implications. The ORBIT Journal 1(2), 1–12.
Wolfson, T., Geva, M., Gupta, A., Gardner, M., Goldberg, Y., Deutch, D., and Berant, J. (2020). Break it down: A question understanding benchmark. TACL 8, 183–198.
Woods, W. A. (1967). Semantics for a Question-Answering System. Ph.D. thesis, Harvard University.
Woods, W. A. (1973). Progress in natu- ral language understanding. Proceed- ings of AFIPS National Conference.
Woods, W. A. (1975). What’s in a link: Foundations for semantic net- works. Bobrow, D. G. and Collins, A. M. (Eds.), Representation and Un- derstanding: Studies in Cognitive Sci- ence, 35–82. Academic Press.
Woods, W. A. (1978). Semantics and quantification in natural language question answering. Yovits, M. (Ed.), Advances in Computers, 2–64. Aca- demic.
Woods, W. A., Kaplan, R. M., and Nash-Webber, B. L. (1972). The lunar sciences natural language information system: Final report. Tech. rep. 2378, BBN.
Woodsend, K. and Lapata, M. (2015). Distributed representations for un- supervised semantic role labeling. EMNLP.
Wu, D. (1996). A polynomial-time al- gorithm for statistical machine transla- tion. ACL.
Wu, F. and Weld, D. S. (2007). Au- tonomously semantifying Wikipedia. CIKM-07.
Wu, F. and Weld, D. S. (2010). Open in- formation extraction using Wikipedia. ACL.
Wu, L., Petroni, F., Josifoski, M., Riedel, S., and Zettlemoyer, L. (2019). Zero-shot entity linking with dense
 
 entity retrieval. arXiv preprint arXiv:1911.03814.
Wu, S. and Dredze, M. (2019). Beto, Bentz, Becas: The surprising cross-lingual effectiveness of BERT. EMNLP.
Wu, Y., Schuster, M., Chen, Z., Le, Q. V., Norouzi, M., Macherey, W., Krikun, M., Cao, Y., Gao, Q., Macherey, K., Klingner, J., Shah, A., Johnson, M., Liu, X., Kaiser, Ł., Gouws, S., Kato, Y., Kudo, T., Kazawa, H., Stevens, K., Kurian, G., Patil, N., Wang, W., Young, C., Smith, J., Riesa, J., Rudnick, A., Vinyals, O., Corrado, G. S., Hughes, M., and Dean, J. (2016). Google’s neural machine translation system: Bridg- ing the gap between human and ma- chine translation. arXiv preprint arXiv:1609.08144.
Wundt, W. (1900). Vo ̈lkerpsychologie: eine Untersuchung der Entwicklungs- gesetze von Sprache, Mythus, und Sitte. W. Engelmann, Leipzig. Band II: Die Sprache, Zweiter Teil.
Xia, F. and Palmer, M. (2001). Convert- ing dependency structures to phrase structures. HLT.
Xu, J., Ju, D., Li, M., Boureau, Y.-L., Weston, J., and Dinan, E. (2020). Recipes for safety in open- domain chatbots. arXiv preprint arXiv:2010.07079.
Xu, P., Saghir, H., Kang, J. S., Long, T., Bose, A. J., Cao, Y., and Cheung, J. C. K. (2019). A cross-domain trans- ferable neural coherence model. ACL.
Xu, Y. (2005). Speech melody as ar- ticulatorily implemented communica- tive functions. Speech communication 46(3-4), 220–251.
Xue, N., Ng, H. T., Pradhan, S., Ruther- ford, A., Webber, B. L., Wang, C., and Wang, H. (2016). Conll 2016 shared task on multilingual shallow discourse parsing. CoNLL-16 shared task.
Xue, N. and Palmer, M. (2004). Cal- ibrating features for semantic role la- beling. EMNLP.
Yamada, H. and Matsumoto, Y. (2003). Statistical dependency analysis with support vector machines. Noord, G. V. (Ed.), IWPT-03.
Yan, Z., Duan, N., Bao, J.-W., Chen, P., Zhou, M., Li, Z., and Zhou, J. (2016). DocChat: An information retrieval ap- proach for chatbot engines using un- structured documents. ACL.
Yang, D., Chen, J., Yang, Z., Juraf- sky, D., and Hovy, E. H. (2019). Let’s make your request more per- suasive: Modeling persuasive strate- gies via semi-supervised neural nets on crowdfunding platforms. NAACL HLT.
Yang, X., Zhou, G., Su, J., and Tan, C. L. (2003). Coreference resolution using competition learning approach. ACL.
Yang, Y. and Pedersen, J. (1997). A comparative study on feature selection in text categorization. ICML.
Yang, Z., Qi, P., Zhang, S., Bengio, Y., Cohen, W., Salakhutdinov, R., and Manning, C. D. (2018). HotpotQA: A dataset for diverse, explainable multi- hop question answering. EMNLP.
Yankelovich, N., Levow, G.-A., and Marx, M. (1995). Designing SpeechActs: Issues in speech user interfaces. CHI-95.
Yarowsky, D. (1995). Unsupervised word sense disambiguation rivaling supervised methods. ACL.
Yasseri, T., Kornai, A., and Kerte ́sz, J. (2012). A practical approach to lan- guage complexity: a Wikipedia case study. PloS one 7(11).
Yih, W.-t., Richardson, M., Meek, C., Chang, M.-W., and Suh, J. (2016). The value of semantic parse labeling for knowledge base question answering. ACL.
Yngve, V. H. (1955). Syntax and the problem of multiple meaning. Locke, W. N. and Booth, A. D. (Eds.), Ma- chine Translation of Languages, 208– 226. MIT Press.
Young, S. J., Gasˇic ́, M., Keizer, S., Mairesse, F., Schatzmann, J., Thom- son, B., and Yu, K. (2010). The Hid- den Information State model: A prac- tical framework for POMDP-based spoken dialogue management. Com- puter Speech & Language 24(2), 150– 174.
Younger, D. H. (1967). Recognition and parsing of context-free languages in time n3 . Information and Control 10, 189–208.
Yu, M. and Dredze, M. (2014). Improv- ing lexical embeddings with semantic knowledge. ACL.
Yu, N., Zhang, M., and Fu, G. (2018). Transition-based neural RST parsing with implicit syntax features. COL- ING.
Yu, Y., Zhu, Y., Liu, Y., Liu, Y., Peng, S., Gong, M., and Zeldes, A. (2019). GumDrop at the DISRPT2019 shared task: A model stacking ap- proach to discourse unit segmentation and connective detection. Workshop on Discourse Relation Parsing and Treebanking 2019.
Zapirain, B., Agirre, E., Ma`rquez, L., and Surdeanu, M. (2013). Selectional preferences for semantic role classi- fication. Computational Linguistics 39(3), 631–663.
Bibliography 605
Zelle, J. M. and Mooney, R. J. (1996). Learning to parse database queries using inductive logic programming. AAAI.
Zeman, D. (2008). Reusable tagset conversion using tagset drivers. LREC.
Zeman, D., Popel, M., Straka, M., Hajicˇ, J., Nivre, J., Ginter, F., Luoto- lahti, J., Pyysalo, S., Petrov, S., Pot- thast, M., Tyers, F. M., Badmaeva, E., Gokirmak, M., Nedoluzhko, A., Cinkova ́, S., Hajic, Jr., J., Hlava ́cova ́, J., Kettnerova ́, V., Uresova ́, Z., Kan- erva, J., Ojala, S., Missila ̈, A., Man- ning, C. D., Schuster, S., Reddy, S., Taji, D., Habash, N., Leung, H., de Marneffe, M.-C., Sanguinetti, M., Simi, M., Kanayama, H., de Paiva, V., Droganova, K., Alonso, H. M., C ̧o ̈ltekin, C ̧., Sulubacak, U., Uszkor- eit, H., Macketanz, V., Burchardt, A., Harris, K., Marheinecke, K., Rehm, G., Kayadelen, T., Attia, M., El- Kahky, A., Yu, Z., Pitler, E., Lert- pradit, S., Mandl, M., Kirchner, J., Alcalde,H.F.,Strnadova ́,J.,Baner- jee, E., Manurung, R., Stella, A., Shi- mada,A.,Kwak,S.,Mendonc ̧a,G., Lando, T., Nitisaroj, R., and Li, J. (2017). Conll 2017 shared task: Mul- tilingual parsing from raw text to uni- versal dependencies. Proceedings of the CoNLL 2017 Shared Task: Multi- lingual Parsing from Raw Text to Uni- versal Dependencies.
Zens, R. and Ney, H. (2007). Ef- ficient phrase-table representation for machine translation with applications to online MT and speech translation. NAACL-HLT.
Zhang, H., Sproat, R., Ng, A. H., Stahlberg, F., Peng, X., Gorman, K., and Roark, B. (2019). Neural mod- els of text normalization for speech ap- plications. Computational Linguistics 45(2), 293–337.
Zhang, R., dos Santos, C. N., Ya- sunaga, M., Xiang, B., and Radev, D. (2018). Neural coreference resolution with deep biaffine attention by joint mention detection and mention clus- tering. ACL.
Zhang, T., Kishore, V., Wu, F., Wein- berger, K. Q., and Artzi, Y. (2020). Bertscore: Evaluating text generation with BERT. ICLR 2020.
Zhang, Y. and Clark, S. (2008). A tale of two parsers: investigat- ing and combining graph-based and transition-based dependency parsing using beam-search. EMNLP.
Zhang, Y. and Nivre, J. (2011). Transition-based dependency parsing with rich non-local features. ACL.
Zhang, Y., Zhong, V., Chen, D., Angeli, G., and Manning, C. D. (2017). Position-aware attention and supervised data improve slot filling. EMNLP.

606 Bibliography
Zhao, H., Chen, W., Kit, C., and Zhou, G. (2009). Multilingual dependency learning: A huge feature engineering method to semantic dependency pars- ing. CoNLL.
Zhao, J., Wang, T., Yatskar, M., Cot- terell, R., Ordonez, V., and Chang, K.- W. (2019). Gender bias in contextual- ized word embeddings. NAACL HLT.
Zhao, J., Wang, T., Yatskar, M., Or- donez, V., and Chang, K.-W. (2017). Men also like shopping: Reduc- ing gender bias amplification using corpus-level constraints. EMNLP.
Zhao, J., Wang, T., Yatskar, M., Or- donez, V., and Chang, K.-W. (2018a). Gender bias in coreference resolu- tion: Evaluation and debiasing meth- ods. NAACL HLT.
Zhao, J., Zhou, Y., Li, Z., Wang, W., and Chang, K.-W. (2018b). Learn- ing gender-neutral word embeddings. EMNLP.
Zheng, J., Vilnis, L., Singh, S., Choi, J. D., and McCallum, A. (2013). Dy- namic knowledge-base alignment for coreference resolution. CoNLL.
Zhong, Z. and Ng, H. T. (2010). It makes sense: A wide-coverage word sense disambiguation system for free text. ACL.
Zhou, D., Bousquet, O., Lal, T. N., Weston, J., and Scho ̈lkopf, B. (2004). Learning with local and global consis- tency. NeurIPS.
Zhou, G., Su, J., Zhang, J., and Zhang, M. (2005). Exploring various knowl- edge in relation extraction. ACL.
Zhou, J. and Xu, W. (2015a). End-to- end learning of semantic role labeling using recurrent neural networks. ACL.
Zhou, J. and Xu, W. (2015b). End-to- end learning of semantic role labeling using recurrent neural networks. ACL.
Zhou, L., Gao, J., Li, D., and Shum, H.- Y. (2020). The design and implemen- tation of XiaoIce, an empathetic so- cial chatbot. Computational Linguis- tics 46(1), 53–93.
Zhou, L., Ticrea, M., and Hovy, E. H. (2004). Multi-document biography summarization. EMNLP.
Zhou, Y. and Xue, N. (2015). The Chi- nese Discourse TreeBank: a Chinese corpus annotated with discourse rela- tions. Language Resources and Eval- uation 49(2), 397–431.
Zhu, X. and Ghahramani, Z. (2002). Learning from labeled and unlabeled data with label propagation. Tech. rep. CMU-CALD-02, CMU.
Zhu, X., Ghahramani, Z., and Lafferty, J. (2003). Semi-supervised learning using gaussian fields and harmonic functions. ICML.
Ziemski, M., Junczys-Dowmunt, M., and Pouliquen, B. (2016). The united nations parallel corpus v1.0. LREC.
Zue, V. W., Glass, J., Goodine, D., Le- ung, H., Phillips, M., Polifroni, J., and Seneff, S. (1989). Preliminary evalua- tion of the VOYAGER spoken language system. Proceedings DARPA Speech and Natural Language Workshop.
 
λ -reduction, 315
*?, 7
+?, 7
.wav format, 536
10-fold cross-validation, 68 → (derives), 233
ˆ, 57
* (RE Kleene *), 5
+ (RE Kleene +), 5
. (RE any character), 5
$ (RE end-of-line), 5
( (RE precedence symbol),
6
[ (RE character
disjunction), 4 \B (RE non
word-boundary), 6 \b (RE word-boundary), 6
] (RE character disjunction), 4
ˆ (RE start-of-line), 5
[ˆ] (single-char negation),
4
∃ (there exists), 313
∀ (for all), 313
=⇒ (implies), 316
λ -expressions, 315 λ -reduction, 315 ∧ (and), 313
¬ (not), 313
∨ (or), 316 4-gram, 34 4-tuple, 236 5-gram, 34
A-D conversion, 535, 552 AAC, 30
AAL, 13
AB test, 569
abduction, 318
ABox, 323
ABSITY, 371
absolute discounting, 45 absolute temporal
expression, 344 abstract word, 397
accented syllables, 532 accessible, 420 accessing a referent, 415 accomplishment
expressions, 322 accuracy, 152
achievement expressions, 322, 322
acknowledgment speech act, 494
activation, 128
activity expressions, 322,
322 acute-eval, 517
ad hoc retrieval, 465 add gate, 188
add-k, 43
add-one smoothing, 41
adequacy, 221 adjacency pairs, 495 adjective, 240
adjective phrase, 240 Adjectives, 150 adjunction in TAG, 257 adverb, 150
degree, 150
directional, 150
locative, 150
manner, 150
syntactic position of, 240 temporal, 150
Adverbs, 150
adversarial evaluation, 518 AED, 555
affective, 393
affix, 21
affricate sound, 530
agent, as thematic role, 374 agglomerative clustering,
370
agglutinative language, 207
AIFF file, 536 AISHELL-1, 551 ALGOL, 257 algorithm
byte-pair encoding, 20 CKY, 261
Kneser-Ney discounting,
45
Lesk, 367
minimum edit distance,
25
naive Bayes classifier, 56 pointwise mutual
information, 109 semantic role labeling,
381
Simplified Lesk, 367 TextTiling, 456 unsupervised word sense
disambiguation, 369 Viterbi, 159
alignment, 22, 558 in ASR, 562 minimum cost, 24 of transcript, 545 string, 22
via minimum edit distance, 24
all-words task in WSD, 363 Allen relations, 349 allocational harm, 120 alveolar sound, 529 ambiguity
amount of part-of-speech in Brown corpus,
152 attachment, 260
coordination, 260 in meaning
representations, 306
of referring expressions, 417
part-of-speech, 151 resolution of tag, 152 word sense, 363
American Structuralism, 256
amplitude
of a signal, 534 RMS, 537
anaphor, 416
anaphora, 416 anaphoricity detector, 425 anchor texts, 478, 487 anchors in regular
expressions, 5, 26 antecedent, 416
antonym, 358
AP, 240
Apple AIFF, 536 approximant sound, 530 approximate
randomization, 70 Arabic, 526
Egyptian, 544
Aramaic, 526
ARC, 489
arc eager, 294
arc standard, 287 argumentation mining, 458 argumentation schemes,
459
argumentative relations,
458
argumentative zoning, 460
Aristotle, 148, 322
arity, 319
ARPA, 571
ARPAbet, 546
article (part-of-speech), 150 articulatory phonetics, 527,
527
articulatory synthesis, 573 aspect, 322
ASR, 548
confidence, 515 association, 98 ATIS, 231
corpus, 234, 237 ATN, 391
ATRANS, 389
attachment ambiguity, 260 attention mechanism, 213 Attribution (as coherence
relation), 445 augmentative
communication, 30 authorship attribution, 55
autoregressive generation, 175, 181
BabelNet, 368 backoff
in smoothing, 43 backprop, 139 Backpropagation Through
Time, 178 backtrace
in minimum edit distance, 26
Backtranslation, 221 Backus-Naur Form, 233 backward chaining, 317 backward composition, 253 backward-looking center,
452
bag of words, 57, 58
in IR, 465 bag-of-words, 57 bakeoff, 571
speech recognition competition, 571
barge-in, 520 baseline
most frequent sense, 364
take the first sense, 364 basic emotions, 394 batch training, 87
Bayes’ rule, 57
dropping denominator, 58, 158
Bayesian inference, 57 BDI, 524
beam search, 215, 295 beam width, 215, 295 bear pitch accent, 532 Berkeley Restaurant
Project, 33 Bernoulli naive Bayes, 74
BERT
for affect, 410
best-worst scaling, 398 bias amplification, 121 bias term, 78, 128 bidirectional RNN, 185 bigram, 31
bilabial, 529
binary branching, 249 binary NB, 62
binary tree, 249
BIO, 154
BIO tagging
for NER, 154
BIOES, 154
bitext, 219
bits for measuring entropy,
49
blank in CTC, 558
BLEU, 222
Bloom filters, 48
BM25, 466, 468
BNF (Backus-Naur Form),
233
bootstrap, 72
bootstrap algorithm, 72
Subject Index
607
Auxiliary, 151 3
B , 434 Babbage, C., 549

608 Subject Index bootstrap test, 70
bootstrapping, 70 in IE, 339
bound pronoun, 418 boundary tones, 534 BPE, 18
BPE, 20
bracketed notation, 234 bridging inference, 420 broadcast news
speech recognition of, 571
Brown corpus, 11 original tagging of, 170
byte-pair encoding, 18 CALLHOME, 550
Candide, 228 canonical form, 307 Cantonese, 207 capture group, 10 cardinal number, 239 cascade, 21
regular expression in
Eliza, 10 case
sensitivity in regular expression search, 3
case folding, 20
case frame, 375, 390 CAT, 203
cataphora, 418 categorial grammar, 250,
250
CD (conceptual dependency), 389
CELEX, 544
Centering Theory, 443, 451 centroid, 111
cepstrum
history, 571
CFG, see context-free
grammar chain rule, 93, 139 channels in stored
waveforms, 536 chart parsing, 261
chatbots, 2, 496 CHiME, 550 Chinese
as verb-framed language, 207
characters, 526
words for brother, 206 Chirpy Cardinal, 503 Chomsky normal form, 249 Chomsky-adjunction, 250 chunking, 270, 270 CIRCUS, 353
citation form, 97
Citizen Kane, 442
CKY algorithm, 259 claims, 458
clarification questions, 517 class-based n-gram, 53 clause, 238
clefts, 421 clitic, 16
origin of term, 148 closed class, 149 closed vocabulary, 40 closure, stop, 529 cluster, 416 clustering
in word sense disambiguation, 372
CNF, see Chomsky normal form
coarse senses, 372 cochlea, 542 Cocke-Kasami-Younger
algorithm, see CKY coda, syllable, 531
code switching, 13 coherence, 442
entity-based, 451
relations, 444 cohesion
lexical, 443, 456 cold languages, 208 collection in IR, 465 collocation, 366 combinatory categorial
grammar, 250 commissive speech act, 494
common ground, 494, 524 Common nouns, 149 complement, 242, 242 complementizers, 150 completeness in FOL, 318 componential analysis, 389 compression, 535 Computational Grammar
Coder (CGC), 170 computational semantics,
305
concatenation, 26
concept error rate, 519 conceptual dependency, 389 concordance, semantic, 363 concrete word, 397 conditional random field,
162 confidence, 226
ASR, 515
in relation extraction, 340 confidence values, 339 configuration, 285 confusion matrix, 65 conjoined phrase, 243 Conjunctions, 150 conjunctions, 243 connectionist, 147 connotation frame, 411 connotation frames, 392 connotations, 99, 394 consonant, 528
constants in FOL, 312 constative speech act, 494 constituency, 232
evidence for, 232 constituent, 232
book titles which are not, 231
Constraint Grammar, 303 Construction Grammar, 257
content planning, 515 context embedding, 117 context-free grammar, 231,
232, 236, 255 Chomsky normal form,
249 invention of, 257
non-terminal symbol, 233
productions, 233 rules, 233
terminal symbol, 233 weak and strong
equivalence, 249 continuation rise, 534
conversation, 492 conversation analysis, 523 conversational agents, 492 conversational analysis, 495 conversational implicature,
496
conversational speech, 550
convex, 84
coordinate noun phrase,
243
coordination ambiguity, 260
copula, 151
CORAAL, 550
corefer, 415
coreference chain, 416 coreference resolution, 416
gender agreement, 422 Hobbs tree search
algorithm, 438 number agreement, 421 person agreement, 422 recency preferences, 422 selectional restrictions,
423
syntactic (“binding”)
constraints, 422 verb semantics, 423
coronal sound, 529 corpora, 11 corpus, 11
ATIS, 234 Broadcast news, 571 Brown, 11, 170 CASS phonetic of
Mandarin, 545 fisher, 571
Kiel of German, 545 LOB, 170
regular expression
searching inside, 3 Switchboard, 11, 500,
535, 536, 550 TimeBank, 349
TIMIT, 545
Wall Street Journal, 571 correction act detection,
512
cosine
as a similarity metric,
105
cost function, 81
count nouns, 149 counters, 26
counts
treating low as zero, 165
CRF, 162
compared to HMM, 162 inference, 166
Viterbi inference, 166
CRFs
learning, 167
cross-brackets, 270 cross-entropy, 51 cross-entropy loss, 82, 137 cross-validation, 68
10-fold, 68 crowdsourcing, 398 CTC, 557
currying, 315
cycles in a wave, 534 cycles per second, 534
datasheet, 14 date
fully qualified, 347
normalization, 507 dative alternation, 376 DBpedia, 482
debiasing, 122
decision boundary, 79, 131 decision tree
use in WSD, 372 declarative sentence
structure, 237 decoding, 157
Viterbi, 157 deduction
in FOL, 317 deep
neural networks, 127 deep learning, 127 deep role, 374
definite reference, 418 degree adverb, 150 delexicalization, 516 denotation, 309
dental sound, 529 dependency
grammar, 280 dependency tree, 283 dependent, 281 derivation
direct (in a formal language), 236
syntactic, 233, 233, 236, 236
description logics, 323 Det, 233
determiner, 150, 233, 239 Determiners, 150 development test set, 67 development test set
(dev-test), 35 devset, see development
test set (dev-test), 67 DFT, 554
dialogue, 492 dialogue act
correction, 512 dialogue acts, 509 dialogue manager
 
 design, 520 dialogue policy, 513 dialogue systems, 492
design, 520
evaluation, 517 diathesis alternation, 376 diff program, 27
digit recognition, 549 digitization, 535, 552 dilated convolutions, 568 dimension, 102 diphthong, 531
origin of term, 148 direct derivation (in a
formal language),
236
directional adverb, 150
directive speech act, 494 disambiguation
in parsing, 267
syntactic, 261 discount, 41, 43, 44 discounting, 41 discourse, 442
segment, 445
discourse connectives, 446 discourse deixis, 417 discourse model, 415 discourse parsing, 447 discourse-new, 419 discourse-old, 419 discovery procedure, 256 discrete Fourier transform,
554 discriminative model, 77
disfluency, 12 disjunction, 26
pipe in regular expressions as, 6
square braces in regular expression as, 4
dispreferred response, 525 distance
cosine, 105
distant supervision, 340 distributional hypothesis,
96
distributional similarity, 256
divergences between languages in MT,
205
document
in IR, 465
document frequency, 107 document vector, 111 domain, 309
domination in syntax, 233 dot product, 78, 105 dot-product attention, 213 Dragon Systems, 571 dropout, 142
duration
temporal expression, 344
dynamic programming, 23 and parsing, 261 Viterbi as, 159
dynamic time warping, 571
edge-factored, 296 edit distance
minimum algorithm, 24 EDU, 445
effect size, 69
Elaboration (as coherence
relation), 444 ELIZA, 2
implementation, 11
sample conversation, 10 Elman Networks, 176 ELMo
for affect, 410 EM
for deleted interpolation, 44
embedded verb, 241 embeddings, 100
cosine for similarity, 105 skip-gram, learning, 115 sparse, 104
tf-idf, 107
word2vec, 112
emission probabilities, 156 EmoLex, 396
emotion, 394
empty category, 238 Encoder-decoder, 208 end-to-end training, 184 endpointing, 494
English
lexical differences from French, 207
simplified grammar rules, 234
verb-framed, 207
entity dictionary, 165
entity grid, 453
Entity linking, 477
entity linking, 416 entity-based coherence, 451 entropy, 49
and perplexity, 49 cross-entropy, 51 per-word, 50
rate, 50
relative, 387
error backpropagation, 139 ESPnet, 572
ethos, 458
Euclidean distance
in L2 regularization, 89 Eugene Onegin, 52 Euler’s formula, 554 Europarl, 219
evalb, 270
evaluating parsers, 269 evaluation
10-fold cross-validation, 68
AB test, 569
BLEU in MT, 222 comparing models, 37 cross-validation, 68 development test set, 35,
67 devset, 67
devset or development test set, 35
dialogue systems, 517 extrinsic, 35
fluency in MT, 222 Matched-Pair Sentence
Segment Word Error
(MAPSSWE), 563 mean opinion score, 569 METEOR for MT, 222 most frequent class
baseline, 152 MT, 221
named entity recognition, 167
of n-gram, 35 of n-grams via
perplexity, 36 precision and recall for
MT, 222 pseudoword, 388
relation extraction, 343 TER for MT, 222
test set, 35
training on the test set, 35 training set, 35
TTS, 569
unsupervised WSD, 370 WSD systems, 364
event coreference, 417 Event extraction, 332 event extraction, 348 event variable, 319 events
representation of, 318 Evidence (as coherence
relation), 444 evoking a referent, 415
expansion, 234, 237 expletive, 421
explicit confirmation, 514 expressiveness, of a
meaning
representation, 308 extractive QA, 476
extraposition, 421 extrinsic evaluation, 35
F (for F-measure), 66 F-measure, 66 F-measure
in NER, 167 F0, 537
factoid question, 464
Faiss, 473
false negatives, 8
false positives, 8
Farsi, verb-framed, 207 fast Fourier transform, 554,
571 fasttext, 117
FASTUS, 352
feature cutoff, 165 feature interactions, 81 feature selection
information gain, 74 feature template, 292 feature templates, 81
Subject Index 609
part-of-speech tagging, 164
feature vectors, 551 Federalist papers, 74 feedforward network, 133 fenceposts, 263
FFT, 554, 571
file format, .wav, 536
filled pause, 12
filler, 12
final fall, 533
First Order Logic, see FOL first-order co-occurrence,
119
flap (phonetic), 530
fluency, 221 in MT, 222
focus, 485 FOL, 305, 311
∃ (there exists), 313 ∀ (for all), 313
=⇒ (implies), 316 ∧ (and), 313, 316 ¬ (not), 313, 316
∨ (or), 316
and verifiability, 311 constants, 312 expressiveness of, 308,
311 functions, 312
inference in, 311 terms, 312 variables, 312
fold (in cross-validation), 68
forget gate, 187
formal language, 235 formant, 542
formant synthesis, 573 forward chaining, 317 forward composition, 253 forward-looking centers,
452
Fosler, E., see Fosler-Lussier, E.
fragment of word, 12 frame, 552
semantic, 379 frame elements, 379 FrameNet, 379 frames, 504
free word order, 280 Freebase, 335, 482 FreebaseQA, 482 French, 205 frequency
of a signal, 534 fricative sound, 530 Frump, 353
fully qualified date
expressions, 347 fully-connected, 133
function word, 149, 169 functional grammar, 257 functions in FOL, 312 fundamental frequency, 537 fusion language, 207

610 Subject Index
Gaussian
prior on weights, 90
gazetteer, 165
General Inquirer, 63, 395 generalize, 88 generalized semantic role,
376
generation
of sentences to test a
CFG grammar, 234 template-based, 508
generative grammar, 236 generative lexicon, 372 generative model, 77 generative models, 58 generative syntax, 257 generator, 233
generics, 421
genitive NP, 258
German, 205, 544 gerundive postmodifier, 240 Gilbert and Sullivan, 332 given-new, 420
gloss, 360
glosses, 356
Glottal, 529
glottal stop, 529
glottis, 528
Godzilla, speaker as, 384 gold labels, 65 Good-Turing, 45 gradient, 84
Grammar
Constraint, 303 Construction, 257 Head-Driven Phrase
Structure (HPSG),
248, 257 Lexical-Functional
(LFG), 257 Link, 303
Minimalist Program, 257
Tree Adjoining, 257 grammar
binary branching, 249 categorial, 250, 250 CCG, 250
checking, 259 combinatory categorial,
250 equivalence, 249
generative, 236 inversion transduction,
229
strong equivalence, 249 weak equivalence, 249
grammatical function, 281 grammatical relation, 281 grammatical sentences, 235 greedy, 215
greedy RE patterns, 7 Greek, 526
grep, 3, 3, 27 Gricean maxims, 496 grounding, 494
GUS, 504
H* pitch accent, 534
Hamilton, Alexander, 74 Hamming, 553
Hansard, 228
hanzi, 17
harmonic, 543 harmonic mean, 66 Hays, D., 303 head, 248, 281
finding, 248 Head-Driven Phrase
Structure Grammar
(HPSG), 248, 257 Heaps’ Law, 12
Hearst patterns, 336 Hebrew, 526
held out, 35
held-out, 44
Herdan’s Law, 12
hertz as unit of measure,
534 hidden, 156
hidden layer, 133
as representation of
input, 134 hidden units, 133
Hindi, 205
Hindi, verb-framed, 207 HKUST, 551
HMM, 156
formal definition of, 156 history in speech
recognition, 571 initial distribution, 156 observation likelihood,
156 observations, 156
simplifying assumptions for POS tagging,
158 states, 156
transition probabilities, 156
Hobbs algorithm, 438 Hobbs tree search algorithm
for pronoun
resolution, 438 holonym, 359
homonymy, 355 hot languages, 208 HotpotQA, 474 Hungarian
part-of-speech tagging, 169
hybrid, 572 hyperarticulation, 512 hypernym, 335, 358
lexico-syntactic patterns for, 336
hyperparameter, 86 hyperparameters, 142 hyponym, 358
Hz as unit of measure, 534
IBM Models, 228
IBM Thomas J. Watson
Research Center,
53, 571 idf, 107
idf term weighting, 107, 466
if then reasoning in FOL, 317
immediately dominates,
233
imperative sentence structure, 237
implicature, 496
implicit argument, 392 implicit confirmation, 514 implied hierarchy
in description logics, 327 indefinite article, 239 indefinite reference, 418 inference, 308
in FOL, 317 inference-based learning,
301
infinitives, 242 infoboxes, 335 information
structure, 419
status, 419
information extraction (IE),
332
bootstrapping, 339
partial parsing for, 270 information gain, 74
for feature selection, 74 Information retrieval, 103,
465 initiative, 495 inner ear, 542
inner product, 105
instance checking, 326 Institutional Review Board,
522
intensity of sound, 538
intent determination, 506 intercept, 78 Interjections, 150 intermediate phrase, 533 International Phonetic
Alphabet, 526, 546 interpersonal stance, 408 Interpolated Kneser-Ney
discounting, 45, 47 interpolated precision, 471
interpolation
in smoothing, 43
interpretable, 92 interpretation, 309 intonation phrases, 533 intransitive verbs, 242 intrinsic evaluation, 35 inversion transduction
grammar (ITG), 229 inverted index, 469
IO, 154 IOB tagging
for temporal expressions, 345
IPA, 526, 546 IR, 465
idf term weighting, 107, 466
term weighting, 466
vector space model, 101 IR-based QA, 473
IRB, 522
IS-A, 359
is-a, 335
ISO 8601, 346
isolating language, 207 iSRL, 392
ITG (inversion transduction
grammar), 229 Japanese, 205–207, 526,
544 Jay, John, 74
joint intention, 524 Kaldi, 572
Katz backoff, 44
KBP, 354
KenLM, 48, 53
KL divergence, 387 KL-ONE, 329
Klatt formant synthesizer,
573 Kleene *, 5
sneakiness of matching zero things, 5
Kleene +, 5
Kneser-Ney discounting, 45 knowledge base, 307 knowledge claim, 460 knowledge graphs, 332 knowledge-based, 366 Korean, 544
KRL, 329
Kullback-Leibler
divergence, 387 L* pitch accent, 534
L+H* pitch accent, 534 L1 regularization, 89
L2 regularization, 89 labeled precision, 270 labeled recall, 269
labial place of articulation,
529
labiodental consonants, 529
lambda notation, 315 language
identification, 570
universal, 205 language ID, 63 language id, 55 language model, 30 Laplace smoothing, 41 Laplace smoothing:for
PMI, 111 larynx, 527
lasso regression, 89 latent semantic analysis,
125 lateral sound, 530
LDC, 16 learning rate, 84 lemma, 12, 97
versus wordform, 12 lemmatization, 3
 
 Lesk algorithm, 366 Simplified, 366
Levenshtein distance, 23 lexical
category, 233 cohesion, 443, 456 database, 360
gap, 206 semantics, 97 stress, 532
trigger, in IE, 344
lexical answer type, 486 lexical sample task in
WSD, 363 Lexical-Functional
Grammar (LFG),
257 lexico-syntactic pattern,
336 lexicon, 233
LibriSpeech, 550 likelihood, 58
linear chain CRF, 162, 163 linear classifiers, 59
linear interpolation for
n-grams, 44 linearly separable, 131
Linguistic Data Consortium, 16
Linguistic Discourse model, 461
Link Grammar, 303
List (as coherence relation),
445
listen attend and spell, 555
LIWC, 63, 397
LM, 30
LOB corpus, 170 localization, 203 location-based attention,
567 locative, 150
locative adverb, 150 log
why used for probabilities, 34
why used to compress speech, 536
log likelihood ratio, 405 log odds ratio, 405
log probabilities, 34, 34 logical connectives, 313 logical vocabulary, 308 logistic function, 78 logistic regression, 76
conditional maximum likelihood
estimation, 82 Gaussian priors, 90
learning in, 81 regularization, 90 relation to neural
networks, 135 logos, 458
Long short-term memory,
187
long-distance dependency,
245
traces in the Penn Treebank, 245
wh-questions, 238 lookahead in RE, 11 loss, 81
loudness, 539
low frame rate, 556 low-resourced languages,
227
LPC (Linear Predictive Coding), 571
LSI, see latent semantic analysis
LSTM, 171 LUNAR, 490 Lunar, 329
machine learning for NER, 168 textbooks, 74, 95
machine translation, 203 macroaveraging, 67 Madison, James, 74 MAE, 13
Mandarin, 205, 544 Manhattan distance
in L1 regularization, 89 manner adverb, 150 manner of articulation, 529 marker passing for WSD,
371 Markov, 32
assumption, 32 Markov assumption, 155 Markov chain, 52, 155
formal definition of, 156 initial distribution, 156 N-gram as, 155
states, 156
transition probabilities, 156
Markov model, 32
formal definition of, 156 history, 53
Marx, G., 259
mass nouns, 149 maxent, 95
maxim, Gricean, 496 maximum entropy, 95 maximum spanning tree,
297
Mayan, 207 McNemar’s test, 564 MCTest, 489
mean average precision,
471
mean opinion score, 569 mean reciprocal rank, 488 meaning representation,
305
as set of symbols, 306 early uses, 329 languages, 306
mechanical indexing, 124 Mechanical Turk, 549 mel, 554
scale, 538
mention detection, 424
mention-pair, 427 mentions, 415
meronym, 359
meronymy, 359
MERT, for training in MT,
229
MeSH (Medical Subject Headings), 56, 363
Message Understanding Conference, 352
metarule, 244
METEOR, 222, 230 metonymy, 359, 440 Micro-Planner, 329 microaveraging, 67 Microsoft .wav format, 536 mini-batch, 87
minimum edit distance, 22,
22, 159 example of, 25
for speech recognition evaluation, 562
MINIMUM EDIT DISTANCE, 25
minimum edit distance algorithm, 24 Minimum Error Rate Training, 229
MLE
for n-grams, 32
for n-grams, intuition, 33
MLP, 133
modal verb, 151
model, 308
model card, 73
modified Kneser-Ney, 47 modified n-gram precision,
224
modus ponens, 317 Montague semantics, 329 Monte Carlo search, 221 morpheme, 21
MOS (mean opinion score),
569
Moses, Michelangelo statue of, 492
Moses, MT toolkit, 229 most frequent sense, 364 MRR, 488
MT, 203
divergences, 205
post-editing, 203 mu-law, 536
MUC, 352, 353
MUC F-measure, 434 multi-layer perceptrons,
133
multihead self-attention layers, 194
multinomial logistic regression, 90
multinomial naive Bayes, 56
multinomial naive Bayes classifier, 56
multiword expressions, 125 MWE, 125
Subject Index 611 n-best list, 557
N-gram
as Markov chain, 155
n-gram, 30, 32
absolute discounting, 45 add-one smoothing, 41 as approximation, 31
as generators, 38 equation for, 32 example of, 33, 34
for Shakespeare, 38 history of, 53 interpolation, 43
Katz backoff, 44 KenLM, 48, 53 Kneser-Ney discounting,
45
logprobs in, 34 normalizing, 33 parameter estimation, 33 sensitivity to corpus, 37 smoothing, 41
SRILM, 53
test set, 35
training set, 35 unknown words, 40
naive Bayes
multinomial, 56 simplifying assumptions,
58
naive Bayes assumption, 58
naive Bayes classifier
use in text categorization,
56
named entity, 148, 153
list of types, 153 named entity recognition,
153
nasal sound, 528, 530
nasal tract, 528
Natural Questions, 475 negative log likelihood loss,
92, 138 neo-Davidsonian, 319
NER, 153 neural networks
relation to logistic regression, 135
newline character, 8 NIST for MT evaluation,
222, 230 noisy-or, 340
NomBank, 378
Nominal, 233 non-capturing group, 10 non-finite postmodifier, 240 non-greedy, 7
non-logical vocabulary, 308 non-standard words, 565 non-stationary process, 552 non-terminal symbols, 233,
234
normal form, 249, 249
normalization dates, 507 temporal, 346 word, 20

612 Subject Index normalization of
probabilities, 32 normalizing, 135
noun
abstract, 149, 239 common, 149 count, 149
mass, 149, 239 proper, 149
noun phrase, 232 constituents, 233
Nouns, 149
NP, 233, 234
nucleus, 444
nucleus of syllable, 531 null hypothesis, 69 Nyquist frequency, 535,
552
observation likelihood role in Viterbi, 160
one-hot vector, 144 onset, syllable, 531 ontology, 323 OntoNotes, 372
OOV (out of vocabulary)
words, 40 OOV rate, 40
open class, 149 open information
extraction, 342 open vocabulary system
unknown words in, 40 operation list, 22 operator precedence, 6, 7 optionality
of determiners, 239 use of ? in regular
expressions for, 4 oral tract, 528
ordinal number, 239 orthography
opaque, 527
transparent, 527 output gate, 188 overfitting, 88
p-value, 69
Paired, 70
palatal sound, 529
palate, 529 palato-alveolar sound, 529 parallel corpus, 219 parallel distributed
processing, 147 parallelogram model, 119
parse tree, 233, 235 PARSEVAL, 269 parsing
ambiguity, 259 chunking, 270
CKY, 261
CYK, see CKY evaluation, 269 history, 278
partial, 270
relation to grammars,
236
shallow, 270 syntactic, 259 well-formed substring
table, 278 part of speech
as used in CFG, 233 part-of-speech
adjective, 150 adverb, 150 closed class, 149 interjection, 150 noun, 149
open class, 149 particle, 150 subtle distinction
between verb and
noun, 150 verb, 150
part-of-speech tagger PARTS, 170 TAGGIT, 170
Part-of-speech tagging, 151 part-of-speech tagging
ambiguity and, 151 amount of ambiguity in Brown corpus, 152
and morphological analysis, 169
feature templates, 164 history of, 170 Hungarian, 169 Turkish, 169 unknown words, 162
part-whole, 359
partial parsing, 270 particle, 150
PARTS tagger, 170
parts of speech, 148 pathos, 458
pattern, regular expression,
3
PCM (Pulse Code
Modulation), 536 PDP, 147
PDTB, 446
Penn Discourse TreeBank,
446
Penn Treebank, 244 tagset, 151, 151
Penn Treebank tokenization, 16
per-word entropy, 50 perceptron, 130 period of a wave, 534 perplexity, 36, 51, 175
as weighted average branching factor, 36
defined via cross-entropy, 51
personal pronoun, 150 personality, 407 persuasion, 459 phone, 526, 545 phonetics, 526
articulatory, 527, 527 phonotactics, 531 phrasal verb, 150
phrase-based translation,
229
phrase-structure grammar, 233, 256
PII, 501
pipe, 6
The Pirates of Penzance,
332 pitch, 538
pitch accent, 532 ToBI, 534
pitch extraction, 539 pitch track, 537
place of articulation, 529 planning
and speech acts, 524
shared plans, 524 pleonastic, 421 plosive sound, 530 plural, 239 Pointwise mutual
information, 109 polysynthetic language, 207
Porter stemmer, 21
POS, 148
positional embeddings, 195 possessive NP, 258 possessive pronoun, 150 post-editing, 203 postdeterminer, 239 postings, 469
postmodifier, 240 postposed constructions,
232
postposition, 205
Potts diagram, 403 power of a signal, 537 PP, 234
PPMI, 109
praat, 539, 540, 545 precedence, 6 precedence, operator, 6 Precision, 66
precision
for MT evaluation, 222, 230
in NER, 167
modified n-gram, in MT,
224 precision-recall curve, 471
predeterminer, 241 predicate, 242 predicate-argument
relations, 242 preference semantics, 371
premises, 458
preposed constructions, 232 prepositional phrase, 240
constituency, 234
preposing, 232 prepositions, 150 presequences, 495 pretraining, 144 primitive decomposition,
389
principle of contrast, 98
prior probability, 58 pro-drop languages, 208
productions, 233 progressive prompting, 514 projection layer, 145 Prolog, 317
prominence, phonetic, 533 prominent word, 532 prompts, 508
pronoun, 150
bound, 418 demonstrative, 419 non-binary, 422 personal, 150 possessive, 150 wh-, 150
pronunciation dictionary,
544
CELEX, 544
CMU, 544
PropBank, 377
proper noun, 149 propositional meaning, 98 prosodic phrasing, 533 Prosody, 532
prosody
accented syllables, 532 reduced vowels, 533
PROTO-AGENT, 376 PROTO-PATIENT, 376 pseudoword, 388 PTRANS, 389 Pullum, G. K., 231 punctuation
for numbers cross-linguistically,
16
for sentence
segmentation, 22 tokenization, 16
treated as words, 11 treated as words in LM,
39
qualia structure, 372 quantifier
as part of speech, 239
semantics, 313 quantization, 536, 552 query, 465
in IR, 465 question
factoid, 464
rise, 533 question answering
evaluation, 488 factoid questions, 464
Radio Rex, 548
range, regular expression, 4 ranking, 222
rapid reprompting, 515 rarefaction, 535
RDF, 335
RDF triple, 335
RE
regular expression, 3 Read speech, 550 reading comprehension,
473
 
 Reason (as coherence relation), 444
Recall, 66 recall
for MT evaluation, 222, 230
in NER, 167 recipe
meaning of, 305 rectangular, 552 reduced vowels, 533 reduction, phonetic, 533 reference
bound pronouns, 418 cataphora, 418 definite, 418 generics, 421 indefinite, 418
reference point, 321 referent, 415
accessing of, 415
evoking of, 415 referential density, 208 reflexive, 422
register in RE, 10 regression
lasso, 89
ridge, 89
regular expression, 3, 26
substitutions, 9 regularization, 89 rejection
conversation act, 514 relatedness, 98
relation extraction, 332 relative
temporal expression, 344 relative entropy, 387 relative frequency, 33 relative pronoun, 241 release, stop, 529 relevance, 496
relexicalize, 516
ReLU, 129
reporting events, 348 representation learning, 96 representational harm, 121 representational harms, 72 rescore, 557
resolution for inference,
318 resolve, 152
Resource Management, 571 response generation, 501 restrictive grammar, 508 restrictive relative clause,
241
retrieve and read, 473
retrofitting, 369 ReVerb, 342 reversives, 358 rewrite, 233 Rhetorical Structure
Theory, see RST rhyme, syllable, 531
Riau Indonesian, 150 ridge regression, 89 rime
syllable, 531
RMS amplitude, 537 RNN-T, 561
role-filler extraction, 351 Rosebud, sled named, 442 rounded vowels, 531
row vector, 103
RST, 444
TreeBank, 446, 461 rules
context-free, 233 context-free, expansion,
233, 237 context-free, sample, 234
Russian
fusion language, 207 verb-framed, 207
S as start symbol in CFG, 233
salience, in discourse model, 420
sampling, 552
of analog waveform, 535 rate, 535, 552
used in clustering, 370
satellite, 206, 444 satellite-framed language,
207 saturated, 130
Scho ̈nfinkelization, 315 schwa, 533
SCISOR, 353
sclite, 563
sclite package, 27 script
Schankian, 379 scripts, 350
SDRT (Segmented
Discourse Representation Theory), 461
search engine, 465 search tree, 215 second-order
co-occurrence, 119 seed pattern in IE, 338
seed tuples, 338 segmentation
sentence, 22
word, 16
selectional association, 387 selectional preference
strength, 387 selectional preferences
pseudowords for evaluation, 388
selectional restriction, 384 representing with events,
385
violations in WSD, 386
self-attention, 191 self-supervision, 113 semantic concordance, 363 semantic drift in IE, 339 semantic feature, 124 semantic field, 98 semantic frame, 99
semantic grammars, 507 semantic network
for word sense disambiguation, 371
semantic networks origins, 329
semantic parsing, 305 semantic relations in IE,
333
table, 334
semantic role, 374, 374,
376
Semantic role labeling, 380
semantics lexical, 97
semivowel, 528 sense
word, 355, 356 sentence
error rate, 563
segmentation, 22 sentence realization, 515 sentence segmentation, 3 sentential complements,
241 sentiment, 99
origin of term, 413 sentiment analysis, 55 sentiment lexicons, 63 SentiWordNet, 402 sequence labeling, 148 SGNS, 112 Shakespeare
n-gram approximations to, 38
shallow discourse parsing,
450 shallow parse, 270 shared plans, 524
shift-reduce parsing, 285 SHRDLU, 329
sibilant sound, 530
side sequence, 495 sigmoid, 78, 128 significance test
MAPSSWE for ASR, 563
McNemar’s, 564 similarity, 98
Simple Questions, 482 Simplified Lesk, 366 singleton, 416 singular they, 422 skip-gram, 112
slot filling, 354, 506 slots, 504 smoothing, 41, 41
absolute discounting, 45 add-one, 41 discounting, 41 interpolation, 43
Katz backoff, 44 Kneser-Ney discounting,
45 Laplace, 41
linear interpolation, 44 softmax, 90, 135
source, 209
Subject Index 613 source-filter model, 543
SOV language, 205
spam detection, 55, 63 span, 267, 476
Spanish, 544
Speaker diarization, 569 speaker identification, 570 speaker recognition, 570 speaker verification, 570 spectrogram, 542 spectrum, 540
speech
telephone bandwidth,
536 speech acts, 494
speech recognition architecture, 549, 555 history of, 570
speech synthesis, 549 spelling correction
use of n-grams in, 29 split-half reliability, 398 SQuAD, 474
SRILM, 53
SRL, 380
Stacked RNNs, 184 start symbol, 233 state
semantic representation of, 318
static embeddings, 112 stationary process, 552 stationary stochastic
process, 50 statistical significance
MAPSSWE for ASR, 563
McNemar’s test, 564 statistically significant, 70 stative expressions, 322 stem, 21
Stemming, 3 stemming, 21
stop (consonant), 529 stop list, 468
stop words, 60 streaming, 561
stress
lexical, 532
stride, 552
strong equivalence of
grammars, 249 structural ambiguity, 259 structured polysemy, 359
stupid backoff, 48 subcategorization tagsets for, 242
subcategorization frame,
242
examples, 242 subcategorize for, 242 subdialogue, 495 subject, syntactic
in wh-questions, 238 subjectivity, 393, 413 substitutability, 256 substitution in TAG, 257

614 Subject Index
substitution operator (regular
expressions), 9 subsumption, 324, 326
subwords, 18 superordinate, 359 supersenses, 361 Supertagging, 273 supervised machine
learning, 56 SVD, 125
SVO language, 205 Swedish, verb-framed, 207 Switchboard, 550 Switchboard Corpus, 11,
500, 535, 536, 550 syllabification, 531
syllable, 531 accented, 532 coda, 531 nucleus, 531 onset, 531 prominent, 532 rhyme, 531 rime, 531
synchronous grammar, 229 synonyms, 97, 358
synset, 360
syntactic disambiguation,
261
syntactic movement, 245
syntax, 231
origin of term, 148
TAC KBP, 335 Tacotron2, 567 TACRED dataset, 335 TAG, 257
TAGGIT, 170 tagset
Penn Treebank, 151, 151 table of Penn Treebank
tags, 151 Tamil, 207
tanh, 129
tap (phonetic), 530
target, 209
target embedding, 117 Tay, 521
TBox, 323
teacher forcing, 180, 212 technai, 148 telephone-bandwidth, 552 telephone-bandwidth
speech, 536 telic eventualities, 323
template filling, 333, 350 template recognition, 351 template, in IE, 350 template-based generation,
508
temporal adverb, 150
temporal anchor, 347 temporal expression
absolute, 344 metaphor for, 322 recognition, 332 relative, 344
temporal logic, 319 temporal normalization,
346
temporal reasoning, 330 tense logic, 319
term
clustering, 371, 372 in FOL, 312
in IR, 465
weight in IR, 466
term frequency, 107
term weight, 466 term-document matrix, 101 term-term matrix, 103 terminal symbol, 233 terminology
in description logics, 323 test set, 35
development, 35
how to choose, 35 text categorization, 55
bag of words assumption, 57
naive Bayes approach, 56
unknown words, 60 text normalization, 2 Text summarization, 197 text-to-speech, 549 TextTiling, 456
tf-idf, 108
thematic grid, 375 thematic role, 374
and diathesis alternation,
376
examples of, 374
problems, 376
theme, 374
theme, as thematic role, 374 thesaurus, 371
time, representation of, 319 time-aligned transcription,
545 TimeBank, 349
TIMIT, 545 ToBI, 534
boundary tones, 534 tokenization, 2
sentence, 22
word, 16
tokens, word, 12 topic models, 99 toxicity detection, 72 trace, 238, 244 trachea, 527
training oracle, 290 training set, 35
cross-validation, 68
how to choose, 35 transcription
of speech, 548 reference, 562 time-aligned, 545
transduction grammars, 229 Transformations and
Discourse Analysis Project (TDAP), 170
Transformers, 190
transition probability role in Viterbi, 160
transitive verbs, 242 translation
divergences, 205 TREC, 490
Tree Adjoining Grammar
(TAG), 257 adjunction in, 257
substitution in, 257 treebank, 244
trigram, 34 truth-conditional semantics,
310 TTS, 549 tune, 533
continuation rise, 534 Turing test
Passed in 1972, 500 Turk, Mechanical, 549 Turkish
agglutinative, 207 part-of-speech tagging,
169
turn correction ratio, 520
turns, 493
TyDi QA, 475
type raising, 253
typed dependency structure,
280
types word, 12
typology, 205 linguistic, 205
ungrammatical sentences,
235
unit production, 262
unit vector, 105 Universal Dependencies,
282
universal, linguistic, 205
Unix, 3
<UNK>, 40 unknown words
in n-grams, 40
in part-of-speech tagging, 162
in text categorization, 60 unvoiced sound, 528 user-centered design, 520 utterance, 12
vagueness, 307
value sensitive design, 521 vanishing gradient, 130 vanishing gradients, 187 variable
existentially quantified, 314
universally quantified, 314
variables, 308 variables in FOL, 312 Vauquois triangle, 228 vector, 102, 128 vector length, 105 vector semantics, 96
vector space, 102 vector space model, 101 Vectors semantics, 100 velar sound, 529
velum, 529
verb
copula, 151 modal, 151 phrasal, 150
verb alternations, 376
verb phrase, 234, 241 verb-framed language, 207 Verbs, 150
verifiability, 306 Vietnamese, 207
Viterbi
and beam search, 215 Viterbi algorithm, 23, 159 inference in CRF, 166
VITERBI ALGORITHM, 159 vocal
cords, 528 folds, 528 tract, 528
vocoder, 565
vocoding, 565
voice user interface, 520 voiced sound, 528 voiceless sound, 528 vowel, 528
back, 530, 531 front, 530 height, 530, 531 high, 531
low, 531 mid, 531 reduced, 533 rounded, 530
VSO language, 205 wake word, 569
Wall Street Journal
Wall Street Journal
speech recognition of, 571
warping, 571 wavefile format, 536 WaveNet, 567 Wavenet, 567
weak equivalence of
grammars, 249 Web Ontology Language,
328
WebQuestions, 482 Weight Tying, 180 well-formed substring
table, 278 WFST, 278
wh-non-subject-question,
238 wh-phrase, 237, 238
wh-pronoun, 150 wh-subject-questions, 237 wh-word, 237
WiC, 367
wikification, 478 wildcard, regular
expression, 5
 
 Winograd Schema, 436 Wizard-of-Oz system, 520 word
boundary, regular expression notation, 6
closed class, 149 definition of, 11 error rate, 551, 562 fragment, 12 function, 149, 169 open class, 149 punctuation as, 11 tokens, 12
types, 12
word normalization, 20
word segmentation, 16, 18 word sense, 355, 356
word sense disambiguation,
363, see WSD word sense induction, 369
word shape, 164
word tokenization, 16 word-in-context, 367 word-word matrix, 103 word2vec, 112 wordform, 12
and lemma, 97
versus lemma, 12 WordNet, 360, 360 wordpiece, 218
world knowledge, 305
WSD, 363
AI-oriented efforts, 371 all-words task, 363 bootstrapping, 372 decision tree approach,
372 evaluation of, 364
history, 371
history of, 372
lexical sample task, 363 neural network
approaches, 371 robust approach, 371 supervised machine
learning, 372
Subject Index 615
unsupervised machine learning, 369
WSI, 369
X-bar schemata, 257
yes-no questions, 237 Yonkers Racetrack, 49 Yupik, 207
zero anaphor, 419 zero-width, 11 zeros, 40 zeugma, 357
